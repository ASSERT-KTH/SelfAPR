[P8_Replace_Mix]^private static final Logger logger ;^42^43^^^^42^43^private static final Logger logger = Logger.getLogger ( CrossModuleCodeMotion.class.getName (  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^45^^^^^40^50^private final AbstractCompiler compiler;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration   [VARIABLES] 
[P8_Replace_Mix]^private  Map<JSModule, Node> moduleVarParentMap = new HashMap<JSModule, Node> (  ) ;^52^53^^^^52^53^private final Map<JSModule, Node> moduleVarParentMap = new HashMap<JSModule, Node> (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration   [VARIABLES] 
[P8_Replace_Mix]^private final Map<Scope.Var, NamedInfo> namedInfo ;^59^60^^^^59^60^private final Map<Scope.Var, NamedInfo> namedInfo = new LinkedHashMap<Var, NamedInfo> (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration   [VARIABLES] 
[P3_Replace_Literal]^boolean allowMove = false;^145^^^^^140^150^boolean allowMove = true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration   [VARIABLES] 
[P8_Replace_Mix]^private JSModule deepestModule = true;^148^^^^^143^153^private JSModule deepestModule = null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration   [VARIABLES] 
[P8_Replace_Mix]^private JSModule declModule = this;^151^^^^^146^156^private JSModule declModule = null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration   [VARIABLES] 
[P8_Replace_Mix]^private final Deque<Declaration> declarations  = null ;^154^155^^^^154^155^private final Deque<Declaration> declarations = new ArrayDeque<Declaration> (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration   [VARIABLES] 
[P8_Replace_Mix]^Node node;^200^^^^^195^205^final Node node;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^68^^^^^67^70^this.compiler = compiler;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] <init> [RETURN_TYPE] JSModuleGraph)   AbstractCompiler compiler JSModuleGraph graph [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  node  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P11_Insert_Donor_Statement]^this.module = module;this.compiler = compiler;^68^^^^^67^70^this.compiler = compiler;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] <init> [RETURN_TYPE] JSModuleGraph)   AbstractCompiler compiler JSModuleGraph graph [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  node  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P11_Insert_Donor_Statement]^this.node = node;this.compiler = compiler;^68^^^^^67^70^this.compiler = compiler;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] <init> [RETURN_TYPE] JSModuleGraph)   AbstractCompiler compiler JSModuleGraph graph [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  node  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P8_Replace_Mix]^this.graph =  null;^69^^^^^67^70^this.graph = graph;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] <init> [RETURN_TYPE] JSModuleGraph)   AbstractCompiler compiler JSModuleGraph graph [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  node  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P5_Replace_Variable]^this.module = deepestModule;^203^^^^^202^205^this.module = module;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] <init> [RETURN_TYPE] Node)   JSModule module Node node Node parent Node gramps [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  gramps  node  parent  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.module = module;^203^^^^^202^205^this.module = module;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] <init> [RETURN_TYPE] Node)   JSModule module Node node Node parent Node gramps [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  gramps  node  parent  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P11_Insert_Donor_Statement]^this.node = node;this.module = module;^203^^^^^202^205^this.module = module;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] <init> [RETURN_TYPE] Node)   JSModule module Node node Node parent Node gramps [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  gramps  node  parent  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P11_Insert_Donor_Statement]^declModule = d.module;this.module = module;^203^^^^^202^205^this.module = module;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] <init> [RETURN_TYPE] Node)   JSModule module Node node Node parent Node gramps [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  gramps  node  parent  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P5_Replace_Variable]^this.node = parent;^204^^^^^202^205^this.node = node;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] <init> [RETURN_TYPE] Node)   JSModule module Node node Node parent Node gramps [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  gramps  node  parent  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P8_Replace_Mix]^this.node =  null;^204^^^^^202^205^this.node = node;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] <init> [RETURN_TYPE] Node)   JSModule module Node node Node parent Node gramps [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  gramps  node  parent  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.node = node;^204^^^^^202^205^this.node = node;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] <init> [RETURN_TYPE] Node)   JSModule module Node node Node parent Node gramps [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  gramps  node  parent  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P11_Insert_Donor_Statement]^this.module = module;this.node = node;^204^^^^^202^205^this.node = node;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] <init> [RETURN_TYPE] Node)   JSModule module Node node Node parent Node gramps [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  gramps  node  parent  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P3_Replace_Literal]^logger.info ( " + v" ) ;^76^^^^^75^87^logger.info ( "Moving functions + variable into deeper modules" ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P14_Delete_Statement]^^76^^^^^75^87^logger.info ( "Moving functions + variable into deeper modules" ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P2_Replace_Operator]^if  ( graph != null || graph.getModuleCount (  )  > 1 )  {^79^^^^^75^87^if  ( graph != null && graph.getModuleCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P2_Replace_Operator]^if  ( graph == null && graph.getModuleCount (  )  > 1 )  {^79^^^^^75^87^if  ( graph != null && graph.getModuleCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P2_Replace_Operator]^if  ( graph != null && graph.getModuleCount (  )  >= 1 )  {^79^^^^^75^87^if  ( graph != null && graph.getModuleCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P3_Replace_Literal]^if  ( graph != null && graph.getModuleCount (  )  > -3 )  {^79^^^^^75^87^if  ( graph != null && graph.getModuleCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P6_Replace_Expression]^if  ( graph != null ) {^79^^^^^75^87^if  ( graph != null && graph.getModuleCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P6_Replace_Expression]^if  (  graph.getModuleCount (  )  > 1 )  {^79^^^^^75^87^if  ( graph != null && graph.getModuleCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P8_Replace_Mix]^if  ( graph != true && graph.getModuleCount (  )  > 1 )  {^79^^^^^75^87^if  ( graph != null && graph.getModuleCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, parent, this ) ;^82^^^^^75^87^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^82^^^^^75^87^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^82^^^^^75^87^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^82^^^^^75^87^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P7_Replace_Invocation]^NodeTraversal .getScope (  )  ;^82^^^^^75^87^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P14_Delete_Statement]^^82^^^^^75^87^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P14_Delete_Statement]^^85^^^^^75^87^moveCode (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P8_Replace_Mix]^if  ( graph != null && graph .dependsOn ( deepestModule , deepestModule )   > 1 )  {^79^^^^^75^87^if  ( graph != null && graph.getModuleCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, node, this ) ;^82^^^^^75^87^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  externs  gramps  node  parent  root  JSModule  declModule  deepestModule  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  
[P8_Replace_Mix]^while  ( it .next (  )   )  {^104^^^^^89^119^while  ( it.hasNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( decl.module != null || moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( decl.module == null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^if  ( decl.module != null && moduleGraph.dependsOn (  decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( decl.module != null && graph.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( decl.module != null && moduleGraph.dependsOn ( module, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( deepestModule != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( deepestDependency.module != null && moduleGraph.dependsOn ( decl, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( decl != null && moduleGraph.dependsOn ( deepestDependency, decl.module.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( decl.module != null ) {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  (  moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( destParent == null )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( declParent.getType() == VAR && declParent.getChildCount() > 1 )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( declParent.getType (  )  == VAR )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( declParent.getChildCount (  )  > 1 )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( decl.module != true && graph.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( destParent != null )  {^112^^^^^97^127^if  ( destParent == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( root == null )  {^112^^^^^97^127^if  ( destParent == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( root == true )  {^112^^^^^97^127^if  ( destParent == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P9_Replace_Statement]^if  ( info == null )  {^112^^^^^97^127^if  ( destParent == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P9_Replace_Statement]^if  ( deepestModule == null )  {^112^^^^^97^127^if  ( destParent == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^destParent = compiler.getNodeForCodeInsertion(deepestDependency); moduleVarParentMap.put(deepestDependency, destParent);^112^113^114^115^^97^127^if  ( destParent == null )  { destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ; moduleVarParentMap.put ( deepestDependency, destParent ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^112^113^114^115^^97^127^if  ( destParent == null )  { destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ; moduleVarParentMap.put ( deepestDependency, destParent ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^destParent = compiler.getNodeForCodeInsertion ( module ) ;^113^^^^^98^128^destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^destParent = deepestDependency.getNodeForCodeInsertion ( compiler ) ;^113^^^^^98^128^destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^destParent = compiler .getCodingConvention (  )  ;^113^^^^^98^128^destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^113^^^^^98^128^destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;^113^^^^^98^128^destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleVarParentMap.put ( module, destParent ) ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleVarParentMap.put ( deepestDependency, parent ) ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleVarParentMap.put (  destParent ) ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleVarParentMap.put ( deepestDependency ) ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleVarParentMap.put ( destParent, deepestDependency ) ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^moduleVarParentMap .get ( module )  ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^moduleVarParentMap.put ( deepestDependency, root ) ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( declParent.getType (  )  == Token.VAR || declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( declParent.getType (  )  != Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  >= 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > -4 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( root.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( declParent.getType (  )  == Token.VAR ) {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  (  declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( declParent.getType (  )  == VAR )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( declParent.removeChild (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( declParent.getType (  )  == Token.VAR && declParent.removeChild (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( root.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 2 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^declParent.removeChild (  ) ;^130^^^^^121^134^declParent.detachFromParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^declParent .getParent (  )  ;^130^^^^^121^134^declParent.detachFromParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^130^^^^^121^134^declParent.detachFromParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^destParent.addChildToFront ( var ) ;declParent.detachFromParent (  ) ;^130^^^^^121^134^declParent.detachFromParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node currentParent = current.getParent (  ) ;declParent.detachFromParent (  ) ;^130^^^^^121^134^declParent.detachFromParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node declParent = decl.node.getParent (  ) ;declParent.detachFromParent (  ) ;^130^^^^^121^134^declParent.detachFromParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^destParent.addChildToFront ( var ) ;^133^^^^^121^134^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^133^^^^^121^134^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^destParent.addChildToFront ( var ) ;destParent.addChildToFront ( declParent ) ;^133^^^^^121^134^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^declParent.removeChild ( decl.node ) ;destParent.addChildToFront ( declParent ) ;^133^^^^^121^134^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR, var ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR.node ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node var = new Node ( Token. decl.node ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR, decl.node.node ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node var = new Node ( Token.VAR, node ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR, root ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node var = new Node ( Token.VAR, parent ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^declParent.removeChild ( var ) ;^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^declParent.removeChild ( decl.node.node ) ;^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^declParent.removeChild ( parent ) ;^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^destParent.addChildToFront ( declParent ) ;declParent.removeChild ( decl.node ) ;^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^destParent.addChildToFront ( root ) ;^127^^^^^121^134^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^127^^^^^121^134^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^declParent.detachFromParent (  ) ;destParent.addChildToFront ( var ) ;^127^^^^^121^134^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^destParent.addChildToFront ( declParent ) ;destParent.addChildToFront ( var ) ;^127^^^^^121^134^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR, root ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR.node ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node var = new Node ( Token. decl.node ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR, decl.node.node ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR, decl ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node var = new Node ( Token.VAR, node ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node destParent = moduleVarParentMap.get ( module ) ;^111^^^^^96^126^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node destParent = deepestDependency.get ( moduleVarParentMap ) ;^111^^^^^96^126^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node destParent = moduleVarParentMap .put ( deepestDependency , parent )  ;^111^^^^^96^126^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node declParent = var.getParent (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node decl.nodeParent = decl.getParent (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node declParent = decl.node.removeChild (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node declParent = decl.node .getString (  )  ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node declParent = root.getParent (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node currentParent = current.getParent (  ) ;Node declParent = decl.node.getParent (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node declParent = decl.node.getParent (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node destParent = moduleVarParentMap .put ( deepestDependency , destParent )  ;^111^^^^^96^126^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^111^^^^^96^126^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^111^^^^^96^126^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^moduleVarParentMap .get ( deepestDependency )  ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node declParent = node.getParent (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^declParent.detachFromParent (  ) ;Node declParent = decl.node.getParent (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( var.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^declParent.removeChild (  )  > 1 )  {^122^^^^^107^137^declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^declParent .addChildToFront ( parent )   > 1 )  {^122^^^^^107^137^declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^122^123^^^^107^137^declParent.getChildCount (  )  > 1 )  { declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^declParent.removeChild ( root ) ;^123^^^^^108^138^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^declParent.removeChild ( decl.node.node ) ;^123^^^^^108^138^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^declParent.removeChild ( decl ) ;^123^^^^^108^138^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^declParent.removeChild ( parent ) ;^123^^^^^108^138^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^123^^^^^108^138^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^destParent.addChildToFront ( declParent ) ;declParent.removeChild ( decl.node ) ;^123^^^^^108^138^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^destParent.addChildToFront ( root ) ;^127^^^^^112^142^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^127^^^^^112^142^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^declParent.detachFromParent (  ) ;destParent.addChildToFront ( var ) ;^127^^^^^112^142^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^destParent.addChildToFront ( declParent ) ;destParent.addChildToFront ( var ) ;^127^^^^^112^142^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^declParent.removeChild (  ) ;^130^^^^^115^145^declParent.detachFromParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^declParent .getParent (  )  ;^130^^^^^115^145^declParent.detachFromParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^130^^^^^115^145^declParent.detachFromParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^destParent.addChildToFront ( var ) ;declParent.detachFromParent (  ) ;^130^^^^^115^145^declParent.detachFromParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node currentParent = current.getParent (  ) ;declParent.detachFromParent (  ) ;^130^^^^^115^145^declParent.detachFromParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node declParent = decl.node.getParent (  ) ;declParent.detachFromParent (  ) ;^130^^^^^115^145^declParent.detachFromParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^destParent.addChildToFront ( var ) ;^133^^^^^118^148^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^133^^^^^118^148^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^destParent.addChildToFront ( var ) ;destParent.addChildToFront ( declParent ) ;^133^^^^^118^148^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^declParent.removeChild ( decl.node ) ;destParent.addChildToFront ( declParent ) ;^133^^^^^118^148^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^compiler.getModuleGraph (  ) ;^136^^^^^121^151^compiler.reportCodeChange (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^compiler .getNodeForCodeInsertion ( declModule )  ;^136^^^^^121^151^compiler.reportCodeChange (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^136^^^^^121^151^compiler.reportCodeChange (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( var == null )  {^112^^^^^97^127^if  ( destParent == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( destParent == false )  {^112^^^^^97^127^if  ( destParent == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleVarParentMap.put ( deepestDependency, var ) ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( declParent.getType (  )  < Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 3 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( declParent .getParent (  )   == Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( declParent.getType (  )  == Token.VAR && declParent .addChildToFront ( node )   > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 4 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^destParent .getChildCount (  )  ;^133^^^^^121^134^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR, decl ) ;^126^^^^^121^134^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^declParent.removeChild ( root ) ;^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^declParent .getLastChild (  )  ;^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^destParent.addChildToFront ( parent ) ;^127^^^^^121^134^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR, var ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Declaration decl = 4.next (  ) ;^105^^^^^90^120^Declaration decl = it.next (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Declaration decl = it .hasNext (  )  ;^105^^^^^90^120^Declaration decl = it.next (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node declParent = parent.getParent (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^105^^^^^90^120^Declaration decl = it.next (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^declarations.push ( d ) ;Declaration decl = it.next (  ) ;^105^^^^^90^120^Declaration decl = it.next (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^while  ( it.hasNext (  )  )  { Declaration decl = it.next (  ) ;Declaration decl = it.next (  ) ;^105^^^^^90^120^Declaration decl = it.next (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleGraph.dependsOn ( module, decl.module )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleGraph.dependsOn ( deepestDependency, module )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleGraph.dependsOn (  decl.module )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleGraph.dependsOn ( deepestDependency.module )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleGraph.dependsOn ( deepestDependency )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleGraph.dependsOn ( decl, deepestDependency.module )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleGraph.dependsOn ( decl.module, deepestDependency )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^moduleGraph .getModuleCount (  )   )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node declParent = var.removeChild (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^declParent .addChildToFront ( externs )   > 1 )  {^122^^^^^107^137^declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^declParent.removeChild ( var ) ;^123^^^^^108^138^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^declParent .getLastChild (  )  ;^123^^^^^108^138^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^destParent .getChildCount (  )  ;^127^^^^^112^142^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^destParent.addChildToFront ( parent ) ;^127^^^^^112^142^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^destParent .getChildCount (  )  ;^133^^^^^118^148^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( info.allowMove || deepestDependency != null )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( info.allowMove && deepestDependency == null )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( info.allowMove && module != null )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( info.allowMove ) {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  (  deepestDependency != null )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( decl.module != null && moduleGraph.dependsOn(deepestDependency, decl.module) )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( decl.module != null )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( destParent == null )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( declParent.getType() == VAR && declParent.getChildCount() > 1 )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( declParent.getType (  )  == VAR )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( declParent.getChildCount (  )  > 1 )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( info.allowMove && deepestDependency != true )  {^101^^^^^86^116^if  ( info.allowMove && deepestDependency != null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( decl.module.module != null && moduleGraph.dependsOn ( deepestDependency, decl )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( deepestDependency != null && moduleGraph.dependsOn ( decl.module, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( decl.module != null && moduleGraph .getModuleCount (  )   )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( module != false ) {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( parent == null )  {^112^^^^^97^127^if  ( destParent == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( parent == false )  {^112^^^^^97^127^if  ( destParent == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 7 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( declParent.getType (  )  == Token.this && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  (  declParent.getChildCount (  )  > 1 % 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^destParent.addChildToFront ( root ) ;^133^^^^^121^134^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^destParent .getChildCount (  )  ;^127^^^^^121^134^destParent.addChildToFront ( var ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node var = new Node ( Token.VAR, parent ) ;^126^^^^^111^141^Node var = new Node ( Token.VAR, decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node destParent = moduleVarParentMap .put ( module , externs )  ;^111^^^^^96^126^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node destParent = moduleVarParentMap .put ( declModule , externs )  ;^111^^^^^96^126^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^113^114^^^^98^128^destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ; moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node declParent = node.removeChild (  ) ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^compiler .getNodeForCodeInsertion ( deepestDependency )  ;^136^^^^^121^151^compiler.reportCodeChange (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^moduleVarParentMap .get ( deepestModule )  ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 6 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( parent.removeChild (  )  == Token.VAR ) {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleGraph.dependsOn ( deepestDependency, deepestModule )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleGraph.dependsOn ( deepestDependency, decl.module.module )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node destParent = moduleVarParentMap .put ( module , gramps )  ;^111^^^^^96^126^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^declParent.removeChild ( node ) ;^123^^^^^108^138^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^destParent.addChildToFront ( root ) ;^133^^^^^118^148^destParent.addChildToFront ( declParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( moduleGraph.module != null && decl.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( decl.module != false ) {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^moduleVarParentMap .get ( declModule )  ;^114^^^^^99^129^moduleVarParentMap.put ( deepestDependency, destParent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( declParent.getType (  )  > Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > -1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  (  declParent.getChildCount (  )  > 1 * 0 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^declParent.removeChild ( node ) ;^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^declParent.removeChild ( decl ) ;^123^^^^^121^134^declParent.removeChild ( decl.node ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^destParent =  compiler.getNodeForCodeInsertion ( null ) ;^113^^^^^98^128^destParent = compiler.getNodeForCodeInsertion ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^declParent .addChildToFront ( gramps )   > 1 )  {^122^^^^^107^137^declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^compiler .getNodeForCodeInsertion ( deepestModule )  ;^136^^^^^121^151^compiler.reportCodeChange (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( destParent == this )  {^112^^^^^97^127^if  ( destParent == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( declParent.getType (  )  >= Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  == 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > -5 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( declParentParent.getType (  )  == Token.VAR && decl.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( declParent.getType (  )  == Token.VAR && declParent .addChildToFront ( var )   > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  (  declParent.getChildCount (  )  > 1 << 0 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Iterator<Declaration> it = info.addUsedModule (  ) ;^102^^^^^87^117^Iterator<Declaration> it = info.declarationIterator (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Iterator<Declaration> it = info .addDeclaration ( decl )  ;^102^^^^^87^117^Iterator<Declaration> it = info.declarationIterator (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^JSModuleGraph moduleGraph = compiler.reportCodeChange (  ) ;^103^^^^^88^118^JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Declaration decl = null.next (  ) ;^105^^^^^90^120^Declaration decl = it.next (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node destParent = moduleVarParentMap .put ( declModule , node )  ;^111^^^^^96^126^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^102^^^^^87^117^Iterator<Declaration> it = info.declarationIterator (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^103^^^^^88^118^JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^104^105^^^^89^119^while  ( it.hasNext (  )  )  { Declaration decl = it.next (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^moduleGraph.dependsOn ( deepestDependency, decl )  )  {^107^108^^^^92^122^moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( moduleGraph != null && decl.module.dependsOn ( deepestDependency, decl.module )  )  {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( decl.module != this ) {^106^107^108^^^91^121^if  ( decl.module != null && moduleGraph.dependsOn ( deepestDependency, decl.module )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > -8 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( decl.getType (  )  == Token.VAR && declParentParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node destParent = moduleVarParentMap .put ( deepestModule , var )  ;^111^^^^^96^126^Node destParent = moduleVarParentMap.get ( deepestDependency ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^declParent .addChildToFront ( declParent )   > 1 )  {^122^^^^^107^137^declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( declParent.getType (  )  <= Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 10 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( declParent.removeChild (  )  == Token.VAR && declParent.getChildCount (  )  > 1 * 0 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^NamedInfo info = getNamedInfo ( v ) ;NamedInfo info = e.getValue (  ) ;^92^^^^^77^107^NamedInfo info = e.getValue (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^NamedInfo info = namedInfo.get ( v ) ;NamedInfo info = e.getValue (  ) ;^92^^^^^77^107^NamedInfo info = e.getValue (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^JSModule deepestDependency = module;^94^^^^^79^109^JSModule deepestDependency = info.deepestModule;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^JSModule deepestDependency = info.deepestModule.deepestModule;^94^^^^^79^109^JSModule deepestDependency = info.deepestModule;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^JSModule deepestDependency = info;^94^^^^^79^109^JSModule deepestDependency = info.deepestModule;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^JSModuleGraph moduleGraph = compiler .getCodingConvention (  )  ;^103^^^^^88^118^JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node declParent = parent .getString (  )  ;^120^^^^^105^135^Node declParent = decl.node.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^for  ( Map.Entry<Var, NamedInfo> e : namedInfo .get ( module )   )  {^91^^^^^76^106^for  ( Map.Entry<Var, NamedInfo> e : namedInfo.entrySet (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^92^^^^^77^107^NamedInfo info = e.getValue (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^102^103^^^^87^117^Iterator<Declaration> it = info.declarationIterator (  ) ; JSModuleGraph moduleGraph = compiler.getModuleGraph (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( parent.removeChild (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^121^122^^^^106^136^if  ( declParent.getType (  )  == Token.VAR && declParent.getChildCount (  )  > 1 )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] moveCode [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  Entry  e  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  NamedInfo  info  Iterator  it  JSModule  declModule  deepestDependency  deepestModule  module  Declaration  decl  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( allowMove )  {^160^^^^^158^172^if  ( !allowMove )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P9_Replace_Statement]^if  ( !recursive )  {^160^^^^^158^172^if  ( !allowMove )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P9_Replace_Statement]^if  ( info.allowMove )  {^160^^^^^158^172^if  ( !allowMove )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^return ;^160^161^162^^^158^172^if  ( !allowMove )  { return; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^160^161^162^^^158^172^if  ( !allowMove )  { return; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( ! ( canMoveValue ( child )  )  )  {     return false; }^160^^^^^158^172^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( deepestModule != null )  {^165^^^^^158^172^if  ( deepestModule == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( module == null )  {^165^^^^^158^172^if  ( deepestModule == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( deepestModule == false )  {^165^^^^^158^172^if  ( deepestModule == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P9_Replace_Statement]^if  ( destParent == null )  {^165^^^^^158^172^if  ( deepestModule == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^deepestModule = graph.getDeepestCommonDependencyInclusive ( module, deepestModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, module ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^deepestModule = graph.getDeepestCommonDependencyInclusive (  deepestModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^deepestModule = graph.getDeepestCommonDependencyInclusive ( m ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^deepestModule = graph.getDeepestCommonDependencyInclusive ( deepestModule, m ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^deepestModule = m.getDeepestCommonDependencyInclusive ( graph, deepestModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^deepestModule =  graph.getDeepestComodulemoduleonDependencyInclusive ( module, deepestModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^graph.getDeepestCommonDependencyInclusive ( m, module ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^graph.getDeepestCommonDependencyInclusive (  deepestModule ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^graph.getDeepestCommonDependencyInclusive ( m ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^graph.getDeepestCommonDependencyInclusive ( deepestModule, m ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^graph .getModuleCount (  )  ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^deepestModule = module;^166^^^^^158^172^deepestModule = m;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^deepestModule = deepestModule;^166^^^^^158^172^deepestModule = m;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^deepestModule = moduleGraph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^deepestModule = deepestModule.getDeepestCommonDependencyInclusive ( m, graph ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^graph.getDeepestCommonDependencyInclusive ( module, deepestModule ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( declModule != null || d.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( declModule == null && d.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( declModule != null && d.module == declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( module != null && d.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( declModule != null && module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( declModuleeclModule != null && d.module != d )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( d.module != null && declModule != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( d.moduleeclModule != null && d != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( declModule != null ) {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  (  d.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( declModule != false && d.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^return false;^181^182^183^^^179^187^if  ( declModule != null && d.module != declModule )  { return false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^181^182^183^^^179^187^if  ( declModule != null && d.module != declModule )  { return false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return true;^182^^^^^179^187^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^184^185^^^^179^187^declarations.push ( d ) ; declModule = d.module;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Declaration decl = it.next (  ) ;declarations.push ( d ) ;^184^^^^^179^187^declarations.push ( d ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^return declarations.iterator (  ) ;declarations.push ( d ) ;^184^^^^^179^187^declarations.push ( d ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^declModule = m;^185^^^^^179^187^declModule = d.module;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^declModule = d.module.module;^185^^^^^179^187^declModule = d.module;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^declModule = d;^185^^^^^179^187^declModule = d.module;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^declModule =  null.monullule;^185^^^^^179^187^declModule = d.module;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^this.module = module;declModule = d.module;^185^^^^^179^187^declModule = d.module;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return false;^186^^^^^179^187^return true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Declaration  d  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^194^^^^^193^195^return declarations.iterator (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] declarationIterator [RETURN_TYPE] Iterator   [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  declParent  destParent  externs  gramps  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return false;^222^^^^^213^226^return true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] hasConditionalAncestor [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node ancestor : root.getAncestors (  )  )  {^214^^^^^213^226^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] hasConditionalAncestor [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^for  ( Node ancestor : n.removeChild (  )  )  {^214^^^^^213^226^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] hasConditionalAncestor [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^for  ( Node ancestor : var.getAncestors (  )  )  {^214^^^^^213^226^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] hasConditionalAncestor [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^switch  ( var.getType (  )  )  {^215^^^^^213^226^switch  ( ancestor.getType (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] hasConditionalAncestor [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^switch  ( ancestor.removeChild (  )  )  {^215^^^^^213^226^switch  ( ancestor.getType (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] hasConditionalAncestor [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^switch  ( ancestor .getParent (  )   )  {^215^^^^^213^226^switch  ( ancestor.getType (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] hasConditionalAncestor [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return true;^225^^^^^213^226^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] hasConditionalAncestor [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^NamedInfo info = null.get ( v ) ;^232^^^^^231^238^NamedInfo info = namedInfo.get ( v ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^NamedInfo info = v.get ( namedInfo ) ;^232^^^^^231^238^NamedInfo info = namedInfo.get ( v ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^NamedInfo info = getNamedInfo ( v ) ;NamedInfo info = namedInfo.get ( v ) ;^232^^^^^231^238^NamedInfo info = namedInfo.get ( v ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^NamedInfo info = e.getValue (  ) ;NamedInfo info = namedInfo.get ( v ) ;^232^^^^^231^238^NamedInfo info = namedInfo.get ( v ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^232^^^^^231^238^NamedInfo info = namedInfo.get ( v ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( info != null )  {^233^^^^^231^238^if  ( info == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( info == this )  {^233^^^^^231^238^if  ( info == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P9_Replace_Statement]^if  ( destParent == null )  {^233^^^^^231^238^if  ( info == null )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^info = new com.google.javascript.jscomp.CrossModuleCodeMotion.NamedInfo(); namedInfo.put(v, info);^233^234^235^236^^231^238^if  ( info == null )  { info = new NamedInfo (  ) ; namedInfo.put ( v, info ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^233^234^235^236^^231^238^if  ( info == null )  { info = new NamedInfo (  ) ; namedInfo.put ( v, info ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^info  =  info ;^234^^^^^231^238^info = new NamedInfo (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( info == null )  {     info = new NamedInfo (  ) ;     namedInfo.put ( v, info ) ; }^234^^^^^231^238^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^namedInfo.put (  info ) ;^235^^^^^231^238^namedInfo.put ( v, info ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^namedInfo.put ( v ) ;^235^^^^^231^238^namedInfo.put ( v, info ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^namedInfo.put ( info, v ) ;^235^^^^^231^238^namedInfo.put ( v, info ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^namedInfo .get ( deepestDependency )  ;^235^^^^^231^238^namedInfo.put ( v, info ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^235^^^^^231^238^namedInfo.put ( v, info ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^NamedInfo info = getNamedInfo ( v ) ;namedInfo.put ( v, info ) ;^235^^^^^231^238^namedInfo.put ( v, info ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^info  = null ;^234^^^^^231^238^info = new NamedInfo (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] getNamedInfo [RETURN_TYPE] CrossModuleCodeMotion$NamedInfo   Var v [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^boolean recursive = true;^247^^^^^243^259^boolean recursive = false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node rootNode = t.getScope (  ) .getVar (  ) ;^248^^^^^243^259^Node rootNode = t.getScope (  ) .getRootNode (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node rootNode = t .getModule (  )  .getRootNode (  ) ;^248^^^^^243^259^Node rootNode = t.getScope (  ) .getRootNode (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Var v = t.getScope (  ) .getVar ( name ) ;Node rootNode = t.getScope (  ) .getRootNode (  ) ;^248^^^^^243^259^Node rootNode = t.getScope (  ) .getRootNode (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^248^^^^^243^259^Node rootNode = t.getScope (  ) .getRootNode (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( rootNode.getType (  )  <= Token.FUNCTION )  {^249^^^^^243^259^if  ( rootNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.FUNCTION )  {^249^^^^^243^259^if  ( rootNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( rootNode.removeChild (  )  == Token.FUNCTION )  {^249^^^^^243^259^if  ( rootNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( var.getType (  )  == Token.FUNCTION )  {^249^^^^^243^259^if  ( rootNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P9_Replace_Statement]^if  ( current.getType (  )  == Token.GETPROP )  {^249^^^^^243^259^if  ( rootNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P9_Replace_Statement]^if  ( n.getType (  )  != Token.NAME )  {^249^^^^^243^259^if  ( rootNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^java.lang.String scopeFuncName = rootNode.getFirstChild().getString(); if (scopeFuncName.equals(name)) {    recursive = true;};^249^250^251^252^253^243^259^if  ( rootNode.getType (  )  == Token.FUNCTION )  { String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ; if  ( scopeFuncName.equals ( name )  )  { recursive = true; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^249^250^251^252^253^243^259^if  ( rootNode.getType (  )  == Token.FUNCTION )  { String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ; if  ( scopeFuncName.equals ( name )  )  { recursive = true; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( name.equals ( scopeFuncName )  )  {^251^^^^^243^259^if  ( scopeFuncName.equals ( name )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^recursive = true;^251^252^253^^^243^259^if  ( scopeFuncName.equals ( name )  )  { recursive = true; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^251^252^253^^^243^259^if  ( scopeFuncName.equals ( name )  )  { recursive = true; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^recursive = false;^252^^^^^243^259^recursive = true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P1_Replace_Type]^char scopeFuncName = rootNode.getFirstChild (  ) .getchar (  ) ;^250^^^^^243^259^String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^String scopeFuncName = parent.getFirstChild (  ) .getString (  ) ;^250^^^^^243^259^String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^String scopeFuncName = rootNode.getFirstChild (  ) .getVar (  ) ;^250^^^^^243^259^String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^String scopeFuncName = rootNode.removeChild (  ) .getString (  ) ;^250^^^^^243^259^String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^String scopeFuncName = n.getFirstChild (  ) .getString (  ) ;^250^^^^^243^259^String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^String scopeFuncName = rootNode.getFirstChild (  )  .getVar ( scopeFuncName )  ;^250^^^^^243^259^String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^250^^^^^243^259^String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^String scopeFuncName = n.removeChild (  ) .getString (  ) ;^250^^^^^243^259^String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.FUNCTION )  {^249^^^^^243^259^if  ( rootNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( rootNode .getParent (  )   == Token.FUNCTION )  {^249^^^^^243^259^if  ( rootNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^String scopeFuncName = node.getFirstChild (  ) .getString (  ) ;^250^^^^^243^259^String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^String scopeFuncName = var.getFirstChild (  ) .getString (  ) ;^250^^^^^243^259^String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^String scopeFuncName = node .getLastChild (  )  .getString (  ) ;^250^^^^^243^259^String scopeFuncName = rootNode.getFirstChild (  ) .getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( !allowMove )  {^256^^^^^243^259^if  ( !recursive )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^info.addUsedModule(t.getModule());^256^257^258^^^243^259^if  ( !recursive )  { info.addUsedModule ( t.getModule (  )  ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^256^257^258^^^243^259^if  ( !recursive )  { info.addUsedModule ( t.getModule (  )  ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^info.addUsedModule ( t .getScope (  )   ) ;^257^^^^^243^259^info.addUsedModule ( t.getModule (  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^257^^^^^243^259^info.addUsedModule ( t.getModule (  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( !recursive )  {     info.addUsedModule ( t.getModule (  )  ) ; }^257^^^^^243^259^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] processReference [RETURN_TYPE] void   NodeTraversal t NamedInfo info String name [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  scopeFuncName  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.NAME )  {^265^^^^^264^294^if  ( n.getType (  )  != Token.NAME )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  != Token.NAME )  {^265^^^^^264^294^if  ( n.getType (  )  != Token.NAME )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( parent .getParent (  )   != Token.NAME )  {^265^^^^^264^294^if  ( n.getType (  )  != Token.NAME )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P9_Replace_Statement]^if  ( current.getType (  )  == Token.GETPROP )  {^265^^^^^264^294^if  ( n.getType (  )  != Token.NAME )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^return ;^265^266^267^^^264^294^if  ( n.getType (  )  != Token.NAME )  { return; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^265^266^267^^^264^294^if  ( n.getType (  )  != Token.NAME )  { return; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  ( name.isEmpty (  )  )  ||  ( compiler.getCodingConvention (  ) .isExported ( name )  )  )  {     return ; }^265^^^^^264^294^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( var.getType (  )  != Token.NAME )  {^265^^^^^264^294^if  ( n.getType (  )  != Token.NAME )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( n .getParent (  )   != Token.NAME )  {^265^^^^^264^294^if  ( n.getType (  )  != Token.NAME )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( parent.getType (  )  != Token.NAME )  {^265^^^^^264^294^if  ( n.getType (  )  != Token.NAME )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P1_Replace_Type]^char name = n.getchar (  ) ;^270^^^^^264^294^String name = n.getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^String rootame = n.getString (  ) ;^270^^^^^264^294^String name = n.getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^String name = n.removeChild (  ) ;^270^^^^^264^294^String name = n.getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^String rootNodeame = n.getString (  ) ;^270^^^^^264^294^String name = n.getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node functionName = n.getFirstChild (  ) ;String name = n.getString (  ) ;^270^^^^^264^294^String name = n.getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;String name = n.getString (  ) ;^270^^^^^264^294^String name = n.getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^String nodeame = n.getString (  ) ;^270^^^^^264^294^String name = n.getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^270^^^^^264^294^String name = n.getString (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( name.isEmpty (  )  && compiler.getCodingConvention (  ) .isExported ( name )  )  {^271^^^^^264^294^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( compiler.isEmpty (  )  || name.getCodingConvention (  ) .isExported ( name )  )  {^271^^^^^264^294^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( name.isEmpty (  )  ) {^271^^^^^264^294^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  (  compiler.getCodingConvention (  ) .isExported ( name )  )  {^271^^^^^264^294^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( name.equals (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  {^271^^^^^264^294^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .getVar ( name )  )  {^271^^^^^264^294^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( name.isEmpty (  )  || compiler.getModuleGraph (  ) .isExported ( name )  )  {^271^^^^^264^294^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( name.isEmpty (  )  || compiler .getNodeForCodeInsertion ( declModule )  .isExported ( name )  )  {^271^^^^^264^294^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^return ;^271^272^273^^^264^294^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  { return; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^271^272^273^^^264^294^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  { return; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  !=  ( NAME )  )  {     return ; }^271^^^^^264^294^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  )  .getRootNode (  )   )  {^271^^^^^264^294^if  ( name.isEmpty (  )  || compiler.getCodingConvention (  ) .isExported ( name )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  ( name.isEmpty (  )  )  ||  ( compiler.getCodingConvention (  ) .isExported ( name )  )  )  {     return ; }^271^^^^^264^294^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Var v = name.getScope (  ) .getVar ( t ) ;^278^^^^^264^294^Var v = t.getScope (  ) .getVar ( name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node rootNode = t.getScope (  ) .getRootNode (  ) ;Var v = t.getScope (  ) .getVar ( name ) ;^278^^^^^264^294^Var v = t.getScope (  ) .getVar ( name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Var v = t.getScope (  )  .getString (  )  ;^278^^^^^264^294^Var v = t.getScope (  ) .getVar ( name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Var v = t .getModule (  )  .getVar ( name ) ;^278^^^^^264^294^Var v = t.getScope (  ) .getVar ( name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^278^^^^^264^294^Var v = t.getScope (  ) .getVar ( name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( v == null && !v.isGlobal (  )  )  {^279^^^^^264^294^if  ( v == null || !v.isGlobal (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( v != null || !v.isGlobal (  )  )  {^279^^^^^264^294^if  ( v == null || !v.isGlobal (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( v == null ) {^279^^^^^264^294^if  ( v == null || !v.isGlobal (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  (  !v.isGlobal (  )  )  {^279^^^^^264^294^if  ( v == null || !v.isGlobal (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( v == true || !v.isGlobal (  )  )  {^279^^^^^264^294^if  ( v == null || !v.isGlobal (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^return ;^279^280^281^^^264^294^if  ( v == null || !v.isGlobal (  )  )  { return; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^279^280^281^^^264^294^if  ( v == null || !v.isGlobal (  )  )  { return; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^NamedInfo info = canMoveValue ( v ) ;^283^^^^^264^294^NamedInfo info = getNamedInfo ( v ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^NamedInfo info = e.getValue (  ) ;NamedInfo info = getNamedInfo ( v ) ;^283^^^^^264^294^NamedInfo info = getNamedInfo ( v ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^NamedInfo info = namedInfo.get ( v ) ;NamedInfo info = getNamedInfo ( v ) ;^283^^^^^264^294^NamedInfo info = getNamedInfo ( v ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^283^^^^^264^294^NamedInfo info = getNamedInfo ( v ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^namedInfo.put ( v, info ) ;NamedInfo info = getNamedInfo ( v ) ;^283^^^^^264^294^NamedInfo info = getNamedInfo ( v ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( recursive )  {^284^^^^^264^294^if  ( info.allowMove )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P9_Replace_Statement]^if  ( !allowMove )  {^284^^^^^264^294^if  ( info.allowMove )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^if (maybeProcessDeclaration(t, n, parent, info)) {    if (hasConditionalAncestor(n)) {        info.allowMove = false;    }}else {    processReference(t, info, name);};^284^285^286^287^288^264^294^if  ( info.allowMove )  { if  ( maybeProcessDeclaration ( t, n, parent, info )  )  { if  ( hasConditionalAncestor ( n )  )  { info.allowMove = false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^284^285^286^287^288^264^294^if  ( info.allowMove )  { if  ( maybeProcessDeclaration ( t, n, parent, info )  )  { if  ( hasConditionalAncestor ( n )  )  { info.allowMove = false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {     if  ( hasConditionalAncestor ( n )  )  {         info.allowMove = false;     } }else {     processReference ( t, info, name ) ; }^284^^^^^264^294^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( maybeProcessDeclaration ( t, root, parent, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( maybeProcessDeclaration ( t, n, root, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( maybeProcessDeclaration (  n, parent, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( maybeProcessDeclaration ( t,  parent, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( maybeProcessDeclaration ( t, n,  info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( maybeProcessDeclaration ( t, n, parent )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( maybeProcessDeclaration ( parent, n, t, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( maybeProcessDeclaration ( t, info, parent, n )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( maybeProcessDeclaration ( t, parent, n, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( maybeProcessDeclaration ( info, n, parent, t )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( maybeProcessDeclaration ( t, node, parent, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^if (hasConditionalAncestor(n)) {    info.allowMove = false;};^285^286^287^288^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  { if  ( hasConditionalAncestor ( n )  )  { info.allowMove = false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^285^286^287^288^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  { if  ( hasConditionalAncestor ( n )  )  { info.allowMove = false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( info.allowMove )  {     if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {         if  ( hasConditionalAncestor ( n )  )  {             info.allowMove = false;         }     }else {         processReference ( t, info, name ) ;     } }^285^^^^^264^294^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^processReference (  info, name ) ;^291^^^^^285^292^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^processReference ( t,  name ) ;^291^^^^^285^292^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^processReference ( t, info ) ;^291^^^^^285^292^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^processReference ( name, info, t ) ;^291^^^^^285^292^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^processReference ( info, t, name ) ;^291^^^^^285^292^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^processReference ( t, name, info ) ;^291^^^^^285^292^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^visit ( t, info, name ) ;^291^^^^^285^292^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^291^^^^^285^292^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( hasConditionalAncestor ( root )  )  {^286^^^^^264^294^if  ( hasConditionalAncestor ( n )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( canMoveValue ( n )  )  {^286^^^^^264^294^if  ( hasConditionalAncestor ( n )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( hasConditionalAncestor ( node )  )  {^286^^^^^264^294^if  ( hasConditionalAncestor ( n )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^info.allowMove = false;^286^287^288^^^264^294^if  ( hasConditionalAncestor ( n )  )  { info.allowMove = false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^286^287^288^^^264^294^if  ( hasConditionalAncestor ( n )  )  { info.allowMove = false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^info.allowMove = true;^287^^^^^264^294^info.allowMove = false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( hasConditionalAncestor ( var )  )  {^286^^^^^264^294^if  ( hasConditionalAncestor ( n )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( canMoveValue ( node )  )  {^286^^^^^264^294^if  ( hasConditionalAncestor ( n )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( maybeProcessDeclaration ( t, rootNode, parent, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( maybeProcessDeclaration ( t, n, node, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( hasConditionalAncestor ( parent )  )  {^286^^^^^264^294^if  ( hasConditionalAncestor ( n )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( canMoveValue ( parent )  )  {^286^^^^^264^294^if  ( hasConditionalAncestor ( n )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^processReference (  info, name ) ;^291^^^^^264^294^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^processReference ( t,  name ) ;^291^^^^^264^294^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^processReference ( t, info ) ;^291^^^^^264^294^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^processReference ( name, info, t ) ;^291^^^^^264^294^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^processReference ( info, t, name ) ;^291^^^^^264^294^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^visit ( t, info, name ) ;^291^^^^^264^294^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^291^^^^^264^294^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( maybeProcessDeclaration ( t, n, var, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( maybeProcessDeclaration ( t, n, info, parent )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( maybeProcessDeclaration ( t, var, parent, info )  )  {^285^^^^^264^294^if  ( maybeProcessDeclaration ( t, n, parent, info )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^processReference ( t, name, info ) ;^291^^^^^264^294^processReference ( t, info, name ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Var  v  Node  ancestor  declParent  destParent  externs  gramps  n  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  String  name  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node gramps = n.getParent (  ) ;^313^^^^^298^328^Node gramps = parent.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node gramps = parent.removeChild (  ) ;^313^^^^^298^328^Node gramps = parent.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node gramps = parent .getString (  )  ;^313^^^^^298^328^Node gramps = parent.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node currentParent = current.getParent (  ) ;Node gramps = parent.getParent (  ) ;^313^^^^^298^328^Node gramps = parent.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node gramps = parent.getParent (  ) ;^313^^^^^298^328^Node gramps = parent.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node declParent = decl.node.getParent (  ) ;Node gramps = parent.getParent (  ) ;^313^^^^^298^328^Node gramps = parent.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node gramps = gramps.getParent (  ) ;^313^^^^^298^328^Node gramps = parent.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node gramps = node.removeChild (  ) ;^313^^^^^298^328^Node gramps = parent.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^313^^^^^298^328^Node gramps = parent.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( canMoveValue ( var.getFirstChild (  )  )  )  {^316^^^^^301^331^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( hasConditionalAncestor ( name.getFirstChild (  )  )  )  {^316^^^^^301^331^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( canMoveValue ( name.removeChild (  )  )  )  {^316^^^^^301^331^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( canMoveValue ( name .getLastChild (  )   )  )  {^316^^^^^301^331^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( canMoveValue ( node.removeChild (  )  )  )  {^316^^^^^301^331^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^return info.addDeclaration(new com.google.javascript.jscomp.CrossModuleCodeMotion.Declaration(t.getModule(), name, parent, gramps));^316^317^318^319^^301^331^if  ( canMoveValue ( name.getFirstChild (  )  )  )  { return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^316^317^318^319^^301^331^if  ( canMoveValue ( name.getFirstChild (  )  )  )  { return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  ( isExpressionNode ( currentParent )  )  &&  ( canMoveValue ( current.getLastChild (  )  )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ; }^316^^^^^301^331^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  ( relationship != null )  &&  ( name.getString (  ) .equals ( relationship.subclassName )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ; }^316^^^^^301^331^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( isFunctionDeclaration ( parent )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^316^^^^^301^331^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , name, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, paren gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) ,  parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name,  gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , var, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, n, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, rootNode )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return gramps.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, info )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( name.getModule (  ) , t, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , gramps, parent, name )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, gramps, parent )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , name, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  ( relationship != null )  &&  ( name.getString (  ) .equals ( relationship.subclassName )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ; }^317^^^^^302^332^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^317^^^^^302^332^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( isFunctionDeclaration ( parent )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^317^^^^^302^332^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , name, parent, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , name, paren gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) ,  parent, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , name,  gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , name, parent )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , parent, parent, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , name, gramps, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , name, parent, node )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( gramps.getModule (  ) , name, parent, t )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( name.getModule (  ) , t, parent, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , name, gramps, parent )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t .getScope (  )  , name, parent, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , node, parent, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , gramps, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, node )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return name.addDeclaration ( new Declaration ( t.getModule (  ) , info, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( gramps.getModule (  ) , name, parent, t )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return parent.addDeclaration ( new Declaration ( t.getModule (  ) , name, info, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t .getScope (  )  , parent, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isFunctionDeclaration ( node )  )  {^323^^^^^308^338^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil.isLiteralValue ( parent )  )  {^323^^^^^308^338^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil .isLiteralValue ( n )   )  {^323^^^^^308^338^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^return info.addDeclaration(new com.google.javascript.jscomp.CrossModuleCodeMotion.Declaration(t.getModule(), name, parent, gramps));^323^324^325^326^^308^338^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  { return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^323^324^325^326^^308^338^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  { return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  ( isExpressionNode ( currentParent )  )  &&  ( canMoveValue ( current.getLastChild (  )  )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ; }^323^^^^^308^338^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  ( relationship != null )  &&  ( name.getString (  ) .equals ( relationship.subclassName )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ; }^323^^^^^308^338^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^323^^^^^308^338^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , name, parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, paren gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) ,  parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name,  gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , gramps, parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, node, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, parent )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return t.addDeclaration ( new Declaration ( info.getModule (  ) , name, parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( name.getModule (  ) , t, parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return name.addDeclaration ( new Declaration ( t.getModule (  ) , info, parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, name, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return gramps.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, info )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t .getScope (  )  , name, parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  ( relationship != null )  &&  ( name.getString (  ) .equals ( relationship.subclassName )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ; }^324^^^^^309^339^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^324^^^^^309^339^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( isFunctionDeclaration ( parent )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^324^^^^^309^339^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , name, parent, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , name, paren gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) ,  parent, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , name,  gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , name, parent )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , n, parent, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , name, var, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , name, parent, var )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( gramps.getModule (  ) , name, parent, t )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , parent, name, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( parent.getModule (  ) , name, t, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , name, rootNode, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , n, parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, gramps, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, name )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , gramps, parent, name )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info .declarationIterator (  )   ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , node, parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( current.getType (  )  != Token.GETPROP )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( current.getType (  )  < Token.GETPROP )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( current.getType (  )  <= Token.GETPROP )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( rootNode.getType (  )  == Token.GETPROP )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( current.getType() == ASSIGN && current.getFirstChild() == child )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( current.getType (  )  == ASSIGN )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( current.getFirstChild (  )  == child )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( isExpressionNode(currentParent) && canMoveValue(current.getLastChild()) )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( current.removeChild (  )  == Token.GETPROP )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( current .getParent (  )   == Token.GETPROP )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( var.getType (  )  == Token.GETPROP )  {^336^^^^^321^351^if  ( current.getType (  )  == Token.GETPROP )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  (  ( current.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( current.getFirstChild (  )  )  == child )  )  {     Node currentParent = current.getParent (  ) ;     if  (  ( isExpressionNode ( currentParent )  )  &&  ( canMoveValue ( current.getLastChild (  )  )  )  )  {         return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;     } }else {     return false; }^336^^^^^321^351^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^} else if  ( current.getType (  )  == Token.ASSIGN || current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^} else if  ( current.getType (  )  < Token.ASSIGN && current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  != child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == rootNode )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^} else if  ( child.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == current )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  ( current.getType (  )  == Token.ASSIGN ) {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  (  current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  ( current.getType (  )  == ASSIGN )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  ( isExpressionNode(currentParent) && canMoveValue(current.getLastChild()) )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^} else if  ( current.removeChild (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^} else if  ( current.getType (  )  == Token.ASSIGN && current.removeChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return true;^348^^^^^338^349^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( NodeUtil.isExpressionNode ( currentParent )  || canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( name )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( nameParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( current )  && canMoveValue ( currentParent.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( NodeUtil.isExpressionNode ( currentParent )  ) {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  (  canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil.isExprCall ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil .isExprCall ( declParent )   && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil.isExpressionNode ( currentParent )  && hasConditionalAncestor ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.removeChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( name )  ) {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^return info.addDeclaration(new com.google.javascript.jscomp.CrossModuleCodeMotion.Declaration(t.getModule(), current, currentParent, currentParent.getParent()));^341^342^343^344^345^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  { return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^341^342^343^344^345^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  { return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  ( relationship != null )  &&  ( name.getString (  ) .equals ( relationship.subclassName )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ; }^341^^^^^338^349^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  (  ( current.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( current.getFirstChild (  )  )  == child )  )  {     Node currentParent = current.getParent (  ) ;     if  (  ( isExpressionNode ( currentParent )  )  &&  ( canMoveValue ( current.getLastChild (  )  )  )  )  {         return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;     } }else {     return false; }^341^^^^^338^349^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^341^^^^^338^349^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( isFunctionDeclaration ( parent )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^341^^^^^338^349^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( return info.addnew Declaration ( t.getModule (  ) , name, parent, gramps )  , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , curren currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) ,  currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current,  currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, name, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return t.addDeclaration ( new Declaration ( info.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , currentParent, current, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t .getScope (  )  , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.removeChild (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , node, currentParent, currentParent.removeChild (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , name, parent, gramps )  , current, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , curren currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) ,  currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , current,  currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , root, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , current, n, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( currentParent.getModule (  ) , current, t, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , currentParent, current, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t .getScope (  )  , current, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.removeChild (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , name, currentParent, currentParent.removeChild (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return current.addDeclaration ( new Declaration ( t.getModule (  ) , info, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( currentParent.getModule (  ) , current, t, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info .declarationIterator (  )   )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent .getString (  )   )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^currentParent.removeChild (  )  )  ) ;^345^^^^^338^349^currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^currentParent .getString (  )   )  ) ;^345^^^^^338^349^currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^345^^^^^338^349^currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node currentParent = current.getParent (  ) ;currentParent.getParent (  )  )  ) ;^345^^^^^338^349^currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^gramps.getParent (  )  )  ) ;currentParent.getParent (  )  )  ) ;^345^^^^^338^349^currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , node, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return currentParent.addDeclaration ( new Declaration ( t.getModule (  ) , current, info, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( current.getModule (  ) , t, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, parent, currentParent.removeChild (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , name, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( current.getModule (  ) , t, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , current, var, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node currentParent = current.removeChild (  ) ;^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node currentParent = current .getString (  )  ;^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node nameParent = current.getParent (  ) ;^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node declParent = decl.node.getParent (  ) ;Node currentParent = current.getParent (  ) ;^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node currentParent = current.getParent (  ) ;^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node nParent = current.getParent (  ) ;^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node nParent = current.removeChild (  ) ;^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^current.getFirstChild (  )  == child )  { Node currentParent = current.getParent (  ) ;Node currentParent = current.getParent (  ) ;^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^currentParent.getParent (  )  )  ) ;Node currentParent = current.getParent (  ) ;^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^declParent.detachFromParent (  ) ;Node currentParent = current.getParent (  ) ;^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( node )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^hasConditionalAncestor ( current.getLastChild (  )  )  )  {^342^^^^^338^349^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^canMoveValue ( current.removeChild (  )  )  )  {^342^^^^^338^349^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^canMoveValue ( name.removeChild (  )  )  )  {^342^^^^^338^349^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^canMoveValue ( node.getLastChild (  )  )  )  {^342^^^^^338^349^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^canMoveValue ( current .getFirstChild (  )   )  )  {^342^^^^^338^349^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^canMoveValue ( n.getLastChild (  )  )  )  {^342^^^^^338^349^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, root, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( NodeUtil.isExpressionNode ( currentParent )  || canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( rootNode )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( nameParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( current )  && canMoveValue ( currentParent.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( currentParentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( NodeUtil.isExpressionNode ( currentParent )  ) {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  (  canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil.isExprCall ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil.isExpressionNode ( currentParent )  && hasConditionalAncestor ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.removeChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  (  canMoveValue ( current.removeChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^return info.addDeclaration(new com.google.javascript.jscomp.CrossModuleCodeMotion.Declaration(t.getModule(), current, currentParent, currentParent.getParent()));^341^342^343^344^345^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  { return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^341^342^343^344^345^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  { return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  ( relationship != null )  &&  ( name.getString (  ) .equals ( relationship.subclassName )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ; }^341^^^^^326^356^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  (  ( current.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( current.getFirstChild (  )  )  == child )  )  {     Node currentParent = current.getParent (  ) ;     if  (  ( isExpressionNode ( currentParent )  )  &&  ( canMoveValue ( current.getLastChild (  )  )  )  )  {         return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;     } }else {     return false; }^341^^^^^326^356^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^341^^^^^326^356^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( isFunctionDeclaration ( parent )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^341^^^^^326^356^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( return info.addnew Declaration ( t.getModule (  ) , name, parent, gramps )  , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , curren currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) ,  currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current,  currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, rootNode, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return currentParent.addDeclaration ( new Declaration ( t.getModule (  ) , current, info, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( current.getModule (  ) , t, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , currentParent, current, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.removeChild (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent .getString (  )   )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , name, parent, gramps )  , current, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , curren currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) ,  currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , current,  currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , rootNode, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , current, name, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( currentParent.getModule (  ) , current, t, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( current.getModule (  ) , t, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t .getScope (  )  , current, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.removeChild (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , name, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , var, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, parent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return t.addDeclaration ( new Declaration ( info.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info .declarationIterator (  )   )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t .getScope (  )  , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, node, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^currentParent.removeChild (  )  )  ) ;^345^^^^^341^346^currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^currentParent .getString (  )   )  ) ;^345^^^^^341^346^currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^345^^^^^341^346^currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node currentParent = current.getParent (  ) ;currentParent.getParent (  )  )  ) ;^345^^^^^341^346^currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^gramps.getParent (  )  )  ) ;currentParent.getParent (  )  )  ) ;^345^^^^^341^346^currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( return info.addnew Declaration ( t.getModule (  ) , name, parent, gramps )  , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , curren currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) ,  currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current,  currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , var, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, name, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return t.addDeclaration ( new Declaration ( info.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( current.getModule (  ) , t, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , currentParent, current, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t .getScope (  )  , current, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.removeChild (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent .getString (  )   )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , var, currentParent, currentParent.removeChild (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return true;^348^^^^^333^363^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , name, parent, gramps )  , current, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , curren currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) ,  currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , current,  currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , root, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , current, node, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( current.getModule (  ) , t, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , currentParent, current, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.removeChild (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , current, root, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node nodeParent = current.getParent (  ) ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node currentParent = current.removeChild (  ) ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node parentParent = current.getParent (  ) ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node declParent = decl.node.getParent (  ) ;Node currentParent = current.getParent (  ) ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node currentParent = current.getParent (  ) ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^} else if  ( n.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^} else if  ( name.removeChild (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^current.removeChild (  )  == child )  {^339^^^^^324^354^current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^current .getLastChild (  )   == child )  {^339^^^^^324^354^current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^339^340^^^^324^354^current.getFirstChild (  )  == child )  { Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node nParent = current.getParent (  ) ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^current.getFirstChild (  )  == child )  { Node currentParent = current.getParent (  ) ;Node currentParent = current.getParent (  ) ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^currentParent.getParent (  )  )  ) ;Node currentParent = current.getParent (  ) ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^declParent.detachFromParent (  ) ;Node currentParent = current.getParent (  ) ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( root )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil .isExprCall ( ancestor )   && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( parent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^canMoveValue ( n.getLastChild (  )  )  )  {^342^^^^^327^357^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^hasConditionalAncestor ( current.getLastChild (  )  )  )  {^342^^^^^327^357^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^canMoveValue ( current.removeChild (  )  )  )  {^342^^^^^327^357^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^canMoveValue ( current .getFirstChild (  )   )  )  {^342^^^^^327^357^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^canMoveValue ( node.getLastChild (  )  )  )  {^342^^^^^327^357^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^canMoveValue ( rootNode.getLastChild (  )  )  )  {^342^^^^^327^357^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, root, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return currentParent.addDeclaration ( new Declaration ( t.getModule (  ) , current, info, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t .getScope (  )  , current, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^currentParent.removeChild (  )  )  ) ;^345^^^^^330^360^currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^345^^^^^330^360^currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^Node currentParent = current.getParent (  ) ;currentParent.getParent (  )  )  ) ;^345^^^^^330^360^currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^gramps.getParent (  )  )  ) ;currentParent.getParent (  )  )  ) ;^345^^^^^330^360^currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^} else if  ( current.getType (  )  >= Token.ASSIGN && current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  <= child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^} else if  ( name.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == name )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^} else if  ( current .getParent (  )   == Token.ASSIGN && current.getFirstChild (  )  == child )  {^338^339^^^^323^353^} else if  ( current.getType (  )  == Token.ASSIGN && current.getFirstChild (  )  == child )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( varParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( currentParentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil .isExprCall ( current )   && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( var )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, parent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , node, currentParent, currentParent .getString (  )   )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , var, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , current, root, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t.getModule (  ) , current, currentParent, currentParent .getString (  )   )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , node, currentParent, currentParent.removeChild (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, node, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, var, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , root, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^338^349^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , node, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^338^349^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node varParent = current.getParent (  ) ;^340^^^^^338^349^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil .isExprCall ( ancestor )   && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( n )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^338^349^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^canMoveValue ( name.getLastChild (  )  )  )  {^342^^^^^338^349^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( nodeParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current .getFirstChild (  )   )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, name, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( currentParent.getModule (  ) , current, t, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , current, root, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , currentParent, current, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , node, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^341^346^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^341^346^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( relationship != null )  {^356^^^^^341^371^if  ( NodeUtil.isExprCall ( gramps )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil.isLiteralValue ( gramps )  )  {^356^^^^^341^371^if  ( NodeUtil.isExprCall ( gramps )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( NodeUtil .isExpressionNode ( rootNode )   )  {^356^^^^^341^371^if  ( NodeUtil.isExprCall ( gramps )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  ( relationship != null )  &&  ( name.getString (  ) .equals ( relationship.subclassName )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ; }^356^^^^^341^371^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( relationship != null || name.getString (  ) .equals ( relationship.subclassName )  )  {^359^360^^^^344^374^if  ( relationship != null && name.getString (  ) .equals ( relationship.subclassName )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( relationship == null && name.getString (  ) .equals ( relationship.subclassName )  )  {^359^360^^^^344^374^if  ( relationship != null && name.getString (  ) .equals ( relationship.subclassName )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( relationship != null ) {^359^360^^^^344^374^if  ( relationship != null && name.getString (  ) .equals ( relationship.subclassName )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  (  name.getString (  ) .equals ( relationship.subclassName )  )  {^359^360^^^^344^374^if  ( relationship != null && name.getString (  ) .equals ( relationship.subclassName )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( relationship != null && name.removeChild (  ) .equals ( relationship.subclassName )  )  {^359^360^^^^344^374^if  ( relationship != null && name.getString (  ) .equals ( relationship.subclassName )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^return info.addDeclaration(new com.google.javascript.jscomp.CrossModuleCodeMotion.Declaration(t.getModule(), parent, gramps, gramps.getParent()));^359^360^361^362^363^344^374^if  ( relationship != null && name.getString (  ) .equals ( relationship.subclassName )  )  { return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^359^360^361^362^363^344^374^if  ( relationship != null && name.getString (  ) .equals ( relationship.subclassName )  )  { return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  (  ( isExpressionNode ( currentParent )  )  &&  ( canMoveValue ( current.getLastChild (  )  )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ; }^359^^^^^344^374^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( isExprCall ( gramps )  )  {     SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;     if  (  ( relationship != null )  &&  ( name.getString (  ) .equals ( relationship.subclassName )  )  )  {         return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;     } }^359^^^^^344^374^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^359^^^^^344^374^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( isFunctionDeclaration ( parent )  )  {     return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ; }^359^^^^^344^374^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , parent, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , paren gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) ,  gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent,  gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return gramps.addDeclaration ( new Declaration ( t.getModule (  ) , parent, info, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return t.addDeclaration ( new Declaration ( info.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , gramps, parent, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t .getScope (  )  , parent, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.removeChild (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , parent, gramps, gramps.removeChild (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , parent, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , paren gramps, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) ,  gramps, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , parent,  gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , n, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , parent, root, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( gramps.getModule (  ) , parent, t, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( parent.getModule (  ) , t, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t.getModule (  ) , parent, gramps, gramps.removeChild (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , parent, n, gramps.removeChild (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , node, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, n, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return parent.addDeclaration ( new Declaration ( t.getModule (  ) , info, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( parent.getModule (  ) , t, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, root, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t .getScope (  )  , parent, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^gramps.removeChild (  )  )  ) ;^363^^^^^359^364^gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^gramps .getString (  )   )  ) ;^363^^^^^359^364^gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^363^^^^^359^364^gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^currentParent.getParent (  )  )  ) ;gramps.getParent (  )  )  ) ;^363^^^^^359^364^gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , parent, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , paren gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) ,  gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent,  gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , var, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, name, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return gramps.addDeclaration ( new Declaration ( t.getModule (  ) , parent, info, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( gramps.getModule (  ) , parent, t, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , gramps, parent, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t .getScope (  )  , parent, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.removeChild (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , parent, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , paren gramps, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) ,  gramps, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P4_Replace_Constructor]^new Declaration ( t.getModule (  ) , parent,  gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , n, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , parent, rootNode, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( gramps.getModule (  ) , parent, t, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , gramps, parent, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t.getModule (  ) , parent, gramps, gramps.removeChild (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t.getModule (  ) , parent, gramps, gramps .getString (  )   )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , parent, name, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( n ) ;^357^358^^^^342^372^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^SubclassRelationship relationship = parent.getCodingConvention (  ) .getClassesDefinedByCall ( compiler ) ;^357^358^^^^342^372^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^SubclassRelationship relationship = compiler.getCodingConvention (  ) .isExported ( parent ) ;^357^358^^^^342^372^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^SubclassRelationship relationship = compiler.getModuleGraph (  ) .getClassesDefinedByCall ( parent ) ;^357^358^^^^342^372^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^SubclassRelationship relationship = compiler.getModuleGraph (  ) .getClassesDefinedByCall ( gramps ) ;^357^358^^^^342^372^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( name ) ;^358^^^^^343^373^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) .isExported ( parent ) ;^358^^^^^343^373^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^compiler.getCodingConvention (  )  .getString (  )  ;^358^^^^^343^373^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^compiler.getModuleGraph (  ) .getClassesDefinedByCall ( parent ) ;^358^^^^^343^373^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( gramps ) ;^358^^^^^343^373^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^358^^^^^343^373^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^name.removeChild (  ) .equals ( relationship.subclassName )  )  {^360^^^^^345^375^name.getString (  ) .equals ( relationship.subclassName )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , n, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, n, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return parent.addDeclaration ( new Declaration ( t.getModule (  ) , info, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info .declarationIterator (  )   )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps .getString (  )   )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , root, gramps, gramps .getString (  )   )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t .getScope (  )  , parent, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^gramps.removeChild (  )  )  ) ;^363^^^^^348^378^gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^363^^^^^348^378^gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^currentParent.getParent (  )  )  ) ;gramps.getParent (  )  )  ) ;^363^^^^^348^378^gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info .declarationIterator (  )   )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , parent, parent, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , gramps, parent, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t.getModule (  ) , parent, gramps, gramps .getString (  )   )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , name, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^359^364^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , gramps, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^359^364^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^child = n;^351^^^^^336^366^child = current;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^child =  node;^351^^^^^336^366^child = current;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , node, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, name )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info .declarationIterator (  )   ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info.addDeclaration ( new Declaration ( t .getScope (  )  , name, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return true;^320^^^^^305^335^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, n, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( parent.getModule (  ) , name, t, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  , name, parent, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return true;^327^^^^^312^342^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , n, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, n, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return info .declarationIterator (  )   )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return true;^353^^^^^338^368^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , root, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, var, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return t.addDeclaration ( new Declaration ( info.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addnew Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )   , parent, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return true;^366^^^^^351^381^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return true;^369^^^^^354^384^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , name, node, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , name, parent, name )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , parent, name, gramps )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , gramps, parent, name )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , name, parent, n )  ) ;^318^^^^^303^333^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , name, n, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( name.getModule (  ) , t, parent, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , gramps, parent, name )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , name, gramps, parent )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t .getScope (  )  , name, parent, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , node, parent, gramps )  ) ;^325^^^^^310^340^new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , node, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^new Declaration ( t.getModule (  ) , current, currentParent, currentParent .getString (  )   )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , var, currentParent, currentParent.getParent (  )  )  ) ;^344^345^^^^329^359^new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( t.getModule (  ) , var, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^new Declaration ( parent.getModule (  ) , t, gramps, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^new Declaration ( t.getModule (  ) , parent, node, gramps.getParent (  )  )  ) ;^362^363^^^^347^377^new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node child = parent;^331^^^^^316^346^Node child = name;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node child = root;^331^^^^^316^346^Node child = name;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node rootParent = current.getParent (  ) ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node currentParent = current .getString (  )  ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( gramps ) ;^357^358^^^^342^372^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^SubclassRelationship relationship = compiler .getNodeForCodeInsertion ( declModule )  .getClassesDefinedByCall ( parent ) ;^357^358^^^^342^372^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^SubclassRelationship relationship = compiler.getCodingConvention (  ) .isExported ( root ) ;^357^358^^^^342^372^SubclassRelationship relationship = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^switch  ( gramps.getType (  )  )  {^314^^^^^299^329^switch  ( parent.getType (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^switch  ( parent.removeChild (  )  )  {^314^^^^^299^329^switch  ( parent.getType (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^switch  ( node.getType (  )  )  {^314^^^^^299^329^switch  ( parent.getType (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( canMoveValue ( root.getFirstChild (  )  )  )  {^316^^^^^301^331^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( canMoveValue ( n.removeChild (  )  )  )  {^316^^^^^301^331^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( canMoveValue ( rootNode.getFirstChild (  )  )  )  {^316^^^^^301^331^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( canMoveValue ( gramps.getFirstChild (  )  )  )  {^316^^^^^301^331^if  ( canMoveValue ( name.getFirstChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , root, parent, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, name, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, parent )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, name, gramps )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t .getScope (  )  , name, parent, var )  ) ;^317^318^^^^302^332^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isFunctionDeclaration ( gramps )  )  {^323^^^^^308^338^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil .isLiteralValue ( name )   )  {^323^^^^^308^338^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, rootNode, gramps )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, n )  ) ;^324^325^^^^309^339^return info.addDeclaration ( new Declaration ( t.getModule (  ) , name, parent, gramps )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node current : var.getAncestors (  )  )  {^335^^^^^320^350^for  ( Node current : name.getAncestors (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^for  ( Node current : name.removeChild (  )  )  {^335^^^^^320^350^for  ( Node current : name.getAncestors (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node nameParent = current.getParent (  ) ;^340^^^^^325^355^Node currentParent = current.getParent (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( name )  && canMoveValue ( current.getLastChild (  )  )  )  {^341^342^^^^326^356^if  ( NodeUtil.isExpressionNode ( currentParent )  && canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^canMoveValue ( var.getLastChild (  )  )  )  {^342^^^^^327^357^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^canMoveValue ( name.getLastChild (  )  )  )  {^342^^^^^327^357^canMoveValue ( current.getLastChild (  )  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return current.addDeclaration ( new Declaration ( t.getModule (  ) , info, currentParent, currentParent.getParent (  )  )  ) ;^343^344^345^^^328^358^return info.addDeclaration ( new Declaration ( t.getModule (  ) , current, currentParent, currentParent.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( NodeUtil.isExprCall ( node )  )  {^356^^^^^341^371^if  ( NodeUtil.isExprCall ( gramps )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( NodeUtil .isExpressionNode ( child )   )  {^356^^^^^341^371^if  ( NodeUtil.isExprCall ( gramps )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( NodeUtil.isExprCall ( n )  )  {^356^^^^^341^371^if  ( NodeUtil.isExprCall ( gramps )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^compiler .getNodeForCodeInsertion ( declModule )  .getClassesDefinedByCall ( parent ) ;^358^^^^^343^373^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( n ) ;^358^^^^^343^373^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , node, gramps, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, rootNode, gramps.getParent (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, root, gramps.removeChild (  )  )  ) ;^361^362^363^^^346^376^return info.addDeclaration ( new Declaration ( t.getModule (  ) , parent, gramps, gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^gramps .getString (  )   )  ) ;^363^^^^^348^378^gramps.getParent (  )  )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] maybeProcessDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node name Node parent NamedInfo info [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  NodeTraversal  t  Node  ancestor  child  current  currentParent  declParent  destParent  externs  gramps  n  name  node  parent  root  rootNode  var  NamedInfo  info  JSModule  declModule  deepestDependency  deepestModule  m  module  SubclassRelationship  relationship  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( n == null && NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^if  ( n != null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( node == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( n == null ) {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  (  NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( (n == null || isLiteralValue(n)) )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( n.getType (  )  == FUNCTION )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( n.getType() == CALL )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( functionName.getType() == NAME && STUB_METHOD_NAME) || UNSTUB_METHOD_NAME) )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( functionName.getType (  )  == NAME )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( STUB_METHOD_NAME || UNSTUB_METHOD_NAME)) )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( n.getType() == ARRAYLIT || n.getType() == OBJECTLIT )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( n.getType (  )  == ARRAYLIT )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( n.getType (  )  == OBJECTLIT )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^if  ( child != null )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( n == null || NodeUtil.isExprCall ( n )  || n.getType (  )  == Token.FUNCTION )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.removeChild (  )  == Token.FUNCTION )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n .getParent (  )   == Token.FUNCTION )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( n == true || NodeUtil.isLiteralValue ( n )  || n.removeChild (  )  == Token.FUNCTION )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^} else if  ( n.getType (  )  != Token.CALL )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^} else if  ( n.getType (  )  <= Token.CALL )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^} else if  ( n.getType (  )  > Token.CALL )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^} else if  ( name.getType (  )  == Token.CALL )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  ( functionName.getType() == NAME && STUB_METHOD_NAME) || UNSTUB_METHOD_NAME) )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  ( functionName.getType (  )  == NAME )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  ( STUB_METHOD_NAME || UNSTUB_METHOD_NAME)) )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  ( n.getType() == ARRAYLIT || n.getType() == OBJECTLIT )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == ARRAYLIT )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == OBJECTLIT )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  ( child != null )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^} else if  ( n.removeChild (  )  == Token.CALL )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^} else if  ( n .getParent (  )   == Token.CALL )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^} else if  ( n.getType (  )  == Token.ARRAYLIT && n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^} else if  ( n.getType (  )  != Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^} else if  ( n.getType (  )  < Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^} else if  ( name.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == Token.ARRAYLIT ) {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  (  n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == ARRAYLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else if  ( child != null )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P6_Replace_Expression]^} else {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^} else if  ( n.removeChild (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^} else if  ( n .getParent (  )   == Token.ARRAYLIT || n^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^} else if  ( node.getType (  )  == Token.ARRAYLIT ) {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( !canMoveValue ( n )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( !hasConditionalAncestor ( child )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( !canMoveValue ( node )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^return false;^397^398^399^^^393^403^if  ( !canMoveValue ( child )  )  { return false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^397^398^399^^^393^403^if  ( !canMoveValue ( child )  )  { return false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( ! ( allowMove )  )  {     return ; }^397^^^^^393^403^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return true;^398^^^^^393^403^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^for  ( Node child = n.getFirstChild (  ) ; child == null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node child = name.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node node = n.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node n = child.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^for  ( Node child = n.removeChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^for  ( Node child = n .getLastChild (  )  ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^for  ( Node child = var.removeChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( !canMoveValue ( rootNode )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( !canMoveValue ( name )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( !canMoveValue ( parent )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^child = name.getNext (  )  )  {^396^^^^^393^403^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^child = child.removeChild (  )  )  {^396^^^^^393^403^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^child =  node.getNext (  )  )  {^396^^^^^393^403^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return false;^402^^^^^393^403^return true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^for  ( Node child = parent.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^395^396^397^398^399^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  )  )  { if  ( !canMoveValue ( child )  )  { return false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^n.getType (  )  == Token.OBJECTLIT )  { for  ( Node child = n.getFirstChild (  ) ; child != null;for  ( Node child = n.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^child = root.getNext (  )  )  {^396^^^^^393^403^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^child = root.removeChild (  )  )  {^396^^^^^393^403^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^396^397^398^^^393^403^child = child.getNext (  )  )  { if  ( !canMoveValue ( child )  )  { return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( !canMoveValue ( parent )  )  {^397^^^^^376^406^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( !hasConditionalAncestor ( child )  )  {^397^^^^^376^406^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( !canMoveValue ( var )  )  {^397^^^^^376^406^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^return false;^397^398^399^^^376^406^if  ( !canMoveValue ( child )  )  { return false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^397^398^399^^^376^406^if  ( !canMoveValue ( child )  )  { return false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( ! ( allowMove )  )  {     return ; }^397^^^^^376^406^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return true;^398^^^^^376^406^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^for  ( Node child = n.getFirstChild (  ) ; child == null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node child = node.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node n = child.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^for  ( Node child = n.removeChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^for  ( Node child = name.removeChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( !canMoveValue ( parent )  )  {^397^^^^^395^400^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^if  ( !hasConditionalAncestor ( child )  )  {^397^^^^^395^400^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( !canMoveValue ( node )  )  {^397^^^^^395^400^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P15_Unwrap_Block]^return false;^397^398^399^^^395^400^if  ( !canMoveValue ( child )  )  { return false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P16_Remove_Block]^^397^398^399^^^395^400^if  ( !canMoveValue ( child )  )  { return false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P13_Insert_Block]^if  ( ! ( allowMove )  )  {     return ; }^397^^^^^395^400^[Delete]^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return true;^398^^^^^395^400^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^child = name.getNext (  )  )  {^396^^^^^376^406^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^child = child.removeChild (  )  )  {^396^^^^^376^406^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^child =  n.getNext (  )  )  {^396^^^^^376^406^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return false;^402^^^^^376^406^return true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node child = rootNode.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^} else if  ( node.removeChild (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^n.removeChild (  )  == Token.OBJECTLIT )  {^394^^^^^376^406^n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^n .getParent (  )   == Token.OBJECTLIT )  {^394^^^^^376^406^n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^394^395^^^^376^406^n.getType (  )  == Token.OBJECTLIT )  { for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node child = gramps.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^for  ( Node child = n .getLastChild (  )  ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^395^396^397^398^399^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  )  )  { if  ( !canMoveValue ( child )  )  { return false; }^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^n.getType (  )  == Token.OBJECTLIT )  { for  ( Node child = n.getFirstChild (  ) ; child != null;for  ( Node child = n.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^child = child .getParent (  )   )  {^396^^^^^376^406^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^child = root.removeChild (  )  )  {^396^^^^^376^406^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^396^397^398^^^376^406^child = child.getNext (  )  )  { if  ( !canMoveValue ( child )  )  { return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( !canMoveValue ( name )  )  {^397^^^^^376^406^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^return functionName.getType (  )  == Token.NAME || ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^return functionName.getType (  )  >= Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  && functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return functionName.removeChild (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .getVar ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return functionName.getType (  )  == Token.NAME && ( functionName.removeChild (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node functionName = root.getFirstChild (  ) ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node functionName = n.removeChild (  ) ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node functionName = name.getFirstChild (  ) ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node functionName = n.getFirstChild (  ) ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return n.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return node.removeChild (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^( n.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^( functionName.getString (  ) .getVar ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^( functionName.removeChild (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^( parent.removeChild (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^( node.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^functionName.getString (  ) .getVar ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^391^392^^^^376^406^functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^functionName.removeChild (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^391^392^^^^376^406^functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^391^392^^^^376^406^functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^} else if  ( n.getType (  )  >= Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^} else if  ( n.getType (  )  <= Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^} else if  ( var.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^} else if  ( n.getType (  )  == Token.3 || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node name = n.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^for  ( Node child = rootNode.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^child = child .getParent (  )   )  {^396^^^^^393^403^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node child = var.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node child = root.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^for  ( Node child = node.removeChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^child = parent.getNext (  )  )  {^396^^^^^393^403^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( !hasConditionalAncestor ( n )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( !canMoveValue ( rootNode )  )  {^397^^^^^376^406^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( !canMoveValue ( node )  )  {^397^^^^^376^406^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node child = root.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( !canMoveValue ( name )  )  {^397^^^^^395^400^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( !canMoveValue ( var )  )  {^397^^^^^395^400^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^child =  var.getNext (  )  )  {^396^^^^^376^406^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P2_Replace_Operator]^return functionName.getType (  )  != Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^Node functionName = n .getLastChild (  )  ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node functionName = rootNode.removeChild (  ) ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^} else if  ( gramps.getType (  )  == Token.CALL )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^} else if  ( node.getType (  )  == Token.CALL )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node functionName = gramps.removeChild (  ) ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return var.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^return functionName .getParent (  )   == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^return n.removeChild (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^( rootNode.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^( node.removeChild (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^( var.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^} else if  ( gramps.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^for  ( Node child = parent.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^child = node.getNext (  )  )  {^396^^^^^376^406^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^child = parent.getNext (  )  )  {^396^^^^^376^406^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( !canMoveValue ( n )  )  {^397^^^^^376^406^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return false;^385^^^^^383^403^return true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^} else if  ( root.getType (  )  == Token.CALL )  {^386^^^^^376^406^} else if  ( n.getType (  )  == Token.CALL )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.null )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^} else if  ( rootNode.getType (  )  == Token.ARRAYLIT ) {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( !hasConditionalAncestor ( parent )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node var = n.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^for  ( Node n = n.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( !canMoveValue ( var )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^for  ( Node child = gramps.getFirstChild (  ) ; child != null;^395^^^^^393^403^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node child = name.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( !canMoveValue ( n )  )  {^397^^^^^395^400^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^} else if  ( name.removeChild (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^393^394^^^^376^406^} else if  ( n.getType (  )  == Token.ARRAYLIT || n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^Node functionName = name .getLastChild (  )  ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node functionName = gramps.getFirstChild (  ) ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^return name.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^388^389^390^391^^376^406^return functionName.getType (  )  == Token.NAME && ( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals (^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^( name.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^( var.removeChild (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^if  ( !canMoveValue ( root )  )  {^397^^^^^393^403^if  ( !canMoveValue ( child )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^child = n.getNext (  )  )  {^396^^^^^393^403^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^child =  var.getNext (  )  )  {^396^^^^^393^403^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node var = n.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^child =  rootNode.getNext (  )  )  {^396^^^^^376^406^child = child.getNext (  )  )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return false;^385^^^^^376^406^return true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node functionName = parent.getFirstChild (  ) ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^for  ( Node child = var.getFirstChild (  ) ; child != null;^395^^^^^376^406^for  ( Node child = n.getFirstChild (  ) ; child != null;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( node == null || NodeUtil.isExprCall ( n )  || n.getType (  )  == Token.FUNCTION )  {^383^384^^^^376^406^if  ( n == null || NodeUtil.isLiteralValue ( n )  || n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P7_Replace_Invocation]^n.removeChild (  )  == Token.FUNCTION )  {^384^^^^^376^406^n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^n .getParent (  )   == Token.FUNCTION )  {^384^^^^^376^406^n.getType (  )  == Token.FUNCTION )  {^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P14_Delete_Statement]^^384^385^^^^376^406^n.getType (  )  == Token.FUNCTION )  { return true;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P5_Replace_Variable]^Node functionName = node.getFirstChild (  ) ;^387^^^^^376^406^Node functionName = n.getFirstChild (  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^( parent.getString (  ) .getVar ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^389^390^391^392^^376^406^( functionName.getString (  ) .equals ( CrossModuleMethodMotion.STUB_METHOD_NAME )  || functionName.getString (  ) .equals ( CrossModuleMethodMotion.UNSTUB_METHOD_NAME )  ) ;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^return true;^405^^^^^376^406^return false;^[CLASS] CrossModuleCodeMotion NamedInfo Declaration  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P3_Replace_Literal]^boolean allowMove = false;^145^^^^^140^150^boolean allowMove = true;^[CLASS] NamedInfo  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^private JSModule deepestModule ;^148^^^^^143^153^private JSModule deepestModule = null;^[CLASS] NamedInfo  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^private JSModule declModule  = null ;^151^^^^^146^156^private JSModule declModule = null;^[CLASS] NamedInfo  [METHOD] canMoveValue [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  boolean  allowMove  recursive  Node  ancestor  child  current  currentParent  declParent  destParent  externs  functionName  gramps  n  name  node  parent  root  rootNode  var  JSModule  declModule  deepestDependency  deepestModule  m  module  Logger  logger  Map  moduleVarParentMap  namedInfo  Deque  declarations  JSModuleGraph  graph  moduleGraph  
[P8_Replace_Mix]^if  ( allowMove )  {^160^^^^^158^172^if  ( !allowMove )  {^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P15_Unwrap_Block]^return ;^160^161^162^^^158^172^if  ( !allowMove )  { return; }^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P16_Remove_Block]^^160^161^162^^^158^172^if  ( !allowMove )  { return; }^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P2_Replace_Operator]^if  ( deepestModule != null )  {^165^^^^^158^172^if  ( deepestModule == null )  {^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^if  ( m == null )  {^165^^^^^158^172^if  ( deepestModule == null )  {^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P8_Replace_Mix]^if  ( deepestModule == false )  {^165^^^^^158^172^if  ( deepestModule == null )  {^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^deepestModule = graph.getDeepestCommonDependencyInclusive ( deepestModule, deepestModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, declModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^deepestModule = graph.getDeepestCommonDependencyInclusive (  deepestModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^deepestModule = graph.getDeepestCommonDependencyInclusive ( m ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^deepestModule = graph.getDeepestCommonDependencyInclusive ( deepestModule, m ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^deepestModule = deepestModule.getDeepestCommonDependencyInclusive ( m, graph ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P8_Replace_Mix]^deepestModule =  graph.getDeepestCodeclModuledeclModuleonDependencyInclusive ( declModule, deepestModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^graph.getDeepestCommonDependencyInclusive ( declModule, deepestModule ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^graph.getDeepestCommonDependencyInclusive ( m, declModule ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^graph.getDeepestCommonDependencyInclusive (  deepestModule ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^graph.getDeepestCommonDependencyInclusive ( m ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^graph.getDeepestCommonDependencyInclusive ( deepestModule, m ) ;^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P14_Delete_Statement]^^170^^^^^158^172^graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^deepestModule = deepestModule;^166^^^^^158^172^deepestModule = m;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P8_Replace_Mix]^deepestModule =  declModule;^166^^^^^158^172^deepestModule = m;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^deepestModule = graph.getDeepestCommonDependencyInclusive ( declModule, deepestModule ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P5_Replace_Variable]^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, m ) ;^169^170^^^^158^172^deepestModule = graph.getDeepestCommonDependencyInclusive ( m, deepestModule ) ;^[CLASS] NamedInfo  [METHOD] addUsedModule [RETURN_TYPE] void   JSModule m [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P2_Replace_Operator]^if  ( declModule != null || d.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P2_Replace_Operator]^if  ( declModule == null && d.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P2_Replace_Operator]^if  ( declModule != null && d.module == declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P5_Replace_Variable]^if  ( m != null && d.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P5_Replace_Variable]^if  ( declModule != null && m != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P5_Replace_Variable]^if  ( declModuleeclModule != null && d.module != d )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P5_Replace_Variable]^if  ( d.module != null && declModule != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P5_Replace_Variable]^if  ( d.moduleeclModule != null && d != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P6_Replace_Expression]^if  ( declModule != null ) {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P6_Replace_Expression]^if  (  d.module != declModule )  {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P8_Replace_Mix]^if  ( declModule != false ) {^181^^^^^179^187^if  ( declModule != null && d.module != declModule )  {^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P15_Unwrap_Block]^return false;^181^182^183^^^179^187^if  ( declModule != null && d.module != declModule )  { return false; }^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P16_Remove_Block]^^181^182^183^^^179^187^if  ( declModule != null && d.module != declModule )  { return false; }^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P3_Replace_Literal]^return true;^182^^^^^179^187^return false;^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P14_Delete_Statement]^^184^185^^^^179^187^declarations.push ( d ) ; declModule = d.module;^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P11_Insert_Donor_Statement]^return declarations.iterator (  ) ;declarations.push ( d ) ;^184^^^^^179^187^declarations.push ( d ) ;^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P5_Replace_Variable]^declModule = m;^185^^^^^179^187^declModule = d.module;^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P5_Replace_Variable]^declModule = d.module.module;^185^^^^^179^187^declModule = d.module;^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P5_Replace_Variable]^declModule = d;^185^^^^^179^187^declModule = d.module;^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P8_Replace_Mix]^declModule =  null.monullule;^185^^^^^179^187^declModule = d.module;^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P3_Replace_Literal]^return false;^186^^^^^179^187^return true;^[CLASS] NamedInfo  [METHOD] addDeclaration [RETURN_TYPE] boolean   Declaration d [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Declaration  d  Deque  declarations  
[P14_Delete_Statement]^^194^^^^^193^195^return declarations.iterator (  ) ;^[CLASS] NamedInfo  [METHOD] declarationIterator [RETURN_TYPE] Iterator   [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P8_Replace_Mix]^JSModule module;^199^^^^^194^204^final JSModule module;^[CLASS] Declaration  [METHOD] declarationIterator [RETURN_TYPE] Iterator   [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P8_Replace_Mix]^Node node;^200^^^^^195^205^final Node node;^[CLASS] Declaration  [METHOD] declarationIterator [RETURN_TYPE] Iterator   [VARIABLES] JSModule  declModule  deepestModule  m  boolean  allowMove  Deque  declarations  
[P8_Replace_Mix]^this.module =  null;^203^^^^^202^205^this.module = module;^[CLASS] Declaration  [METHOD] <init> [RETURN_TYPE] Node)   JSModule module Node node Node parent Node gramps [VARIABLES] JSModule  module  Node  gramps  node  parent  boolean  
[P11_Insert_Donor_Statement]^this.node = node;this.module = module;^203^^^^^202^205^this.module = module;^[CLASS] Declaration  [METHOD] <init> [RETURN_TYPE] Node)   JSModule module Node node Node parent Node gramps [VARIABLES] JSModule  module  Node  gramps  node  parent  boolean  
[P5_Replace_Variable]^this.node = parent;^204^^^^^202^205^this.node = node;^[CLASS] Declaration  [METHOD] <init> [RETURN_TYPE] Node)   JSModule module Node node Node parent Node gramps [VARIABLES] JSModule  module  Node  gramps  node  parent  boolean  
[P8_Replace_Mix]^this.node =  null;^204^^^^^202^205^this.node = node;^[CLASS] Declaration  [METHOD] <init> [RETURN_TYPE] Node)   JSModule module Node node Node parent Node gramps [VARIABLES] JSModule  module  Node  gramps  node  parent  boolean  
[P11_Insert_Donor_Statement]^this.module = module;this.node = node;^204^^^^^202^205^this.node = node;^[CLASS] Declaration  [METHOD] <init> [RETURN_TYPE] Node)   JSModule module Node node Node parent Node gramps [VARIABLES] JSModule  module  Node  gramps  node  parent  boolean  
