[P3_Replace_Literal]^static final DiagnosticType SUSPICIOUS_SEMICOLON = DiagnosticType.warning ( "JSC_SUSPICIOUS_SEMICOLON_SU", "If this if/for/while really shouldn't have a body, use {}" ) ;^36^37^38^^^36^38^static final DiagnosticType SUSPICIOUS_SEMICOLON = DiagnosticType.warning ( "JSC_SUSPICIOUS_SEMICOLON", "If this if/for/while really shouldn't have a body, use {}" ) ;^[CLASS] CheckAccidentalSemicolon   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType SUSPICIOUS_SEMICOLON = DiagnosticType.warning ( "JSC_SUSPICIOUS_SEMICOLON", "his if/for/while rea" ) ;^36^37^38^^^36^38^static final DiagnosticType SUSPICIOUS_SEMICOLON = DiagnosticType.warning ( "JSC_SUSPICIOUS_SEMICOLON", "If this if/for/while really shouldn't have a body, use {}" ) ;^[CLASS] CheckAccidentalSemicolon   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType SUSPICIOUS_SEMICOLON ;^36^37^38^^^36^38^static final DiagnosticType SUSPICIOUS_SEMICOLON = DiagnosticType.warning ( "JSC_SUSPICIOUS_SEMICOLON", "If this if/for/while really shouldn't have a body, use {}" ) ;^[CLASS] CheckAccidentalSemicolon   [VARIABLES] 
[P8_Replace_Mix]^this.level =  null;^43^^^^^42^44^this.level = level;^[CLASS] CheckAccidentalSemicolon  [METHOD] <init> [RETURN_TYPE] CheckLevel)   CheckLevel level [VARIABLES] DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  boolean  
[P5_Replace_Variable]^child = parent.getFirstChild (  ) .getNext (  ) ;^50^^^^^46^74^child = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P7_Replace_Invocation]^child = n .getType (  )  .getNext (  ) ;^50^^^^^46^74^child = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^child = NodeUtil.getLoopCodeBlock ( parent ) ;^55^^^^^46^74^child = NodeUtil.getLoopCodeBlock ( n ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P8_Replace_Mix]^child =  NodeUtil.getLoopCodeBlock ( null ) ;^55^^^^^46^74^child = NodeUtil.getLoopCodeBlock ( n ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^48^^^^^46^74^switch  ( n.getType (  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P7_Replace_Invocation]^switch  ( n .getNext (  )   )  {^48^^^^^46^74^switch  ( n.getType (  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P14_Delete_Statement]^^48^49^50^^^46^74^switch  ( n.getType (  )  )  { case Token.IF: child = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P7_Replace_Invocation]^child = n.getFirstChild (  )  .report (  )  ;^50^^^^^46^74^child = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P14_Delete_Statement]^^50^51^^^^46^74^child = n.getFirstChild (  ) .getNext (  ) ; break;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P14_Delete_Statement]^^50^^^^^46^74^child = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P14_Delete_Statement]^^55^^^^^46^74^child = NodeUtil.getLoopCodeBlock ( n ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P2_Replace_Operator]^if  (  ( child.getType (  )  == Token.BLOCK )  ||  ( !child.hasChildren (  )  )  )  {^65^^^^^46^74^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P2_Replace_Operator]^if  (  ( child.getType (  )  > Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^65^^^^^46^74^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^if  (  ( parent.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^65^^^^^46^74^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildreparent (  )  )  )  {^65^^^^^46^74^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P6_Replace_Expression]^if  (  ( child.getType (  )  == Token.BLOCK )  ) {^65^^^^^46^74^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P6_Replace_Expression]^if  (   ( !child.hasChildren (  )  )  )  {^65^^^^^46^74^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P6_Replace_Expression]^if  ( child.getType (  )  == BLOCK )  {^65^^^^^46^74^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P7_Replace_Invocation]^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child .getFirstChild (  )   )  )  {^65^^^^^46^74^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P13_Insert_Block]^if  ( child.wasEmptyNode (  )  )  {     t.getCompiler (  ) .report ( make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ; }^65^^^^^46^74^[Delete]^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^if  ( parent.wasEmptyNode (  )  )  {^68^^^^^46^74^if  ( child.wasEmptyNode (  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P15_Unwrap_Block]^t.getCompiler().report(com.google.javascript.jscomp.JSError.make(t, n, level, com.google.javascript.jscomp.CheckAccidentalSemicolon.SUSPICIOUS_SEMICOLON));^68^69^70^71^^46^74^if  ( child.wasEmptyNode (  )  )  { t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ; }^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P16_Remove_Block]^^68^69^70^71^^46^74^if  ( child.wasEmptyNode (  )  )  { t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ; }^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, parent, level, SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make (  n, level, SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t,  level, SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n,  SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n, level )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( SUSPICIOUS_SEMICOLON, n, level, t )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, level, n, SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n, SUSPICIOUS_SEMICOLON, level )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, SUSPICIOUS_SEMICOLON, level, n )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P14_Delete_Statement]^^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P11_Insert_Donor_Statement]^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P13_Insert_Block]^if  ( child.wasEmptyNode (  )  )  {     t.getCompiler (  ) .report ( make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ; }^69^^^^^46^74^[Delete]^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P13_Insert_Block]^if  (  (  ( child.getType (  )  )  ==  ( BLOCK )  )  &&  ( ! ( child.hasChildren (  )  )  )  )  {     if  ( child.wasEmptyNode (  )  )  {         t.getCompiler (  ) .report ( make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;     } }^69^^^^^46^74^[Delete]^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^JSError.make ( t, parent, level, SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^JSError.make (  n, level, SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^JSError.make ( t,  level, SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^JSError.make ( t, n,  SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^JSError.make ( t, n, level )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^JSError.make ( level, n, t, SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^JSError.make ( n, t, level, SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^JSError.make ( t, level, n, SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^JSError.make ( t, n, SUSPICIOUS_SEMICOLON, level )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P14_Delete_Statement]^^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P11_Insert_Donor_Statement]^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( n, t, level, SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P7_Replace_Invocation]^t.getCompiler (  )  .getNext (  )  ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^JSError.make ( t, SUSPICIOUS_SEMICOLON, level, n )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P8_Replace_Mix]^if  ( parent .getType (  )   )  {^68^^^^^46^74^if  ( child.wasEmptyNode (  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P2_Replace_Operator]^for  ( ; child == null; child = child.getNext (  )  )  {^64^^^^^46^74^for  ( ; child != null; child = child.getNext (  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^for  ( ; parent != null; child = child.getNext (  )  )  {^64^^^^^46^74^for  ( ; child != null; child = child.getNext (  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^for  ( ; child != parentull; child = child.getNext (  )  )  {^64^^^^^46^74^for  ( ; child != null; child = child.getNext (  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^for  ( ; n != childull; child = child.getNext (  )  )  {^64^^^^^46^74^for  ( ; child != null; child = child.getNext (  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P7_Replace_Invocation]^for  ( ; child != null; child = child .report (  )   )  {^64^^^^^46^74^for  ( ; child != null; child = child.getNext (  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P2_Replace_Operator]^if  (  ( child.getType (  )  <= Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^65^^^^^46^74^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^if  (  ( child.getType (  )  == Token.3 )  &&  ( !child.hasChildren (  )  )  )  {^65^^^^^46^74^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P7_Replace_Invocation]^if  (  ( child .getNext (  )   == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^65^^^^^46^74^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P8_Replace_Mix]^if  (   ( !child.hasChildreparent (  )  )  )  {^65^^^^^46^74^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P7_Replace_Invocation]^if  ( child .getType (  )   )  {^68^^^^^46^74^if  ( child.wasEmptyNode (  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( level, n, t, SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P5_Replace_Variable]^JSError.make ( SUSPICIOUS_SEMICOLON, n, level, t )  ) ;^70^^^^^46^74^JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
[P8_Replace_Mix]^for  ( ; child !=  null; parent^64^^^^^46^74^for  ( ; child != null; child = child.getNext (  )  )  {^[CLASS] CheckAccidentalSemicolon  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  SUSPICIOUS_SEMICOLON  CheckLevel  level  Node  child  n  parent  
