[P8_Replace_Mix]^private  AbstractCompiler compiler;^35^^^^^30^40^private final AbstractCompiler compiler;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [VARIABLES] 
[P1_Replace_Type]^private char sourceName;^37^^^^^32^42^private String sourceName;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [VARIABLES] 
[P8_Replace_Mix]^private  RedeclarationHandler redeclarationHandler;^38^^^^^33^43^private final RedeclarationHandler redeclarationHandler;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [VARIABLES] 
[P3_Replace_Literal]^public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR = DiagnosticType.error ( "C_SC_VAR_MULTIPLY_DECLARED_ERROR", "Variable {0} first declared in {1}" ) ;^40^41^42^43^^40^43^public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR = DiagnosticType.error ( "JSC_VAR_MULTIPLY_DECLARED_ERROR", "Variable {0} first declared in {1}" ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [VARIABLES] 
[P3_Replace_Literal]^public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR = DiagnosticType.error ( "JSC_VAR_MULTIPLY_DECLARED_ERROR", "Variable {0} first declared in {1}a" ) ;^40^41^42^43^^40^43^public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR = DiagnosticType.error ( "JSC_VAR_MULTIPLY_DECLARED_ERROR", "Variable {0} first declared in {1}" ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [VARIABLES] 
[P8_Replace_Mix]^public  final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR = DiagnosticType.error ( "JSC_VAR_MULTIPLY_DECLARED_ERROR", "Variable {0} first declared in {1}" ) ;^40^41^42^43^^40^43^public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR = DiagnosticType.error ( "JSC_VAR_MULTIPLY_DECLARED_ERROR", "Variable {0} first declared in {1}" ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^49^^^^^48^51^this.compiler = compiler;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  Scope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^this.redeclarationHandler ;^50^^^^^48^51^this.redeclarationHandler = new DefaultRedeclarationHandler (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  Scope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^this.redeclarationHandler = redeclarationHandler;this.redeclarationHandler = new DefaultRedeclarationHandler (  ) ;^50^^^^^48^51^this.redeclarationHandler = new DefaultRedeclarationHandler (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  Scope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^this.compiler =  null;^55^^^^^53^57^this.compiler = compiler;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] <init> [RETURN_TYPE] SyntacticScopeCreator$RedeclarationHandler)   AbstractCompiler compiler RedeclarationHandler redeclarationHandler [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  Scope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^this.redeclarationHandler =  null;^56^^^^^53^57^this.redeclarationHandler = redeclarationHandler;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] <init> [RETURN_TYPE] SyntacticScopeCreator$RedeclarationHandler)   AbstractCompiler compiler RedeclarationHandler redeclarationHandler [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  Scope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^this.redeclarationHandler = new DefaultRedeclarationHandler (  ) ;this.redeclarationHandler = redeclarationHandler;^56^^^^^53^57^this.redeclarationHandler = redeclarationHandler;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] <init> [RETURN_TYPE] SyntacticScopeCreator$RedeclarationHandler)   AbstractCompiler compiler RedeclarationHandler redeclarationHandler [VARIABLES] AbstractCompiler  compiler  String  sourceName  boolean  Scope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^sourceName = false;^60^^^^^59^73^sourceName = null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scope = null;sourceName = null;^60^^^^^59^73^sourceName = null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^if  ( parent != null )  {^61^^^^^59^73^if  ( parent == null )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( scope == null )  {^61^^^^^59^73^if  ( parent == null )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^if  ( parent == false )  {^61^^^^^59^73^if  ( parent == null )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P9_Replace_Statement]^if  ( info == null )  {^61^^^^^59^73^if  ( parent == null )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P15_Unwrap_Block]^scope = new com.google.javascript.jscomp.Scope(n, compiler);^61^62^63^64^65^59^73^if  ( parent == null )  { scope = new Scope ( n, compiler ) ; } else { scope = new Scope ( parent, n ) ; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P16_Remove_Block]^^61^62^63^64^65^59^73^if  ( parent == null )  { scope = new Scope ( n, compiler ) ; } else { scope = new Scope ( parent, n ) ; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P4_Replace_Constructor]^scope = new Scope (  n ) ;^64^^^^^59^73^scope = new Scope ( parent, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P4_Replace_Constructor]^scope = new Scope ( parent ) ;^64^^^^^59^73^scope = new Scope ( parent, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope = new Scope ( scope, n ) ;^64^^^^^59^73^scope = new Scope ( parent, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope = parentew Scope ( n, n ) ;^64^^^^^59^73^scope = new Scope ( parent, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^scope =  new Scope ( returnedScope, n ) ;^64^^^^^59^73^scope = new Scope ( parent, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scope = new Scope ( n, compiler ) ;scope = new Scope ( parent, n ) ;^64^^^^^59^73^scope = new Scope ( parent, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope = new Scope (  compiler ) ;^62^^^^^59^73^scope = new Scope ( n, compiler ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope = new Scope ( n ) ;^62^^^^^59^73^scope = new Scope ( n, compiler ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope = compilerew Scope ( n, n ) ;^62^^^^^59^73^scope = new Scope ( n, compiler ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^scope =  nullew Scope ( null, compiler ) ;^62^^^^^59^73^scope = new Scope ( n, compiler ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scope = new Scope ( parent, n ) ;scope = new Scope ( n, compiler ) ;^62^^^^^59^73^scope = new Scope ( n, compiler ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanRoot ( n, scope ) ;^67^^^^^59^73^scanRoot ( n, parent ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanRoot (  parent ) ;^67^^^^^59^73^scanRoot ( n, parent ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanRoot ( n ) ;^67^^^^^59^73^scanRoot ( n, parent ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanRoot ( parent, n ) ;^67^^^^^59^73^scanRoot ( n, parent ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^createScope ( n, parent ) ;^67^^^^^59^73^scanRoot ( n, parent ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^createScope ( n, scope ) ;^67^^^^^59^73^scanRoot ( n, parent ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^67^^^^^59^73^scanRoot ( n, parent ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( n, null ) ;scanRoot ( n, parent ) ;^67^^^^^59^73^scanRoot ( n, parent ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^sourceName = false;^69^^^^^59^73^sourceName = null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scope = null;sourceName = null;^69^^^^^59^73^sourceName = null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Scope returnedScope = parent;^70^^^^^59^73^Scope returnedScope = scope;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^scope = false;^71^^^^^59^73^scope = null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^sourceName = null;scope = null;^71^^^^^59^73^scope = null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^return scope;^72^^^^^59^73^return returnedScope;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  n  String  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.FUNCTION )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.FUNCTION )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.FUNCTION )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( body.getType (  )  == Token.FUNCTION )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.0 )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( !(fnName.isEmpty()) && isFunctionAnonymous(n) )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( args.getType (  )  == LP )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( a != null )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( a.getType (  )  == NAME )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( scope.getParent (  )  == null )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.FUNCTION )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^Preconditions.checkState ( scope.getParent (  )  != null ) ;^102^^^^^76^104^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Preconditions.checkState ( returnedScope.getParent (  )  == null ) ;^102^^^^^76^104^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^Preconditions.checkState ( scope.isGlobal (  )  == null ) ;^102^^^^^76^104^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^102^103^^^^76^104^Preconditions.checkState ( scope.getParent (  )  == null ) ; scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;Preconditions.checkState ( scope.getParent (  )  == null ) ;^102^^^^^76^104^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;Preconditions.checkState ( scope.getParent (  )  == null ) ;^102^^^^^76^104^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;Preconditions.checkState ( scope.getParent (  )  == null ) ;^102^^^^^76^104^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;Preconditions.checkState ( scope.getParent (  )  == null ) ;^102^^^^^76^104^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;Preconditions.checkState ( scope.getParent (  )  == null ) ;^102^^^^^76^104^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( fnNameNode, null ) ;^103^^^^^76^104^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^scanRoot ( n, null ) ;^103^^^^^76^104^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^scanRoot ( fnNameNode, null ) ;^103^^^^^76^104^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^103^^^^^76^104^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanRoot ( n, parent ) ;scanVars ( n, null ) ;^103^^^^^76^104^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( block, n ) ;scanVars ( n, null ) ;^103^^^^^76^104^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( body, n ) ;scanVars ( n, null ) ;^103^^^^^76^104^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( child, n ) ;scanVars ( n, null ) ;^103^^^^^76^104^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^if  ( !fnName.isEmpty (  )  || NodeUtil.isFunctionAnonymous ( n )  )  {^86^^^^^75^105^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( body )  )  {^86^^^^^75^105^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( !fnName.isEmpty (  )  ) {^86^^^^^75^105^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  (  NodeUtil.isFunctionAnonymous ( n )  )  {^86^^^^^75^105^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^if  ( !fnName.isEmpty (  )  && NodeUtil.isControlStructure ( n )  )  {^86^^^^^75^105^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^if  ( !fnName.isEmpty (  )  && NodeUtil .isControlStructure ( fnNameNode )   )  {^86^^^^^75^105^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^if  ( !fnName.isEmpty (  )  && NodeUtil.isControlStructure ( body )  )  {^86^^^^^75^105^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P15_Unwrap_Block]^declareVar(fnName, fnNameNode, n, null, null, n);^86^87^88^^^75^105^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  { declareVar ( fnName, fnNameNode, n, null, null, n ) ; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P16_Remove_Block]^^86^87^88^^^75^105^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  { declareVar ( fnName, fnNameNode, n, null, null, n ) ; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P13_Insert_Block]^if  ( isFunctionAnonymous ( n )  )  {     return ; }^86^^^^^75^105^[Delete]^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( sourceName, fnNameNode, n, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( fnName, body, n, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( fnName, fnNameNode, body, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar (  fnNameNode, n, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( fnName,  n, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( fnName, fnNameNode,  null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( n, fnNameNode, fnName, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( fnName, n, fnNameNode, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( name, child, n, parent, null, n ) ;declareVar ( fnName, fnNameNode, n, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;declareVar ( fnName, fnNameNode, n, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( a.getString (  ) , a, args, n, null, n ) ;declareVar ( fnName, fnNameNode, n, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;declareVar ( fnName, fnNameNode, n, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^for  ( Node a = args.getFirstChild (  ) ; a == null;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^for  ( Node a = n.getFirstChild (  ) ; a != null;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^for  ( Node n = args.getFirstChild (  ) ; a != null;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^for  ( Node a = args.getFirstChild (  ) ; a != fnNameNodeull;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^for  ( Node a = n.getFirstChild (  ) ; a != argsull;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^for  ( Node n = args.getFirstChild (  ) ; a != aull;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^for  ( Node a = args .getString (  )  ; a != null;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^for  ( Node a = args .getString (  )  ; a != fnNameNodeull;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^Preconditions.checkState ( a.getType (  )  >= Token.NAME ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Preconditions.checkState ( fnNameNode.getType (  )  == Token.NAME ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^Preconditions.checkState ( a .getString (  )   == Token.NAME ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^Preconditions.checkState ( a.getType (  )  == Token.4 ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^a = a.getNext (  )  )  { Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( scope.getParent (  )  == null ) ;Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^Preconditions.checkState ( n .getString (  )   == Token.NAME ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^94^95^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ; declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( fnNameNode.getString (  ) , a, args, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( a.getString (  ) , a, n, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( a.getString (  ) , a, args, fnNameNode, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( a.getString (  ) ,  args, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( a.getString (  ) , a,  n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( a.getString (  ) , a, args,  null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( n.getString (  ) , a, args, a, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( args.getString (  ) , a, a, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( name, child, n, parent, null, n ) ;declareVar ( a.getString (  ) , a, args, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( fnName, fnNameNode, n, null, null, n ) ;declareVar ( a.getString (  ) , a, args, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;declareVar ( a.getString (  ) , a, args, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;declareVar ( a.getString (  ) , a, args, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^declareVar ( n.getString (  ) , a, args, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P1_Replace_Type]^sourceName =  ( char )  n.getProp ( Node.SOURCENAME_PROP ) ;^77^^^^^75^105^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^sourceName =  ( String )  body.getProp ( Node.SOURCENAME_PROP ) ;^77^^^^^75^105^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^sourceName =  ( String )  n .getString (  )  ;^77^^^^^75^105^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^sourceName =   ( Stribodyg )  body.getProp ( Node.SOURCENAME_PROP ) ;^77^^^^^75^105^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^a = n.getNext (  )  )  {^93^^^^^75^105^a = a.getNext (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^final Node fnNameNode = body.getFirstChild (  ) ;^79^^^^^75^105^final Node fnNameNode = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^final Node fnNameNode = body .getString (  )  ;^79^^^^^75^105^final Node fnNameNode = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^final Node args = n.getNext (  ) ;^80^^^^^75^105^final Node args = fnNameNode.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^final Node args = fnNameNode .getType (  )  ;^80^^^^^75^105^final Node args = fnNameNode.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Node next = child.getNext (  ) ;final Node args = fnNameNode.getNext (  ) ;^80^^^^^75^105^final Node args = fnNameNode.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node var = n.getFirstChild (  ) ;final Node args = fnNameNode.getNext (  ) ;^80^^^^^75^105^final Node args = fnNameNode.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node body = args.getNext (  ) ;final Node args = fnNameNode.getNext (  ) ;^80^^^^^75^105^final Node args = fnNameNode.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^String fnName = fnNameNode.getString (  ) ;final Node args = fnNameNode.getNext (  ) ;^80^^^^^75^105^final Node args = fnNameNode.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node fnNameNode = n.getFirstChild (  ) ;final Node args = fnNameNode.getNext (  ) ;^80^^^^^75^105^final Node args = fnNameNode.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node block = var.getNext (  ) .getNext (  ) ;final Node args = fnNameNode.getNext (  ) ;^80^^^^^75^105^final Node args = fnNameNode.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^final Node body = n.getNext (  ) ;^81^^^^^75^105^final Node body = args.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Node next = child.getNext (  ) ;final Node body = args.getNext (  ) ;^81^^^^^75^105^final Node body = args.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node var = n.getFirstChild (  ) ;final Node body = args.getNext (  ) ;^81^^^^^75^105^final Node body = args.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node fnNameNode = n.getFirstChild (  ) ;final Node body = args.getNext (  ) ;^81^^^^^75^105^final Node body = args.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node block = var.getNext (  ) .getNext (  ) ;final Node body = args.getNext (  ) ;^81^^^^^75^105^final Node body = args.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node args = fnNameNode.getNext (  ) ;final Node body = args.getNext (  ) ;^81^^^^^75^105^final Node body = args.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P1_Replace_Type]^char fnName = fnNameNode.getchar (  ) ;^85^^^^^75^105^String fnName = fnNameNode.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^String fnName = n.getString (  ) ;^85^^^^^75^105^String fnName = fnNameNode.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;String fnName = fnNameNode.getString (  ) ;^85^^^^^75^105^String fnName = fnNameNode.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^String fnName = n.getFirstChild (  ) .getString (  ) ;String fnName = fnNameNode.getString (  ) ;^85^^^^^75^105^String fnName = fnNameNode.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node fnNameNode = n.getFirstChild (  ) ;String fnName = fnNameNode.getString (  ) ;^85^^^^^75^105^String fnName = fnNameNode.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node args = fnNameNode.getNext (  ) ;String fnName = fnNameNode.getString (  ) ;^85^^^^^75^105^String fnName = fnNameNode.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^for  ( Node a = n .getString (  )  ; a != null;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^sourceName =  ( String )  fnNameNode.getProp ( Node.SOURCENAME_PROP ) ;^77^^^^^75^105^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^77^^^^^75^105^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^final Node fnNameNode = fnNameNode.getFirstChild (  ) ;^79^^^^^75^105^final Node fnNameNode = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^79^^^^^75^105^final Node fnNameNode = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^80^81^^^^75^105^final Node args = fnNameNode.getNext (  ) ; final Node body = args.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^final Node body = fnNameNode .getType (  )  ;^81^^^^^75^105^final Node body = args.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^81^^^^^75^105^final Node body = args.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^String fnName = n .getJSDocInfo (  )  ;^85^^^^^75^105^String fnName = fnNameNode.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^85^^^^^75^105^String fnName = fnNameNode.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( fnNameNode )  )  {^86^^^^^75^105^if  ( !fnName.isEmpty (  )  && NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( fnNameNode, fnName, n, null, null, n ) ;^87^^^^^75^105^declareVar ( fnName, fnNameNode, n, null, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^Preconditions.checkState ( args.getType (  )  != Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Preconditions.checkState ( fnNameNode.getType (  )  == Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^Preconditions.checkState ( args .getString (  )   == Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^Preconditions.checkState ( n.getType (  )  == Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^a = a.getNext (  )  )  { Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( scope.getParent (  )  == null ) ;Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^91^92^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ; for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^for  ( Node a = fnNameNode.getFirstChild (  ) ; a != null;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^92^93^94^95^96^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null; a = a.getNext (  )  )  { Preconditions.checkState ( a.getType (  )  == Token.NAME ) ; declareVar ( a.getString (  ) , a, args, n, null, n ) ; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^a = fnNameNode.getNext (  )  )  {^93^^^^^75^105^a = a.getNext (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^a = a .getType (  )   )  {^93^^^^^75^105^a = a.getNext (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^a = fnNameNode .getType (  )   )  {^93^^^^^75^105^a = a.getNext (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^93^94^^^^75^105^a = a.getNext (  )  )  { Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^Preconditions.checkState ( a.getType (  )  < Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^a = a.getNext (  )  )  { Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( scope.getParent (  )  == null ) ;Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Preconditions.checkState ( fnNameNode.getType (  )  == Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^Preconditions.checkState ( a .getString (  )   == Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^94^95^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ; declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( fnNameNode.getString (  ) , a, args, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( a.getString (  ) , a, n, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( a.getString (  ) , a, args, fnNameNode, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( a.getString (  ) ,  args, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( a.getString (  ) , a,  n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( a.getString (  ) , a, args,  null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( n.getString (  ) , a, args, a, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( args.getString (  ) , a, a, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^declareVar ( a .getJSDocInfo (  )  , a, args, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^declareVar ( a .getJSDocInfo (  )  , a, fnNameNode, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( name, child, n, parent, null, n ) ;declareVar ( a.getString (  ) , a, args, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( fnName, fnNameNode, n, null, null, n ) ;declareVar ( a.getString (  ) , a, args, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;declareVar ( a.getString (  ) , a, args, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;declareVar ( a.getString (  ) , a, args, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( fnNameNode, n ) ;^99^^^^^75^105^scanVars ( body, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( body, fnNameNode ) ;^99^^^^^75^105^scanVars ( body, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars (  n ) ;^99^^^^^75^105^scanVars ( body, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( body ) ;^99^^^^^75^105^scanVars ( body, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( n, body ) ;^99^^^^^75^105^scanVars ( body, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^scanRoot ( body, n ) ;^99^^^^^75^105^scanVars ( body, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^99^^^^^75^105^scanVars ( body, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( block, n ) ;scanVars ( body, n ) ;^99^^^^^75^105^scanVars ( body, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( n, null ) ;scanVars ( body, n ) ;^99^^^^^75^105^scanVars ( body, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( child, n ) ;scanVars ( body, n ) ;^99^^^^^75^105^scanVars ( body, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^for  ( Node args = a.getFirstChild (  ) ; a != null;^92^^^^^75^105^for  ( Node a = args.getFirstChild (  ) ; a != null;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^Preconditions.checkState ( a.getType (  )  != Token.NAME ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^94^^^^^92^96^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( a.getString (  ) , a, fnNameNode, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( a.getString (  ) , a, n, args, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^declareVar ( a .getJSDocInfo (  )  , a, args, n, null, n ) ;^95^^^^^92^96^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^sourceName =   ( StrifnNameNodeg )  fnNameNode.getProp ( Node.SOURCENAME_PROP ) ;^77^^^^^75^105^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^a =  null.getNext (  )  )  {^93^^^^^75^105^a = a.getNext (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^final Node body = args .getType (  )  ;^81^^^^^75^105^final Node body = args.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^String fnName = body.getString (  ) ;^85^^^^^75^105^String fnName = fnNameNode.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^String fnName = fnNameNode .getJSDocInfo (  )  ;^85^^^^^75^105^String fnName = fnNameNode.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( fnNameNode.getType (  )  == Token.FUNCTION )  {^76^^^^^75^105^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^79^80^^^^75^105^final Node fnNameNode = n.getFirstChild (  ) ; final Node args = fnNameNode.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^80^^^^^75^105^final Node args = fnNameNode.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^final Node body = fnNameNode.getNext (  ) ;^81^^^^^75^105^final Node body = args.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^Preconditions.checkState ( args.getType (  )  > Token.LP ) ;^91^^^^^75^105^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^Preconditions.checkState ( a.getType (  )  >= Token.NAME ) ;^94^^^^^75^105^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( n.getString (  ) , a, args, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( a.getString (  ) , a, fnNameNode, n, null, n ) ;^95^^^^^75^105^declareVar ( a.getString (  ) , a, args, n, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^Preconditions.checkState ( scope.getParent (  )  != null ) ;^102^^^^^75^105^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^Preconditions.checkState ( scope.isGlobal (  )  == null ) ;^102^^^^^75^105^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^Preconditions.checkState ( returnedScope.getParent (  )  == null ) ;^102^^^^^75^105^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^102^103^^^^75^105^Preconditions.checkState ( scope.getParent (  )  == null ) ; scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;Preconditions.checkState ( scope.getParent (  )  == null ) ;^102^^^^^75^105^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;Preconditions.checkState ( scope.getParent (  )  == null ) ;^102^^^^^75^105^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;Preconditions.checkState ( scope.getParent (  )  == null ) ;^102^^^^^75^105^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;Preconditions.checkState ( scope.getParent (  )  == null ) ;^102^^^^^75^105^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;Preconditions.checkState ( scope.getParent (  )  == null ) ;^102^^^^^75^105^Preconditions.checkState ( scope.getParent (  )  == null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( fnNameNode, null ) ;^103^^^^^75^105^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^scanRoot ( n, null ) ;^103^^^^^75^105^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^103^^^^^75^105^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanRoot ( n, parent ) ;scanVars ( n, null ) ;^103^^^^^75^105^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( block, n ) ;scanVars ( n, null ) ;^103^^^^^75^105^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( body, n ) ;scanVars ( n, null ) ;^103^^^^^75^105^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( child, n ) ;scanVars ( n, null ) ;^103^^^^^75^105^scanVars ( n, null ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanRoot [RETURN_TYPE] void   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  a  args  body  fnNameNode  n  String  fnName  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( NodeUtil.isFunctionAnonymous ( var )  )  {^126^^^^^111^141^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^if  ( NodeUtil.isControlStructure ( n )  )  {^126^^^^^111^141^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^if  ( NodeUtil .isControlStructure ( next )   )  {^126^^^^^111^141^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^if  ( NodeUtil.isFunctionAnonymous ( parent )  )  {^126^^^^^111^141^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P15_Unwrap_Block]^return ;^126^127^128^^^111^141^if  ( NodeUtil.isFunctionAnonymous ( n )  )  { return; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P16_Remove_Block]^^126^127^128^^^111^141^if  ( NodeUtil.isFunctionAnonymous ( n )  )  { return; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P13_Insert_Block]^if  (  ( ! ( fnName.isEmpty (  )  )  )  &&  ( isFunctionAnonymous ( n )  )  )  {     declareVar ( fnName, fnNameNode, n, null, null, n ) ; }^126^^^^^111^141^[Delete]^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( sourceName.isEmpty (  )  )  {^131^^^^^116^146^if  ( fnName.isEmpty (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P15_Unwrap_Block]^return ;^131^132^133^134^^116^146^if  ( fnName.isEmpty (  )  )  {  return; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P16_Remove_Block]^^131^132^133^134^^116^146^if  ( fnName.isEmpty (  )  )  {  return; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^for  ( Node child = var.getFirstChild (  ) ;^114^^^^^99^129^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^for  ( Node var = n.getFirstChild (  ) ;^114^^^^^99^129^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^for  ( Node parent = n.getFirstChild (  ) ;^114^^^^^99^129^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^child = var;^121^^^^^114^122^child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^child =  null;^121^^^^^114^122^child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^Node next = var .getType (  )  ;^116^^^^^114^122^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;Node next = child.getNext (  ) ;^116^^^^^114^122^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node body = args.getNext (  ) ;Node next = child.getNext (  ) ;^116^^^^^114^122^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node args = fnNameNode.getNext (  ) ;Node next = child.getNext (  ) ;^116^^^^^114^122^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Node origParent = origVar.getParentNode (  ) ;Node next = child.getNext (  ) ;^116^^^^^114^122^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P1_Replace_Type]^char name = child.getchar (  ) ;^119^^^^^114^122^String name = child.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^String name = var.getString (  ) ;^119^^^^^114^122^String name = child.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^String name = child .getJSDocInfo (  )  ;^119^^^^^114^122^String name = child.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^String name = parent.getString (  ) ;^119^^^^^114^122^String name = child.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Node next = var.getNext (  ) ;^116^^^^^114^122^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^Node next = parent .getType (  )  ;^116^^^^^114^122^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^116^117^^^^114^122^Node next = child.getNext (  ) ; Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^Preconditions.checkState ( child.getType (  )  >= Token.NAME ) ;^117^^^^^114^122^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Preconditions.checkState ( parent.getType (  )  == Token.NAME ) ;^117^^^^^114^122^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^Preconditions.checkState ( var.getType (  )  == Token.NAME ) ;^117^^^^^114^122^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^117^^^^^114^122^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^117^^^^^114^122^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^117^^^^^114^122^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^a = a.getNext (  )  )  { Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^117^^^^^114^122^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^117^^^^^114^122^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^117^^^^^114^122^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( scope.getParent (  )  == null ) ;Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^117^^^^^114^122^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^119^120^^^^114^122^String name = child.getString (  ) ; declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( name, var, n, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( varame, child, n, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( name, child, n, var, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar (  child, n, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( name,  n, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( name, child,  parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( name, child, n,  null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( child, name, n, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( name, parent, n, child, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( childame, n, n, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( parent, child, n, name, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^120^121^^^^114^122^declareVar ( name, child, n, parent, null, n ) ; child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( fnName, fnNameNode, n, null, null, n ) ;declareVar ( name, child, n, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;declareVar ( name, child, n, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( a.getString (  ) , a, args, n, null, n ) ;declareVar ( name, child, n, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;declareVar ( name, child, n, parent, null, n ) ;^120^^^^^114^122^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^child = var;^121^^^^^106^136^child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P1_Replace_Type]^sourceName =  ( char )  n.getProp ( Node.SOURCENAME_PROP ) ;^152^^^^^137^167^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^sourceName =  ( String )  n .getString (  )  ;^152^^^^^137^167^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^sourceName =   ( Strivarg )  var.getProp ( Node.SOURCENAME_PROP ) ;^152^^^^^137^167^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^for  ( Node child = n .getString (  )  ;^114^^^^^99^129^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^for  ( Node child = var .getString (  )  ;^114^^^^^99^129^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Node next = var.getNext (  ) ;^116^^^^^101^131^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;Node next = child.getNext (  ) ;^116^^^^^101^131^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node body = args.getNext (  ) ;Node next = child.getNext (  ) ;^116^^^^^101^131^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node args = fnNameNode.getNext (  ) ;Node next = child.getNext (  ) ;^116^^^^^101^131^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Node origParent = origVar.getParentNode (  ) ;Node next = child.getNext (  ) ;^116^^^^^101^131^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P1_Replace_Type]^char name = child.getchar (  ) ;^119^^^^^104^134^String name = child.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^String name = parent.getString (  ) ;^119^^^^^104^134^String name = child.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^String name = var.getString (  ) ;^119^^^^^104^134^String name = child.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P1_Replace_Type]^char fnName = n.getFirstChild (  ) .getchar (  ) ;^130^^^^^115^145^String fnName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^String fnName = var.getFirstChild (  ) .getString (  ) ;^130^^^^^115^145^String fnName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^String fnName = n.getFirstChild (  ) .contains (  ) ;^130^^^^^115^145^String fnName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^String fnName = n.getFirstChild (  )  .getJSDocInfo (  )  ;^130^^^^^115^145^String fnName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^String fnName = n .getString (  )  .getString (  ) ;^130^^^^^115^145^String fnName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^String fnName = var.getFirstChild (  ) .contains (  ) ;^130^^^^^115^145^String fnName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;String fnName = n.getFirstChild (  ) .getString (  ) ;^130^^^^^115^145^String fnName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^String fnName = fnNameNode.getString (  ) ;String fnName = n.getFirstChild (  ) .getString (  ) ;^130^^^^^115^145^String fnName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^final Node var = parent.getFirstChild (  ) ;^144^^^^^129^159^final Node var = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^final Node block = parent.getNext (  ) .getNext (  ) ;^145^^^^^130^160^final Node block = var.getNext (  ) .getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^final Node block = var.contains (  ) .getNext (  ) ;^145^^^^^130^160^final Node block = var.getNext (  ) .getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^final Node block = parent.contains (  ) .getNext (  ) ;^145^^^^^130^160^final Node block = var.getNext (  ) .getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node body = args.getNext (  ) ;final Node block = var.getNext (  ) .getNext (  ) ;^145^^^^^130^160^final Node block = var.getNext (  ) .getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node args = fnNameNode.getNext (  ) ;final Node block = var.getNext (  ) .getNext (  ) ;^145^^^^^130^160^final Node block = var.getNext (  ) .getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^switch  ( var.getType (  )  )  {^111^^^^^96^126^switch  ( n.getType (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^switch  ( parent.getType (  )  )  {^111^^^^^96^126^switch  ( n.getType (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^Node next = child .getType (  )  ;^116^^^^^101^131^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^116^^^^^101^131^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^Preconditions.checkState ( child.getType (  )  != Token.NAME ) ;^117^^^^^102^132^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Preconditions.checkState ( var.getType (  )  == Token.NAME ) ;^117^^^^^102^132^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^Preconditions.checkState ( parent .getString (  )   == Token.NAME ) ;^117^^^^^102^132^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^117^^^^^102^132^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^117^^^^^102^132^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^117^^^^^102^132^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^a = a.getNext (  )  )  { Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^117^^^^^102^132^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^117^^^^^102^132^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^117^^^^^102^132^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( scope.getParent (  )  == null ) ;Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^117^^^^^102^132^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Preconditions.checkState ( parent.getType (  )  == Token.NAME ) ;^117^^^^^102^132^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^Preconditions.checkState ( child .getString (  )   == Token.NAME ) ;^117^^^^^102^132^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^String name = child .getJSDocInfo (  )  ;^119^^^^^104^134^String name = child.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^119^^^^^104^134^String name = child.getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( sourceName, child, n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( name, var, n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( varame, child, n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( name, child, n, var, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar (  child, n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( name,  n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( name, child,  parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( name, child, n,  null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( parent, child, n, name, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( name, parent, n, child, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( childame, n, n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^120^121^^^^105^135^declareVar ( name, child, n, parent, null, n ) ; child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( fnName, fnNameNode, n, null, null, n ) ;declareVar ( name, child, n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;declareVar ( name, child, n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( a.getString (  ) , a, args, n, null, n ) ;declareVar ( name, child, n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;declareVar ( name, child, n, parent, null, n ) ;^120^^^^^105^135^declareVar ( name, child, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^if  ( NodeUtil.isControlStructure ( parent )  )  {^126^^^^^111^141^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P13_Insert_Block]^if  ( isFunctionAnonymous ( n )  )  {     return ; }^126^^^^^111^141^[Delete]^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^130^^^^^115^145^String fnName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;String fnName = n.getFirstChild (  ) .getString (  ) ;^130^^^^^115^145^String fnName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( sourceName, n.getFirstChild (  ) , n, parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( fnName, var.getFirstChild (  ) , n, parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( fnName, n.getFirstChild (  ) , n, var, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar (  n.getFirstChild (  ) , n, parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( fnName, n.getFirstChild (  ) ,  parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( fnName, n.getFirstChild (  ) , n,  null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( n, fnName.getFirstChild (  ) , n, parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( fnName, parent.getFirstChild (  ) , n, n, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^declareVar ( fnName, n .getString (  )  , n, parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^135^136^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ; return;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( name, child, n, parent, null, n ) ;declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( fnName, fnNameNode, n, null, null, n ) ;declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( a.getString (  ) , a, args, n, null, n ) ;declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^String fnName = n.getFirstChild (  ) .getString (  ) ;declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^declareVar ( fnName, parent.getFirstChild (  ) , n, parent, null, n ) ;^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^135^^^^^120^150^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^Preconditions.checkState ( n.getChildCount (  )  >= 3 ) ;^139^^^^^124^154^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P3_Replace_Literal]^Preconditions.checkState ( n.getChildCount (  )  == 1 ) ;^139^^^^^124^154^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Preconditions.checkState ( var.getChildCount (  )  == 3 ) ;^139^^^^^124^154^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^Preconditions.checkState ( parent.getChildCount (  )  == 3 ) ;^139^^^^^124^154^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^139^^^^^124^154^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^139^^^^^124^154^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^139^^^^^124^154^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^139^^^^^124^154^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^139^^^^^124^154^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( scope.getParent (  )  == null ) ;Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^139^^^^^124^154^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^Preconditions.checkState ( n .getProp (  )   == 3 ) ;^139^^^^^124^154^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  != Token.NAME ) ;^140^^^^^125^155^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Preconditions.checkState ( var.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^140^^^^^125^155^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^Preconditions.checkState ( n.getFirstChild (  ) .contains (  )  == Token.NAME ) ;^140^^^^^125^155^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^Preconditions.checkState ( var.getFirstChild (  ) .contains (  )  == Token.NAME ) ;^140^^^^^125^155^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^140^^^^^125^155^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( args.getType (  )  == Token.LP ) ;Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^140^^^^^125^155^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^140^^^^^125^155^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( a.getType (  )  == Token.NAME ) ;Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^140^^^^^125^155^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child.getType (  )  == Token.NAME ) ;Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^140^^^^^125^155^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( scope.getParent (  )  == null ) ;Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^140^^^^^125^155^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^Preconditions.checkState ( parent.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^140^^^^^125^155^Preconditions.checkState ( n.getFirstChild (  ) .getType (  )  == Token.NAME ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^144^^^^^129^159^final Node var = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^final Node block = next.contains (  ) .getNext (  ) ;^145^^^^^130^160^final Node block = var.getNext (  ) .getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^145^^^^^130^160^final Node block = var.getNext (  ) .getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^final Node block = next.getNext (  ) .getNext (  ) ;^145^^^^^130^160^final Node block = var.getNext (  ) .getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( parent.getString (  ) , var, n, parent, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( var.getString (  ) , var, parent, parent, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( var.getString (  ) , var, n, next, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( var.getString (  ) ,  n, parent, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( var.getString (  ) , var,  parent, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( var.getString (  ) , var, n,  null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( n.getString (  ) , var, var, parent, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^declareVar ( parent.getString (  ) , var, n, var, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^declareVar ( var .getJSDocInfo (  )  , var, n, parent, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^147^148^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ; scanVars ( block, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( name, child, n, parent, null, n ) ;declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( fnName, fnNameNode, n, null, null, n ) ;declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( fnName, n.getFirstChild (  ) , n, parent, null, n ) ;declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^declareVar ( a.getString (  ) , a, args, n, null, n ) ;declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^147^^^^^132^162^declareVar ( var.getString (  ) , var, n, parent, null, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( var, n ) ;^148^^^^^133^163^scanVars ( block, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( block, var ) ;^148^^^^^133^163^scanVars ( block, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars (  n ) ;^148^^^^^133^163^scanVars ( block, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( block ) ;^148^^^^^133^163^scanVars ( block, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( n, block ) ;^148^^^^^133^163^scanVars ( block, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^scanRoot ( block, n ) ;^148^^^^^133^163^scanVars ( block, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^148^149^^^^133^163^scanVars ( block, n ) ; return;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( n, null ) ;scanVars ( block, n ) ;^148^^^^^133^163^scanVars ( block, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( body, n ) ;scanVars ( block, n ) ;^148^^^^^133^163^scanVars ( block, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( child, n ) ;scanVars ( block, n ) ;^148^^^^^133^163^scanVars ( block, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^sourceName =  ( String )  parent.getProp ( Node.SOURCENAME_PROP ) ;^152^^^^^137^167^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^sourceName =  ( String )  var.getProp ( Node.SOURCENAME_PROP ) ;^152^^^^^137^167^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^152^^^^^137^167^sourceName =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^if  ( NodeUtil.isControlStructure ( n )  && NodeUtil.isStatementBlock ( n )  )  {^158^^^^^143^173^if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isStatementBlock ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( NodeUtil.isControlStructure ( var )  || NodeUtil.isStatementBlock ( n )  )  {^158^^^^^143^173^if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isStatementBlock ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( NodeUtil.isControlStructure ( n )  ) {^158^^^^^143^173^if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isStatementBlock ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  (  NodeUtil.isStatementBlock ( n )  )  {^158^^^^^143^173^if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isStatementBlock ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( child != null )  {^158^^^^^143^173^if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isStatementBlock ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunctionAnonymous ( n )  || NodeUtil.isStatementBlock ( n )  )  {^158^^^^^143^173^if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isStatementBlock ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isFunctionAnonymous ( n )  )  {^158^^^^^143^173^if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isStatementBlock ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^for  ( Node child = var.getFirstChild (  ) ;^159^^^^^144^174^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^for  ( Node var = n.getFirstChild (  ) ;^159^^^^^144^174^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^for  ( Node n = child.getFirstChild (  ) ;^159^^^^^144^174^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^for  ( Node child = n .getString (  )  ;^159^^^^^144^174^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^for  ( Node parent = n.getFirstChild (  ) ;^159^^^^^144^174^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P13_Insert_Block]^if  (  ( isControlStructure ( n )  )  ||  ( isStatementBlock ( n )  )  )  {     for  ( Node child = n.getFirstChild (  ) ; child != null; )  {         Node next = child.getNext (  ) ;         scanVars ( child, n ) ;         child = next;     } }^159^^^^^144^174^[Delete]^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^child = var;^163^^^^^159^164^child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^child =  null;^163^^^^^159^164^child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Node next = var.getNext (  ) ;^161^^^^^159^164^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^Node next = child .getType (  )  ;^161^^^^^159^164^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;Node next = child.getNext (  ) ;^161^^^^^159^164^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node body = args.getNext (  ) ;Node next = child.getNext (  ) ;^161^^^^^159^164^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node args = fnNameNode.getNext (  ) ;Node next = child.getNext (  ) ;^161^^^^^159^164^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Node origParent = origVar.getParentNode (  ) ;Node next = child.getNext (  ) ;^161^^^^^159^164^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^Node next = parent.getNext (  ) ;^161^^^^^159^164^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^161^162^^^^159^164^Node next = child.getNext (  ) ; scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( child, var ) ;^162^^^^^159^164^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars (  n ) ;^162^^^^^159^164^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( child ) ;^162^^^^^159^164^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( n, child ) ;^162^^^^^159^164^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^scanRoot ( child, n ) ;^162^^^^^159^164^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^scanRoot ( var, n ) ;^162^^^^^159^164^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^162^^^^^159^164^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( block, n ) ;scanVars ( child, n ) ;^162^^^^^159^164^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( n, null ) ;scanVars ( child, n ) ;^162^^^^^159^164^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( body, n ) ;scanVars ( child, n ) ;^162^^^^^159^164^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^child = var;^163^^^^^148^178^child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^child =  null;^163^^^^^148^178^child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Node next = var.getNext (  ) ;^161^^^^^146^176^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^Node next = child .getType (  )  ;^161^^^^^146^176^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;Node next = child.getNext (  ) ;^161^^^^^146^176^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node body = args.getNext (  ) ;Node next = child.getNext (  ) ;^161^^^^^146^176^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^final Node args = fnNameNode.getNext (  ) ;Node next = child.getNext (  ) ;^161^^^^^146^176^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Node origParent = origVar.getParentNode (  ) ;Node next = child.getNext (  ) ;^161^^^^^146^176^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^for  ( Node child = parent.getFirstChild (  ) ;^159^^^^^144^174^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^159^160^161^162^163^144^174^for  ( Node child = n.getFirstChild (  ) ; child != null; )  { Node next = child.getNext (  ) ; scanVars ( child, n ) ; child = next; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^161^162^^^^146^176^Node next = child.getNext (  ) ; scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( var, n ) ;^162^^^^^147^177^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( child, var ) ;^162^^^^^147^177^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars (  n ) ;^162^^^^^147^177^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( child ) ;^162^^^^^147^177^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( n, child ) ;^162^^^^^147^177^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^scanRoot ( child, n ) ;^162^^^^^147^177^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^162^^^^^147^177^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( block, n ) ;scanVars ( child, n ) ;^162^^^^^147^177^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( n, null ) ;scanVars ( child, n ) ;^162^^^^^147^177^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^scanVars ( body, n ) ;scanVars ( child, n ) ;^162^^^^^147^177^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^Node next = var .getType (  )  ;^161^^^^^159^164^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^161^^^^^159^164^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scanVars ( var, n ) ;^162^^^^^159^164^scanVars ( child, n ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^for  ( Node child = var .getString (  )  ;^159^^^^^144^174^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionAnonymous ( var )   || NodeUtil.isStatementBlock ( n )  )  {^158^^^^^143^173^if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isStatementBlock ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P13_Insert_Block]^if  ( isFunctionAnonymous ( n )  )  {     return ; }^158^^^^^143^173^[Delete]^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( NodeUtil.isControlStructure ( parent )  || NodeUtil.isStatementBlock ( n )  )  {^158^^^^^143^173^if  ( NodeUtil.isControlStructure ( n )  || NodeUtil.isStatementBlock ( n )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Node next = parent.getNext (  ) ;^161^^^^^146^176^Node next = child.getNext (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^162^163^^^^147^177^scanVars ( child, n ) ; child = next;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] scanVars [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  Scope  parent  returnedScope  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  block  child  n  next  parent  var  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( origParent.getType (  )  == CATCH )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CATCH )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( info == null )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( info != null && contains("duplicate") )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( info != null )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( origVar.input != null )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^if  ( scope.getParent (  )  )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^if  ( scope .isDeclared ( name , allowDupe )   )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^if  ( origParent.getType (  )  == Token.CATCH || parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^if  ( origParent.getType (  )  >= Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^if  ( origParent.getType (  )  > Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( nodeWithLineNumber.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.CATCH && origParent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( origParent.getType (  )  == Token.CATCH ) {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  (  parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( origParent.getType (  )  == CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P15_Unwrap_Block]^return ;^188^189^^191^192^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  { return; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P16_Remove_Block]^^188^189^^191^192^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  { return; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^if  ( info != null )  {^196^^^^^183^212^if  ( info == null )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^if  ( info == this )  {^196^^^^^183^212^if  ( info == null )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P9_Replace_Statement]^if  ( parent == null )  {^196^^^^^183^212^if  ( info == null )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P15_Unwrap_Block]^info = parent.getJSDocInfo();^196^197^198^^^183^212^if  ( info == null )  { info = parent.getJSDocInfo (  ) ; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P16_Remove_Block]^^196^197^198^^^183^212^if  ( info == null )  { info = parent.getJSDocInfo (  ) ; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^info = nodeWithLineNumber.getJSDocInfo (  ) ;^197^^^^^183^212^info = parent.getJSDocInfo (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P13_Insert_Block]^if  ( info == null )  {     info = parent.getJSDocInfo (  ) ; }^197^^^^^183^212^[Delete]^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^info = origParent.getJSDocInfo (  ) ;^197^^^^^183^212^info = parent.getJSDocInfo (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^info = parent .getString (  )  ;^197^^^^^183^212^info = parent.getJSDocInfo (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^197^^^^^183^212^info = parent.getJSDocInfo (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^JSDocInfo info = n.getJSDocInfo (  ) ;info = parent.getJSDocInfo (  ) ;^197^^^^^183^212^info = parent.getJSDocInfo (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^if  ( allowDupe )  {^202^^^^^183^212^if  ( !allowDupe )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^compiler.report ( JSError.make ( sourceName,  VAR_MULTIPLY_DECLARED_ERROR, name,^203^204^205^206^^183^212^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR,^203^204^205^206^^183^212^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^compiler.report ( JSError.make (  nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^203^204^205^206^^183^212^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber,  name,^203^204^205^206^^183^212^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^compiler .getInput ( fnName )  ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^203^204^205^206^^183^212^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P13_Insert_Block]^if  ( !allowDupe )  {     compiler.report ( make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,  (  ( origVar.input )  != null ? getName (  )  : "??" )  )  ) ; }^203^^^^^183^212^[Delete]^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input == null^204^205^206^207^^183^212^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^JSError.make ( sourceName,  VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^204^205^206^207^^183^212^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR,  ( origVar.input != null^204^205^206^207^^183^212^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^JSError.make (  nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^204^205^206^207^^183^212^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^JSError.make ( sourceName, nodeWithLineNumber,  name, ( origVar.input != null^204^205^206^207^^183^212^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^208^209^^^^183^212^? origVar.input.getName (  ) : "??" )  )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^allowDupe = info != null || info.getSuppressions (  ) .contains ( "duplicate" ) ;^199^200^^^^183^212^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^allowDupe = info == null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^199^200^^^^183^212^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P3_Replace_Literal]^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicateplic" ) ;^199^200^^^^183^212^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^allowDupe = info != false && info.getSuppressions (  ) .contains ( "duplicate" ) ;^199^200^^^^183^212^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Scope.Var origVar = scope.getVar ( sourceName ) ;^186^^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Scope.Var origVar = s.getVar ( name ) ;^186^^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^Scope.Var origVar = name.getVar ( scope ) ;^186^^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^Scope.Var origVar = scope .getParent (  )  ;^186^^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^Node next = child.getNext (  ) ;Node origParent = origVar.getParentNode (  ) ;^187^^^^^183^212^Node origParent = origVar.getParentNode (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P3_Replace_Literal]^boolean allowDupe = true;^194^^^^^183^212^boolean allowDupe = false;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^JSDocInfo info = parent.getJSDocInfo (  ) ;^195^^^^^183^212^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^JSDocInfo info = n .getString (  )  ;^195^^^^^183^212^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^186^^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^187^^^^^183^212^Node origParent = origVar.getParentNode (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^parent .getString (  )   == Token.CATCH )  {^189^^^^^183^212^parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^189^190^191^^^183^212^parent.getType (  )  == Token.CATCH )  {  return;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^195^^^^^183^212^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P11_Insert_Donor_Statement]^info = parent.getJSDocInfo (  ) ;JSDocInfo info = n.getJSDocInfo (  ) ;^195^^^^^183^212^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P3_Replace_Literal]^info != null && info.getSuppressions (  ) .contains ( "ic" ) ;^200^^^^^183^212^info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^info != null && info.getSuppressions (  )  .getString (  )  ;^200^^^^^183^212^info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^200^^^^^183^212^info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P2_Replace_Operator]^if  ( origParent.getType (  )  <= Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( origParent.getType (  )  == Token.CATCH && nodeWithLineNumber.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^if  ( origParent .getString (  )   == Token.CATCH && parent^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^compiler .getInput ( sourceName )  ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^203^204^205^206^^183^212^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^allowDupe = info != null && info.getSuppressions (  )  .getString (  )  ;^199^200^^^^183^212^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( s.isGlobal (  )  )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^if  ( s.getParent (  )  )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^186^187^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ; Node origParent = origVar.getParentNode (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^JSDocInfo info = origParent.getJSDocInfo (  ) ;^195^^^^^183^212^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P3_Replace_Literal]^info != null && info.getSuppressions (  ) .contains ( "lic" ) ;^200^^^^^183^212^info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^compiler .getInput ( name )  ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^203^204^205^206^^183^212^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  boolean  allowDupe  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  fnName  name  sourceName  JSDocInfo  info  RedeclarationHandler  redeclarationHandler  
[P3_Replace_Literal]^if  ( scope.isDeclared ( name, true )  )  {^229^^^^^226^235^if  ( scope.isDeclared ( name, false )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( scope.isDeclared ( fnName, false )  )  {^229^^^^^226^235^if  ( scope.isDeclared ( name, false )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( s.isDeclared ( name, false )  )  {^229^^^^^226^235^if  ( scope.isDeclared ( name, false )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( scope.isDeclared (  false )  )  {^229^^^^^226^235^if  ( scope.isDeclared ( name, false )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^if  ( scope .declare ( fnName , gramps , declaredType )   )  {^229^^^^^226^235^if  ( scope.isDeclared ( name, false )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P15_Unwrap_Block]^redeclarationHandler.onRedeclaration(scope, name, n, parent, gramps, nodeWithLineNumber);^229^230^231^232^233^226^235^if  ( scope.isDeclared ( name, false )  )  { redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ; } else { scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P16_Remove_Block]^^229^230^231^232^233^226^235^if  ( scope.isDeclared ( name, false )  )  { redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ; } else { scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ; }^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope.declare ( fnName, n, declaredType, compiler.getInput ( sourceName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope.declare ( parentame, n, declaredType, compiler.getInput ( sourceName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope.declare ( name, n, declaredType, compiler.getInput ( fnName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope.declare (  n, declaredType, compiler.getInput ( sourceName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope.declare ( name,  declaredType, compiler.getInput ( sourceName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope.declare ( name, n,  compiler.getInput ( sourceName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope.declare ( name, n, declaredType.getInput ( sourceName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope.declare ( sourceName, n, declaredType, compiler.getInput ( name )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope.declare ( declaredTypeame, n, n, compiler.getInput ( sourceName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope.declare ( compiler, n, declaredType, name.getInput ( sourceName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^scope.declare ( name, n, declaredType, compiler.report ( sourceName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope.declare ( name, n, declaredType, compiler.getInput ( name )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope.declare ( name, n, declaredType, sourceName.getInput ( compiler )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope, sourceName, n, parent, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope, parentame, n, parent, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope, name, n, nodeWithLineNumber, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope, name, n, parent, parent, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, parent ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( s, name, n, parent, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope,  n, parent, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope, name,  parent, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope, name, n,  gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope, name, n, parent,  nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration (  name, n, parent, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( name, scope, n, parent, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope, nameame, n, parent, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope, name, n, gramps, parent, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope, name, n, parent, nodeWithLineNumber, gramps ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope, name, n, nodeWithLineNumber, gramps, parent ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( gramps, name, n, parent, scope, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^redeclarationHandler .DefaultRedeclarationHandler (  )  ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P8_Replace_Mix]^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, n ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P14_Delete_Statement]^^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( scope.isDeclared ( sourceName, false )  )  {^229^^^^^226^235^if  ( scope.isDeclared ( name, false )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^if  ( name.isDeclared ( scope, false )  )  {^229^^^^^226^235^if  ( scope.isDeclared ( name, false )  )  {^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( scope, grampsame, n, parent, n, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^redeclarationHandler.onRedeclaration ( parent, name, n, scope, gramps, nodeWithLineNumber ) ;^230^231^^^^226^235^redeclarationHandler.onRedeclaration ( scope, name, n, parent, gramps, nodeWithLineNumber ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P5_Replace_Variable]^scope.declare ( compilerame, n, declaredType, n.getInput ( sourceName )  ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P7_Replace_Invocation]^scope.declare ( name, n, declaredType, compiler .report (  )   ) ;^233^^^^^226^235^scope.declare ( name, n, declaredType, compiler.getInput ( sourceName )  ) ;^[CLASS] SyntacticScopeCreator DefaultRedeclarationHandler  [METHOD] declareVar [RETURN_TYPE] void   String name Node n Node parent Node gramps JSType declaredType Node nodeWithLineNumber [VARIABLES] AbstractCompiler  compiler  JSType  declaredType  boolean  Scope  parent  returnedScope  s  scope  DiagnosticType  VAR_MULTIPLY_DECLARED_ERROR  Node  gramps  n  nodeWithLineNumber  parent  String  fnName  name  sourceName  RedeclarationHandler  redeclarationHandler  
[P6_Replace_Expression]^if  ( origParent.getType (  )  == CATCH )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CATCH )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info == null )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null && contains("duplicate") )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( origVar.input != null )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( scope .getVar ( name )   )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^if  ( origParent.getType (  )  == Token.CATCH || parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^if  ( origParent.getType (  )  != Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^if  ( origParent.getType (  )  <= Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^if  ( nodeWithLineNumber.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^if  ( origParent.getType (  )  == Token.CATCH && origParent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.CATCH && origParent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( origParent.getType (  )  == Token.CATCH ) {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  (  parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( origParent.getType (  )  == CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P15_Unwrap_Block]^return ;^188^189^^191^192^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  { return; }^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P16_Remove_Block]^^188^189^^191^192^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  { return; }^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^if  ( info != null )  {^196^^^^^183^212^if  ( info == null )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^if  ( info == true )  {^196^^^^^183^212^if  ( info == null )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P15_Unwrap_Block]^info = parent.getJSDocInfo();^196^197^198^^^183^212^if  ( info == null )  { info = parent.getJSDocInfo (  ) ; }^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P16_Remove_Block]^^196^197^198^^^183^212^if  ( info == null )  { info = parent.getJSDocInfo (  ) ; }^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^info = origParent.getJSDocInfo (  ) ;^197^^^^^183^212^info = parent.getJSDocInfo (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^info = parent .getType (  )  ;^197^^^^^183^212^info = parent.getJSDocInfo (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P13_Insert_Block]^if  ( info == null )  {     info = parent.getJSDocInfo (  ) ; }^197^^^^^183^212^[Delete]^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^197^^^^^183^212^info = parent.getJSDocInfo (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P11_Insert_Donor_Statement]^JSDocInfo info = n.getJSDocInfo (  ) ;info = parent.getJSDocInfo (  ) ;^197^^^^^183^212^info = parent.getJSDocInfo (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^if  ( allowDupe )  {^202^^^^^183^212^if  ( !allowDupe )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^compiler.report ( JSError.make ( sourceName,  VAR_MULTIPLY_DECLARED_ERROR, name,^203^204^205^206^^183^212^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR,^203^204^205^206^^183^212^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^compiler.report ( JSError.make (  nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^203^204^205^206^^183^212^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber,  name,^203^204^205^206^^183^212^compiler.report ( JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P13_Insert_Block]^if  ( !allowDupe )  {     compiler.report ( make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name,  (  ( origVar.input )  != null ? getName (  )  : "??" )  )  ) ; }^203^^^^^183^212^[Delete]^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input == null^204^205^206^207^^183^212^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^JSError.make ( sourceName,  VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^204^205^206^207^^183^212^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR,  ( origVar.input != null^204^205^206^207^^183^212^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^JSError.make (  nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^204^205^206^207^^183^212^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^JSError.make ( sourceName, nodeWithLineNumber,  name, ( origVar.input != null^204^205^206^207^^183^212^JSError.make ( sourceName, nodeWithLineNumber, VAR_MULTIPLY_DECLARED_ERROR, name, ( origVar.input != null^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^208^209^^^^183^212^? origVar.input.getName (  ) : "??" )  )  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^allowDupe = info != null || info.getSuppressions (  ) .contains ( "duplicate" ) ;^199^200^^^^183^212^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^allowDupe = info == null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^199^200^^^^183^212^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^allowDupe = info != null && info.getSuppressions (  ) .contains ( "upl" ) ;^199^200^^^^183^212^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^allowDupe = info != true && info.getSuppressions (  ) .contains ( "duplicate" ) ;^199^200^^^^183^212^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^Scope.Var origVar = s.getVar ( name ) ;^186^^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^Scope.Var origVar = name.getVar ( scope ) ;^186^^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^Scope.Var origVar = scope .isGlobal (  )  ;^186^^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^boolean allowDupe = true;^194^^^^^183^212^boolean allowDupe = false;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^JSDocInfo info = parent.getJSDocInfo (  ) ;^195^^^^^183^212^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^186^^^^^183^212^Scope.Var origVar = scope.getVar ( name ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^187^^^^^183^212^Node origParent = origVar.getParentNode (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^189^190^191^^^183^212^parent.getType (  )  == Token.CATCH )  {  return;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^195^^^^^183^212^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P11_Insert_Donor_Statement]^info = parent.getJSDocInfo (  ) ;JSDocInfo info = n.getJSDocInfo (  ) ;^195^^^^^183^212^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^info != null && info.getSuppressions (  ) .contains ( "dupl" ) ;^200^^^^^183^212^info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P14_Delete_Statement]^^200^^^^^183^212^info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P2_Replace_Operator]^if  ( origParent.getType (  )  >= Token.CATCH && parent.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^if  ( origParent.getType (  )  == Token.CATCH && nodeWithLineNumber.getType (  )  == Token.CATCH )  {^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^if  ( info == this )  {^196^^^^^183^212^if  ( info == null )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^info =  nodeWithLineNumber.getJSDocInfo (  ) ;^197^^^^^183^212^info = parent.getJSDocInfo (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicateplic" ) ;^199^200^^^^183^212^allowDupe = info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^JSDocInfo info = origParent.getJSDocInfo (  ) ;^195^^^^^183^212^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P5_Replace_Variable]^if  ( s.isGlobal (  )  )  {^185^^^^^183^212^if  ( scope.isGlobal (  )  )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^Node origParent = null.getParentNode (  ) ;^187^^^^^183^212^Node origParent = origVar.getParentNode (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( origParent .getJSDocInfo (  )   == Token.CATCH && parent^188^189^^^^183^212^if  ( origParent.getType (  )  == Token.CATCH && parent.getType (  )  == Token.CATCH )  {^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P8_Replace_Mix]^JSDocInfo info = n .getType (  )  ;^195^^^^^183^212^JSDocInfo info = n.getJSDocInfo (  ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
[P3_Replace_Literal]^info != null && info.getSuppressions (  ) .contains ( "duplicatedup" ) ;^200^^^^^183^212^info != null && info.getSuppressions (  ) .contains ( "duplicate" ) ;^[CLASS] DefaultRedeclarationHandler  [METHOD] onRedeclaration [RETURN_TYPE] void   Scope s String name Node n Node parent Node gramps Node nodeWithLineNumber [VARIABLES] boolean  allowDupe  Scope  s  Var  origVar  Node  gramps  n  nodeWithLineNumber  origParent  parent  String  name  JSDocInfo  info  
