[P8_Replace_Mix]^private  SortedSet<Pair<JSError, CheckLevel>> messages = Sets.newTreeSet ( new LeveledJSErrorComparator (  )  ) ;^41^42^^^^41^42^private final SortedSet<Pair<JSError, CheckLevel>> messages = Sets.newTreeSet ( new LeveledJSErrorComparator (  )  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P1_Replace_Type]^private  short  errorCount = 0;^43^^^^^38^48^private int errorCount = 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P3_Replace_Literal]^private int errorCount = -5;^43^^^^^38^48^private int errorCount = 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P8_Replace_Mix]^private int errorCount = 0 >>> 3;^43^^^^^38^48^private int errorCount = 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P1_Replace_Type]^private  long  warningCount = 0;^44^^^^^39^49^private int warningCount = 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P3_Replace_Literal]^private int warningCount = -5;^44^^^^^39^49^private int warningCount = 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P8_Replace_Mix]^private  short  warningCount = 0 - 2;^44^^^^^39^49^private int warningCount = 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P1_Replace_Type]^private float typedPercent = 0.0;^45^^^^^40^50^private double typedPercent = 0.0;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P8_Replace_Mix]^private double typedPercent ;^45^^^^^40^50^private double typedPercent = 0.0;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P1_Replace_Type]^private static final  short  P1_LT_P2 = -1;^120^^^^^115^125^private static final int P1_LT_P2 = -1;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P3_Replace_Literal]^private static final int P3_LT_P2 = -3;^120^^^^^115^125^private static final int P1_LT_P2 = -1;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P8_Replace_Mix]^private static final int P1_LT_P2 ;^120^^^^^115^125^private static final int P1_LT_P2 = -1;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P1_Replace_Type]^private static final  short  P1_GT_P2 = 1;^121^^^^^116^126^private static final int P1_GT_P2 = 1;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P3_Replace_Literal]^private static final int P-4_GT_P2 = -4;^121^^^^^116^126^private static final int P1_GT_P2 = 1;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P8_Replace_Mix]^private  final int P1L_GT_P2 = 1L;^121^^^^^116^126^private static final int P1_GT_P2 = 1;^[CLASS] BasicErrorManager LeveledJSErrorComparator   [VARIABLES] 
[P5_Replace_Variable]^if  ( messages.add ( Pair.of (  level )  )  )  {^48^^^^^47^55^if  ( messages.add ( Pair.of ( error, level )  )  )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P5_Replace_Variable]^if  ( messages.add ( Pair.of ( error )  )  )  {^48^^^^^47^55^if  ( messages.add ( Pair.of ( error, level )  )  )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P5_Replace_Variable]^if  ( level.add ( Pair.of ( error, messages )  )  )  {^48^^^^^47^55^if  ( messages.add ( Pair.of ( error, level )  )  )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P6_Replace_Expression]^if  ( level == WARNING )  {^48^^^^^47^55^if  ( messages.add ( Pair.of ( error, level )  )  )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P15_Unwrap_Block]^if (level == (com.google.javascript.jscomp.CheckLevel.ERROR)) {    (errorCount)++;}else    if (level == (com.google.javascript.jscomp.CheckLevel.WARNING)) {        (warningCount)++;    };^48^49^50^51^52^47^55^if  ( messages.add ( Pair.of ( error, level )  )  )  { if  ( level == CheckLevel.ERROR )  { errorCount++; } else if  ( level == CheckLevel.WARNING )  { warningCount++; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P16_Remove_Block]^^48^49^50^51^52^47^55^if  ( messages.add ( Pair.of ( error, level )  )  )  { if  ( level == CheckLevel.ERROR )  { errorCount++; } else if  ( level == CheckLevel.WARNING )  { warningCount++; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P13_Insert_Block]^if  ( level ==  ( ERROR )  )  {      ( errorCount ) ++; }else     if  ( level ==  ( WARNING )  )  {          ( warningCount ) ++;     }^48^^^^^47^55^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P2_Replace_Operator]^if  ( level > CheckLevel.ERROR )  {^49^^^^^47^55^if  ( level == CheckLevel.ERROR )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P2_Replace_Operator]^if  ( level >= CheckLevel.ERROR )  {^49^^^^^47^55^if  ( level == CheckLevel.ERROR )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P6_Replace_Expression]^if  ( level == WARNING )  {^49^^^^^47^55^if  ( level == CheckLevel.ERROR )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P8_Replace_Mix]^if  ( level == CheckLevel.null )  {^49^^^^^47^55^if  ( level == CheckLevel.ERROR )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P15_Unwrap_Block]^(errorCount)++;^49^50^51^52^53^47^55^if  ( level == CheckLevel.ERROR )  { errorCount++; } else if  ( level == CheckLevel.WARNING )  { warningCount++; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P16_Remove_Block]^^49^50^51^52^53^47^55^if  ( level == CheckLevel.ERROR )  { errorCount++; } else if  ( level == CheckLevel.WARNING )  { warningCount++; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P13_Insert_Block]^if  ( messages.add ( of ( error, level )  )  )  {     if  ( level ==  ( ERROR )  )  {          ( errorCount ) ++;     }else         if  ( level ==  ( WARNING )  )  {              ( warningCount ) ++;         }      }^49^^^^^47^55^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P2_Replace_Operator]^} else if  ( level <= CheckLevel.WARNING )  {^51^^^^^47^55^} else if  ( level == CheckLevel.WARNING )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P6_Replace_Expression]^} else {^51^^^^^47^55^} else if  ( level == CheckLevel.WARNING )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P15_Unwrap_Block]^(warningCount)++;^51^52^53^^^47^55^} else if  ( level == CheckLevel.WARNING )  { warningCount++; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P16_Remove_Block]^^51^52^53^^^47^55^} else if  ( level == CheckLevel.WARNING )  { warningCount++; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P2_Replace_Operator]^} else if  ( level != CheckLevel.WARNING )  {^51^^^^^47^55^} else if  ( level == CheckLevel.WARNING )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P5_Replace_Variable]^} else if  ( level == CheckLevel.this )  {^51^^^^^47^55^} else if  ( level == CheckLevel.WARNING )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P2_Replace_Operator]^if  ( level != CheckLevel.ERROR )  {^49^^^^^47^55^if  ( level == CheckLevel.ERROR )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P8_Replace_Mix]^}  if  ( level == CheckLevel.null )  {^51^^^^^47^55^} else if  ( level == CheckLevel.WARNING )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P5_Replace_Variable]^if  ( messages.add ( Pair.of ( level, error )  )  )  {^48^^^^^47^55^if  ( messages.add ( Pair.of ( error, level )  )  )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P5_Replace_Variable]^if  ( error.add ( Pair.of ( messages, level )  )  )  {^48^^^^^47^55^if  ( messages.add ( Pair.of ( error, level )  )  )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] report [RETURN_TYPE] void   CheckLevel level JSError error [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  CheckLevel  level  JSError  error  
[P5_Replace_Variable]^println ( message.second.first ) ;^59^^^^^57^62^println ( message.second, message.first ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] generateReport [RETURN_TYPE] void   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  message  
[P5_Replace_Variable]^println (  message.first ) ;^59^^^^^57^62^println ( message.second, message.first ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] generateReport [RETURN_TYPE] void   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  message  
[P5_Replace_Variable]^println ( message.second ) ;^59^^^^^57^62^println ( message.second, message.first ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] generateReport [RETURN_TYPE] void   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  message  
[P7_Replace_Invocation]^report ( message.second, message.first ) ;^59^^^^^57^62^println ( message.second, message.first ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] generateReport [RETURN_TYPE] void   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  message  
[P14_Delete_Statement]^^59^^^^^57^62^println ( message.second, message.first ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] generateReport [RETURN_TYPE] void   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  message  
[P14_Delete_Statement]^^61^^^^^57^62^printSummary (  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] generateReport [RETURN_TYPE] void   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  message  
[P5_Replace_Variable]^return warningCount;^76^^^^^75^77^return errorCount;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] getErrorCount [RETURN_TYPE] int   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  
[P5_Replace_Variable]^return errorCount;^80^^^^^79^81^return warningCount;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] getWarningCount [RETURN_TYPE] int   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  
[P7_Replace_Invocation]^return printSummary ( CheckLevel.ERROR ) ;^84^^^^^83^85^return toArray ( CheckLevel.ERROR ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] getErrors [RETURN_TYPE] JSError[]   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  
[P12_Insert_Condition]^if  ( level == CheckLevel.ERROR )  { return toArray ( CheckLevel.ERROR ) ; }^84^^^^^83^85^return toArray ( CheckLevel.ERROR ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] getErrors [RETURN_TYPE] JSError[]   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  
[P14_Delete_Statement]^^84^^^^^83^85^return toArray ( CheckLevel.ERROR ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] getErrors [RETURN_TYPE] JSError[]   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  
[P7_Replace_Invocation]^return printSummary ( CheckLevel.WARNING ) ;^88^^^^^87^89^return toArray ( CheckLevel.WARNING ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] getWarnings [RETURN_TYPE] JSError[]   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  
[P14_Delete_Statement]^^88^^^^^87^89^return toArray ( CheckLevel.WARNING ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] getWarnings [RETURN_TYPE] JSError[]   [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  
[P8_Replace_Mix]^this.typedPercent =  null;^92^^^^^91^93^this.typedPercent = typedPercent;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] setTypedPercent [RETURN_TYPE] void   double typedPercent [VARIABLES] boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  
[P1_Replace_Type]^List<JSError> errors = new  Set <JSError> ( messages.size (  )  ) ;^100^^^^^99^107^List<JSError> errors = new ArrayList<JSError> ( messages.size (  )  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P3_Replace_Literal]^List<JSError> errors = new ArrayList<JSError> ( messages.size() - 8  ) ;^100^^^^^99^107^List<JSError> errors = new ArrayList<JSError> ( messages.size (  )  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P7_Replace_Invocation]^List<JSError> errors = new ArrayList<JSError> ( messages.add (  )  ) ;^100^^^^^99^107^List<JSError> errors = new ArrayList<JSError> ( messages.size (  )  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P3_Replace_Literal]^List<JSError> errors = new ArrayList<JSError> ( messages.size() - 6  ) ;^100^^^^^99^107^List<JSError> errors = new ArrayList<JSError> ( messages.size (  )  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P3_Replace_Literal]^List<JSError> errors = new ArrayList<JSError> ( messages.size() - 0  ) ;^100^^^^^99^107^List<JSError> errors = new ArrayList<JSError> ( messages.size (  )  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P14_Delete_Statement]^^100^^^^^99^107^List<JSError> errors = new ArrayList<JSError> ( messages.size (  )  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P2_Replace_Operator]^if  ( p.second != level )  {^102^^^^^99^107^if  ( p.second == level )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P9_Replace_Statement]^if  ( p1.second != p2.second )  {^102^^^^^99^107^if  ( p.second == level )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P15_Unwrap_Block]^errors.add(p.first);^102^103^104^^^99^107^if  ( p.second == level )  { errors.add ( p.first ) ; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P16_Remove_Block]^^102^103^104^^^99^107^if  ( p.second == level )  { errors.add ( p.first ) ; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P14_Delete_Statement]^^103^^^^^99^107^errors.add ( p.first ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P3_Replace_Literal]^return errors.toArray ( new JSError[errors.size() - 2 ] ) ;^106^^^^^99^107^return errors.toArray ( new JSError[errors.size (  ) ] ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P7_Replace_Invocation]^return errors.toArray ( new JSError[errors.toArray (  ) ] ) ;^106^^^^^99^107^return errors.toArray ( new JSError[errors.size (  ) ] ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P3_Replace_Literal]^return errors.toArray ( new JSError[errors.size() - 9 ] ) ;^106^^^^^99^107^return errors.toArray ( new JSError[errors.size (  ) ] ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P8_Replace_Mix]^return null.toArray ( new JSError[errors.size (  ) ] ) ;^106^^^^^99^107^return errors.toArray ( new JSError[errors.size (  ) ] ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P14_Delete_Statement]^^106^^^^^99^107^return errors.toArray ( new JSError[errors.size (  ) ] ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] toArray [RETURN_TYPE] JSError[]   CheckLevel level [VARIABLES] boolean  double  typedPercent  CheckLevel  level  List  errors  SortedSet  messages  int  P1_GT_P2  P1_LT_P2  errorCount  warningCount  Pair  p  
[P2_Replace_Operator]^if  ( p2 != null )  {^126^^^^^111^141^if  ( p2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( p1 == null )  {^126^^^^^111^141^if  ( p2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^if  ( p2 == true )  {^126^^^^^111^141^if  ( p2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P15_Unwrap_Block]^if (p1 == null) {    return 0;}else {    return com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.P1_GT_P2;};^126^127^128^129^130^111^141^if  ( p2 == null )  { if  ( p1 == null )  { return 0; } else { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P16_Remove_Block]^^126^127^128^129^130^111^141^if  ( p2 == null )  { if  ( p1 == null )  { return 0; } else { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^126^^^^^111^141^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^126^^^^^111^141^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^126^^^^^111^141^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^126^^^^^111^141^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^if  ( p1 != null )  {^127^^^^^112^142^if  ( p1 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^if  ( p1 == true )  {^127^^^^^112^142^if  ( p1 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P9_Replace_Statement]^if  ( p2 == null )  {^127^^^^^112^142^if  ( p1 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P15_Unwrap_Block]^return 0;^127^128^129^130^131^112^142^if  ( p1 == null )  { return 0; } else { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P16_Remove_Block]^^127^128^129^130^131^112^142^if  ( p1 == null )  { return 0; } else { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^127^^^^^112^142^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p2 == null )  {     if  ( p1 == null )  {         return 0;     }else {         return P1_GT_P2;     } }^127^^^^^112^142^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^127^^^^^112^142^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^127^^^^^112^142^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return lineno2;^130^^^^^127^131^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^130^^^^^127^131^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^130^^^^^127^131^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^130^^^^^127^131^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^130^^^^^127^131^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^return -3;^128^^^^^113^143^return 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return 1;^128^^^^^113^143^return 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^return 3;^128^^^^^113^143^return 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return 4;^128^^^^^113^143^return 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return lineno1;^130^^^^^115^145^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^130^^^^^115^145^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^130^^^^^115^145^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^130^^^^^115^145^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^130^^^^^115^145^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^if  ( p1 == this )  {^127^^^^^112^142^if  ( p1 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return warningCount;^130^^^^^127^131^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^return lineno2;^128^^^^^113^143^return 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return 0 >> 3;^128^^^^^113^143^return 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^return ;^128^^^^^113^143^return 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return 0 * 2;^128^^^^^113^143^return 0;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return warningCount;^130^^^^^115^145^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^if  ( p1.second <= p2.second )  {^135^^^^^120^150^if  ( p1.second != p2.second )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^if  ( p1.second = p2.second )  {^135^^^^^120^150^if  ( p1.second != p2.second )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P9_Replace_Statement]^if  ( p.second == level )  {^135^^^^^120^150^if  ( p1.second != p2.second )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P15_Unwrap_Block]^return p2.second.compareTo(p1.second);^135^136^137^^^120^150^if  ( p1.second != p2.second )  { return p2.second.compareTo ( p1.second ) ; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P16_Remove_Block]^^135^136^137^^^120^150^if  ( p1.second != p2.second )  { return p2.second.compareTo ( p1.second ) ; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return p2.second .compareTo (  )  ;^136^^^^^121^151^return p2.second.compareTo ( p1.second ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P14_Delete_Statement]^^136^^^^^121^151^return p2.second.compareTo ( p1.second ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P1_Replace_Type]^char source1 = p1.first.sourceName;^140^^^^^125^155^String source1 = p1.first.sourceName;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int lineno1 = p1.first.lineNumber;String source1 = p1.first.sourceName;^140^^^^^125^155^String source1 = p1.first.sourceName;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P11_Insert_Donor_Statement]^String source2 = p2.first.sourceName;String source1 = p1.first.sourceName;^140^^^^^125^155^String source1 = p1.first.sourceName;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P1_Replace_Type]^char source2 = p2.first.sourceName;^141^^^^^126^156^String source2 = p2.first.sourceName;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int lineno2 = p2.first.lineNumber;String source2 = p2.first.sourceName;^141^^^^^126^156^String source2 = p2.first.sourceName;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P11_Insert_Donor_Statement]^String source1 = p1.first.sourceName;String source2 = p2.first.sourceName;^141^^^^^126^156^String source2 = p2.first.sourceName;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^if  ( source1 != null || source2 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^if  ( source1 == null && source2 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^if  ( source1 != null && source2 == null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^if  ( source2 != null && source2 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^if  ( source1 != null && source1 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^if  ( source2 != null && source1 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( source1 != null ) {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  (  source2 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( sourceCompare != 0 )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( source1 == null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( source2 == null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^if  ( source1 != true ) {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P15_Unwrap_Block]^int sourceCompare = source1.compareTo(source2); if (sourceCompare != 0) {    return sourceCompare;};^142^143^144^145^146^127^157^if  ( source1 != null && source2 != null )  { int sourceCompare = source1.compareTo ( source2 ) ; if  ( sourceCompare != 0 )  { return sourceCompare; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P16_Remove_Block]^^142^143^144^145^146^127^157^if  ( source1 != null && source2 != null )  { int sourceCompare = source1.compareTo ( source2 ) ; if  ( sourceCompare != 0 )  { return sourceCompare; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( lineno1 < 0 )  &&  ( 0 <= lineno2 )  )  {     return P1_LT_P2; }else     if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {         return P1_GT_P2;     }^142^^^^^127^157^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( charno1 < 0 )  &&  ( 0 <= charno2 )  )  {     return P1_LT_P2; }else     if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {         return P1_GT_P2;     }^142^^^^^127^157^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( charno1 != charno2 )  {     return charno1 - charno2; }else     if  (  ( charno1 < 0 )  &&  ( 0 <= charno2 )  )  {         return P1_LT_P2;     }else         if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {             return P1_GT_P2;         }^142^^^^^127^157^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( lineno1 != lineno2 )  {     return lineno1 - lineno2; }else     if  (  ( lineno1 < 0 )  &&  ( 0 <= lineno2 )  )  {         return P1_LT_P2;     }else         if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {             return P1_GT_P2;         }^142^^^^^127^157^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 == null )  &&  ( source2 != null )  )  {     return P1_LT_P2; }else     if  (  ( source1 != null )  &&  ( source2 == null )  )  {         return P1_GT_P2;     }^142^^^^^127^157^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( source1 == null || source2 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( source1 != null && source2 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( source1 == null && source2 == null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( source2 == null && source1 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( source1 == null ) {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  (  source2 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( source1 != null && source2 == null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( source1 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( source2 == null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^}  if  (  source2 != true )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.P1_LT_P2;^147^148^149^150^151^132^162^} else if  ( source1 == null && source2 != null )  { return P1_LT_P2; } else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P16_Remove_Block]^^147^148^149^150^151^132^162^} else if  ( source1 == null && source2 != null )  { return P1_LT_P2; } else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( source1 != null || source2 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( source1 == null && source2 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( source1 != null && source2 != null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( source1 != null && source1 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( source2 != null && source1 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( source1 != null ) {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  (  source2 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P9_Replace_Statement]^} else if  ( source1 == null && source2 != null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.P1_GT_P2;^149^150^151^^^134^164^} else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P16_Remove_Block]^^149^150^151^^^134^164^} else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^149^^^^^134^164^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^149^^^^^134^164^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p2 == null )  {     if  ( p1 == null )  {         return 0;     }else {         return P1_GT_P2;     } }^149^^^^^134^164^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^149^^^^^134^164^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return lineno2;^150^^^^^135^165^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^150^^^^^135^165^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^150^^^^^135^165^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^150^^^^^135^165^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^150^^^^^135^165^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return warningCount;^150^^^^^135^165^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return sourceCompare;^148^^^^^133^163^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return lineno1;^148^^^^^133^163^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^148^^^^^133^163^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^148^^^^^133^163^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^148^^^^^133^163^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^148^^^^^133^163^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( source2 != null && source2 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^} else if  (  source2 == false )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return lineno1;^150^^^^^135^165^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return warningCount;^148^^^^^133^163^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^if  ( sourceCompare == 0 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^if  ( sourceCompare != 1 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^if  ( lineno2 != 0 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^if  ( sourceCompare != 2 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P15_Unwrap_Block]^return sourceCompare;^144^145^146^^^129^159^if  ( sourceCompare != 0 )  { return sourceCompare; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P16_Remove_Block]^^144^145^146^^^129^159^if  ( sourceCompare != 0 )  { return sourceCompare; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return lineno1;^145^^^^^130^160^return sourceCompare;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return warningCount;^145^^^^^130^160^return sourceCompare;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P1_Replace_Type]^short  sourceCompare = source1.compareTo ( source2 ) ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^int sourceCompare = source2.compareTo ( source2 ) ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^int sourceCompare = source1.compareTo ( source1 ) ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^int sourceCompare = source2.compareTo ( source1 ) ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^int sourceCompare = source1 .compareTo (  )  ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P14_Delete_Statement]^^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^if  ( sourceCompare != -2 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^if  ( errorCount != 0 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^if  ( lineno1 != 4 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^}  if  ( source1 != this && source2 == this )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return errorCount;^145^^^^^130^160^return sourceCompare;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return lineno2;^148^^^^^133^163^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P1_Replace_Type]^long  lineno1 = p1.first.lineNumber;^153^^^^^138^168^int lineno1 = p1.first.lineNumber;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int lineno2 = p2.first.lineNumber;int lineno1 = p1.first.lineNumber;^153^^^^^138^168^int lineno1 = p1.first.lineNumber;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int charno1 = p1.first.getCharno (  ) ;int lineno1 = p1.first.lineNumber;^153^^^^^138^168^int lineno1 = p1.first.lineNumber;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P11_Insert_Donor_Statement]^String source1 = p1.first.sourceName;int lineno1 = p1.first.lineNumber;^153^^^^^138^168^int lineno1 = p1.first.lineNumber;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P1_Replace_Type]^short  lineno2 = p2.first.lineNumber;^154^^^^^139^169^int lineno2 = p2.first.lineNumber;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int lineno1 = p1.first.lineNumber;int lineno2 = p2.first.lineNumber;^154^^^^^139^169^int lineno2 = p2.first.lineNumber;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int charno2 = p2.first.getCharno (  ) ;int lineno2 = p2.first.lineNumber;^154^^^^^139^169^int lineno2 = p2.first.lineNumber;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P11_Insert_Donor_Statement]^String source2 = p2.first.sourceName;int lineno2 = p2.first.lineNumber;^154^^^^^139^169^int lineno2 = p2.first.lineNumber;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^if  ( lineno1 == lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^if  ( warningCount != lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( lineno1 - lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( lineno1 < 0 && 0 <= lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( lineno1 < 0 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( 0 <= lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( 0 <= lineno1 && lineno2 < 0 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( 0 <= lineno1 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( lineno2 < 0 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^if  ( lineno1 = lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P9_Replace_Statement]^if  ( charno1 != charno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( lineno1 < 0 || 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( lineno1 <= 0 && 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( lineno1 < 0 && 0 < lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 < charno1 && charno1 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 < -9 && -9 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 < lineno1 && lineno1 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 < P1_LT_P2 && P1_LT_P2 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( sourceCompare < 0 && 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( lineno1 < 0 && 0 <= warningCount )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( lineno2 < 0 && 0 <= lineno1 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( lineno1 < 0 ) {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  (  0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( 0 <= lineno1 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( lineno2 < 0 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P9_Replace_Statement]^} else if  ( charno1 < 0 && 0 <= charno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.P1_LT_P2;^157^158^159^160^161^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  { return P1_LT_P2; } else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P16_Remove_Block]^^157^158^159^160^161^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  { return P1_LT_P2; } else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 <= lineno1 || lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 < lineno1 && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 <= lineno1 && lineno2 <= 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( -7 <= lineno1 && lineno2 < -7 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( -1 <= lineno1 && lineno2 < -1 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= sourceCompare && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= lineno1 && warningCount < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= lineno2 && lineno1 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( 0 <= lineno1 ) {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  (  lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^}  if  ( 0L <= lineno1 && errorCount < 0L )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P9_Replace_Statement]^} else if  ( 0 <= charno1 && charno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.P1_GT_P2;^159^160^161^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P16_Remove_Block]^^159^160^161^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^159^^^^^144^174^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^159^^^^^144^174^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p2 == null )  {     if  ( p1 == null )  {         return 0;     }else {         return P1_GT_P2;     } }^159^^^^^144^174^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^159^^^^^144^174^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return lineno2;^160^^^^^145^175^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return lineno1;^160^^^^^145^175^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^160^^^^^145^175^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^160^^^^^145^175^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^160^^^^^145^175^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^160^^^^^145^175^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return lineno1;^158^^^^^143^173^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return warningCount;^158^^^^^143^173^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^158^^^^^143^173^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^158^^^^^143^173^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^158^^^^^143^173^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^158^^^^^143^173^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 == lineno1 && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( 4 <= lineno1 && lineno2 < 4 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno2 <= lineno1 && lineno2 < charno2 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^}  if  ( 3 <= lineno1 && lineno2 < 3 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return warningCount;^160^^^^^145^175^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return sourceCompare;^158^^^^^143^173^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return sourceCompare;^160^^^^^145^175^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^return lineno1  >>  lineno2;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return sourceCompare - lineno2;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return lineno2 - lineno1;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return sourceCompare - warningCount;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P12_Insert_Condition]^if  ( lineno1 != lineno2 )  { return lineno1 - lineno2; }^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 < -3 && -3 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 < sourceCompare && sourceCompare <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 < -2 && -2 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( warningCount < 0 && 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( lineno1 < 0 && 0 <= sourceCompare )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 > lineno1 && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( sourceCompare <= lineno1 && lineno2 < sourceCompare )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( warningCount <= lineno1 && lineno2 < warningCount )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= lineno1 && errorCount < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= errorCount && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^return lineno1  &&  lineno2;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return lineno1 - errorCount;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return lineno1 -sourceCompare;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return lineno2;^158^^^^^143^173^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P1_Replace_Type]^short  charno1 = p1.first.getCharno (  ) ;^163^^^^^148^178^int charno1 = p1.first.getCharno (  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int lineno1 = p1.first.lineNumber;int charno1 = p1.first.getCharno (  ) ;^163^^^^^148^178^int charno1 = p1.first.getCharno (  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int charno2 = p2.first.getCharno (  ) ;int charno1 = p1.first.getCharno (  ) ;^163^^^^^148^178^int charno1 = p1.first.getCharno (  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P14_Delete_Statement]^^163^164^^^^148^178^int charno1 = p1.first.getCharno (  ) ; int charno2 = p2.first.getCharno (  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P1_Replace_Type]^short  charno2 = p2.first.getCharno (  ) ;^164^^^^^149^179^int charno2 = p2.first.getCharno (  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int lineno2 = p2.first.lineNumber;int charno2 = p2.first.getCharno (  ) ;^164^^^^^149^179^int charno2 = p2.first.getCharno (  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int charno1 = p1.first.getCharno (  ) ;int charno2 = p2.first.getCharno (  ) ;^164^^^^^149^179^int charno2 = p2.first.getCharno (  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P14_Delete_Statement]^^164^^^^^149^179^int charno2 = p2.first.getCharno (  ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^if  ( charno1 == charno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^if  ( charno1 != sourceCompare )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( charno1 - charno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( charno1 < 0 && 0 <= charno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( charno1 < 0 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( 0 <= charno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( 0 <= charno1 && charno2 < 0 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( 0 <= charno1 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^if  ( charno2 < 0 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^if  ( charno1 = charno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P9_Replace_Statement]^if  ( lineno1 != lineno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( charno1 < 0 || 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( charno1 > 0 && 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( charno1 < 0 && 0 > charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( charno1 < 0 && 0 == charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( charno1 <= 0 && 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 < 4 && 4 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 < 2 && 2 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 < charno1 && charno1 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 < lineno1 && lineno1 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( warningCount < 0 && 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( charno1 < 0 && 0 <= lineno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( charno1 < 0 ) {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  (  0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( 0 <= charno1 && charno2 < 0 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( 0 <= charno1 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( charno2 < 0 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P9_Replace_Statement]^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.P1_LT_P2;^167^168^169^170^171^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  { return P1_LT_P2; } else if  ( 0 <= charno1 && charno2 < 0 )  { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P16_Remove_Block]^^167^168^169^170^171^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  { return P1_LT_P2; } else if  ( 0 <= charno1 && charno2 < 0 )  { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 <= charno1 || charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 < charno1 && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 <= charno1 && charno2 <= 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( 9 <= charno1 && charno2 < 9 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( warningCount <= charno1 && charno2 < warningCount )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= warningCount && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= charno1 && sourceCompare < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( 0 <= charno1 ) {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else if  (  charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P6_Replace_Expression]^} else {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P9_Replace_Statement]^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.P1_GT_P2;^169^170^171^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P16_Remove_Block]^^169^170^171^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  { return P1_GT_P2; }^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^169^^^^^154^184^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p2 == null )  {     if  ( p1 == null )  {         return 0;     }else {         return P1_GT_P2;     } }^169^^^^^154^184^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^169^^^^^154^184^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^169^^^^^154^184^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return warningCount;^170^^^^^155^185^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^170^^^^^155^185^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^170^^^^^155^185^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^170^^^^^155^185^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^170^^^^^155^185^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return lineno2;^170^^^^^155^185^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return lineno1;^170^^^^^155^185^return P1_GT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return lineno1;^168^^^^^153^183^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^168^^^^^153^183^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^168^^^^^153^183^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^168^^^^^153^183^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^168^^^^^153^183^[Delete]^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 <= charno1 && charno2 < charno1 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= sourceCompare && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= charno1 && warningCount < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= charno2 && charno1 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^return charno1  <<  charno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return lineno2 - charno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return charno1 - lineno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return charno2 - charno1;^166^^^^^151^181^return charno1 - charno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return warningCount -warningCount;^166^^^^^151^181^return charno1 - charno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P12_Insert_Condition]^if  ( charno1 != charno2 )  { return charno1 - charno2; }^166^^^^^151^181^return charno1 - charno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( charno1 < 0 && 0 < charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 <  &&  <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 < lineno2 && lineno2 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 < -1 && -1 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 < 8 && 8 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( lineno2 < 0 && 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( charno1 < 0 && 0 <= sourceCompare )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^} else if  (  3 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 > charno1 && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( 3 <= charno1 && charno2 < 3 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( errorCount <= charno1 && charno2 < errorCount )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= charno1 && lineno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P5_Replace_Variable]^return warningCount;^168^^^^^153^183^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^return lineno2;^168^^^^^153^183^return P1_LT_P2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 == charno1 && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( 4 <= charno1 && charno2 < 4 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^}  if  ( 2 <= charno1 && lineno2 < 2 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^return charno1  >>  charno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^returnsourceCompare - charno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P7_Replace_Invocation]^return p1.first.description .compareTo (  )  ;^173^^^^^158^188^return p1.first.description.compareTo ( p2.first.description ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P14_Delete_Statement]^^173^^^^^158^188^return p1.first.description.compareTo ( p2.first.description ) ;^[CLASS] BasicErrorManager LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P1_Replace_Type]^private static final  short  P1_LT_P2 = -1;^120^^^^^115^125^private static final int P1_LT_P2 = -1;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^private static final int P_LT_P2 = -;^120^^^^^115^125^private static final int P1_LT_P2 = -1;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^private static final int P1 * 0_LT_P2 = -1 * 0;^120^^^^^115^125^private static final int P1_LT_P2 = -1;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P1_Replace_Type]^private static final  long  P1_GT_P2 = 1;^121^^^^^116^126^private static final int P1_GT_P2 = 1;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P3_Replace_Literal]^private static final int P-2_GT_P2 = -2;^121^^^^^116^126^private static final int P1_GT_P2 = 1;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P8_Replace_Mix]^private static final  short  P2_GT_P2 = 2;^121^^^^^116^126^private static final int P1_GT_P2 = 1;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  SortedSet  messages  double  typedPercent  int  P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  Pair  p1  p2  
[P2_Replace_Operator]^if  ( p2 != null )  {^126^^^^^111^141^if  ( p2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( p1 == null )  {^126^^^^^111^141^if  ( p2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^if  ( p2 == true )  {^126^^^^^111^141^if  ( p2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P15_Unwrap_Block]^if (p1 == null) {    return 0;}else {    return com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.P1_GT_P2;};^126^127^128^129^130^111^141^if  ( p2 == null )  { if  ( p1 == null )  { return 0; } else { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P16_Remove_Block]^^126^127^128^129^130^111^141^if  ( p2 == null )  { if  ( p1 == null )  { return 0; } else { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^126^^^^^111^141^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^126^^^^^111^141^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^126^^^^^111^141^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^126^^^^^111^141^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^if  ( p1 != null )  {^127^^^^^112^142^if  ( p1 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^if  ( p1 == this )  {^127^^^^^112^142^if  ( p1 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P9_Replace_Statement]^if  ( p2 == null )  {^127^^^^^112^142^if  ( p1 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P15_Unwrap_Block]^return 0;^127^128^129^130^131^112^142^if  ( p1 == null )  { return 0; } else { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P16_Remove_Block]^^127^128^129^130^131^112^142^if  ( p1 == null )  { return 0; } else { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^127^^^^^112^142^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p2 == null )  {     if  ( p1 == null )  {         return 0;     }else {         return P1_GT_P2;     } }^127^^^^^112^142^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^127^^^^^112^142^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^127^^^^^112^142^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return lineno1;^130^^^^^127^131^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return sourceCompare;^130^^^^^127^131^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^130^^^^^127^131^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^130^^^^^127^131^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^130^^^^^127^131^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^130^^^^^127^131^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^return charno1;^128^^^^^113^143^return 0;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return 1;^128^^^^^113^143^return 0;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return 4;^128^^^^^113^143^return 0;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return lineno1;^130^^^^^115^145^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return sourceCompare;^130^^^^^115^145^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^130^^^^^115^145^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^130^^^^^115^145^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^130^^^^^115^145^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^130^^^^^115^145^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^return charno2;^128^^^^^113^143^return 0;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^return -1;^128^^^^^113^143^return 0;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return 3;^128^^^^^113^143^return 0;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^if  ( p1.second < p2.second )  {^135^^^^^120^150^if  ( p1.second != p2.second )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P15_Unwrap_Block]^return p2.second.compareTo(p1.second);^135^136^137^^^120^150^if  ( p1.second != p2.second )  { return p2.second.compareTo ( p1.second ) ; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P16_Remove_Block]^^135^136^137^^^120^150^if  ( p1.second != p2.second )  { return p2.second.compareTo ( p1.second ) ; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P14_Delete_Statement]^^136^^^^^121^151^return p2.second.compareTo ( p1.second ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P7_Replace_Invocation]^return p2.second .compareTo (  )  ;^136^^^^^121^151^return p2.second.compareTo ( p1.second ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P1_Replace_Type]^char source1 = p1.first.sourceName;^140^^^^^125^155^String source1 = p1.first.sourceName;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int lineno1 = p1.first.lineNumber;String source1 = p1.first.sourceName;^140^^^^^125^155^String source1 = p1.first.sourceName;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P11_Insert_Donor_Statement]^String source2 = p2.first.sourceName;String source1 = p1.first.sourceName;^140^^^^^125^155^String source1 = p1.first.sourceName;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P1_Replace_Type]^char source2 = p2.first.sourceName;^141^^^^^126^156^String source2 = p2.first.sourceName;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int lineno2 = p2.first.lineNumber;String source2 = p2.first.sourceName;^141^^^^^126^156^String source2 = p2.first.sourceName;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P11_Insert_Donor_Statement]^String source1 = p1.first.sourceName;String source2 = p2.first.sourceName;^141^^^^^126^156^String source2 = p2.first.sourceName;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^if  ( source1 != null || source2 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^if  ( source1 == null && source2 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^if  ( source1 != null && source2 == null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^if  ( source2 != null && source2 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^if  ( source1 != null && source1 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^if  ( source2 != null && source1 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( source1 != null ) {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  (  source2 != null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( sourceCompare != 0 )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( source1 == null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( source2 == null )  {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^if  ( source1 != this ) {^142^^^^^127^157^if  ( source1 != null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P15_Unwrap_Block]^int sourceCompare = source1.compareTo(source2); if (sourceCompare != 0) {    return sourceCompare;};^142^143^144^145^146^127^157^if  ( source1 != null && source2 != null )  { int sourceCompare = source1.compareTo ( source2 ) ; if  ( sourceCompare != 0 )  { return sourceCompare; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P16_Remove_Block]^^142^143^144^145^146^127^157^if  ( source1 != null && source2 != null )  { int sourceCompare = source1.compareTo ( source2 ) ; if  ( sourceCompare != 0 )  { return sourceCompare; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( lineno1 < 0 )  &&  ( 0 <= lineno2 )  )  {     return P1_LT_P2; }else     if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {         return P1_GT_P2;     }^142^^^^^127^157^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( charno1 < 0 )  &&  ( 0 <= charno2 )  )  {     return P1_LT_P2; }else     if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {         return P1_GT_P2;     }^142^^^^^127^157^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( charno1 != charno2 )  {     return charno1 - charno2; }else     if  (  ( charno1 < 0 )  &&  ( 0 <= charno2 )  )  {         return P1_LT_P2;     }else         if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {             return P1_GT_P2;         }^142^^^^^127^157^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( lineno1 != lineno2 )  {     return lineno1 - lineno2; }else     if  (  ( lineno1 < 0 )  &&  ( 0 <= lineno2 )  )  {         return P1_LT_P2;     }else         if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {             return P1_GT_P2;         }^142^^^^^127^157^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 == null )  &&  ( source2 != null )  )  {     return P1_LT_P2; }else     if  (  ( source1 != null )  &&  ( source2 == null )  )  {         return P1_GT_P2;     }^142^^^^^127^157^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( source1 == null || source2 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( source1 != null && source2 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( source1 == null && source2 == null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( source2 == null && source2 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( source2 == null && source1 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( source1 == null ) {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  (  source2 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( source1 != null && source2 == null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( source1 != null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( source2 == null )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^}  if  ( source1 == false ) {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.P1_LT_P2;^147^148^149^150^151^132^162^} else if  ( source1 == null && source2 != null )  { return P1_LT_P2; } else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P16_Remove_Block]^^147^148^149^150^151^132^162^} else if  ( source1 == null && source2 != null )  { return P1_LT_P2; } else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( source1 != null || source2 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( source1 == null && source2 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( source1 != null && source2 != null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( source2 != null && source1 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( source1 != null ) {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  (  source2 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^} else if  ( source1 != true ) {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P9_Replace_Statement]^} else if  ( source1 == null && source2 != null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.P1_GT_P2;^149^150^151^^^134^164^} else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P16_Remove_Block]^^149^150^151^^^134^164^} else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^149^^^^^134^164^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^149^^^^^134^164^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p2 == null )  {     if  ( p1 == null )  {         return 0;     }else {         return P1_GT_P2;     } }^149^^^^^134^164^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^149^^^^^134^164^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return lineno1;^150^^^^^135^165^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return sourceCompare;^150^^^^^135^165^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^150^^^^^135^165^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^150^^^^^135^165^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^150^^^^^135^165^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^150^^^^^135^165^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return lineno1;^148^^^^^133^163^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^148^^^^^133^163^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^148^^^^^133^163^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^148^^^^^133^163^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^148^^^^^133^163^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( source2 != null && source2 == null )  {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^} else if  ( source1 != false ) {^149^^^^^134^164^} else if  ( source1 != null && source2 == null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return lineno2;^150^^^^^135^165^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return lineno2;^148^^^^^133^163^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return sourceCompare;^148^^^^^133^163^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^if  ( sourceCompare == 0 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^if  ( sourceCompare != charno2 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^if  ( charno2 != 0 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^if  ( charno2 != 0 / 0 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P15_Unwrap_Block]^return sourceCompare;^144^145^146^^^129^159^if  ( sourceCompare != 0 )  { return sourceCompare; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P16_Remove_Block]^^144^145^146^^^129^159^if  ( sourceCompare != 0 )  { return sourceCompare; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return lineno2;^145^^^^^130^160^return sourceCompare;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return lineno1;^145^^^^^130^160^return sourceCompare;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P1_Replace_Type]^short  sourceCompare = source1.compareTo ( source2 ) ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^int sourceCompare = source2.compareTo ( source2 ) ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^int sourceCompare = source1.compareTo ( source1 ) ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^int sourceCompare = source2.compareTo ( source1 ) ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P7_Replace_Invocation]^int sourceCompare = source1 .compareTo (  )  ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P14_Delete_Statement]^^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^if  ( sourceCompare != lineno2 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^if  ( lineno2 != 0 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^if  ( sourceCompare != 0 / 2 )  {^144^^^^^129^159^if  ( sourceCompare != 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return charno2;^145^^^^^130^160^return sourceCompare;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^}  if  (  source2 != false )  {^147^^^^^132^162^} else if  ( source1 == null && source2 != null )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P1_Replace_Type]^long  sourceCompare = source1.compareTo ( source2 ) ;^143^^^^^128^158^int sourceCompare = source1.compareTo ( source2 ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P1_Replace_Type]^short  lineno1 = p1.first.lineNumber;^153^^^^^138^168^int lineno1 = p1.first.lineNumber;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int lineno2 = p2.first.lineNumber;int lineno1 = p1.first.lineNumber;^153^^^^^138^168^int lineno1 = p1.first.lineNumber;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int charno1 = p1.first.getCharno (  ) ;int lineno1 = p1.first.lineNumber;^153^^^^^138^168^int lineno1 = p1.first.lineNumber;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P11_Insert_Donor_Statement]^String source1 = p1.first.sourceName;int lineno1 = p1.first.lineNumber;^153^^^^^138^168^int lineno1 = p1.first.lineNumber;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P1_Replace_Type]^long  lineno2 = p2.first.lineNumber;^154^^^^^139^169^int lineno2 = p2.first.lineNumber;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int lineno1 = p1.first.lineNumber;int lineno2 = p2.first.lineNumber;^154^^^^^139^169^int lineno2 = p2.first.lineNumber;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int charno2 = p2.first.getCharno (  ) ;int lineno2 = p2.first.lineNumber;^154^^^^^139^169^int lineno2 = p2.first.lineNumber;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P11_Insert_Donor_Statement]^String source2 = p2.first.sourceName;int lineno2 = p2.first.lineNumber;^154^^^^^139^169^int lineno2 = p2.first.lineNumber;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^if  ( lineno1 > lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^if  ( sourceCompare != lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^if  ( lineno1 != sourceCompare )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^if  ( lineno2 != lineno1 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( lineno1 - lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( lineno1 < 0 && 0 <= lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( lineno1 < 0 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( 0 <= lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( 0 <= lineno1 && lineno2 < 0 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( 0 <= lineno1 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( lineno2 < 0 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^if  ( lineno1 = lineno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P9_Replace_Statement]^if  ( charno1 != charno2 )  {^155^^^^^140^170^if  ( lineno1 != lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( lineno1 < 0 || 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( lineno1 > 0 && 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( lineno1 < 0 && 0 < lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( lineno1 <= 0 && 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 < charno1 && charno1 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 < P1_LT_P2 && P1_LT_P2 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 < -7 && -7 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 < 6 && 6 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( sourceCompare < 0 && 0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( lineno1 < 0 && 0 <= sourceCompare )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( lineno1 < 0 ) {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  (  0 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( 0 <= lineno1 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( lineno2 < 0 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P9_Replace_Statement]^} else if  ( charno1 < 0 && 0 <= charno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.P1_LT_P2;^157^158^159^160^161^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  { return P1_LT_P2; } else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P16_Remove_Block]^^157^158^159^160^161^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  { return P1_LT_P2; } else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 <= lineno1 || lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 > lineno1 && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 <= lineno1 && lineno2 <= 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( -4 <= lineno1 && lineno2 < -4 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 <= lineno1 && lineno2 < charno1 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= sourceCompare && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= lineno1 && sourceCompare < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= lineno2 && lineno1 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( 0 <= lineno1 ) {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  (  lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P9_Replace_Statement]^} else if  ( 0 <= charno1 && charno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.P1_GT_P2;^159^160^161^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P16_Remove_Block]^^159^160^161^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^159^^^^^144^174^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^159^^^^^144^174^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p2 == null )  {     if  ( p1 == null )  {         return 0;     }else {         return P1_GT_P2;     } }^159^^^^^144^174^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^159^^^^^144^174^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return sourceCompare;^160^^^^^145^175^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^160^^^^^145^175^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^160^^^^^145^175^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^160^^^^^145^175^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^160^^^^^145^175^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return lineno2;^160^^^^^145^175^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return sourceCompare;^158^^^^^143^173^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return lineno1;^158^^^^^143^173^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^158^^^^^143^173^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^158^^^^^143^173^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^158^^^^^143^173^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^158^^^^^143^173^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 < lineno1 && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( 5 <= lineno1 && lineno2 < 5 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( P1_LT_P2 <= lineno1 && lineno2 < P1_LT_P2 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return lineno1;^160^^^^^145^175^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return lineno2;^158^^^^^143^173^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^return lineno1  &&  lineno2;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return sourceCompare - lineno2;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return lineno1 - sourceCompare;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return lineno2 - lineno1;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P12_Insert_Condition]^if  ( lineno1 != lineno2 )  { return lineno1 - lineno2; }^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( lineno1 < 0 && 0 == lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 < 4 && 4 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 < lineno2 && lineno2 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 < -3 && -3 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^} else if  ( lineno1 < 1 && 1 <= lineno2 )  {^157^^^^^142^172^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 == lineno1 && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 <= lineno1 && lineno2 < lineno1 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= charno2 && lineno2 < 0 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^}  if  ( 0L <= sourceCompare ) {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( -9 <= lineno1 && lineno2 < -9 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( 4 <= lineno1 && lineno2 < 4 )  {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^}  if  ( 0L <= lineno1 ) {^159^^^^^144^174^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^return lineno1  <<  lineno2;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return charno2 - lineno2;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return charno2 - sourceCompare;^156^^^^^141^171^return lineno1 - lineno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P1_Replace_Type]^short  charno1 = p1.first.getCharno (  ) ;^163^^^^^148^178^int charno1 = p1.first.getCharno (  ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int lineno1 = p1.first.lineNumber;int charno1 = p1.first.getCharno (  ) ;^163^^^^^148^178^int charno1 = p1.first.getCharno (  ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int charno2 = p2.first.getCharno (  ) ;int charno1 = p1.first.getCharno (  ) ;^163^^^^^148^178^int charno1 = p1.first.getCharno (  ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P14_Delete_Statement]^^163^^^^^148^178^int charno1 = p1.first.getCharno (  ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P1_Replace_Type]^long  charno2 = p2.first.getCharno (  ) ;^164^^^^^149^179^int charno2 = p2.first.getCharno (  ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int lineno2 = p2.first.lineNumber;int charno2 = p2.first.getCharno (  ) ;^164^^^^^149^179^int charno2 = p2.first.getCharno (  ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P11_Insert_Donor_Statement]^int charno1 = p1.first.getCharno (  ) ;int charno2 = p2.first.getCharno (  ) ;^164^^^^^149^179^int charno2 = p2.first.getCharno (  ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P14_Delete_Statement]^^164^^^^^149^179^int charno2 = p2.first.getCharno (  ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^if  ( charno1 == charno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^if  ( sourceCompare != charno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^if  ( charno1 != lineno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( charno1 - charno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( charno1 < 0 && 0 <= charno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( charno1 < 0 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( 0 <= charno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( 0 <= charno1 && charno2 < 0 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( 0 <= charno1 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^if  ( charno2 < 0 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P9_Replace_Statement]^if  ( lineno1 != lineno2 )  {^165^^^^^150^180^if  ( charno1 != charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( charno1 < 0 || 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( charno1 > 0 && 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( charno1 < 0 && 0 < charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 < sourceCompare && sourceCompare <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 < 6 && 6 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 < lineno1 && lineno1 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 < -9 && -9 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( lineno2 < 0 && 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( charno1 < 0 && 0 <= sourceCompare )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( charno1 < 0 ) {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  (  0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( 0 <= charno1 && charno2 < 0 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( 0 <= charno1 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( charno2 < 0 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P9_Replace_Statement]^} else if  ( lineno1 < 0 && 0 <= lineno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.P1_LT_P2;^167^168^169^170^171^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  { return P1_LT_P2; } else if  ( 0 <= charno1 && charno2 < 0 )  { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P16_Remove_Block]^^167^168^169^170^171^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  { return P1_LT_P2; } else if  ( 0 <= charno1 && charno2 < 0 )  { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 <= charno1 || charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 < charno1 && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 <= charno1 && charno2 <= 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno2 <= charno1 && charno2 < lineno2 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( -4 <= charno1 && charno2 < -4 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= lineno2 && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= charno1 && sourceCompare < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  ( 0 <= charno1 ) {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else if  (  charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P6_Replace_Expression]^} else {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^} else if  ( 2 <= lineno2 && charno2 < 2 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P9_Replace_Statement]^} else if  ( 0 <= lineno1 && lineno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.P1_GT_P2;^169^170^171^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P16_Remove_Block]^^169^170^171^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  { return P1_GT_P2; }^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^169^^^^^154^184^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p2 == null )  {     if  ( p1 == null )  {         return 0;     }else {         return P1_GT_P2;     } }^169^^^^^154^184^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^169^^^^^154^184^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^169^^^^^154^184^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return sourceCompare;^170^^^^^155^185^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return lineno2;^170^^^^^155^185^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^170^^^^^155^185^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^170^^^^^155^185^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^170^^^^^155^185^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^170^^^^^155^185^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return lineno1;^170^^^^^155^185^return P1_GT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return lineno1;^168^^^^^153^183^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return sourceCompare;^168^^^^^153^183^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^168^^^^^153^183^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  ( p1 == null )  {     return 0; }else {     return P1_GT_P2; }^168^^^^^153^183^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( 0 <= lineno1 )  &&  ( lineno2 < 0 )  )  {     return P1_GT_P2; }^168^^^^^153^183^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P13_Insert_Block]^if  (  ( source1 != null )  &&  ( source2 == null )  )  {     return P1_GT_P2; }^168^^^^^153^183^[Delete]^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( 0 == charno1 && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( -2 <= charno1 && charno2 < -2 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( lineno1 <= charno1 && charno2 < lineno1 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= sourceCompare && charno2 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( 0 <= charno2 && charno1 < 0 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^} else if  (  charno2 < 1 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^return charno1  <<  charno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return sourceCompare - charno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return charno1 - sourceCompare;^166^^^^^151^181^return charno1 - charno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^return charno2 - charno1;^166^^^^^151^181^return charno1 - charno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P12_Insert_Condition]^if  ( charno1 != charno2 )  { return charno1 - charno2; }^166^^^^^151^181^return charno1 - charno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( charno1 == 0 && 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^} else if  ( charno1 <= 0 && 0 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 < lineno2 && lineno2 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno1 < 1 && 1 <= charno2 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P5_Replace_Variable]^} else if  ( charno2 < 0 && 0 <= charno1 )  {^167^^^^^152^182^} else if  ( charno1 < 0 && 0 <= charno2 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( -8 <= charno1 && charno2 < -8 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  ( charno2 <= charno1 && charno2 < charno2 )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return lineno2;^168^^^^^153^183^return P1_LT_P2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P3_Replace_Literal]^} else if  (  <= charno1 && charno2 <  )  {^169^^^^^154^184^} else if  ( 0 <= charno1 && charno2 < 0 )  {^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P2_Replace_Operator]^return charno1  ^  charno2;^166^^^^^151^181^return charno1 - charno2;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P8_Replace_Mix]^return p1.first.description .compareTo (  )  ;^173^^^^^158^188^return p1.first.description.compareTo ( p2.first.description ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
[P14_Delete_Statement]^^173^^^^^158^188^return p1.first.description.compareTo ( p2.first.description ) ;^[CLASS] LeveledJSErrorComparator  [METHOD] compare [RETURN_TYPE] int   CheckLevel> p1 CheckLevel> p2 [VARIABLES] String  source1  source2  boolean  int  P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  Pair  p1  p2  
