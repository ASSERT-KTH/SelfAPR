[P8_Replace_Mix]^private  AbstractCompiler compiler;^88^^^^^83^93^private final AbstractCompiler compiler;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [VARIABLES] 
[P8_Replace_Mix]^private  List<Node> replacements;^89^^^^^84^94^private final List<Node> replacements;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [VARIABLES] 
[P8_Replace_Mix]^private  final Set<Integer> FORBIDDEN_TYPES = ImmutableSet.of ( Token.BLOCK, Token.SCRIPT, Token.VAR, Token.EXPR_RESULT, Token.RETURN ) ;^183^184^^^^183^184^private static final Set<Integer> FORBIDDEN_TYPES = ImmutableSet.of ( Token.BLOCK, Token.SCRIPT, Token.VAR, Token.EXPR_RESULT, Token.RETURN ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [VARIABLES] 
[P8_Replace_Mix]^private  SideEffectAccumulator accumulator;^186^^^^^181^191^private final SideEffectAccumulator accumulator;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^99^^^^^97^101^this.compiler = compiler;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] <init> [RETURN_TYPE] List)   AbstractCompiler compiler Node> replacements [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  
[P8_Replace_Mix]^this.replacements =  null;^100^^^^^97^101^this.replacements = replacements;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] <init> [RETURN_TYPE] List)   AbstractCompiler compiler Node> replacements [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  
[P8_Replace_Mix]^this.compiler =  null;^195^^^^^193^197^this.compiler = compiler;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] <init> [RETURN_TYPE] GatherSideEffectSubexpressionsCallback$SideEffectAccumulator)   AbstractCompiler compiler SideEffectAccumulator accumulator [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  
[P8_Replace_Mix]^this.accumulator =  null;^196^^^^^193^197^this.accumulator = accumulator;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] <init> [RETURN_TYPE] GatherSideEffectSubexpressionsCallback$SideEffectAccumulator)   AbstractCompiler compiler SideEffectAccumulator accumulator [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  
[P3_Replace_Literal]^return false;^105^^^^^104^106^return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] classDefiningCallsHaveSideEffects [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  
[P7_Replace_Invocation]^replacements.add ( original.addChildToBack (  )  ) ;^110^^^^^109^111^replacements.add ( original.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSubTree [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  original  
[P14_Delete_Statement]^^110^^^^^109^111^replacements.add ( original.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSubTree [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  original  
[P11_Insert_Donor_Statement]^Node simplified = original.cloneNode (  ) ;replacements.add ( original.cloneTree (  )  ) ;^110^^^^^109^111^replacements.add ( original.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSubTree [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  original  
[P11_Insert_Donor_Statement]^replacements.add ( simplified ) ;replacements.add ( original.cloneTree (  )  ) ;^110^^^^^109^111^replacements.add ( original.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSubTree [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  original  
[P11_Insert_Donor_Statement]^simplified.addChildToBack ( condition.cloneTree (  )  ) ;replacements.add ( original.cloneTree (  )  ) ;^110^^^^^109^111^replacements.add ( original.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSubTree [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  original  
[P8_Replace_Mix]^replacements.add ( original .cloneNode (  )   ) ;^110^^^^^109^111^replacements.add ( original.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSubTree [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  original  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  &&  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( original.getType (  )  <= Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( original.getType (  )  != Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( original.getType (  |  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P3_Replace_Literal]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "xpectxpected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( simplifiedRight.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or  Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( AND.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: original or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( OR.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or original, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Preconditions.checkArgument ( ( original.addChildToBack (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Preconditions.checkArgument ( ( original .getNext (  )   == Token.AND )  ||  ( original^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P8_Replace_Mix]^Preconditions.checkArgument ( ( simplifiedRight.addChildToBack (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^( simplifiedRight.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^116^117^^^^114^126^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^( original.addChildToBack (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^116^117^^^^114^126^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^( original .getNext (  )   == Token.AND )  ||  ( original^116^117^^^^114^126^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^116^117^^^^114^126^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^"Expected: AND or OR, Got: " + Token.name ( simplified.getType (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^"Expected: AND or OR, Got: " + Token.name ( original.addChildToBack (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P8_Replace_Mix]^"Expected: AND or OR, Got: " + Token.name ( simplifiedRight.getType (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^117^118^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ; Node left = original.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Node left = simplifiedRight.getFirstChild (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Node left = original.addChildToBack (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Node left = original .getType (  )  ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node condition = hook.getFirstChild (  ) ;Node left = original.getFirstChild (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node functionName = node.getFirstChild (  ) ;Node left = original.getFirstChild (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node simplified = original.cloneNode (  ) ;Node left = original.getFirstChild (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node left = node.getFirstChild (  ) ;Node left = original.getFirstChild (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node condition = node.getFirstChild (  ) ;Node left = original.getFirstChild (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P8_Replace_Mix]^Node left = simplifiedRight.addChildToBack (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Node right = simplifiedRight.getNext (  ) ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Node right = left.addChildToBack (  ) ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node ifBranch = condition.getNext (  ) ;Node right = left.getNext (  ) ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node elseBranch = ifBranch.getNext (  ) ;Node right = left.getNext (  ) ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node elseBranch = thenBranch.getNext (  ) ;Node right = left.getNext (  ) ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node thenBranch = condition.getNext (  ) ;Node right = left.getNext (  ) ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node left = node.getFirstChild (  ) ;Node right = left.getNext (  ) ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^119^120^^^^114^126^Node right = left.getNext (  ) ; Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Node simplifiedRight = simplifyShortCircuitBranch ( simplified ) ;^120^^^^^114^126^Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Node simplifiedRight = keepSimplifiedShortCircuitExpression ( right ) ;^120^^^^^114^126^Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^120^^^^^114^126^Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P8_Replace_Mix]^Node simplifiedRight = keepSimplifiedShortCircuitExpression ( simplifiedRight ) ;^120^^^^^114^126^Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Node simplified = simplifiedRight.cloneNode (  ) ;^122^^^^^114^126^Node simplified = original.cloneNode (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Node simplified = original.addChildToBack (  ) ;^122^^^^^114^126^Node simplified = original.cloneNode (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Node simplified = simplified.cloneNode (  ) ;^122^^^^^114^126^Node simplified = original.cloneNode (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^122^123^124^125^126^114^126^Node simplified = original.cloneNode (  ) ; simplified.addChildToBack ( left.cloneTree (  )  ) ; simplified.addChildToBack ( simplifiedRight ) ; replacements.add ( simplified ) ; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^simplified.addChildToBack ( simplifiedRight.cloneTree (  )  ) ;^123^^^^^114^126^simplified.addChildToBack ( left.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^simplified.addChildToBack ( left.addChildToBack (  )  ) ;^123^^^^^114^126^simplified.addChildToBack ( left.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^simplified.addChildToBack ( left .cloneNode (  )   ) ;^123^^^^^114^126^simplified.addChildToBack ( left.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^123^124^125^126^^114^126^simplified.addChildToBack ( left.cloneTree (  )  ) ; simplified.addChildToBack ( simplifiedRight ) ; replacements.add ( simplified ) ; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^simplified.addChildToBack ( simplified.cloneTree (  )  ) ;^123^^^^^114^126^simplified.addChildToBack ( left.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^simplified.addChildToBack ( rightRight ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^simplified.addChildToBack ( right ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^simplified.addChildToBack ( simplifiedRightRight ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^simplified.addChildToBack ( simplified ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^simplified .addChildToBack (  )  ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^124^125^126^^^114^126^simplified.addChildToBack ( simplifiedRight ) ; replacements.add ( simplified ) ; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P8_Replace_Mix]^replacements.add ( right ) ;^125^^^^^114^126^replacements.add ( simplified ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^125^126^^^^114^126^replacements.add ( simplified ) ; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  original  right  simplified  simplifiedRight  
[P2_Replace_Operator]^Preconditions.checkArgument ( hook.getType (  )  <= Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P2_Replace_Operator]^Preconditions.checkArgument ( hook.getType (   instanceof   )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P3_Replace_Literal]^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "ected: HOOK, Got" + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Preconditions.checkArgument ( thenBranch.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Preconditions.checkArgument ( hook.getType (  )  == Token. "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Preconditions.checkArgument ( HOOK.getType (  )  == Token.HOOK, "Expected: hook, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^Preconditions.checkArgument ( hook.addChildToBack (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^Preconditions.checkArgument ( hook .getNext (  )   == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^Preconditions.checkArgument ( thenBranch.addChildToBack (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P14_Delete_Statement]^^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( thenBranch.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^hook.addChildToBack (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P14_Delete_Statement]^^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^"Expected: HOOK, Got: " + Token.name ( thenBranch.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^"Expected: HOOK, Got: " + Token.name ( hook.addChildToBack (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^"Expected: HOOK, Got: " + Token.name ( simplified.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P14_Delete_Statement]^^134^135^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ; Node condition = hook.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^"Expected: HOOK, Got: " + Token.name ( hook .getNext (  )   )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^"Expected: HOOK, Got: " + Token.name ( thenBranch.addChildToBack (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node condition = thenBranch.getFirstChild (  ) ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^Node condition = hook.addChildToBack (  ) ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^Node functionName = node.getFirstChild (  ) ;Node condition = hook.getFirstChild (  ) ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^Node left = original.getFirstChild (  ) ;Node condition = hook.getFirstChild (  ) ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^Node left = node.getFirstChild (  ) ;Node condition = hook.getFirstChild (  ) ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^Node condition = node.getFirstChild (  ) ;Node condition = hook.getFirstChild (  ) ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node condition = simplified.getFirstChild (  ) ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^Node condition = hook .getType (  )  ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P14_Delete_Statement]^^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node thenBranch = simplified.getNext (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^Node thenBranch = condition.addChildToBack (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^Node ifBranch = condition.getNext (  ) ;Node thenBranch = condition.getNext (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^Node elseBranch = ifBranch.getNext (  ) ;Node thenBranch = condition.getNext (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^Node right = left.getNext (  ) ;Node thenBranch = condition.getNext (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^Node elseBranch = thenBranch.getNext (  ) ;Node thenBranch = condition.getNext (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node thenBranch = thenBranch.getNext (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^Node thenBranch = condition .getType (  )  ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P14_Delete_Statement]^^136^137^^^^129^154^Node thenBranch = condition.getNext (  ) ; Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node elseBranch = simplified.getNext (  ) ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^Node elseBranch = thenBranch.addChildToBack (  ) ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^Node elseBranch = thenBranch .getType (  )  ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^Node ifBranch = condition.getNext (  ) ;Node elseBranch = thenBranch.getNext (  ) ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^Node elseBranch = ifBranch.getNext (  ) ;Node elseBranch = thenBranch.getNext (  ) ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^Node right = left.getNext (  ) ;Node elseBranch = thenBranch.getNext (  ) ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^Node thenBranch = condition.getNext (  ) ;Node elseBranch = thenBranch.getNext (  ) ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P2_Replace_Operator]^if  ( thenHasSideEffects || elseHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^if  ( elseHasSideEffects && elseHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^if  ( thenHasSideEffects && thenHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P6_Replace_Expression]^if  ( thenHasSideEffects ) {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P6_Replace_Expression]^if  (  elseHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^if  ( HasSideEffects ) {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P13_Insert_Block]^if  ( thenHasSideEffects || elseHasSideEffects )  {     int type =  ( thenHasSideEffects )  ? AND : OR;     Node body =  ( thenHasSideEffects )  ? thenBranch : elseBranch;     Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;     replacements.add ( simplified ) ; }else {     throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ; }^138^^^^^129^154^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P2_Replace_Operator]^} else if  ( thenHasSideEffects && elseHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^} else if  ( elseHasSideEffects || elseHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^} else if  ( thenHasSideEffects || thenHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^} else if  ( elseHasSideEffects || thenHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P6_Replace_Expression]^} else if  ( thenHasSideEffects ) {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P6_Replace_Expression]^} else if  (  elseHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P6_Replace_Expression]^} else {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^}  if  ( HasSideEffects || HasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "eepeepSimplifiedHookExpression must keep at least 1 branch" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " keep at l" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P4_Replace_Constructor]^Node simplified = new Node (  condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P4_Replace_Constructor]^Node simplified = new Node ( type.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node simplified = new Node ( type, thenBranch.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( thenBranch )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node simplified = new Node ( condition, type.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node simplified = new Node ( type, body.cloneTree (  ) , simplifyShortCircuitBranch ( condition )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^Node simplified = new Node ( type, condition.addChildToBack (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^Node simplified = new Node ( type, condition.cloneTree (  ) , keepSimplifiedShortCircuitExpression ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P1_Replace_Type]^long  type = thenHasSideEffects ? Token.AND : Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^int type = elseHasSideEffects ? Token.AND : Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^int type = thenHasSideEffects ? Token.4 : Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P6_Replace_Expression]^int type  =  Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P6_Replace_Expression]^int type  =  Token.AND ;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^Node body = thenHasSideEffects ? thenBranch : elseBranch;int type = thenHasSideEffects ? Token.AND : Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node body = elseHasSideEffects ? thenBranch : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node body = thenHasSideEffects ? thenBranch : thenBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node body = elseBranch ? thenBranch : thenHasSideEffects;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node body = thenHasSideEffects ? elseBranch : thenBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P6_Replace_Expression]^Node body  =  elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P6_Replace_Expression]^Node body  =  thenBranch ;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^int type = thenHasSideEffects ? Token.AND : Token.OR;Node body = thenHasSideEffects ? thenBranch : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P11_Insert_Donor_Statement]^Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^type, thenBranch.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^type, condition.addChildToBack (  ) , simplifyShortCircuitBranch ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^type, condition .cloneNode (  )  , simplifyShortCircuitBranch ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P14_Delete_Statement]^^148^149^150^151^152^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ; replacements.add ( simplified ) ; } else { throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( thenBranch )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^type, condition.cloneTree (  ) , keepSimplifiedShortCircuitExpression ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^type, condition.cloneTree (  ) , keepSimplifiedShortCircuitExpression ( thenBranch )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^replacements.add ( thenBranch ) ;^149^^^^^129^154^replacements.add ( simplified ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P14_Delete_Statement]^^149^150^151^152^153^129^154^replacements.add ( simplified ) ; } else { throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node simplified = new Node ( body, condition.cloneTree (  ) , simplifyShortCircuitBranch ( type )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^Node simplified = new Node ( type, condition .cloneNode (  )  , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "mplifiedHookExeepSimplifiedHookExpression must keep at least 1 branch" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P1_Replace_Type]^short  type = thenHasSideEffects ? Token.AND : Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^int type = thenHasSideEffects ? Token.2 : Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node body = thenHasSideEffects ? simplified : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 brancheepSimplif" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( simplified )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^replacements.add ( hook ) ;^149^^^^^129^154^replacements.add ( simplified ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node simplified = thenBranch.cloneNode (  ) ;^139^^^^^129^154^Node simplified = hook.cloneNode (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^Node simplified = hook.addChildToBack (  ) ;^139^^^^^129^154^Node simplified = hook.cloneNode (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^Node simplified = hook .cloneTree (  )  ;^139^^^^^129^154^Node simplified = hook.cloneNode (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^Node simplified = thenBranch .cloneTree (  )  ;^139^^^^^129^154^Node simplified = hook.cloneNode (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^Node simplified = simplified.cloneNode (  ) ;^139^^^^^129^154^Node simplified = hook.cloneNode (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^simplified.addChildToBack ( thenBranch.cloneTree (  )  ) ;^140^^^^^129^154^simplified.addChildToBack ( condition.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^simplified .addChildToBack (  )  ;^140^^^^^129^154^simplified.addChildToBack ( condition.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^simplified.addChildToBack ( condition.addChildToBack (  )  ) ;^140^^^^^129^154^simplified.addChildToBack ( condition.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^simplified.addChildToBack ( thenBranch.addChildToBack (  )  ) ;^140^^^^^129^154^simplified.addChildToBack ( condition.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^simplified.addChildToBack ( condition .cloneNode (  )   ) ;^140^^^^^129^154^simplified.addChildToBack ( condition.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^simplified.addChildToBack ( simplified.addChildToBack (  )  ) ;^140^^^^^129^154^simplified.addChildToBack ( condition.cloneTree (  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^simplified.addChildToBack ( simplifyShortCircuitBranch ( hook )  ) ;^141^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^simplified .addChildToBack (  )  ;^141^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^simplified.addChildToBack ( keepSimplifiedShortCircuitExpression ( thenBranch )  ) ;^141^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^simplified.addChildToBack ( keepSimplifiedShortCircuitExpression ( hook )  ) ;^141^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^simplified.addChildToBack ( simplifyShortCircuitBranch ( simplified )  ) ;^141^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^142^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^simplified.addChildToBack ( keepSimplifiedShortCircuitExpression ( elseBranch )  ) ;^142^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^simplified.addChildToBack ( keepSimplifiedShortCircuitExpression ( thenBranch )  ) ;^142^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^replacements.add ( thenBranch ) ;^143^^^^^129^154^replacements.add ( simplified ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^replacements.add ( hook ) ;^143^^^^^129^154^replacements.add ( simplified ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "pSi" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "epSimplifiedHookExpression must keep " ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^return 0;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^Node body = thenBranch ? thenHasSideEffects : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^Node simplified = new Node ( type, condition.addChildToBack (  ) , simplifyShortCircuitBranch ( thenBranch )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^type, thenBranch.addChildToBack (  ) , simplifyShortCircuitBranch ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "kExpression must kee" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branchession must keep" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P7_Replace_Invocation]^simplified .addChildToBack (  )  ;^142^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P8_Replace_Mix]^simplified.addChildToBack ( simplifyShortCircuitBranch ( simplified )  ) ;^142^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P5_Replace_Variable]^type, simplified.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  body  condition  elseBranch  hook  simplified  thenBranch  List  replacements  int  type  
[P14_Delete_Statement]^^157^^^^^156^180^List<Node> parts = Lists.newArrayList (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler )  )  ) ;^160^161^162^^^156^180^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^new GatherSideEffectSubexpressionsCallback (  new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^160^161^162^^^156^180^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^new GatherSideEffectSubexpressionsCallback ( parts, new CopySideEffectSubexpressions ( compiler, compiler )  )  ) ;^160^161^162^^^156^180^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^new CopySideEffectSubexpressions ( compiler )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^new CopySideEffectSubexpressions (  parts )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^new CopySideEffectSubexpressions ( parts, compiler )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler,  new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, ret, new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^NodeTraversal.traverse (  node, new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^NodeTraversal.traverse ( node, compiler, new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P2_Replace_Operator]^if  ( ret == null )  {^166^^^^^156^180^if  ( ret != null )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^if  ( node != null )  {^166^^^^^156^180^if  ( ret != null )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P8_Replace_Mix]^if  ( part != true )  {^166^^^^^156^180^if  ( ret != null )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P15_Unwrap_Block]^ret = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA, ret, part);^166^167^168^169^170^156^180^if  ( ret != null )  { ret = new Node ( Token.COMMA, ret, part ) ; } else { ret = part; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P16_Remove_Block]^^166^167^168^169^170^156^180^if  ( ret != null )  { ret = new Node ( Token.COMMA, ret, part ) ; } else { ret = part; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^ret = ret;^169^^^^^156^180^ret = part;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P8_Replace_Mix]^ret =  node;^169^^^^^156^180^ret = part;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P4_Replace_Constructor]^ret = new Node ( Token.COMMA,  part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P4_Replace_Constructor]^ret = new Node ( Token.COMMA, ret ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^ret = new Node ( Token.COMMA, part, part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^ret = new Node ( Token.COMMA, ret, ret ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^ret = new Node ( Token. ret, part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^ret = new Node ( Token.COMMA, part, ret ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P13_Insert_Block]^if  ( ret != null )  {     ret = new Node ( COMMA, ret, part ) ; }else {     ret = part; }^167^^^^^156^180^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^ret = new Node ( Token.COMMA, node, part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^ret = new Node ( Token.COMMA, ret, node ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P2_Replace_Operator]^if  ( ret != null )  {^173^^^^^156^180^if  ( ret == null )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^if  ( part == null )  {^173^^^^^156^180^if  ( ret == null )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P6_Replace_Expression]^if  ( "expected at least one side effect subexpression in short " + "circuit branch." )  {^173^^^^^156^180^if  ( ret == null )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P8_Replace_Mix]^if  ( ret == true )  {^173^^^^^156^180^if  ( ret == null )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("expected at least one side effect subexpression in short " + "circuit branch."));^173^174^175^176^177^156^180^if  ( ret == null )  { throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P16_Remove_Block]^^173^174^175^176^177^156^180^if  ( ret == null )  { throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "  &&  "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short expected at least one side effe" + "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch.uit branc" ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P13_Insert_Block]^if  ( ret == null )  {     throw new IllegalArgumentException (  ( "expected at least one side effect subexpression in short " + "circuit branch." )  ) ; }^174^^^^^156^180^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "  ^  "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ected" + "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch.nc" ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "  <<  "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "xpected at least one side effect su" + "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "  !=  "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short at least one side effect s" + "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch.ircuit " ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^return part;^179^^^^^156^180^return ret;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  part  ret  
[P5_Replace_Variable]^SubclassRelationship classes = callNode.getCodingConvention (  ) .getClassesDefinedByCall ( compiler ) ;^204^205^^^^203^207^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] isClassDefiningCall [RETURN_TYPE] boolean   Node callNode [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  callNode  List  parts  replacements  SubclassRelationship  classes  
[P14_Delete_Statement]^^205^206^^^^203^207^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ; return classes != null;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] isClassDefiningCall [RETURN_TYPE] boolean   Node callNode [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  callNode  List  parts  replacements  SubclassRelationship  classes  
[P2_Replace_Operator]^return classes == null;^206^^^^^203^207^return classes != null;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] isClassDefiningCall [RETURN_TYPE] boolean   Node callNode [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  callNode  List  parts  replacements  SubclassRelationship  classes  
[P8_Replace_Mix]^return classes ;^206^^^^^203^207^return classes != null;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] isClassDefiningCall [RETURN_TYPE] boolean   Node callNode [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  callNode  List  parts  replacements  SubclassRelationship  classes  
[P2_Replace_Operator]^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  && NodeUtil.isControlStructure ( node )  )  {^224^225^^^^209^239^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^if  ( FORBIDDEN_TYPES.contains ( parent.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^224^225^^^^209^239^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^if  ( node.contains ( FORBIDDEN_TYPES.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^224^225^^^^209^239^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P6_Replace_Expression]^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  ) {^224^225^^^^209^239^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P6_Replace_Expression]^if  (  NodeUtil.isControlStructure ( node )  )  {^224^225^^^^209^239^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P6_Replace_Expression]^if  ( name ( node.getType (  )  )  + " nodes are not supported." )  {^224^225^^^^209^239^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  ( FORBIDDEN_TYPES.contains ( node.addChildToBack (  )  )  || NodeUtil.isControlStructure ( node )  )  {^224^225^^^^209^239^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isName ( node )  )  {^224^225^^^^209^239^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((com.google.javascript.rhino.Token.name(node.getType())) + " nodes are not supported."));^224^225^226^227^228^209^239^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  { throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P16_Remove_Block]^^224^225^226^227^228^209^239^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  { throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )   <<  " nodes are not supported." ) ;^226^227^^^^224^228^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P3_Replace_Literal]^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + "s are " ) ;^226^227^^^^224^228^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^throw new IllegalArgumentException ( Token.name ( parent.getType (  )  )  + " nodes are not supported." ) ;^226^227^^^^224^228^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^throw new IllegalArgumentException ( Token.name ( node.addChildToBack (  )  )  + " nodes are not supported." ) ;^226^227^^^^224^228^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )   >>  " nodes are not supported." ) ;^226^227^^^^224^228^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P3_Replace_Literal]^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + "es are nnodes are not supported." ) ;^226^227^^^^224^228^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " ;^226^227^^^^224^228^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^226^227^^^^224^228^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^Token.name ( parent.getType (  )  )  + " nodes are not supported." ) ;^227^^^^^224^228^Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^Token.name ( node.addChildToBack (  )  )  + " nodes are not supported." ) ;^227^^^^^224^228^Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P14_Delete_Statement]^^227^^^^^224^228^Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^Token.name ( node .getNext (  )   )  + " nodes are not supported." ) ;^227^^^^^224^228^Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )   !=  " nodes are not supported." ) ;^226^227^^^^211^241^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P3_Replace_Literal]^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + "uppnodes are not supported." ) ;^226^227^^^^211^241^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^throw new IllegalArgumentException ( Token.name ( parent.getType (  )  )  + " nodes are not supported." ) ;^226^227^^^^211^241^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^throw new IllegalArgumentException ( Token.name ( node.addChildToBack (  )  )  + " nodes are not supported." ) ;^226^227^^^^211^241^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )   ||  " nodes are not supported." ) ;^226^227^^^^211^241^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P3_Replace_Literal]^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " " ) ;^226^227^^^^211^241^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^throw new IllegalArgumentException ( Token.name ( node .getNext (  )   )  + " nodes are not supported." ) ;^226^227^^^^211^241^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " ;^226^227^^^^211^241^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^226^227^^^^211^241^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  ( FORBIDDEN_TYPES.contains ( node .getNext (  )   )  || NodeUtil.isControlStructure ( node )  )  {^224^225^^^^209^239^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^NodeUtil.isControlStructure ( parent )  )  {^225^^^^^210^240^NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^NodeUtil.isName ( node )  )  {^225^^^^^210^240^NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^NodeUtil.isName ( parent )  )  {^225^^^^^210^240^NodeUtil.isControlStructure ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P14_Delete_Statement]^^225^226^227^^^210^240^NodeUtil.isControlStructure ( node )  )  { throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  ( ! ( constructorCallHasSideEffects ( node )  )  )  {     return true; }^225^^^^^210^240^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  ( ! ( functionCallHasSideEffects ( node )  )  )  {     return true; }^225^^^^^210^240^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^Token.name ( node.addChildToBack (  )  )  + " nodes are not supported." ) ;^227^^^^^212^242^Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^Token.name ( parent.getType (  )  )  + " nodes are not supported." ) ;^227^^^^^212^242^Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P14_Delete_Statement]^^227^^^^^212^242^Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^Token.name ( node .getNext (  )   )  + " nodes are not supported." ) ;^227^^^^^212^242^Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^if  ( node.getType (  )  <= Token.FUNCTION )  {^231^^^^^216^246^if  ( node.getType (  )  == Token.FUNCTION )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.FUNCTION )  {^231^^^^^216^246^if  ( node.getType (  )  == Token.FUNCTION )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  ( node.addChildToBack (  )  == Token.FUNCTION )  {^231^^^^^216^246^if  ( node.getType (  )  == Token.FUNCTION )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  ( node .getNext (  )   == Token.FUNCTION )  {^231^^^^^216^246^if  ( node.getType (  )  == Token.FUNCTION )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.HOOK )  {^231^^^^^216^246^if  ( node.getType (  )  == Token.FUNCTION )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P15_Unwrap_Block]^return false;^231^232^233^^^216^246^if  ( node.getType (  )  == Token.FUNCTION )  { return false; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P16_Remove_Block]^^231^232^233^^^216^246^if  ( node.getType (  )  == Token.FUNCTION )  { return false; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( NEW )  )  {     return processConstructorCall ( node ) ; }else {     accumulator.keepSubTree ( node ) ;     return false; }^231^^^^^216^246^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( HOOK )  )  {     return processHook ( node ) ; }^231^^^^^216^246^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P3_Replace_Literal]^return true;^232^^^^^217^247^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^if  ( node.getType (  )  < Token.HOOK )  {^236^^^^^221^251^if  ( node.getType (  )  == Token.HOOK )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.HOOK )  {^236^^^^^221^251^if  ( node.getType (  )  == Token.HOOK )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  ( node.addChildToBack (  )  == Token.HOOK )  {^236^^^^^221^251^if  ( node.getType (  )  == Token.HOOK )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P15_Unwrap_Block]^return processHook(node);^236^237^238^^^221^251^if  ( node.getType (  )  == Token.HOOK )  { return processHook ( node ) ; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P16_Remove_Block]^^236^237^238^^^221^251^if  ( node.getType (  )  == Token.HOOK )  { return processHook ( node ) ; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( NEW )  )  {     return processConstructorCall ( node ) ; }else {     accumulator.keepSubTree ( node ) ;     return false; }^236^^^^^221^251^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  (  (  ( node.getType (  )  )  ==  ( AND )  )  ||  (  ( node.getType (  )  )  ==  ( OR )  )  )  {     return processShortCircuitExpression ( node ) ; }^236^^^^^221^251^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( FUNCTION )  )  {     return false; }^236^^^^^221^251^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^return processHook ( parent ) ;^237^^^^^222^252^return processHook ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^return processFunctionCall ( node ) ;^237^^^^^222^252^return processHook ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P14_Delete_Statement]^^237^^^^^222^252^return processHook ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  ( node .getNext (  )   == Token.HOOK )  {^236^^^^^221^251^if  ( node.getType (  )  == Token.HOOK )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^if  ( parent.addChildToBack (  )  == Token.HOOK )  {^236^^^^^221^251^if  ( node.getType (  )  == Token.HOOK )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^if  (  ( node.getType (  )  == Token.AND )  &&  ( node.getType (  )  == Token.OR )  )  {^241^^^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^if  (  ( node.getType (  )  != Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^241^^^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^if  (  ( node.getType (  )  >= Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^241^^^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P6_Replace_Expression]^if  (  ( node.getType (  )  == Token.AND )  ) {^241^^^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P6_Replace_Expression]^if  (   ( node.getType (  )  == Token.OR )  )  {^241^^^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P6_Replace_Expression]^if  ( node.getType (  )  == AND )  {^241^^^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P6_Replace_Expression]^if  ( node.getType (  )  == OR )  {^241^^^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  (  ( node.addChildToBack (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^241^^^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  (  ( node .getNext (  )   == Token.AND )  ||  ( node^241^^^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^if  (  ( parent.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^241^^^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P15_Unwrap_Block]^return processShortCircuitExpression(node);^241^242^243^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  { return processShortCircuitExpression ( node ) ; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P16_Remove_Block]^^241^242^243^^^226^256^if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  { return processShortCircuitExpression ( node ) ; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( HOOK )  )  {     return processHook ( node ) ; }^241^^^^^226^256^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( CALL )  )  {     return processFunctionCall ( node ) ; }else     if  (  ( node.getType (  )  )  ==  ( NEW )  )  {         return processConstructorCall ( node ) ;     }else {         accumulator.keepSubTree ( node ) ;         return false;     }^241^^^^^226^256^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^return processConstructorCall ( node ) ;^242^^^^^227^257^return processShortCircuitExpression ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^return processShortCircuitExpression ( parent ) ;^242^^^^^227^257^return processShortCircuitExpression ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P14_Delete_Statement]^^242^^^^^227^257^return processShortCircuitExpression ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^return processConstructorCall ( parent ) ;^242^^^^^227^257^return processShortCircuitExpression ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( parent )  )  {^245^^^^^230^260^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P6_Replace_Expression]^if  ( node.getType() == NEW )  {^245^^^^^230^260^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  ( !NodeUtil.mayHaveSideEffects ( node )  )  {^245^^^^^230^260^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  ( !NodeUtil .mayHaveSideEffects ( parent )   )  {^245^^^^^230^260^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P9_Replace_Statement]^if  ( !NodeUtil.constructorCallHasSideEffects ( node )  )  {^245^^^^^230^260^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P9_Replace_Statement]^if  ( !NodeUtil.functionCallHasSideEffects ( node )  )  {^245^^^^^230^260^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P9_Replace_Statement]^if  ( NodeUtil.mayHaveSideEffects ( right )  )  {^245^^^^^230^260^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( CALL )  )  {     return processFunctionCall ( node ) ; }else     if  (  ( node.getType (  )  )  ==  ( NEW )  )  {         return processConstructorCall ( node ) ;     }else {         accumulator.keepSubTree ( node ) ;         return false;     }^245^^^^^230^260^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^if  ( node.getType (  )  >= Token.CALL )  {^251^^^^^245^259^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^if  ( node.getType (  )  != Token.CALL )  {^251^^^^^245^259^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P6_Replace_Expression]^if  ( node.getType() == NEW )  {^251^^^^^245^259^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  ( node.addChildToBack (  )  == Token.CALL )  {^251^^^^^245^259^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  ( node .getNext (  )   == Token.CALL )  {^251^^^^^245^259^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.CALL )  {^251^^^^^245^259^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.HOOK )  {^251^^^^^245^259^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^} else if  ( node.getType (  )  < Token.NEW )  {^253^^^^^245^259^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.NEW )  {^253^^^^^245^259^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P6_Replace_Expression]^} else {^253^^^^^245^259^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^} else if  ( node.addChildToBack (  )  == Token.NEW )  {^253^^^^^245^259^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P15_Unwrap_Block]^return processConstructorCall(node);^253^254^255^256^257^245^259^} else if  ( node.getType (  )  == Token.NEW )  { return processConstructorCall ( node ) ; } else { accumulator.keepSubTree ( node ) ; return false; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P16_Remove_Block]^^253^254^255^256^257^245^259^} else if  ( node.getType (  )  == Token.NEW )  { return processConstructorCall ( node ) ; } else { accumulator.keepSubTree ( node ) ; return false; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( HOOK )  )  {     return processHook ( node ) ; }^253^^^^^245^259^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( CALL )  )  {     return processFunctionCall ( node ) ; }else     if  (  ( node.getType (  )  )  ==  ( NEW )  )  {         return processConstructorCall ( node ) ;     }else {         accumulator.keepSubTree ( node ) ;         return false;     }^253^^^^^245^259^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( FUNCTION )  )  {     return false; }^253^^^^^245^259^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P3_Replace_Literal]^return true;^257^^^^^245^259^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^accumulator.keepSubTree ( parent ) ;^256^^^^^245^259^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;^256^^^^^245^259^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P14_Delete_Statement]^^256^257^^^^245^259^accumulator.keepSubTree ( node ) ; return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P11_Insert_Donor_Statement]^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;accumulator.keepSubTree ( node ) ;^256^^^^^245^259^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^return processConstructorCall ( parent ) ;^254^^^^^245^259^return processConstructorCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^return processFunctionCall ( node ) ;^254^^^^^245^259^return processConstructorCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P14_Delete_Statement]^^254^^^^^245^259^return processConstructorCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^} else if  ( node .getNext (  )   == Token.NEW )  {^253^^^^^245^259^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^} else if  ( parent .getNext (  )   == Token.NEW )  {^253^^^^^245^259^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^return processFunctionCall ( parent ) ;^254^^^^^245^259^return processConstructorCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P14_Delete_Statement]^^256^^^^^245^259^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^return processFunctionCall ( parent ) ;^252^^^^^245^259^return processFunctionCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^return processConstructorCall ( node ) ;^252^^^^^245^259^return processFunctionCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^return processConstructorCall ( parent ) ;^252^^^^^245^259^return processFunctionCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P14_Delete_Statement]^^252^^^^^245^259^return processFunctionCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^} else if  ( node.getType (  )  >= Token.NEW )  {^253^^^^^245^259^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^}  if  ( node.addChildToBack (  )  == Token.NEW )  {^253^^^^^245^259^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^} else if  ( parent.addChildToBack (  )  == Token.NEW )  {^253^^^^^245^259^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P3_Replace_Literal]^return false;^246^^^^^231^261^return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^if  ( node.getType (  )  != Token.CALL )  {^251^^^^^236^266^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^if  ( node.getType (  )  <= Token.CALL )  {^251^^^^^236^266^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.CALL )  {^251^^^^^236^266^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P6_Replace_Expression]^if  ( node.getType() == NEW )  {^251^^^^^236^266^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  ( node.addChildToBack (  )  == Token.CALL )  {^251^^^^^236^266^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^if  ( node .getNext (  )   == Token.CALL )  {^251^^^^^236^266^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^if  ( parent.addChildToBack (  )  == Token.CALL )  {^251^^^^^236^266^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.HOOK )  {^251^^^^^236^266^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^} else if  ( node.getType (  )  <= Token.NEW )  {^253^^^^^238^268^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.NEW )  {^253^^^^^238^268^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P6_Replace_Expression]^} else {^253^^^^^238^268^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^} else if  ( node.addChildToBack (  )  == Token.NEW )  {^253^^^^^238^268^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P15_Unwrap_Block]^return processConstructorCall(node);^253^254^255^256^257^238^268^} else if  ( node.getType (  )  == Token.NEW )  { return processConstructorCall ( node ) ; } else { accumulator.keepSubTree ( node ) ; return false; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P16_Remove_Block]^^253^254^255^256^257^238^268^} else if  ( node.getType (  )  == Token.NEW )  { return processConstructorCall ( node ) ; } else { accumulator.keepSubTree ( node ) ; return false; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( HOOK )  )  {     return processHook ( node ) ; }^253^^^^^238^268^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( CALL )  )  {     return processFunctionCall ( node ) ; }else     if  (  ( node.getType (  )  )  ==  ( NEW )  )  {         return processConstructorCall ( node ) ;     }else {         accumulator.keepSubTree ( node ) ;         return false;     }^253^^^^^238^268^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( FUNCTION )  )  {     return false; }^253^^^^^238^268^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P3_Replace_Literal]^return true;^257^^^^^253^258^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^accumulator.keepSubTree ( parent ) ;^256^^^^^253^258^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;^256^^^^^253^258^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P14_Delete_Statement]^^256^257^^^^253^258^accumulator.keepSubTree ( node ) ; return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P11_Insert_Donor_Statement]^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;accumulator.keepSubTree ( node ) ;^256^^^^^253^258^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^return processConstructorCall ( parent ) ;^254^^^^^239^269^return processConstructorCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^return processFunctionCall ( node ) ;^254^^^^^239^269^return processConstructorCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P14_Delete_Statement]^^254^^^^^239^269^return processConstructorCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^return processFunctionCall ( parent ) ;^254^^^^^239^269^return processConstructorCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P3_Replace_Literal]^return true;^257^^^^^242^272^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^accumulator.keepSubTree ( parent ) ;^256^^^^^241^271^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;^256^^^^^241^271^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^accumulator.keepSimplifiedShortCircuitExpression ( parent ) ;^256^^^^^241^271^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P14_Delete_Statement]^^256^^^^^241^271^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P11_Insert_Donor_Statement]^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;accumulator.keepSubTree ( node ) ;^256^^^^^241^271^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P5_Replace_Variable]^return processFunctionCall ( parent ) ;^252^^^^^237^267^return processFunctionCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P7_Replace_Invocation]^return processConstructorCall ( node ) ;^252^^^^^237^267^return processFunctionCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P14_Delete_Statement]^^252^^^^^237^267^return processFunctionCall ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^} else if  ( node.getType (  )  != Token.NEW )  {^253^^^^^238^268^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^}  if  ( node.getType (  )  == Token.null )  {^253^^^^^238^268^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  ( ! ( constructorCallHasSideEffects ( node )  )  )  {     return true; }^245^^^^^230^260^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P13_Insert_Block]^if  ( ! ( functionCallHasSideEffects ( node )  )  )  {     return true; }^245^^^^^230^260^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^} else if  ( parent .getNext (  )   == Token.NEW )  {^253^^^^^238^268^} else if  ( node.getType (  )  == Token.NEW )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P14_Delete_Statement]^^256^257^^^^241^271^accumulator.keepSubTree ( node ) ; return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  &&  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( node.getType (  )  >= Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( node.getType (  )  != Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( node.getType (  <<  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P3_Replace_Literal]^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , " G" + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( right.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or  Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( AND.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: node or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: OR or AND, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P7_Replace_Invocation]^Preconditions.checkArgument ( ( node.addChildToBack (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P7_Replace_Invocation]^Preconditions.checkArgument ( ( node .getNext (  )   == Token.AND )  ||  ( node^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P14_Delete_Statement]^^268^269^270^^^267^282^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P5_Replace_Variable]^( right.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^269^270^^^^267^282^( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P7_Replace_Invocation]^( node.addChildToBack (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^269^270^^^^267^282^( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P8_Replace_Mix]^( right .getNext (  )   == Token.AND )  ||  ( node^269^270^^^^267^282^( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P14_Delete_Statement]^^269^270^^^^267^282^( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P5_Replace_Variable]^"Expected: AND or OR, Got: " + Token.name ( right.getType (  )  )  ) ;^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P7_Replace_Invocation]^"Expected: AND or OR, Got: " + Token.name ( node.addChildToBack (  )  )  ) ;^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P7_Replace_Invocation]^"Expected: AND or OR, Got: " + Token.name ( node .getNext (  )   )  ) ;^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P14_Delete_Statement]^^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P8_Replace_Mix]^"Expected: AND or OR, Got: " + Token.name ( right.addChildToBack (  )  )  ) ;^270^^^^^267^282^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P5_Replace_Variable]^Node left = right.getFirstChild (  ) ;^274^^^^^267^282^Node left = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P7_Replace_Invocation]^Node left = node.addChildToBack (  ) ;^274^^^^^267^282^Node left = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^Node condition = hook.getFirstChild (  ) ;Node left = node.getFirstChild (  ) ;^274^^^^^267^282^Node left = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^Node right = left.getNext (  ) ;Node left = node.getFirstChild (  ) ;^274^^^^^267^282^Node left = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^Node functionName = node.getFirstChild (  ) ;Node left = node.getFirstChild (  ) ;^274^^^^^267^282^Node left = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^Node left = original.getFirstChild (  ) ;Node left = node.getFirstChild (  ) ;^274^^^^^267^282^Node left = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^Node condition = node.getFirstChild (  ) ;Node left = node.getFirstChild (  ) ;^274^^^^^267^282^Node left = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P7_Replace_Invocation]^Node left = node .getType (  )  ;^274^^^^^267^282^Node left = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P8_Replace_Mix]^Node left = right.addChildToBack (  ) ;^274^^^^^267^282^Node left = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P14_Delete_Statement]^^274^275^^^^267^282^Node left = node.getFirstChild (  ) ; Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P5_Replace_Variable]^Node right = node.getNext (  ) ;^275^^^^^267^282^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P7_Replace_Invocation]^Node right = left.addChildToBack (  ) ;^275^^^^^267^282^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P7_Replace_Invocation]^Node right = left .getType (  )  ;^275^^^^^267^282^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^Node ifBranch = condition.getNext (  ) ;Node right = left.getNext (  ) ;^275^^^^^267^282^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^Node elseBranch = ifBranch.getNext (  ) ;Node right = left.getNext (  ) ;^275^^^^^267^282^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^Node elseBranch = thenBranch.getNext (  ) ;Node right = left.getNext (  ) ;^275^^^^^267^282^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^Node thenBranch = condition.getNext (  ) ;Node right = left.getNext (  ) ;^275^^^^^267^282^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P11_Insert_Donor_Statement]^Node left = node.getFirstChild (  ) ;Node right = left.getNext (  ) ;^275^^^^^267^282^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P5_Replace_Variable]^Node right = right.getNext (  ) ;^275^^^^^267^282^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P14_Delete_Statement]^^275^^^^^267^282^Node right = left.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P5_Replace_Variable]^if  ( NodeUtil.mayHaveSideEffects ( left )  )  {^276^^^^^267^282^if  ( NodeUtil.mayHaveSideEffects ( right )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P7_Replace_Invocation]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( right )  )  {^276^^^^^267^282^if  ( NodeUtil.mayHaveSideEffects ( right )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P7_Replace_Invocation]^if  ( NodeUtil .nodeTypeMayHaveSideEffects ( node )   )  {^276^^^^^267^282^if  ( NodeUtil.mayHaveSideEffects ( right )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P9_Replace_Statement]^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^276^^^^^267^282^if  ( NodeUtil.mayHaveSideEffects ( right )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P9_Replace_Statement]^if  ( !NodeUtil.functionCallHasSideEffects ( node )  )  {^276^^^^^267^282^if  ( NodeUtil.mayHaveSideEffects ( right )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P15_Unwrap_Block]^accumulator.keepSimplifiedShortCircuitExpression(node); return false;^276^277^278^279^280^267^282^if  ( NodeUtil.mayHaveSideEffects ( right )  )  { accumulator.keepSimplifiedShortCircuitExpression ( node ) ; return false; } else { return true; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P16_Remove_Block]^^276^277^278^279^280^267^282^if  ( NodeUtil.mayHaveSideEffects ( right )  )  { accumulator.keepSimplifiedShortCircuitExpression ( node ) ; return false; } else { return true; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P3_Replace_Literal]^return false;^280^^^^^267^282^return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P3_Replace_Literal]^return true;^278^^^^^267^282^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P5_Replace_Variable]^accumulator.keepSimplifiedShortCircuitExpression ( right ) ;^277^^^^^267^282^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P7_Replace_Invocation]^accumulator.keepSubTree ( node ) ;^277^^^^^267^282^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P8_Replace_Mix]^accumulator.keepSubTree ( right ) ;^277^^^^^267^282^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P14_Delete_Statement]^^277^278^279^280^281^267^282^accumulator.keepSimplifiedShortCircuitExpression ( node ) ; return false; } else { return true; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P5_Replace_Variable]^if  ( NodeUtil.mayHaveSideEffects ( node )  )  {^276^^^^^267^282^if  ( NodeUtil.mayHaveSideEffects ( right )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P13_Insert_Block]^if  ( ! ( constructorCallHasSideEffects ( node )  )  )  {     return true; }^276^^^^^267^282^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P13_Insert_Block]^if  ( ! ( functionCallHasSideEffects ( node )  )  )  {     return true; }^276^^^^^267^282^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processShortCircuitExpression [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  left  node  right  
[P2_Replace_Operator]^Preconditions.checkArgument ( node.getType (  )  != Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^290^291^292^^^289^306^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P2_Replace_Operator]^Preconditions.checkArgument ( node.getType (  !=  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^290^291^292^^^289^306^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P3_Replace_Literal]^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "ed: Hxpected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^290^291^292^^^289^306^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^Preconditions.checkArgument ( node.getType (  )  == Token. "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^290^291^292^^^289^306^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^Preconditions.checkArgument ( HOOK.getType (  )  == Token.HOOK, "Expected: node, Got: " + Token.name ( node.getType (  )  )  ) ;^290^291^292^^^289^306^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P7_Replace_Invocation]^Preconditions.checkArgument ( node.addChildToBack (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^290^291^292^^^289^306^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P7_Replace_Invocation]^Preconditions.checkArgument ( node .getNext (  )   == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node^290^291^292^^^289^306^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P14_Delete_Statement]^^290^291^292^^^289^306^Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( ifBranch.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P7_Replace_Invocation]^node.addChildToBack (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P8_Replace_Mix]^node.addChildToBack (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( ifBranch.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P14_Delete_Statement]^^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^291^292^^^^289^306^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^"Expected: HOOK, Got: " + Token.name ( ifBranch.getType (  )  )  ) ;^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P7_Replace_Invocation]^"Expected: HOOK, Got: " + Token.name ( node.addChildToBack (  )  )  ) ;^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P14_Delete_Statement]^^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P7_Replace_Invocation]^"Expected: HOOK, Got: " + Token.name ( node .getNext (  )   )  ) ;^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P8_Replace_Mix]^"Expected: HOOK, Got: " + Token.name ( ifBranch.addChildToBack (  )  )  ) ;^292^^^^^289^306^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^Node condition = ifBranch.getFirstChild (  ) ;^294^^^^^289^306^Node condition = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P7_Replace_Invocation]^Node condition = node.addChildToBack (  ) ;^294^^^^^289^306^Node condition = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^Node condition = hook.getFirstChild (  ) ;Node condition = node.getFirstChild (  ) ;^294^^^^^289^306^Node condition = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^Node functionName = node.getFirstChild (  ) ;Node condition = node.getFirstChild (  ) ;^294^^^^^289^306^Node condition = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^Node left = original.getFirstChild (  ) ;Node condition = node.getFirstChild (  ) ;^294^^^^^289^306^Node condition = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^Node left = node.getFirstChild (  ) ;Node condition = node.getFirstChild (  ) ;^294^^^^^289^306^Node condition = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P7_Replace_Invocation]^Node condition = node .getType (  )  ;^294^^^^^289^306^Node condition = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P14_Delete_Statement]^^294^295^^^^289^306^Node condition = node.getFirstChild (  ) ; Node ifBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P7_Replace_Invocation]^Node ifBranch = condition.addChildToBack (  ) ;^295^^^^^289^306^Node ifBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P7_Replace_Invocation]^Node ifBranch = condition .getType (  )  ;^295^^^^^289^306^Node ifBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P8_Replace_Mix]^Node ifBranch = node.getNext (  ) ;^295^^^^^289^306^Node ifBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^Node elseBranch = ifBranch.getNext (  ) ;Node ifBranch = condition.getNext (  ) ;^295^^^^^289^306^Node ifBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^Node right = left.getNext (  ) ;Node ifBranch = condition.getNext (  ) ;^295^^^^^289^306^Node ifBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^Node elseBranch = thenBranch.getNext (  ) ;Node ifBranch = condition.getNext (  ) ;^295^^^^^289^306^Node ifBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^Node thenBranch = condition.getNext (  ) ;Node ifBranch = condition.getNext (  ) ;^295^^^^^289^306^Node ifBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P8_Replace_Mix]^Node ifBranch = node .getType (  )  ;^295^^^^^289^306^Node ifBranch = condition.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^Node elseBranch = node.getNext (  ) ;^296^^^^^289^306^Node elseBranch = ifBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P7_Replace_Invocation]^Node elseBranch = ifBranch.addChildToBack (  ) ;^296^^^^^289^306^Node elseBranch = ifBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P8_Replace_Mix]^Node elseBranch = node .getType (  )  ;^296^^^^^289^306^Node elseBranch = ifBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^Node ifBranch = condition.getNext (  ) ;Node elseBranch = ifBranch.getNext (  ) ;^296^^^^^289^306^Node elseBranch = ifBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^Node right = left.getNext (  ) ;Node elseBranch = ifBranch.getNext (  ) ;^296^^^^^289^306^Node elseBranch = ifBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^Node elseBranch = thenBranch.getNext (  ) ;Node elseBranch = ifBranch.getNext (  ) ;^296^^^^^289^306^Node elseBranch = ifBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^Node thenBranch = condition.getNext (  ) ;Node elseBranch = ifBranch.getNext (  ) ;^296^^^^^289^306^Node elseBranch = ifBranch.getNext (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P7_Replace_Invocation]^boolean thenHasSideEffects = NodeUtil.nodeTypeMayHaveSideEffects ( ifBranch ) ;^297^^^^^289^306^boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( ifBranch ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P8_Replace_Mix]^boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( node ) ;^297^^^^^289^306^boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( ifBranch ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ;boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( ifBranch ) ;^297^^^^^289^306^boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( ifBranch ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P8_Replace_Mix]^boolean thenHasSideEffects = NodeUtil.nodeTypeMayHaveSideEffects ( node ) ;^297^^^^^289^306^boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( ifBranch ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P13_Insert_Block]^if  ( ! ( constructorCallHasSideEffects ( node )  )  )  {     return true; }^297^^^^^289^306^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P13_Insert_Block]^if  ( ! ( functionCallHasSideEffects ( node )  )  )  {     return true; }^297^^^^^289^306^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( node ) ;^298^^^^^289^306^boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P7_Replace_Invocation]^boolean elseHasSideEffects = NodeUtil.nodeTypeMayHaveSideEffects ( elseBranch ) ;^298^^^^^289^306^boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P11_Insert_Donor_Statement]^boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( ifBranch ) ;boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ;^298^^^^^289^306^boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P7_Replace_Invocation]^boolean elseHasSideEffects = NodeUtil .nodeTypeMayHaveSideEffects ( ifBranch )  ;^298^^^^^289^306^boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P13_Insert_Block]^if  ( ! ( constructorCallHasSideEffects ( node )  )  )  {     return true; }^298^^^^^289^306^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P13_Insert_Block]^if  ( ! ( functionCallHasSideEffects ( node )  )  )  {     return true; }^298^^^^^289^306^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P2_Replace_Operator]^if  ( thenHasSideEffects && elseHasSideEffects )  {^299^^^^^289^306^if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^if  ( elseHasSideEffects || thenHasSideEffects )  {^299^^^^^289^306^if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P6_Replace_Expression]^if  ( thenHasSideEffects ) {^299^^^^^289^306^if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P6_Replace_Expression]^if  (  elseHasSideEffects )  {^299^^^^^289^306^if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P8_Replace_Mix]^if  ( thenHasSideEffects || HasSideEffects )  {^299^^^^^289^306^if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P3_Replace_Literal]^return false;^304^^^^^289^306^return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P3_Replace_Literal]^return true;^302^^^^^289^306^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^accumulator.keepSimplifiedHookExpression ( ifBranch, thenHasSideEffects, elseHasSideEffects ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^accumulator.keepSimplifiedHookExpression (  thenHasSideEffects, elseHasSideEffects ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^accumulator.keepSimplifiedHookExpression ( node,  elseHasSideEffects ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^accumulator.keepSimplifiedHookExpression ( elseHasSideEffects, thenHasSideEffects, node ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^accumulator.keepSimplifiedHookExpression ( node, elseHasSideEffects, thenHasSideEffects ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P14_Delete_Statement]^^300^301^302^303^304^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ; return false; } else { return true; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P5_Replace_Variable]^accumulator.keepSimplifiedHookExpression ( thenHasSideEffects, node, elseHasSideEffects ) ;^300^301^^^^289^306^accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processHook [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  elseHasSideEffects  thenHasSideEffects  SideEffectAccumulator  accumulator  Node  condition  elseBranch  ifBranch  node  
[P2_Replace_Operator]^Preconditions.checkArgument ( node.getType (  )  <= Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P2_Replace_Operator]^Preconditions.checkArgument ( node.getType (  !=  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P3_Replace_Literal]^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "ed: CALL, Got:xpected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P5_Replace_Variable]^Preconditions.checkArgument ( functionName.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P5_Replace_Variable]^Preconditions.checkArgument ( node.getType (  )  == Token. "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P5_Replace_Variable]^Preconditions.checkArgument ( CALL.getType (  )  == Token.CALL, "Expected: node, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^Preconditions.checkArgument ( node.addChildToBack (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^Preconditions.checkArgument ( node .getNext (  )   == Token.CALL, "Expected: CALL, Got: " + Token.name ( node^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P8_Replace_Mix]^Preconditions.checkArgument ( functionName.addChildToBack (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P14_Delete_Statement]^^314^315^316^^^313^334^Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P5_Replace_Variable]^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( functionName.getType (  )  )  ) ;^315^316^^^^313^334^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^node.addChildToBack (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^315^316^^^^313^334^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P14_Delete_Statement]^^315^316^^^^313^334^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^315^316^^^^313^334^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^315^316^^^^313^334^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^315^316^^^^313^334^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^315^316^^^^313^334^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^315^316^^^^313^334^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^315^316^^^^313^334^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^315^316^^^^313^334^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^315^316^^^^313^334^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^315^316^^^^313^334^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^315^316^^^^313^334^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^"Expected: CALL, Got: " + Token.name ( node.addChildToBack (  )  )  ) ;^316^^^^^313^334^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P14_Delete_Statement]^^316^^^^^313^334^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^316^^^^^313^334^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^316^^^^^313^334^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^316^^^^^313^334^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^316^^^^^313^334^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^316^^^^^313^334^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^316^^^^^313^334^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^316^^^^^313^334^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^316^^^^^313^334^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^316^^^^^313^334^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P5_Replace_Variable]^"Expected: CALL, Got: " + Token.name ( functionName.getType (  )  )  ) ;^316^^^^^313^334^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^"Expected: CALL, Got: " + Token.name ( node .getNext (  )   )  ) ;^316^^^^^313^334^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^Node functionName = node.addChildToBack (  ) ;^320^^^^^313^334^Node functionName = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^Node condition = hook.getFirstChild (  ) ;Node functionName = node.getFirstChild (  ) ;^320^^^^^313^334^Node functionName = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^Node left = original.getFirstChild (  ) ;Node functionName = node.getFirstChild (  ) ;^320^^^^^313^334^Node functionName = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^Node left = node.getFirstChild (  ) ;Node functionName = node.getFirstChild (  ) ;^320^^^^^313^334^Node functionName = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^Node condition = node.getFirstChild (  ) ;Node functionName = node.getFirstChild (  ) ;^320^^^^^313^334^Node functionName = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^Node functionName = node .getType (  )  ;^320^^^^^313^334^Node functionName = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P8_Replace_Mix]^Node functionName = functionName.getFirstChild (  ) ;^320^^^^^313^334^Node functionName = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P14_Delete_Statement]^^320^^^^^313^334^Node functionName = node.getFirstChild (  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( functionName )  && NodeUtil.isGetProp ( functionName )  )  {^321^^^^^313^334^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( node )  || NodeUtil.isGetProp ( functionName )  )  {^321^^^^^313^334^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( functionName )  ) {^321^^^^^313^334^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P6_Replace_Expression]^if  (  NodeUtil.isGetProp ( functionName )  )  {^321^^^^^313^334^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P6_Replace_Expression]^if  ( !(accumulator.classDefiningCallsHaveSideEffects()) && isClassDefiningCall(node) )  {^321^^^^^313^334^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^if  ( NodeUtil.isGetProp ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^321^^^^^313^334^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isName ( functionName )  )  {^321^^^^^313^334^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( functionName )  || NodeUtil .isControlStructure ( functionName )   )  {^321^^^^^313^334^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P15_Unwrap_Block]^if ((!(accumulator.classDefiningCallsHaveSideEffects())) && (isClassDefiningCall(node))) {    return true;};^321^322^323^324^325^313^334^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  { if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  { return true; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P16_Remove_Block]^^321^322^323^324^325^313^334^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  { if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  { return true; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P2_Replace_Operator]^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  || isClassDefiningCall ( node )  )  {^322^323^^^^313^334^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P5_Replace_Variable]^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( functionName )  )  {^322^323^^^^313^334^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P6_Replace_Expression]^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  ) {^322^323^^^^313^334^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P6_Replace_Expression]^if  (  isClassDefiningCall ( node )  )  {^322^323^^^^313^334^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^if  ( !accumulator .keepSimplifiedShortCircuitExpression ( functionName )   && isClassDefiningCall ( node )  )  {^322^323^^^^313^334^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && processFunctionCall ( node )  )  {^322^323^^^^313^334^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P8_Replace_Mix]^if  (  isClassDefiningCall ( functionName )  )  {^322^323^^^^313^334^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P15_Unwrap_Block]^return true;^322^323^324^325^^313^334^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  { return true; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P16_Remove_Block]^^322^323^324^325^^313^334^if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  { return true; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P3_Replace_Literal]^return false;^324^^^^^313^334^return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P5_Replace_Variable]^isClassDefiningCall ( functionName )  )  {^323^^^^^313^334^isClassDefiningCall ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^processFunctionCall ( node )  )  {^323^^^^^313^334^isClassDefiningCall ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P14_Delete_Statement]^^323^324^^^^313^334^isClassDefiningCall ( node )  )  { return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( functionName )  || NodeUtil .isControlStructure ( node )   )  {^321^^^^^313^334^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( node )  || NodeUtil.isName ( functionName )  )  {^321^^^^^313^334^if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P5_Replace_Variable]^if  ( !NodeUtil.functionCallHasSideEffects ( functionName )  )  {^328^^^^^313^334^if  ( !NodeUtil.functionCallHasSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^if  ( !NodeUtil.constructorCallHasSideEffects ( node )  )  {^328^^^^^313^334^if  ( !NodeUtil.functionCallHasSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P9_Replace_Statement]^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^328^^^^^313^334^if  ( !NodeUtil.functionCallHasSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P9_Replace_Statement]^if  ( NodeUtil.mayHaveSideEffects ( right )  )  {^328^^^^^313^334^if  ( !NodeUtil.functionCallHasSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P15_Unwrap_Block]^return true;^328^329^330^^^313^334^if  ( !NodeUtil.functionCallHasSideEffects ( node )  )  { return true; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P16_Remove_Block]^^328^329^330^^^313^334^if  ( !NodeUtil.functionCallHasSideEffects ( node )  )  { return true; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P13_Insert_Block]^if  ( ! ( constructorCallHasSideEffects ( node )  )  )  {     return true; }^328^^^^^313^334^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P3_Replace_Literal]^return false;^329^^^^^313^334^return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P13_Insert_Block]^if  ( ! ( functionCallHasSideEffects ( node )  )  )  {     return true; }^328^^^^^313^334^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P5_Replace_Variable]^accumulator.keepSubTree ( functionName ) ;^332^^^^^313^334^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P7_Replace_Invocation]^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;^332^^^^^313^334^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P8_Replace_Mix]^accumulator.keepSimplifiedShortCircuitExpression ( functionName ) ;^332^^^^^313^334^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P14_Delete_Statement]^^332^^^^^313^334^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P11_Insert_Donor_Statement]^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;accumulator.keepSubTree ( node ) ;^332^^^^^313^334^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P3_Replace_Literal]^return true;^333^^^^^313^334^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processFunctionCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  functionName  node  
[P2_Replace_Operator]^Preconditions.checkArgument ( node.getType (  )  >= Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^342^343^344^^^341^354^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P2_Replace_Operator]^Preconditions.checkArgument ( node.getType (  <=  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^342^343^344^^^341^354^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P3_Replace_Literal]^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "e" + Token.name ( node.getType (  )  )  ) ;^342^343^344^^^341^354^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P5_Replace_Variable]^Preconditions.checkArgument ( node.getType (  )  == Token. "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^342^343^344^^^341^354^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P5_Replace_Variable]^Preconditions.checkArgument ( NEW.getType (  )  == Token.NEW, "Expected: node, Got: " + Token.name ( node.getType (  )  )  ) ;^342^343^344^^^341^354^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P7_Replace_Invocation]^Preconditions.checkArgument ( node.addChildToBack (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^342^343^344^^^341^354^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P14_Delete_Statement]^^342^343^344^^^341^354^Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P7_Replace_Invocation]^node.addChildToBack (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^343^344^^^^341^354^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P7_Replace_Invocation]^node .getNext (  )   == Token.NEW, "Expected: NEW, Got: " + Token.name ( node^343^344^^^^341^354^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P14_Delete_Statement]^^343^344^^^^341^354^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^343^344^^^^341^354^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^343^344^^^^341^354^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^343^344^^^^341^354^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^343^344^^^^341^354^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^343^344^^^^341^354^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^343^344^^^^341^354^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^343^344^^^^341^354^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^343^344^^^^341^354^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^343^344^^^^341^354^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^343^344^^^^341^354^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^343^344^^^^341^354^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P7_Replace_Invocation]^"Expected: NEW, Got: " + Token.name ( node.addChildToBack (  )  )  ) ;^344^^^^^341^354^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P14_Delete_Statement]^^344^^^^^341^354^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^344^^^^^341^354^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^344^^^^^341^354^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^344^^^^^341^354^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^"Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^344^^^^^341^354^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^344^^^^^341^354^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^344^^^^^341^354^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^344^^^^^341^354^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^344^^^^^341^354^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^344^^^^^341^354^"Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P7_Replace_Invocation]^if  ( !NodeUtil.functionCallHasSideEffects ( node )  )  {^348^^^^^341^354^if  ( !NodeUtil.constructorCallHasSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P9_Replace_Statement]^if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^348^^^^^341^354^if  ( !NodeUtil.constructorCallHasSideEffects ( node )  )  {^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P15_Unwrap_Block]^return true;^348^349^350^^^341^354^if  ( !NodeUtil.constructorCallHasSideEffects ( node )  )  { return true; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P16_Remove_Block]^^348^349^350^^^341^354^if  ( !NodeUtil.constructorCallHasSideEffects ( node )  )  { return true; }^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P13_Insert_Block]^if  ( ! ( functionCallHasSideEffects ( node )  )  )  {     return true; }^348^^^^^341^354^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P3_Replace_Literal]^return false;^349^^^^^341^354^return true;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P13_Insert_Block]^if  ( ! ( constructorCallHasSideEffects ( node )  )  )  {     return true; }^348^^^^^341^354^[Delete]^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P7_Replace_Invocation]^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;^352^^^^^341^354^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P14_Delete_Statement]^^352^^^^^341^354^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P11_Insert_Donor_Statement]^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;accumulator.keepSubTree ( node ) ;^352^^^^^341^354^accumulator.keepSubTree ( node ) ;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P3_Replace_Literal]^return true;^353^^^^^341^354^return false;^[CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  [METHOD] processConstructorCall [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  Node  node  
[P8_Replace_Mix]^private  AbstractCompiler compiler;^88^^^^^83^93^private final AbstractCompiler compiler;^[CLASS] CopySideEffectSubexpressions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  Set  FORBIDDEN_TYPES  boolean  SideEffectAccumulator  accumulator  NodeTraversal  traversal  Node  node  parent  List  parts  replacements  
[P8_Replace_Mix]^this.compiler =  null;^99^^^^^97^101^this.compiler = compiler;^[CLASS] CopySideEffectSubexpressions  [METHOD] <init> [RETURN_TYPE] List)   AbstractCompiler compiler Node> replacements [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  
[P8_Replace_Mix]^this.replacements =  null;^100^^^^^97^101^this.replacements = replacements;^[CLASS] CopySideEffectSubexpressions  [METHOD] <init> [RETURN_TYPE] List)   AbstractCompiler compiler Node> replacements [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  
[P3_Replace_Literal]^return false;^105^^^^^104^106^return true;^[CLASS] CopySideEffectSubexpressions  [METHOD] classDefiningCallsHaveSideEffects [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  
[P7_Replace_Invocation]^replacements.add ( original.addChildToBack (  )  ) ;^110^^^^^109^111^replacements.add ( original.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSubTree [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  original  
[P7_Replace_Invocation]^replacements.add ( original .cloneNode (  )   ) ;^110^^^^^109^111^replacements.add ( original.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSubTree [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  original  
[P14_Delete_Statement]^^110^^^^^109^111^replacements.add ( original.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSubTree [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  original  
[P11_Insert_Donor_Statement]^Node simplified = original.cloneNode (  ) ;replacements.add ( original.cloneTree (  )  ) ;^110^^^^^109^111^replacements.add ( original.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSubTree [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  original  
[P11_Insert_Donor_Statement]^replacements.add ( simplified ) ;replacements.add ( original.cloneTree (  )  ) ;^110^^^^^109^111^replacements.add ( original.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSubTree [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  original  
[P11_Insert_Donor_Statement]^simplified.addChildToBack ( condition.cloneTree (  )  ) ;replacements.add ( original.cloneTree (  )  ) ;^110^^^^^109^111^replacements.add ( original.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSubTree [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  original  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  &&  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( original.getType (  )  < Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( original.getType (  )  >= Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( original.getType (  |  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P3_Replace_Literal]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: xpected: AND or OR, Got" + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( simplifiedRight.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or  Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( OR.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or original, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( AND.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: original or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: OR or AND, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Preconditions.checkArgument ( ( original.addChildToBack (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Preconditions.checkArgument ( ( original .getNext (  )   == Token.AND )  ||  ( original^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^115^116^117^^^114^126^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^( simplifiedRight.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^116^117^^^^114^126^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^( original.addChildToBack (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^116^117^^^^114^126^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^( original .getNext (  )   == Token.AND )  ||  ( original^116^117^^^^114^126^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^116^117^^^^114^126^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^116^117^^^^114^126^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^( simplified.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^116^117^^^^114^126^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^"Expected: AND or OR, Got: " + Token.name ( simplifiedRight.getType (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^"Expected: AND or OR, Got: " + Token.name ( original.addChildToBack (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^117^^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^117^118^^^^114^126^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ; Node left = original.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Node left = simplifiedRight.getFirstChild (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Node left = original.addChildToBack (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Node left = original .getType (  )  ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node condition = hook.getFirstChild (  ) ;Node left = original.getFirstChild (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node simplified = original.cloneNode (  ) ;Node left = original.getFirstChild (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Node left = simplified.getFirstChild (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P8_Replace_Mix]^Node left = simplifiedRight.addChildToBack (  ) ;^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^118^^^^^114^126^Node left = original.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Node right = simplifiedRight.getNext (  ) ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Node right = left.addChildToBack (  ) ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node elseBranch = thenBranch.getNext (  ) ;Node right = left.getNext (  ) ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node thenBranch = condition.getNext (  ) ;Node right = left.getNext (  ) ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Node right = left .getType (  )  ;^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^119^^^^^114^126^Node right = left.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Node simplifiedRight = keepSimplifiedShortCircuitExpression ( right ) ;^120^^^^^114^126^Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P11_Insert_Donor_Statement]^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^120^^^^^114^126^Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Node simplifiedRight = simplifyShortCircuitBranch ( simplifiedRight ) ;^120^^^^^114^126^Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^Node simplified = simplifiedRight.cloneNode (  ) ;^122^^^^^114^126^Node simplified = original.cloneNode (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^Node simplified = original.addChildToBack (  ) ;^122^^^^^114^126^Node simplified = original.cloneNode (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^122^123^124^125^126^114^126^Node simplified = original.cloneNode (  ) ; simplified.addChildToBack ( left.cloneTree (  )  ) ; simplified.addChildToBack ( simplifiedRight ) ; replacements.add ( simplified ) ; }^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^simplified.addChildToBack ( simplifiedRight.cloneTree (  )  ) ;^123^^^^^114^126^simplified.addChildToBack ( left.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^simplified .addChildToBack (  )  ;^123^^^^^114^126^simplified.addChildToBack ( left.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^simplified.addChildToBack ( left.addChildToBack (  )  ) ;^123^^^^^114^126^simplified.addChildToBack ( left.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P7_Replace_Invocation]^simplified.addChildToBack ( left .cloneNode (  )   ) ;^123^^^^^114^126^simplified.addChildToBack ( left.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^123^124^125^126^^114^126^simplified.addChildToBack ( left.cloneTree (  )  ) ; simplified.addChildToBack ( simplifiedRight ) ; replacements.add ( simplified ) ; }^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P8_Replace_Mix]^simplified.addChildToBack ( simplified.cloneTree (  )  ) ;^123^^^^^114^126^simplified.addChildToBack ( left.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^simplified.addChildToBack ( rightRight ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^simplified.addChildToBack ( right ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^simplified.addChildToBack ( simplifiedRightRight ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^simplified.addChildToBack ( simplified ) ;^124^^^^^114^126^simplified.addChildToBack ( simplifiedRight ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^124^125^126^^^114^126^simplified.addChildToBack ( simplifiedRight ) ; replacements.add ( simplified ) ; }^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P5_Replace_Variable]^replacements.add ( right ) ;^125^^^^^114^126^replacements.add ( simplified ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P8_Replace_Mix]^replacements.add ( simplifiedRight ) ;^125^^^^^114^126^replacements.add ( simplified ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P14_Delete_Statement]^^125^126^^^^114^126^replacements.add ( simplified ) ; }^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedShortCircuitExpression [RETURN_TYPE] void   Node original [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  Node  left  original  right  simplified  simplifiedRight  
[P2_Replace_Operator]^Preconditions.checkArgument ( hook.getType (  )  > Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P2_Replace_Operator]^Preconditions.checkArgument ( hook.getType (  >  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P3_Replace_Literal]^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: Expected: HOOK, Got" + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Preconditions.checkArgument ( thenBranch.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Preconditions.checkArgument ( hook.getType (  )  == Token. "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Preconditions.checkArgument ( HOOK.getType (  )  == Token.HOOK, "Expected: hook, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^Preconditions.checkArgument ( hook.addChildToBack (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^Preconditions.checkArgument ( simplified.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P14_Delete_Statement]^^132^133^134^^^129^154^Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( thenBranch.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^hook.addChildToBack (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P14_Delete_Statement]^^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P11_Insert_Donor_Statement]^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P11_Insert_Donor_Statement]^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^"Expected: HOOK, Got: " + Token.name ( thenBranch.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^"Expected: HOOK, Got: " + Token.name ( hook.addChildToBack (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^"Expected: HOOK, Got: " + Token.name ( thenBranch.addChildToBack (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P14_Delete_Statement]^^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P11_Insert_Donor_Statement]^hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P11_Insert_Donor_Statement]^"Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^134^^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P14_Delete_Statement]^^134^135^^^^129^154^"Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ; Node condition = hook.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node condition = thenBranch.getFirstChild (  ) ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^Node condition = hook.addChildToBack (  ) ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P11_Insert_Donor_Statement]^Node left = original.getFirstChild (  ) ;Node condition = hook.getFirstChild (  ) ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^Node condition = simplified.getFirstChild (  ) ;^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P14_Delete_Statement]^^135^^^^^129^154^Node condition = hook.getFirstChild (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node thenBranch = simplified.getNext (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^Node thenBranch = condition.addChildToBack (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^Node thenBranch = simplified.addChildToBack (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P11_Insert_Donor_Statement]^Node right = left.getNext (  ) ;Node thenBranch = condition.getNext (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P11_Insert_Donor_Statement]^Node elseBranch = thenBranch.getNext (  ) ;Node thenBranch = condition.getNext (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node thenBranch = thenBranch.getNext (  ) ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^Node thenBranch = thenBranch .getType (  )  ;^136^^^^^129^154^Node thenBranch = condition.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P14_Delete_Statement]^^136^137^^^^129^154^Node thenBranch = condition.getNext (  ) ; Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^Node elseBranch = thenBranch.addChildToBack (  ) ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^Node elseBranch = simplified.getNext (  ) ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P11_Insert_Donor_Statement]^Node right = left.getNext (  ) ;Node elseBranch = thenBranch.getNext (  ) ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P11_Insert_Donor_Statement]^Node thenBranch = condition.getNext (  ) ;Node elseBranch = thenBranch.getNext (  ) ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^Node elseBranch = thenBranch .getType (  )  ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^Node elseBranch = simplified.addChildToBack (  ) ;^137^^^^^129^154^Node elseBranch = thenBranch.getNext (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P2_Replace_Operator]^if  ( thenHasSideEffects || elseHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^if  ( elseHasSideEffects && elseHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^if  ( thenHasSideEffects && thenHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^if  ( elseHasSideEffects && thenHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P6_Replace_Expression]^if  ( thenHasSideEffects ) {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P6_Replace_Expression]^if  (  elseHasSideEffects )  {^138^^^^^129^154^if  ( thenHasSideEffects && elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P13_Insert_Block]^if  ( thenHasSideEffects || elseHasSideEffects )  {     int type =  ( thenHasSideEffects )  ? AND : OR;     Node body =  ( thenHasSideEffects )  ? thenBranch : elseBranch;     Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;     replacements.add ( simplified ) ; }else {     throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ; }^138^^^^^129^154^[Delete]^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P2_Replace_Operator]^} else if  ( thenHasSideEffects && elseHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^} else if  ( elseHasSideEffects || elseHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^} else if  ( elseHasSideEffects || thenHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P6_Replace_Expression]^} else if  ( thenHasSideEffects ) {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P6_Replace_Expression]^} else if  (  elseHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P6_Replace_Expression]^} else {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branchSimp" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branchkeepSimplifiedHoo" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P4_Replace_Constructor]^Node simplified = new Node (  condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P4_Replace_Constructor]^Node simplified = new Node ( type.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node simplified = new Node ( type, thenBranch.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( thenBranch )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node simplified = new Node ( body, condition.cloneTree (  ) , simplifyShortCircuitBranch ( type )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node simplified = new Node ( condition, type.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^Node simplified = new Node ( type, condition.addChildToBack (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^Node simplified = new Node ( type, condition.cloneTree (  ) , keepSimplifiedShortCircuitExpression ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^Node simplified = new Node ( type, thenBranch.cloneTree (  ) , keepSimplifiedShortCircuitExpression ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P1_Replace_Type]^short  type = thenHasSideEffects ? Token.AND : Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P6_Replace_Expression]^int type  =  Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P6_Replace_Expression]^int type  =  Token.AND ;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^int type = elseHasSideEffects ? Token.AND : Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P11_Insert_Donor_Statement]^Node body = thenHasSideEffects ? thenBranch : elseBranch;int type = thenHasSideEffects ? Token.AND : Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node body = elseHasSideEffects ? thenBranch : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node body = thenHasSideEffects ? thenBranch : thenBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node body = thenBranch ? thenHasSideEffects : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node body = thenHasSideEffects ? elseBranch : thenBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P6_Replace_Expression]^Node body  =  elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P6_Replace_Expression]^Node body  =  thenBranch ;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^Node body = thenHasSideEffects ? simplified : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P11_Insert_Donor_Statement]^int type = thenHasSideEffects ? Token.AND : Token.OR;Node body = thenHasSideEffects ? thenBranch : elseBranch;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node simplified = new Node ( type, body.cloneTree (  ) , simplifyShortCircuitBranch ( condition )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^Node simplified = new Node ( type, condition .cloneNode (  )  , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P11_Insert_Donor_Statement]^Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^type, simplified.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^type, condition.addChildToBack (  ) , simplifyShortCircuitBranch ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^type, condition .cloneNode (  )  , simplifyShortCircuitBranch ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^type, simplified.addChildToBack (  ) , simplifyShortCircuitBranch ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P14_Delete_Statement]^^148^149^150^151^152^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ; replacements.add ( simplified ) ; } else { throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ; }^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( thenBranch )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^type, condition.cloneTree (  ) , keepSimplifiedShortCircuitExpression ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^replacements.add ( thenBranch ) ;^149^^^^^129^154^replacements.add ( simplified ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^replacements.add ( hook ) ;^149^^^^^129^154^replacements.add ( simplified ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P14_Delete_Statement]^^149^150^151^152^153^129^154^replacements.add ( simplified ) ; } else { throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ; }^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "dHook" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node body = elseBranch ? thenBranch : thenHasSideEffects;^146^^^^^129^154^Node body = thenHasSideEffects ? thenBranch : elseBranch;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "pS" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^Node simplified = hook.addChildToBack (  ) ;^139^^^^^129^154^Node simplified = hook.cloneNode (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^Node simplified = thenBranch.addChildToBack (  ) ;^139^^^^^129^154^Node simplified = hook.cloneNode (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node simplified = thenBranch.cloneNode (  ) ;^139^^^^^129^154^Node simplified = hook.cloneNode (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^Node simplified = hook .cloneTree (  )  ;^139^^^^^129^154^Node simplified = hook.cloneNode (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^simplified.addChildToBack ( thenBranch.cloneTree (  )  ) ;^140^^^^^129^154^simplified.addChildToBack ( condition.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^simplified .addChildToBack (  )  ;^140^^^^^129^154^simplified.addChildToBack ( condition.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^simplified.addChildToBack ( condition.addChildToBack (  )  ) ;^140^^^^^129^154^simplified.addChildToBack ( condition.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^simplified.addChildToBack ( condition .cloneNode (  )   ) ;^140^^^^^129^154^simplified.addChildToBack ( condition.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^simplified.addChildToBack ( simplified.cloneTree (  )  ) ;^140^^^^^129^154^simplified.addChildToBack ( condition.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^simplified.addChildToBack ( simplifyShortCircuitBranch ( hook )  ) ;^141^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^simplified.addChildToBack ( keepSimplifiedShortCircuitExpression ( thenBranch )  ) ;^141^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^simplified.addChildToBack ( simplifyShortCircuitBranch ( simplified )  ) ;^141^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^simplified .addChildToBack (  )  ;^142^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^simplified.addChildToBack ( keepSimplifiedShortCircuitExpression ( elseBranch )  ) ;^142^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^simplified.addChildToBack ( keepSimplifiedShortCircuitExpression ( thenBranch )  ) ;^142^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^142^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^replacements.add ( thenBranch ) ;^143^^^^^129^154^replacements.add ( simplified ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^replacements.add ( hook ) ;^143^^^^^129^154^replacements.add ( simplified ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^} else if  ( thenHasSideEffects || thenHasSideEffects )  {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^}  if  ( HasSideEffects ) {^144^^^^^129^154^} else if  ( thenHasSideEffects || elseHasSideEffects )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branchepSim" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "pSimpeepSimplifiedHookExpression must keep at least 1 branch" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^Node simplified = new Node ( type, thenBranch.addChildToBack (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P1_Replace_Type]^long  type = thenHasSideEffects ? Token.AND : Token.OR;^145^^^^^129^154^int type = thenHasSideEffects ? Token.AND : Token.OR;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^type, thenBranch.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^Node simplified = new Node ( type, condition.cloneTree (  ) , keepSimplifiedShortCircuitExpression ( thenBranch )  ) ;^147^148^^^^129^154^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branchsion" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branchkeepSimplifiedHookExpression must keep" ) ;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^return 0;^151^152^^^^129^154^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^Node simplified = simplified.cloneNode (  ) ;^139^^^^^129^154^Node simplified = hook.cloneNode (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P8_Replace_Mix]^simplified.addChildToBack ( thenBranch.addChildToBack (  )  ) ;^140^^^^^129^154^simplified.addChildToBack ( condition.cloneTree (  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P7_Replace_Invocation]^simplified .addChildToBack (  )  ;^141^^^^^129^154^simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P5_Replace_Variable]^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( simplified )  ) ;^148^^^^^129^154^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] keepSimplifiedHookExpression [RETURN_TYPE] void   Node hook boolean thenHasSideEffects boolean elseHasSideEffects [VARIABLES] AbstractCompiler  compiler  List  replacements  boolean  elseHasSideEffects  thenHasSideEffects  int  type  Node  body  condition  elseBranch  hook  simplified  thenBranch  
[P14_Delete_Statement]^^157^^^^^156^180^List<Node> parts = Lists.newArrayList (  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler )  )  ) ;^160^161^162^^^156^180^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^new GatherSideEffectSubexpressionsCallback (  new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^160^161^162^^^156^180^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^new GatherSideEffectSubexpressionsCallback ( parts, new CopySideEffectSubexpressions ( compiler, compiler )  )  ) ;^160^161^162^^^156^180^new GatherSideEffectSubexpressionsCallback ( compiler, new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^new CopySideEffectSubexpressions ( compiler, null )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^new CopySideEffectSubexpressions ( compiler )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^new CopySideEffectSubexpressions (  parts )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^new CopySideEffectSubexpressions ( parts, compiler )  )  ) ;^162^^^^^156^180^new CopySideEffectSubexpressions ( compiler, parts )  )  ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler,  new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, ret, new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^NodeTraversal.traverse (  node, new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^NodeTraversal.traverse ( node, compiler, new GatherSideEffectSubexpressionsCallback ( compiler,^158^159^160^161^^156^180^NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback ( compiler,^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P2_Replace_Operator]^if  ( ret == null )  {^166^^^^^156^180^if  ( ret != null )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^if  ( node != null )  {^166^^^^^156^180^if  ( ret != null )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P8_Replace_Mix]^if  ( node != true )  {^166^^^^^156^180^if  ( ret != null )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P15_Unwrap_Block]^ret = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA, ret, part);^166^167^168^169^170^156^180^if  ( ret != null )  { ret = new Node ( Token.COMMA, ret, part ) ; } else { ret = part; }^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P16_Remove_Block]^^166^167^168^169^170^156^180^if  ( ret != null )  { ret = new Node ( Token.COMMA, ret, part ) ; } else { ret = part; }^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^ret = ret;^169^^^^^156^180^ret = part;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P8_Replace_Mix]^ret =  node;^169^^^^^156^180^ret = part;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P4_Replace_Constructor]^ret = new Node ( Token.COMMA,  part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P4_Replace_Constructor]^ret = new Node ( Token.COMMA, ret ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^ret = new Node ( Token.COMMA, part, part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^ret = new Node ( Token.COMMA, ret, node ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^ret = new Node ( Token. ret, part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^ret = new Node ( Token.COMMA, part, ret ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P13_Insert_Block]^if  ( ret != null )  {     ret = new Node ( COMMA, ret, part ) ; }else {     ret = part; }^167^^^^^156^180^[Delete]^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^ret = new Node ( Token.COMMA, node, part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^ret = new Node ( Token.COMMA, ret, ret ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P8_Replace_Mix]^ret =  new Node ( Token.COMMA, null, part ) ;^167^^^^^156^180^ret = new Node ( Token.COMMA, ret, part ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P2_Replace_Operator]^if  ( ret != null )  {^173^^^^^156^180^if  ( ret == null )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^if  ( part == null )  {^173^^^^^156^180^if  ( ret == null )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P6_Replace_Expression]^if  ( "expected at least one side effect subexpression in short " + "circuit branch." )  {^173^^^^^156^180^if  ( ret == null )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P8_Replace_Mix]^if  ( ret == true )  {^173^^^^^156^180^if  ( ret == null )  {^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("expected at least one side effect subexpression in short " + "circuit branch."));^173^174^175^176^177^156^180^if  ( ret == null )  { throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ; }^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P16_Remove_Block]^^173^174^175^176^177^156^180^if  ( ret == null )  { throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ; }^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "  ==  "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "t one side effexpected at least one side effect subexpression in short " + "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch.rcuit b" ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P13_Insert_Block]^if  ( ret == null )  {     throw new IllegalArgumentException (  ( "expected at least one side effect subexpression in short " + "circuit branch." )  ) ; }^174^^^^^156^180^[Delete]^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "  <  "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "presxpected at least one side effect subexpression in short " + "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit brircuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "   instanceof   "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "expectexpected at least one side effect subexpression in short " + "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch.ci" ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short "  &  "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "sion in shorxpected at least one side effect subexpression in short " + "circuit branch." ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "irc" ) ;^174^175^176^^^156^180^throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
[P5_Replace_Variable]^return part;^179^^^^^156^180^return ret;^[CLASS] CopySideEffectSubexpressions  [METHOD] simplifyShortCircuitBranch [RETURN_TYPE] Node   Node node [VARIABLES] AbstractCompiler  compiler  List  parts  replacements  boolean  Node  node  part  ret  
