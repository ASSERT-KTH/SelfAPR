[P8_Replace_Mix]^this.compiler =  null;^41^^^^^40^42^this.compiler = compiler;^[CLASS] MinimizeExitPoints  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, this ) ;^46^^^^^45^47^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MinimizeExitPoints  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^46^^^^^45^47^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MinimizeExitPoints  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^46^^^^^45^47^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MinimizeExitPoints  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^46^^^^^45^47^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MinimizeExitPoints  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P14_Delete_Statement]^^46^^^^^45^47^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] MinimizeExitPoints  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P2_Replace_Operator]^if  ( NodeUtil.isLiteralValue ( cond )  || !NodeUtil.getBooleanValue ( cond )  )  {^68^^^^^53^83^if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isLiteralValue ( parent )  && !NodeUtil.getBooleanValue ( cond )  )  {^68^^^^^53^83^if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P6_Replace_Expression]^if  ( NodeUtil.isLiteralValue ( cond )  ) {^68^^^^^53^83^if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P6_Replace_Expression]^if  (  !NodeUtil.getBooleanValue ( cond )  )  {^68^^^^^53^83^if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil.getBooleanValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {^68^^^^^53^83^if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil .getBooleanValue ( n )   && !NodeUtil.getBooleanValue ( cond )  )  {^68^^^^^53^83^if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.isLiteralValue ( cond )  )  {^68^^^^^53^83^if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P8_Replace_Mix]^if  ( NodeUtil.isLiteralValue ( parent )  ) {^68^^^^^53^83^if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P13_Insert_Block]^if  ( hasFinally ( n )  )  {     Node finallyBlock = n.getLastChild (  ) ;     tryMinimizeExits ( finallyBlock, exitType, labelName ) ; }^68^^^^^53^83^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P5_Replace_Variable]^tryMinimizeExits ( parent.getFirstChild (  ) , Token.BREAK, null ) ;^72^73^^^^57^87^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^tryMinimizeExits ( n.removeChild (  ) , Token.BREAK, null ) ;^72^73^^^^57^87^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^tryMinimizeExits ( n .getLastChild (  )  , Token.BREAK, null ) ;^72^73^^^^57^87^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P14_Delete_Statement]^^72^73^^^^57^87^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^n.getFirstChild (  ) , Token.BREAK, null ) ;tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^72^73^^^^57^87^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^72^73^^^^57^87^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^72^73^^^^57^87^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^n.getLastChild (  ) , Token.RETURN, null ) ;tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^72^73^^^^57^87^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^72^73^^^^57^87^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P5_Replace_Variable]^n.getFirstChild (  ) , Token.BREAK, parentull ) ;^73^^^^^58^88^n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^n.removeChild (  ) , Token.BREAK, null ) ;^73^^^^^58^88^n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P14_Delete_Statement]^^73^^^^^58^88^n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;n.getFirstChild (  ) , Token.BREAK, null ) ;^73^^^^^58^88^n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^n.getLastChild (  ) , Token.RETURN, null ) ;n.getFirstChild (  ) , Token.BREAK, null ) ;^73^^^^^58^88^n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;n.getFirstChild (  ) , Token.BREAK, null ) ;^73^^^^^58^88^n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;n.getFirstChild (  ) , Token.BREAK, null ) ;^73^^^^^58^88^n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P5_Replace_Variable]^Node cond = NodeUtil.getConditionExpression ( parent ) ;^67^^^^^52^82^Node cond = NodeUtil.getConditionExpression ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^Node cond = NodeUtil.isFunctionDeclaration ( n ) ;^67^^^^^52^82^Node cond = NodeUtil.getConditionExpression ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^51^^^^^36^66^switch  ( n.getType (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^switch  ( n.removeChild (  )  )  {^51^^^^^36^66^switch  ( n.getType (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P5_Replace_Variable]^tryMinimizeExits ( parent.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^53^54^^^^38^68^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^tryMinimizeExits ( n.removeChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^53^54^^^^38^68^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^tryMinimizeExits ( n .getFirstChild (  )  , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^53^54^^^^38^68^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.removeChild (  ) .getString (  )  ) ;^53^54^^^^38^68^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n .getLastChild (  )  .getString (  )  ) ;^53^54^^^^38^68^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P8_Replace_Mix]^tryMinimizeExits ( parent .getFirstChild (  )  , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^53^54^^^^38^68^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P14_Delete_Statement]^^53^54^^^^38^68^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^53^54^^^^38^68^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^53^54^^^^38^68^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^53^54^^^^38^68^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^53^54^^^^38^68^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^53^54^^^^38^68^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^n.removeChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^54^^^^^39^69^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^n .getFirstChild (  )  , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^54^^^^^39^69^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P8_Replace_Mix]^n.removeChild (  ) , Token.BREAK, parent.getFirstChild (  ) .getString (  )  ) ;^54^^^^^39^69^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P14_Delete_Statement]^^54^^^^^39^69^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^54^^^^^39^69^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^54^^^^^39^69^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^54^^^^^39^69^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^54^^^^^39^69^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P5_Replace_Variable]^n.getLastChild (  ) , Token.BREAK, parent.getFirstChild (  ) .getString (  )  ) ;^54^^^^^39^69^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  )  .getNext (  )   ) ;^54^^^^^39^69^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^n.getLastChild (  ) , Token.BREAK, n.removeChild (  ) .getString (  )  ) ;^54^^^^^39^69^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^n.getLastChild (  ) , Token.BREAK, n .getLastChild (  )  .getString (  )  ) ;^54^^^^^39^69^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P8_Replace_Mix]^n.getLastChild (  ) , Token.BREAK, parent .getLastChild (  )  .getString (  )  ) ;^54^^^^^39^69^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P5_Replace_Variable]^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( parent ) , Token.CONTINUE, null ) ;^59^60^^^^44^74^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^tryMinimizeExits ( NodeUtil.getCatchBlock ( n ) , Token.CONTINUE, null ) ;^59^60^^^^44^74^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P14_Delete_Statement]^^59^60^^^^44^74^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^59^60^^^^44^74^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^59^60^^^^44^74^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^59^60^^^^44^74^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P5_Replace_Variable]^NodeUtil.getLoopCodeBlock ( parent ) , Token.CONTINUE, null ) ;^60^^^^^45^75^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^NodeUtil.getCatchBlock ( n ) , Token.CONTINUE, null ) ;^60^^^^^45^75^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^NodeUtil .getCatchBlock ( cond )  , Token.CONTINUE, null ) ;^60^^^^^45^75^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P8_Replace_Mix]^NodeUtil.getCatchBlock ( parent ) , Token.CONTINUE, null ) ;^60^^^^^45^75^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P14_Delete_Statement]^^60^61^^^^45^75^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ; break;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^n.getFirstChild (  ) , Token.BREAK, null ) ;NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^60^^^^^45^75^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^60^^^^^45^75^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^n.getLastChild (  ) , Token.RETURN, null ) ;NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^60^^^^^45^75^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P5_Replace_Variable]^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( parent ) , Token.CONTINUE, null ) ;^64^65^^^^49^79^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^tryMinimizeExits ( NodeUtil.getCatchBlock ( n ) , Token.CONTINUE, null ) ;^64^65^^^^49^79^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P14_Delete_Statement]^^64^65^^^^49^79^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^64^65^^^^49^79^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^64^65^^^^49^79^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^64^65^^^^49^79^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P5_Replace_Variable]^NodeUtil.getLoopCodeBlock ( parent ) , Token.CONTINUE, null ) ;^65^^^^^50^80^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^NodeUtil.getCatchBlock ( n ) , Token.CONTINUE, null ) ;^65^^^^^50^80^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P14_Delete_Statement]^^65^^^^^50^80^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^n.getFirstChild (  ) , Token.BREAK, null ) ;NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^65^^^^^50^80^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^65^^^^^50^80^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^n.getLastChild (  ) , Token.RETURN, null ) ;NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^65^^^^^50^80^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P8_Replace_Mix]^Node cond = NodeUtil.isFunctionDeclaration ( parent ) ;^67^^^^^52^82^Node cond = NodeUtil.getConditionExpression ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P14_Delete_Statement]^^67^^^^^52^82^Node cond = NodeUtil.getConditionExpression ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P8_Replace_Mix]^if  ( NodeUtil.isLiteralValue ( parent )  && !NodeUtil.isLiteralValue ( cond )  )  {^68^^^^^53^83^if  ( NodeUtil.isLiteralValue ( cond )  && !NodeUtil.getBooleanValue ( cond )  )  {^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^n .getLastChild (  )  , Token.BREAK, null ) ;^73^^^^^58^88^n.getFirstChild (  ) , Token.BREAK, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P5_Replace_Variable]^tryMinimizeExits ( parent.getLastChild (  ) , Token.RETURN, null ) ;^78^79^^^^63^93^tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^tryMinimizeExits ( n.removeChild (  ) , Token.RETURN, null ) ;^78^79^^^^63^93^tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P14_Delete_Statement]^^78^79^^^^63^93^tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^n.getFirstChild (  ) , Token.BREAK, null ) ;tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;^78^79^^^^63^93^tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;^78^79^^^^63^93^tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;^78^79^^^^63^93^tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;^78^79^^^^63^93^tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^n.getLastChild (  ) , Token.RETURN, null ) ;tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;^78^79^^^^63^93^tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P5_Replace_Variable]^n.getLastChild (  ) , Token.RETURN, parentull ) ;^79^^^^^64^94^n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P7_Replace_Invocation]^n.removeChild (  ) , Token.RETURN, null ) ;^79^^^^^64^94^n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P14_Delete_Statement]^^79^^^^^64^94^n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^n.getFirstChild (  ) , Token.BREAK, null ) ;n.getLastChild (  ) , Token.RETURN, null ) ;^79^^^^^64^94^n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ;n.getLastChild (  ) , Token.RETURN, null ) ;^79^^^^^64^94^n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getLastChild (  ) , Token.RETURN, null ) ;n.getLastChild (  ) , Token.RETURN, null ) ;^79^^^^^64^94^n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P11_Insert_Donor_Statement]^NodeUtil.getLoopCodeBlock ( n ) , Token.CONTINUE, null ) ;n.getLastChild (  ) , Token.RETURN, null ) ;^79^^^^^64^94^n.getLastChild (  ) , Token.RETURN, null ) ;^[CLASS] MinimizeExitPoints  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  cond  n  parent  
[P5_Replace_Variable]^if  ( matchingExitNode ( tryBlock, exitType, labelName )  )  {^115^^^^^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( matchingExitNode (  exitType, labelName )  )  {^115^^^^^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( matchingExitNode ( n,  labelName )  )  {^115^^^^^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( matchingExitNode ( n, exitType )  )  {^115^^^^^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( matchingExitNode ( n, labelName, exitType )  )  {^115^^^^^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( tryMinimizeExits ( n, exitType, labelName )  )  {^115^^^^^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^115^^^^^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NodeUtil.removeChild(n.getParent(), n); compiler.reportCodeChange(); return ;^115^116^117^118^119^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  { NodeUtil.removeChild ( n.getParent (  ) , n ) ; compiler.reportCodeChange (  ) ; return; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P16_Remove_Block]^^115^116^117^118^119^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  { NodeUtil.removeChild ( n.getParent (  ) , n ) ; compiler.reportCodeChange (  ) ; return; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^NodeUtil.removeChild ( ifBlock.getParent (  ) , n ) ;^116^^^^^101^131^NodeUtil.removeChild ( n.getParent (  ) , n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^NodeUtil.removeChild ( n.removeChild (  ) , n ) ;^116^^^^^101^131^NodeUtil.removeChild ( n.getParent (  ) , n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^116^^^^^101^131^NodeUtil.removeChild ( n.getParent (  ) , n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( exitNodeParent, exitNode ) ;NodeUtil.removeChild ( n.getParent (  ) , n ) ;^116^^^^^101^131^NodeUtil.removeChild ( n.getParent (  ) , n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^NodeUtil.removeChild ( finallyBlock.getParent (  ) , n ) ;^116^^^^^101^131^NodeUtil.removeChild ( n.getParent (  ) , n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^NodeUtil.removeChild ( n .getNext (  )  , n ) ;^116^^^^^101^131^NodeUtil.removeChild ( n.getParent (  ) , n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^117^^^^^102^132^compiler.reportCodeChange (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( matchingExitNode ( labelBlock, exitType, labelName )  )  {^115^^^^^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( matchingExitNode ( labelName, exitType, n )  )  {^115^^^^^100^130^if  ( matchingExitNode ( n, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P13_Insert_Block]^if  ( ! ( matchingExitNode ( exitNode, exitType, labelName )  )  )  {     return ; }^115^^^^^100^130^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^NodeUtil .removeChild ( labelBlock )  ;^116^^^^^101^131^NodeUtil.removeChild ( n.getParent (  ) , n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^NodeUtil.removeChild ( ifTree.getParent (  ) , n ) ;^116^^^^^101^131^NodeUtil.removeChild ( n.getParent (  ) , n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^NodeUtil.removeChild ( tryBlock.getParent (  ) , n ) ;^116^^^^^101^131^NodeUtil.removeChild ( n.getParent (  ) , n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^NodeUtil.removeChild ( labelBlock.removeChild (  ) , n ) ;^116^^^^^101^131^NodeUtil.removeChild ( n.getParent (  ) , n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^117^118^^^^102^132^compiler.reportCodeChange (  ) ; return;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.IF )  {^122^^^^^107^137^if  ( n.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( tryBlock.getType (  )  == Token.IF )  {^122^^^^^107^137^if  ( n.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P6_Replace_Expression]^if  ( elseBlock != null )  {^122^^^^^107^137^if  ( n.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  == Token.IF )  {^122^^^^^107^137^if  ( n.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( n .getParent (  )   == Token.IF )  {^122^^^^^107^137^if  ( n.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( tryBlock.removeChild (  )  == Token.IF )  {^122^^^^^107^137^if  ( n.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.LABEL )  {^122^^^^^107^137^if  ( n.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.TRY )  {^122^^^^^107^137^if  ( n.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( srcBlock.getType (  )  == Token.BLOCK )  {^122^^^^^107^137^if  ( n.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( c.getType (  )  == Token.IF )  {^122^^^^^107^137^if  ( n.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == type )  {^122^^^^^107^137^if  ( n.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P2_Replace_Operator]^if  ( elseBlock == null )  {^126^^^^^111^141^if  ( elseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( Block != true )  {^126^^^^^111^141^if  ( elseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( destBlock == null )  {^126^^^^^111^141^if  ( elseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( falseBlock != null )  {^126^^^^^111^141^if  ( elseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( labelName == null )  {^126^^^^^111^141^if  ( elseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P15_Unwrap_Block]^tryMinimizeExits(elseBlock, exitType, labelName);^126^127^128^^^111^141^if  ( elseBlock != null )  { tryMinimizeExits ( elseBlock, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P16_Remove_Block]^^126^127^128^^^111^141^if  ( elseBlock != null )  { tryMinimizeExits ( elseBlock, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P13_Insert_Block]^if  ( falseBlock != null )  {     tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ; }^126^^^^^111^141^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits (  exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( elseBlock,  labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( elseBlock, exitType ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( labelName, exitType, elseBlock ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( elseBlock, labelName, exitType ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^matchingExitNode ( elseBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^127^128^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( labelBlock, exitType, labelName ) ;tryMinimizeExits ( elseBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;tryMinimizeExits ( elseBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;tryMinimizeExits ( elseBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( c, exitType, labelName ) ;tryMinimizeExits ( elseBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;tryMinimizeExits ( elseBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;tryMinimizeExits ( elseBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;tryMinimizeExits ( elseBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( tryBlock, exitType, labelName ) ;tryMinimizeExits ( elseBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P12_Insert_Condition]^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  { tryMinimizeExits ( elseBlock, exitType, labelName ) ; }^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P13_Insert_Block]^if  ( elseBlock != null )  {     tryMinimizeExits ( elseBlock, exitType, labelName ) ; }^127^^^^^112^142^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node ifBlock = tryBlock.getFirstChild (  ) .getNext (  ) ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node ifBlock = n.removeChild (  ) .getNext (  ) ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node ifBlock = n .getLastChild (  )  .getNext (  ) ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node ifBlock = n.getFirstChild (  )  .getString (  )  ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node finallyBlock = n.getLastChild (  ) ;Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node tryBlock = n.getFirstChild (  ) ;Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node labelBlock = n.getLastChild (  ) ;Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node elseBlock = ifBlock.getNext (  ) ;Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node elseBlock = tryBlock.getNext (  ) ;^125^^^^^110^140^Node elseBlock = ifBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node elseBlock = ifBlock.removeChild (  ) ;^125^^^^^110^140^Node elseBlock = ifBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node elseBlock = ifTree.getNext (  ) ;^125^^^^^110^140^Node elseBlock = ifBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;Node elseBlock = ifBlock.getNext (  ) ;^125^^^^^110^140^Node elseBlock = ifBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node tryBlock = n.getFirstChild (  ) ;Node elseBlock = ifBlock.getNext (  ) ;^125^^^^^110^140^Node elseBlock = ifBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node labelBlock = n.getLastChild (  ) ;Node elseBlock = ifBlock.getNext (  ) ;^125^^^^^110^140^Node elseBlock = ifBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node catchCodeBlock = catchNode.getLastChild (  ) ;Node elseBlock = ifBlock.getNext (  ) ;^125^^^^^110^140^Node elseBlock = ifBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node ifBlock = finallyBlock.getFirstChild (  ) .getNext (  ) ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node ifBlock = labelBlock.getFirstChild (  )  .getString (  )  ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^123^124^125^126^127^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ; tryMinimizeExits ( ifBlock, exitType, labelName ) ; Node elseBlock = ifBlock.getNext (  ) ; if  ( elseBlock != null )  { tryMinimizeExits ( elseBlock, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node ifBlock = labelBlock.getFirstChild (  ) .getNext (  ) ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node ifBlock = finallyBlock.removeChild (  ) .getNext (  ) ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( ifTree, exitType, labelName ) ;^124^^^^^109^139^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits (  exitType, labelName ) ;^124^^^^^109^139^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( ifBlock,  labelName ) ;^124^^^^^109^139^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( ifBlock, exitType ) ;^124^^^^^109^139^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( exitType, ifBlock, labelName ) ;^124^^^^^109^139^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( ifBlock, labelName, exitType ) ;^124^^^^^109^139^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( labelName, exitType, ifBlock ) ;^124^^^^^109^139^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^matchingExitNode ( ifBlock, exitType, labelName ) ;^124^^^^^109^139^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^124^^^^^109^139^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^124^125^126^127^128^109^139^tryMinimizeExits ( ifBlock, exitType, labelName ) ; Node elseBlock = ifBlock.getNext (  ) ; if  ( elseBlock != null )  { tryMinimizeExits ( elseBlock, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P13_Insert_Block]^if  ( elseBlock != null )  {     tryMinimizeExits ( elseBlock, exitType, labelName ) ; }^124^^^^^109^139^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node elseBlock = trueBlock.getNext (  ) ;^125^^^^^110^140^Node elseBlock = ifBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^125^126^127^128^^110^140^Node elseBlock = ifBlock.getNext (  ) ; if  ( elseBlock != null )  { tryMinimizeExits ( elseBlock, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( ifTree != null )  {^126^^^^^111^141^if  ( elseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( Block != this )  {^126^^^^^111^141^if  ( elseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node elseBlock = labelBlock.getNext (  ) ;^125^^^^^110^140^Node elseBlock = ifBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node elseBlock = ifBlock .getString (  )  ;^125^^^^^110^140^Node elseBlock = ifBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( finallyBlock.getType (  )  == Token.IF )  {^122^^^^^107^137^if  ( n.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node ifBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^123^^^^^108^138^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^matchingExitNode ( ifBlock, exitType, labelName ) ;^127^^^^^112^142^tryMinimizeExits ( elseBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.TRY )  {^133^^^^^118^148^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( trueBlock.getType (  )  == Token.TRY )  {^133^^^^^118^148^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  == Token.TRY )  {^133^^^^^118^148^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.LABEL )  {^133^^^^^118^148^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( srcBlock.getType (  )  == Token.BLOCK )  {^133^^^^^118^148^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.IF )  {^133^^^^^118^148^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( c.getType (  )  == Token.IF )  {^133^^^^^118^148^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == type )  {^133^^^^^118^148^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( NodeUtil.hasCatchHandler ( labelBlock )  )  {^137^^^^^122^152^if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( NodeUtil.getCatchBlock ( allCatchNodes )  )  {^137^^^^^122^152^if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( NodeUtil .getCatchBlock ( falseBlock )   )  {^137^^^^^122^152^if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( NodeUtil.hasCatchHandler ( ifTree )  )  {^137^^^^^122^152^if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P15_Unwrap_Block]^com.google.common.base.Preconditions.checkState(allCatchNodes.hasOneChild()); com.google.javascript.rhino.Node catchNode = allCatchNodes.getFirstChild(); com.google.javascript.rhino.Node catchCodeBlock = catchNode.getLastChild(); tryMinimizeExits(catchCodeBlock, exitType, labelName);^137^138^139^140^141^122^152^if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  { Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ; Node catchNode = allCatchNodes.getFirstChild (  ) ; Node catchCodeBlock = catchNode.getLastChild (  ) ; tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P16_Remove_Block]^^137^138^139^140^141^122^152^if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  { Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ; Node catchNode = allCatchNodes.getFirstChild (  ) ; Node catchCodeBlock = catchNode.getLastChild (  ) ; tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node catchNode = n.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node catchNode = allCatchNodes.removeChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node catchNode = ifTree.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node finallyBlock = n.getLastChild (  ) ;Node catchNode = allCatchNodes.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node tryBlock = n.getFirstChild (  ) ;Node catchNode = allCatchNodes.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node labelBlock = n.getLastChild (  ) ;Node catchNode = allCatchNodes.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;Node catchNode = allCatchNodes.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node catchCodeBlock = catchNode.getLastChild (  ) ;Node catchNode = allCatchNodes.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node catchCodeBlock = labelBlock.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node catchCodeBlock = catchNode.removeChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node catchCodeBlock = ifTree.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node finallyBlock = n.getLastChild (  ) ;Node catchCodeBlock = catchNode.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node tryBlock = n.getFirstChild (  ) ;Node catchCodeBlock = catchNode.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node labelBlock = n.getLastChild (  ) ;Node catchCodeBlock = catchNode.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;Node catchCodeBlock = catchNode.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node catchNode = allCatchNodes.getFirstChild (  ) ;Node catchCodeBlock = catchNode.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node elseBlock = ifBlock.getNext (  ) ;Node catchCodeBlock = catchNode.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Preconditions.checkState ( ifBlock.hasOneChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Preconditions.checkState ( allCatchNodes.removeChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^138^139^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ; Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Preconditions.checkState ( n.hasOneChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node catchNode = ifBlock.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node catchNode = n.removeChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^exitNode = exitNodeParent.getLastChild (  ) ;Node catchNode = allCatchNodes.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node catchCodeBlock = tryBlock.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node catchCodeBlock = catchNode .getFirstChild (  )  ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node catchCodeBlock = labelBlock.removeChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^exitNode = exitNodeParent.getLastChild (  ) ;Node catchCodeBlock = catchNode.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( ifTree, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits (  exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( catchCodeBlock,  labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( catchCodeBlock, exitType ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( labelName, exitType, catchCodeBlock ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( exitType, catchCodeBlock, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^matchingExitNode ( catchCodeBlock, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( elseBlock, exitType, labelName ) ;tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( labelBlock, exitType, labelName ) ;tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( c, exitType, labelName ) ;tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( tryBlock, exitType, labelName ) ;tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( NodeUtil.hasFinally ( tryBlock )  )  {^143^^^^^128^158^if  ( NodeUtil.hasFinally ( n )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( NodeUtil.hasCatchHandler ( n )  )  {^143^^^^^128^158^if  ( NodeUtil.hasFinally ( n )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( NodeUtil .hasCatchHandler ( ifTree )   )  {^143^^^^^128^158^if  ( NodeUtil.hasFinally ( n )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( NodeUtil.hasCatchHandler ( ifBlock )  )  {^143^^^^^128^158^if  ( NodeUtil.hasFinally ( n )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node finallyBlock = n.getLastChild(); tryMinimizeExits(finallyBlock, exitType, labelName);^143^144^145^146^^128^158^if  ( NodeUtil.hasFinally ( n )  )  { Node finallyBlock = n.getLastChild (  ) ; tryMinimizeExits ( finallyBlock, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P16_Remove_Block]^^143^144^145^146^^128^158^if  ( NodeUtil.hasFinally ( n )  )  { Node finallyBlock = n.getLastChild (  ) ; tryMinimizeExits ( finallyBlock, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P13_Insert_Block]^if  (  ( isLiteralValue ( cond )  )  &&  ( ! ( getBooleanValue ( cond )  )  )  )  {     tryMinimizeExits ( n.getFirstChild (  ) , Token.BREAK, null ) ; }^143^^^^^128^158^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( LABEL )  )  {     Node labelBlock = n.getLastChild (  ) ;     tryMinimizeExits ( labelBlock, exitType, labelName ) ; }^143^^^^^128^158^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node finallyBlock = tryBlock.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node finallyBlock = n.removeChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node finallyBlock = trueBlock.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;Node finallyBlock = n.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node tryBlock = n.getFirstChild (  ) ;Node finallyBlock = n.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node labelBlock = n.getLastChild (  ) ;Node finallyBlock = n.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node catchCodeBlock = catchNode.getLastChild (  ) ;Node finallyBlock = n.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node catchNode = allCatchNodes.getFirstChild (  ) ;Node finallyBlock = n.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node finallyBlock = n .getFirstChild (  )  ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits (  exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( finallyBlock,  labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( finallyBlock, exitType ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( labelName, exitType, finallyBlock ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( finallyBlock, labelName, exitType ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^matchingExitNode ( finallyBlock, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( elseBlock, exitType, labelName ) ;tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( labelBlock, exitType, labelName ) ;tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( c, exitType, labelName ) ;tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( tryBlock, exitType, labelName ) ;tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node tryBlock = finallyBlock.getFirstChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node tryBlock = n.removeChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node tryBlock = ifBlock.getFirstChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node finallyBlock = n.getLastChild (  ) ;Node tryBlock = n.getFirstChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;Node tryBlock = n.getFirstChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node labelBlock = n.getLastChild (  ) ;Node tryBlock = n.getFirstChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node catchCodeBlock = catchNode.getLastChild (  ) ;Node tryBlock = n.getFirstChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node catchNode = allCatchNodes.getFirstChild (  ) ;Node tryBlock = n.getFirstChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node elseBlock = ifBlock.getNext (  ) ;Node tryBlock = n.getFirstChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node allCatchNodes = NodeUtil.getCatchBlock ( tryBlock ) ;^136^^^^^121^151^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node allCatchNodes = NodeUtil.getLoopCodeBlock ( n ) ;^136^^^^^121^151^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node allCatchNodes = NodeUtil .getLoopCodeBlock ( labelBlock )  ;^136^^^^^121^151^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node allCatchNodes = NodeUtil.getCatchBlock ( ifBlock ) ;^136^^^^^121^151^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node labelBlock = n.getLastChild (  ) ;Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^136^^^^^121^151^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node catchCodeBlock = catchNode.getLastChild (  ) ;Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^136^^^^^121^151^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node catchNode = allCatchNodes.getFirstChild (  ) ;Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^136^^^^^121^151^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node catchNode = tryBlock.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node catchNode = trueBlock.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node catchCodeBlock = ifTree.removeChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node finallyBlock = ifTree.removeChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node tryBlock = n .getLastChild (  )  ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node tryBlock = tryBlock.removeChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^134^135^^^^119^149^Node tryBlock = n.getFirstChild (  ) ; tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^exitNode = exitNodeParent.getLastChild (  ) ;Node tryBlock = n.getFirstChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits (  exitType, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( tryBlock,  labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( tryBlock, exitType ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( labelName, exitType, tryBlock ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( exitType, tryBlock, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^matchingExitNode ( tryBlock, exitType, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^matchingExitNode ( finallyBlock, exitType, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( elseBlock, exitType, labelName ) ;tryMinimizeExits ( tryBlock, exitType, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( labelBlock, exitType, labelName ) ;tryMinimizeExits ( tryBlock, exitType, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;tryMinimizeExits ( tryBlock, exitType, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;tryMinimizeExits ( tryBlock, exitType, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( c, exitType, labelName ) ;tryMinimizeExits ( tryBlock, exitType, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;tryMinimizeExits ( tryBlock, exitType, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;tryMinimizeExits ( tryBlock, exitType, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;tryMinimizeExits ( tryBlock, exitType, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node allCatchNodes = NodeUtil .getLoopCodeBlock ( elseBlock )  ;^136^^^^^121^151^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node allCatchNodes = NodeUtil.getCatchBlock ( finallyBlock ) ;^136^^^^^121^151^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^136^^^^^121^151^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( NodeUtil.hasCatchHandler ( trueBlock )  )  {^137^^^^^122^152^if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Preconditions.checkState ( trueBlock.hasOneChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Preconditions.checkState ( ifTree.removeChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Preconditions.checkState ( allCatchNodes .removeChild ( tryBlock )   ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node catchNode = labelBlock.getFirstChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node catchCodeBlock = ifBlock.getLastChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( n, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( catchCodeBlock, labelName, exitType ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( NodeUtil.hasFinally ( finallyBlock )  )  {^143^^^^^128^158^if  ( NodeUtil.hasFinally ( n )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( NodeUtil.hasFinally ( ifTree )  )  {^143^^^^^128^158^if  ( NodeUtil.hasFinally ( n )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node finallyBlock = ifBlock.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^144^145^^^^129^159^Node finallyBlock = n.getLastChild (  ) ; tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( exitType, finallyBlock, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^tryMinimizeExits ( trueBlock, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( NodeUtil.hasCatchHandler ( tryBlock )  )  {^137^^^^^122^152^if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node catchNode = ifTree.removeChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Preconditions.checkState ( tryBlock.removeChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Preconditions.checkState ( tryBlock.hasOneChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Preconditions.checkState ( ifTree.hasOneChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node catchNode = allCatchNodes .getLastChild (  )  ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^139^140^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ; Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node catchCodeBlock = tryBlock.removeChild (  ) ;^140^^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node finallyBlock = ifTree.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node finallyBlock = finallyBlock.getLastChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node finallyBlock = finallyBlock.removeChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^matchingExitNode ( ifTree, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node tryBlock = labelBlock.getFirstChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node catchNode = trueBlock.removeChild (  ) ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node finallyBlock = tryBlock.removeChild (  ) ;^144^^^^^129^159^Node finallyBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( labelBlock.getType (  )  == Token.TRY )  {^133^^^^^118^148^if  ( n.getType (  )  == Token.TRY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node tryBlock = tryBlock.getFirstChild (  ) ;^134^^^^^119^149^Node tryBlock = n.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P12_Insert_Condition]^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  { tryMinimizeExits ( tryBlock, exitType, labelName ) ; }^135^^^^^120^150^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node allCatchNodes = NodeUtil.getLoopCodeBlock ( finallyBlock ) ;^136^^^^^121^151^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( NodeUtil.getCatchBlock ( n )  )  {^137^^^^^122^152^if  ( NodeUtil.hasCatchHandler ( allCatchNodes )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Preconditions.checkState ( allCatchNodes .removeChild ( ifTree )   ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Preconditions.checkState ( labelBlock.hasOneChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Preconditions.checkState ( trueBlock.removeChild (  )  ) ;^138^^^^^123^153^Preconditions.checkState ( allCatchNodes.hasOneChild (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node catchNode = ifBlock .getLastChild (  )  ;^139^^^^^124^154^Node catchNode = allCatchNodes.getFirstChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^140^141^^^^125^155^Node catchCodeBlock = catchNode.getLastChild (  ) ; tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^matchingExitNode ( tryBlock, exitType, labelName ) ;^141^^^^^126^156^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^145^^^^^130^160^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.LABEL )  {^150^^^^^135^165^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( ifBlock.getType (  )  == Token.LABEL )  {^150^^^^^135^165^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  == Token.LABEL )  {^150^^^^^135^165^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( n.getType (  )  == Token.3 )  {^150^^^^^135^165^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.TRY )  {^150^^^^^135^165^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( srcBlock.getType (  )  == Token.BLOCK )  {^150^^^^^135^165^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.IF )  {^150^^^^^135^165^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( c.getType (  )  == Token.IF )  {^150^^^^^135^165^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == type )  {^150^^^^^135^165^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node labelBlock = n.getLastChild(); tryMinimizeExits(labelBlock, exitType, labelName);^150^151^152^153^^135^165^if  ( n.getType (  )  == Token.LABEL )  { Node labelBlock = n.getLastChild (  ) ; tryMinimizeExits ( labelBlock, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P16_Remove_Block]^^150^151^152^153^^135^165^if  ( n.getType (  )  == Token.LABEL )  { Node labelBlock = n.getLastChild (  ) ; tryMinimizeExits ( labelBlock, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P13_Insert_Block]^if  ( hasFinally ( n )  )  {     Node finallyBlock = n.getLastChild (  ) ;     tryMinimizeExits ( finallyBlock, exitType, labelName ) ; }^150^^^^^135^165^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node labelBlock = finallyBlock.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^Node labelBlock = n.removeChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node labelBlock = ifTree.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node finallyBlock = n.getLastChild (  ) ;Node labelBlock = n.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;Node labelBlock = n.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node tryBlock = n.getFirstChild (  ) ;Node labelBlock = n.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node allCatchNodes = NodeUtil.getCatchBlock ( n ) ;Node labelBlock = n.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node catchCodeBlock = catchNode.getLastChild (  ) ;Node labelBlock = n.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node catchNode = allCatchNodes.getFirstChild (  ) ;Node labelBlock = n.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node elseBlock = ifBlock.getNext (  ) ;Node labelBlock = n.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P12_Insert_Condition]^if  ( c == n.getLastChild (  )  )  { Node labelBlock = n.getLastChild (  ) ; }^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node labelBlock = ifBlock.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^exitNode = exitNodeParent.getLastChild (  ) ;Node labelBlock = n.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits (  exitType, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( labelBlock,  labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( labelBlock, exitType ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( labelName, exitType, labelBlock ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( labelBlock, labelName, exitType ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^matchingExitNode ( labelBlock, exitType, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( elseBlock, exitType, labelName ) ;tryMinimizeExits ( labelBlock, exitType, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;tryMinimizeExits ( labelBlock, exitType, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;tryMinimizeExits ( labelBlock, exitType, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( c, exitType, labelName ) ;tryMinimizeExits ( labelBlock, exitType, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;tryMinimizeExits ( labelBlock, exitType, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;tryMinimizeExits ( labelBlock, exitType, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;tryMinimizeExits ( labelBlock, exitType, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( tryBlock, exitType, labelName ) ;tryMinimizeExits ( labelBlock, exitType, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P12_Insert_Condition]^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  { tryMinimizeExits ( labelBlock, exitType, labelName ) ; }^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( trueBlock.getType (  )  == Token.LABEL )  {^150^^^^^135^165^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( finallyBlock.removeChild (  )  == Token.LABEL )  {^150^^^^^135^165^if  ( n.getType (  )  == Token.LABEL )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node labelBlock = tryBlock.getLastChild (  ) ;^151^^^^^136^166^Node labelBlock = n.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( exitType, labelBlock, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^tryMinimizeExits ( tryBlock, exitType, labelName ) ;^152^^^^^137^167^tryMinimizeExits ( labelBlock, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.BLOCK && n.getLastChild (  )  == null )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.BLOCK || n.getLastChild (  )  == null )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  != null )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( finallyBlock.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P6_Replace_Expression]^if  ( n.getType (  )  != Token.BLOCK ) {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P6_Replace_Expression]^if  (  n.getLastChild (  )  == null )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P6_Replace_Expression]^if  ( n.getType (  )  != BLOCK )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( n.getType (  )  != Token.BLOCK || n.removeChild (  )  == null )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( finallyBlock.getType (  )  != Token.BLOCK || n.getLastChild (  )  == false )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P15_Unwrap_Block]^return ;^158^159^160^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  { return; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P16_Remove_Block]^^158^159^160^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  { return; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( n.getType (  )  != Token.BLOCK || n .getFirstChild (  )   == null )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( ifBlock.getType (  )  != Token.BLOCK || n.removeChild (  )  == null )  {^158^^^^^143^173^if  ( n.getType (  )  != Token.BLOCK || n.getLastChild (  )  == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P2_Replace_Operator]^if  ( c.getType (  )  > Token.IF )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( tryBlock.getType (  )  == Token.IF )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P6_Replace_Expression]^if  ( falseBlock != null )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( c.removeChild (  )  == Token.IF )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( c .getParent (  )   == Token.IF )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( labelBlock .getParent (  )   == Token.IF )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.LABEL )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.TRY )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( srcBlock.getType (  )  == Token.BLOCK )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.IF )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == type )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P2_Replace_Operator]^if  ( falseBlock == null )  {^183^^^^^168^198^if  ( falseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( ifBlock != null )  {^183^^^^^168^198^if  ( falseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( falseBlock != this )  {^183^^^^^168^198^if  ( falseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( destBlock == null )  {^183^^^^^168^198^if  ( falseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( elseBlock != null )  {^183^^^^^168^198^if  ( falseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P9_Replace_Statement]^if  ( labelName == null )  {^183^^^^^168^198^if  ( falseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P15_Unwrap_Block]^tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);^183^184^185^186^^168^198^if  ( falseBlock != null )  { tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P16_Remove_Block]^^183^184^185^186^^168^198^if  ( falseBlock != null )  { tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P13_Insert_Block]^if  ( elseBlock != null )  {     tryMinimizeExits ( elseBlock, exitType, labelName ) ; }^183^^^^^168^198^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( ifBlock, trueBlock, ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, labelBlock, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits (  trueBlock, ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( falseBlock,  ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( falseBlock, trueBlock,  exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree,  labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( falseBlock, ifTree, trueBlock, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, exitType, ifTree, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, labelName, exitType, ifTree ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^tryMinimizeIfBlockExits ( falseBlock, labelBlock, ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P13_Insert_Block]^if  ( falseBlock != null )  {     tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ; }^184^^^^^169^199^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^trueBlock = labelBlock.getFirstChild (  ) .getNext (  ) ;^174^^^^^159^189^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^trueBlock = ifTree.removeChild (  ) .getNext (  ) ;^174^^^^^159^189^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^trueBlock = ifTree .getLastChild (  )  .getNext (  ) ;^174^^^^^159^189^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^trueBlock =  ifBlock.getFirstChild (  ) .getNext (  ) ;^174^^^^^159^189^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^falseBlock = trueBlock.getNext (  ) ;trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^174^^^^^159^189^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^falseBlock = finallyBlock.getNext (  ) ;^175^^^^^160^190^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^falseBlock = trueBlock.removeChild (  ) ;^175^^^^^160^190^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^falseBlock =  n.getNext (  ) ;^175^^^^^160^190^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;falseBlock = trueBlock.getNext (  ) ;^175^^^^^160^190^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^trueBlock = finallyBlock.getFirstChild (  ) .getNext (  ) ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^trueBlock = ifTree.getFirstChild (  )  .getString (  )  ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^trueBlock = ifTree.removeChild (  ) .getNext (  ) ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^falseBlock = trueBlock.getNext (  ) ;trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^falseBlock = finallyBlock.getNext (  ) ;^182^^^^^167^197^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^falseBlock = trueBlock.removeChild (  ) ;^182^^^^^167^197^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^falseBlock = trueBlock .getString (  )  ;^182^^^^^167^197^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^falseBlock =  labelBlock.getNext (  ) ;^182^^^^^167^197^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;falseBlock = trueBlock.getNext (  ) ;^182^^^^^167^197^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node ifTree = ifBlock;^170^^^^^155^185^Node ifTree = c;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node exitNode = null;Node ifTree = c;^170^^^^^155^185^Node ifTree = c;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^trueBlock = tryBlock.getFirstChild (  ) .getNext (  ) ;^174^^^^^159^189^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^trueBlock = finallyBlock.getFirstChild (  ) .getNext (  ) ;^174^^^^^159^189^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^falseBlock = tryBlock.getNext (  ) ;^175^^^^^160^190^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^falseBlock = ifBlock.getNext (  ) ;^175^^^^^160^190^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^175^^^^^160^190^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;falseBlock = trueBlock.getNext (  ) ;^175^^^^^160^190^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node elseBlock = ifBlock.getNext (  ) ;falseBlock = trueBlock.getNext (  ) ;^175^^^^^160^190^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( n, falseBlock, ifTree, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( trueBlock, labelBlock, ifTree, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, tryBlock, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits (  falseBlock, ifTree, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( trueBlock,  ifTree, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( trueBlock, falseBlock,  exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree,  labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( trueBlock, ifTree, falseBlock, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( ifTree, falseBlock, trueBlock, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( trueBlock, exitType, ifTree, falseBlock, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( trueBlock, labelName, ifTree, exitType, falseBlock ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^tryMinimizeIfBlockExits ( finallyBlock, falseBlock, ifTree, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^trueBlock = tryBlock.getFirstChild (  ) .getNext (  ) ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^trueBlock = ifTree .getLastChild (  )  .getNext (  ) ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^trueBlock = finallyBlock.getFirstChild (  )  .getString (  )  ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^181^182^183^184^185^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ; falseBlock = trueBlock.getNext (  ) ; if  ( falseBlock != null )  { tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^trueBlock = n.getFirstChild (  ) .getNext (  ) ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^falseBlock = tryBlock.getNext (  ) ;^182^^^^^167^197^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^falseBlock = ifTree.getNext (  ) ;^182^^^^^167^197^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^182^^^^^167^197^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;falseBlock = trueBlock.getNext (  ) ;^182^^^^^167^197^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node elseBlock = ifBlock.getNext (  ) ;falseBlock = trueBlock.getNext (  ) ;^182^^^^^167^197^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( falseBlock, ifTree, ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( exitType, trueBlock, ifTree, falseBlock, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( labelName, trueBlock, ifTree, exitType, falseBlock ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^tryMinimizeIfBlockExits ( labelBlock, trueBlock, ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( trueBlock != null )  {^183^^^^^168^198^if  ( falseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( falseBlock != true )  {^183^^^^^168^198^if  ( falseBlock != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( ifTree, trueBlock, falseBlock, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( falseBlock, labelName, ifTree, exitType, trueBlock ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P2_Replace_Operator]^if  ( c > n.getLastChild (  )  )  {^189^^^^^174^204^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( tryBlock == n.getLastChild (  )  )  {^189^^^^^174^204^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( c == labelBlock.getLastChild (  )  )  {^189^^^^^174^204^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( n == c.getLastChild (  )  )  {^189^^^^^174^204^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( c == n.removeChild (  )  )  {^189^^^^^174^204^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( c == n .getFirstChild (  )   )  {^189^^^^^174^204^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( ifBlock == n.getLastChild (  )  )  {^189^^^^^174^204^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P15_Unwrap_Block]^break;^189^190^191^^^174^204^if  ( c == n.getLastChild (  )  )  { break; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P16_Remove_Block]^^189^190^191^^^174^204^if  ( c == n.getLastChild (  )  )  { break; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P13_Insert_Block]^if  ( ! ( srcBlock.hasChildren (  )  )  )  {     return ; }^189^^^^^174^204^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^trueBlock = ifTree.getFirstChild (  )  .getString (  )  ;^174^^^^^159^189^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^falseBlock = labelBlock.getNext (  ) ;^175^^^^^160^190^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^falseBlock =  ifTree.getNext (  ) ;^175^^^^^160^190^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^trueBlock = ifBlock.getFirstChild (  ) .getNext (  ) ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^trueBlock =  labelBlock.getFirstChild (  ) .getNext (  ) ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^falseBlock =  ifBlock.getNext (  ) ;^182^^^^^167^197^falseBlock = trueBlock.getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^Node ifTree = trueBlock;^170^^^^^155^185^Node ifTree = c;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^Node ifTree = labelBlock;^170^^^^^155^185^Node ifTree = c;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^for  ( Node c : finallyBlock.children (  )  )  {^166^^^^^151^181^for  ( Node c : n.children (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^for  ( Node c : n.removeChild (  )  )  {^166^^^^^151^181^for  ( Node c : n.children (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^for  ( Node c : n .hasChildren (  )   )  {^166^^^^^151^181^for  ( Node c : n.children (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^for  ( Node c : ifBlock.children (  )  )  {^166^^^^^151^181^for  ( Node c : n.children (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( trueBlock.getType (  )  == Token.IF )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( ifTree.getType (  )  == Token.IF )  {^169^^^^^154^184^if  ( c.getType (  )  == Token.IF )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( trueBlock, ifBlock, ifTree, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, finallyBlock, exitType, labelName ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, labelName, exitType ) ;^176^177^^^^161^191^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^trueBlock = trueBlock.getFirstChild (  ) .getNext (  ) ;^181^^^^^166^196^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( falseBlock, n, ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifBlock, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, labelName, exitType ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^tryMinimizeIfBlockExits ( falseBlock, ifBlock, ifTree, exitType, labelName ) ;^184^185^^^^169^199^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( c == finallyBlock.getLastChild (  )  )  {^189^^^^^174^204^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P2_Replace_Operator]^if  ( c >= n.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( ifBlock == n.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( n == c.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( c == n.removeChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( c == labelBlock.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P15_Unwrap_Block]^break;^199^200^201^^^184^214^if  ( c == n.getLastChild (  )  )  { break; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P16_Remove_Block]^^199^200^201^^^184^214^if  ( c == n.getLastChild (  )  )  { break; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P13_Insert_Block]^if  ( ! ( srcBlock.hasChildren (  )  )  )  {     return ; }^199^^^^^184^214^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P2_Replace_Operator]^for  ( Node c = n.getLastChild (  ) ; c == null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^for  ( Node c = tryBlock.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^for  ( Node labelBlock = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^for  ( Node n = c.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^for  ( Node c = n.removeChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^for  ( Node c = n .getFirstChild (  )  ; c != null; c = n^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^for  ( Node n = n.removeChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P2_Replace_Operator]^if  ( c <= n.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( labelBlock == n.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( tryBlock == n.removeChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( ifTree, exitType, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits (  exitType, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( c,  labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( c, exitType ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( exitType, c, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( c, labelName, exitType ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^tryMinimizeExits ( labelName, exitType, c ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^matchingExitNode ( c, exitType, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( elseBlock, exitType, labelName ) ;tryMinimizeExits ( c, exitType, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( labelBlock, exitType, labelName ) ;tryMinimizeExits ( c, exitType, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( catchCodeBlock, exitType, labelName ) ;tryMinimizeExits ( c, exitType, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeIfBlockExits ( falseBlock, trueBlock, ifTree, exitType, labelName ) ;tryMinimizeExits ( c, exitType, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( ifBlock, exitType, labelName ) ;tryMinimizeExits ( c, exitType, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeIfBlockExits ( trueBlock, falseBlock, ifTree, exitType, labelName ) ;tryMinimizeExits ( c, exitType, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( finallyBlock, exitType, labelName ) ;tryMinimizeExits ( c, exitType, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( tryBlock, exitType, labelName ) ;tryMinimizeExits ( c, exitType, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P12_Insert_Condition]^if  ( matchingExitNode ( n, exitType, labelName )  )  { tryMinimizeExits ( c, exitType, labelName ) ; }^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P12_Insert_Condition]^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  { tryMinimizeExits ( c, exitType, labelName ) ; }^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^if  ( c == ifTree.getLastChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P7_Replace_Invocation]^if  ( c == n .getFirstChild (  )   )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^for  ( Node c = ifBlock.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^for  ( Node c =  tryBlock.getLastChild (  ) ; c !^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^for  ( Node c = ifTree.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^for  ( Node c = ifTree.removeChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P5_Replace_Variable]^for  ( Node c = finallyBlock.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P14_Delete_Statement]^^196^197^^199^200^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  { tryMinimizeExits ( c, exitType, labelName ) ; if  ( c == n.getLastChild (  )  )  { break; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^for  ( Node c = finallyBlock.removeChild (  ) ; c != null; c = n.getLastChild (  )  )  {^196^^^^^181^211^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^tryMinimizeExits ( n, exitType, labelName ) ;^197^^^^^182^212^tryMinimizeExits ( c, exitType, labelName ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P8_Replace_Mix]^if  ( c == labelBlock.removeChild (  )  )  {^199^^^^^184^214^if  ( c == n.getLastChild (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeExits [RETURN_TYPE] void   Node n int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  
[P11_Insert_Donor_Statement]^Node exitNode = null;Node exitNodeParent = null;^222^^^^^207^237^Node exitNodeParent = null;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P11_Insert_Donor_Statement]^Node exitNodeParent = null;Node exitNode = null;^223^^^^^208^238^Node exitNode = null;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P11_Insert_Donor_Statement]^Node ifTree = c;Node exitNode = null;^223^^^^^208^238^Node exitNode = null;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P2_Replace_Operator]^if  ( srcBlock.getType (  )  != Token.BLOCK )  {^226^^^^^211^241^if  ( srcBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^if  ( newDestBlock.getType (  )  == Token.BLOCK )  {^226^^^^^211^241^if  ( srcBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^if  ( srcBlock.removeChild (  )  == Token.BLOCK )  {^226^^^^^211^241^if  ( srcBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.LABEL )  {^226^^^^^211^241^if  ( srcBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.TRY )  {^226^^^^^211^241^if  ( srcBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P15_Unwrap_Block]^if (!(srcBlock.hasChildren())) {    return ;}; exitNodeParent = srcBlock; exitNode = exitNodeParent.getLastChild();^226^227^228^229^^211^241^if  ( srcBlock.getType (  )  == Token.BLOCK )  { if  ( !srcBlock.hasChildren (  )  )  { return; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P16_Remove_Block]^^226^227^228^229^^211^241^if  ( srcBlock.getType (  )  == Token.BLOCK )  { if  ( !srcBlock.hasChildren (  )  )  { return; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^exitNodeParent = srcBlock;^234^^^^^226^236^exitNodeParent = ifNode;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P11_Insert_Donor_Statement]^exitNodeParent = srcBlock;exitNodeParent = ifNode;^234^^^^^226^236^exitNodeParent = ifNode;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^exitNode = ifNode;^235^^^^^226^236^exitNode = srcBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^exitNode =  newDestBlock;^235^^^^^226^236^exitNode = srcBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P11_Insert_Donor_Statement]^exitNodeParent = srcBlock;exitNode = srcBlock;^235^^^^^226^236^exitNode = srcBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^if  ( !srcBlock.removeChild (  )  )  {^227^^^^^212^242^if  ( !srcBlock.hasChildren (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P15_Unwrap_Block]^return ;^227^228^229^^^212^242^if  ( !srcBlock.hasChildren (  )  )  { return; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P16_Remove_Block]^^227^228^229^^^212^242^if  ( !srcBlock.hasChildren (  )  )  { return; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P13_Insert_Block]^if  ( c ==  ( n.getLastChild (  )  )  )  {     break; }^227^^^^^212^242^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^exitNodeParent = newDestBlock;^230^^^^^215^245^exitNodeParent = srcBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P11_Insert_Donor_Statement]^exitNodeParent = ifNode;exitNodeParent = srcBlock;^230^^^^^215^245^exitNodeParent = srcBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P11_Insert_Donor_Statement]^exitNode = srcBlock;exitNodeParent = srcBlock;^230^^^^^215^245^exitNodeParent = srcBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^exitNode = srcBlock.getLastChild (  ) ;^231^^^^^216^246^exitNode = exitNodeParent.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^exitNode = exitNodeParent.removeChild (  ) ;^231^^^^^216^246^exitNode = exitNodeParent.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P13_Insert_Block]^if  ( ! ( srcBlock.hasChildren (  )  )  )  {     return ; }^227^^^^^212^242^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^exitNode = exitNodeParent .getFirstChild (  )  ;^231^^^^^216^246^exitNode = exitNodeParent.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P14_Delete_Statement]^^231^^^^^216^246^exitNode = exitNodeParent.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P11_Insert_Donor_Statement]^Node finallyBlock = n.getLastChild (  ) ;exitNode = exitNodeParent.getLastChild (  ) ;^231^^^^^216^246^exitNode = exitNodeParent.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P11_Insert_Donor_Statement]^Node tryBlock = n.getFirstChild (  ) ;exitNode = exitNodeParent.getLastChild (  ) ;^231^^^^^216^246^exitNode = exitNodeParent.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P11_Insert_Donor_Statement]^Node labelBlock = n.getLastChild (  ) ;exitNode = exitNodeParent.getLastChild (  ) ;^231^^^^^216^246^exitNode = exitNodeParent.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P11_Insert_Donor_Statement]^Node catchCodeBlock = catchNode.getLastChild (  ) ;exitNode = exitNodeParent.getLastChild (  ) ;^231^^^^^216^246^exitNode = exitNodeParent.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P11_Insert_Donor_Statement]^Node catchNode = allCatchNodes.getFirstChild (  ) ;exitNode = exitNodeParent.getLastChild (  ) ;^231^^^^^216^246^exitNode = exitNodeParent.getLastChild (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^exitNodeParent = ifNode;^230^^^^^215^245^exitNodeParent = srcBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^exitNodeParent = newDestBlock;^234^^^^^219^249^exitNodeParent = ifNode;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^exitNodeParent =  srcBlock;^234^^^^^219^249^exitNodeParent = ifNode;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P11_Insert_Donor_Statement]^exitNodeParent = srcBlock;exitNodeParent = ifNode;^234^^^^^219^249^exitNodeParent = ifNode;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^exitNode =  newDestBlock;^235^^^^^220^250^exitNode = srcBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P11_Insert_Donor_Statement]^exitNodeParent = srcBlock;exitNode = srcBlock;^235^^^^^220^250^exitNode = srcBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^if  ( ifNode.getType (  )  == Token.BLOCK )  {^226^^^^^211^241^if  ( srcBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^if  ( newDestBlock.removeChild (  )  == Token.BLOCK )  {^226^^^^^211^241^if  ( srcBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^if  ( !matchingExitNode ( newDestBlock, exitType, labelName )  )  {^239^^^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^if  ( !matchingExitNode (  exitType, labelName )  )  {^239^^^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^if  ( !matchingExitNode ( exitNode,  labelName )  )  {^239^^^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^if  ( !matchingExitNode ( exitNode, exitType )  )  {^239^^^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^if  ( !matchingExitNode ( labelName, exitType, exitNode )  )  {^239^^^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^if  ( !matchingExitNode ( exitType, exitNode, labelName )  )  {^239^^^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^if  ( !matchingExitNode ( exitNode, labelName, exitType )  )  {^239^^^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^if  ( !tryMinimizeExits ( exitNode, exitType, labelName )  )  {^239^^^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^if  ( !matchingExitNode ( srcBlock, exitType, labelName )  )  {^239^^^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P9_Replace_Statement]^if  ( matchingExitNode ( n, exitType, labelName )  )  {^239^^^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P15_Unwrap_Block]^return ;^239^240^241^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  { return; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P16_Remove_Block]^^239^240^241^^^224^254^if  ( !matchingExitNode ( exitNode, exitType, labelName )  )  { return; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P13_Insert_Block]^if  ( ! ( matchingExitNode ( exitNode, exitType, labelName )  )  )  {     return ; }^239^^^^^224^254^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P2_Replace_Operator]^if  ( ifNode.getNext (  )  == null )  {^244^^^^^229^259^if  ( ifNode.getNext (  )  != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^if  ( srcBlock.getNext (  )  != null )  {^244^^^^^229^259^if  ( ifNode.getNext (  )  != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P6_Replace_Expression]^if  ( destBlock == null )  {^244^^^^^229^259^if  ( ifNode.getNext (  )  != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P6_Replace_Expression]^if  ( destBlock.getType() == EMPTY )  {^244^^^^^229^259^if  ( ifNode.getNext (  )  != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P6_Replace_Expression]^if  ( destBlock.getType() == BLOCK )  {^244^^^^^229^259^if  ( ifNode.getNext (  )  != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^if  ( ifNode.removeChild (  )  != null )  {^244^^^^^229^259^if  ( ifNode.getNext (  )  != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^if  ( srcBlock.removeChild (  )  != false )  {^244^^^^^229^259^if  ( ifNode.getNext (  )  != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P2_Replace_Operator]^if  ( destBlock != null )  {^248^^^^^233^263^if  ( destBlock == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^if  ( srcBlock == null )  {^248^^^^^233^263^if  ( destBlock == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P6_Replace_Expression]^if  ( destBlock.getType() == EMPTY )  {^248^^^^^233^263^if  ( destBlock == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P6_Replace_Expression]^if  ( destBlock.getType() == BLOCK )  {^248^^^^^233^263^if  ( destBlock == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^if  ( destBlock == this )  {^248^^^^^233^263^if  ( destBlock == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P9_Replace_Statement]^if  ( elseBlock != null )  {^248^^^^^233^263^if  ( destBlock == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P9_Replace_Statement]^if  ( falseBlock != null )  {^248^^^^^233^263^if  ( destBlock == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P9_Replace_Statement]^if  ( labelName == null )  {^248^^^^^233^263^if  ( destBlock == null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P2_Replace_Operator]^} else if  ( destBlock.getType (  )  != Token.EMPTY )  {^251^^^^^236^266^} else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^} else if  ( newDestBlock.getType (  )  == Token.EMPTY )  {^251^^^^^236^266^} else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P6_Replace_Expression]^} else if  ( destBlock.getType() == BLOCK )  {^251^^^^^236^266^} else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P6_Replace_Expression]^} else {^251^^^^^236^266^} else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^} else if  ( destBlock.removeChild (  )  == Token.EMPTY )  {^251^^^^^236^266^} else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^}  if  ( srcBlock.removeChild (  )  == Token.EMPTY )  {^251^^^^^236^266^} else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P13_Insert_Block]^if  (  ( destBlock.getType (  )  )  ==  ( BLOCK )  )  {     newDestBlock = destBlock; }else {     ifNode.replaceChild ( destBlock, newDestBlock ) ;     newDestBlock.addChildToBack ( destBlock ) ; }^251^^^^^236^266^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P13_Insert_Block]^if  ( destBlock == null )  {     ifNode.addChildToBack ( newDestBlock ) ; }else     if  (  ( destBlock.getType (  )  )  ==  ( EMPTY )  )  {         ifNode.replaceChild ( destBlock, newDestBlock ) ;     }else         if  (  ( destBlock.getType (  )  )  ==  ( BLOCK )  )  {             newDestBlock = destBlock;         }else {             ifNode.replaceChild ( destBlock, newDestBlock ) ;             newDestBlock.addChildToBack ( destBlock ) ;         }^251^^^^^236^266^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P2_Replace_Operator]^} else if  ( destBlock.getType (  )  <= Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^} else if  ( newDestBlock.getType (  )  == Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P6_Replace_Expression]^} else {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^} else if  ( destBlock.removeChild (  )  == Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P13_Insert_Block]^if  (  ( destBlock.getType (  )  )  ==  ( EMPTY )  )  {     ifNode.replaceChild ( destBlock, newDestBlock ) ; }else     if  (  ( destBlock.getType (  )  )  ==  ( BLOCK )  )  {         newDestBlock = destBlock;     }else {         ifNode.replaceChild ( destBlock, newDestBlock ) ;         newDestBlock.addChildToBack ( destBlock ) ;     }^254^^^^^239^269^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild ( srcBlock, newDestBlock ) ;^259^^^^^254^261^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild ( destBlock, srcBlock ) ;^259^^^^^254^261^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild (  newDestBlock ) ;^259^^^^^254^261^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild ( destBlock ) ;^259^^^^^254^261^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild ( newDestBlock, destBlock ) ;^259^^^^^254^261^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P14_Delete_Statement]^^259^260^261^^^254^261^ifNode.replaceChild ( destBlock, newDestBlock ) ; newDestBlock.addChildToBack ( destBlock ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^newDestBlock.replaceChild ( destBlock ) ;^260^^^^^254^261^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^newDestBlock.addChildToBack ( srcBlock ) ;^260^^^^^254^261^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P14_Delete_Statement]^^260^^^^^254^261^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^newDestBlock = srcBlock;^256^^^^^241^271^newDestBlock = destBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^} else if  ( srcBlock.getType (  )  == Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild ( srcBlock, newDestBlock ) ;^259^^^^^244^274^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild ( destBlock, srcBlock ) ;^259^^^^^244^274^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild (  newDestBlock ) ;^259^^^^^244^274^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild ( destBlock ) ;^259^^^^^244^274^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild ( newDestBlock, destBlock ) ;^259^^^^^244^274^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^ifNode .getLastChild (  )  ;^259^^^^^244^274^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P14_Delete_Statement]^^259^260^261^^^244^274^ifNode.replaceChild ( destBlock, newDestBlock ) ; newDestBlock.addChildToBack ( destBlock ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^newDestBlock.addChildToBack ( srcBlock ) ;^260^^^^^245^275^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^newDestBlock.replaceChild ( destBlock ) ;^260^^^^^245^275^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^newDestBlock.replaceChild ( srcBlock ) ;^260^^^^^245^275^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P14_Delete_Statement]^^260^^^^^245^275^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild ( srcBlock, newDestBlock ) ;^253^^^^^238^268^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild (  newDestBlock ) ;^253^^^^^238^268^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild ( destBlock ) ;^253^^^^^238^268^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild ( newDestBlock, destBlock ) ;^253^^^^^238^268^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P2_Replace_Operator]^} else if  ( destBlock.getType (  )  >= Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^ifNode .getLastChild (  )  ;^259^^^^^254^261^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^newDestBlock .addChildToFront ( newDestBlock )  ;^260^^^^^254^261^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^newDestBlock.replaceChild ( srcBlock ) ;^260^^^^^254^261^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^newDestBlock = newDestBlock;^256^^^^^241^271^newDestBlock = destBlock;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^} else if  ( srcBlock.getType (  )  == Token.EMPTY )  {^251^^^^^236^266^} else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.replaceChild ( destBlock, srcBlock ) ;^253^^^^^238^268^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^ifNode.addChildToBack ( srcBlock ) ;^250^^^^^235^265^ifNode.addChildToBack ( newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^ifNode.replaceChild ( newDestBlock ) ;^250^^^^^235^265^ifNode.addChildToBack ( newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P2_Replace_Operator]^} else if  ( destBlock.getType (  )  >= Token.EMPTY )  {^251^^^^^236^266^} else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^} else if  ( destBlock .getParent (  )   == Token.EMPTY )  {^251^^^^^236^266^} else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^} else if  ( destBlock .getParent (  )   == Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^}  if  ( srcBlock.removeChild (  )  == Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^} else if  ( srcBlock.removeChild (  )  == Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^ifNode .getLastChild (  )  ;^253^^^^^238^268^ifNode.replaceChild ( destBlock, newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^}  if  ( srcBlock.getType (  )  == Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^newDestBlock .addChildToFront ( exitNodeParent )  ;^260^^^^^254^261^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^Node newDestBlock = new Node ( Token.4 ) ;^247^^^^^232^262^Node newDestBlock = new Node ( Token.BLOCK ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^ifNode .addChildToFront ( exitNodeParent )  ;^250^^^^^235^265^ifNode.addChildToBack ( newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^ifNode.replaceChild ( srcBlock ) ;^250^^^^^235^265^ifNode.addChildToBack ( newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^moveAllFollowing ( ifNode, ifNode.getParent (  ) , srcBlock ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^moveAllFollowing (  ifNode.getParent (  ) , newDestBlock ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^moveAllFollowing ( ifNode, ifNode.getParent (  )  ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^moveAllFollowing ( newDestBlock, ifNode.getParent (  ) , ifNode ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^visit ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^moveAllFollowing ( ifNode, ifNode.removeChild (  ) , newDestBlock ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^moveAllFollowing ( ifNode, ifNode .getNext (  )  , newDestBlock ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^moveAllFollowing ( ifNode, ifNode.removeChild (  ) , srcBlock ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P14_Delete_Statement]^^264^265^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ; }^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P13_Insert_Block]^if  ( ! ( matchingExitNode ( exitNode, exitType, labelName )  )  )  {     return ; }^264^^^^^249^279^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^moveAllFollowing ( srcBlock, ifNode.getParent (  ) , newDestBlock ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^moveAllFollowing ( newDestBlock, ifNode.getParent (  ) , newDestBlock ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P2_Replace_Operator]^} else if  ( destBlock.getType (  )  <= Token.EMPTY )  {^251^^^^^236^266^} else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^newDestBlock .addChildToFront ( srcBlock )  ;^260^^^^^245^275^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P2_Replace_Operator]^} else if  ( destBlock.getType (  )  != Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^} else if  ( destBlock.getType (  )  == Token.null )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^} else if  ( newDestBlock.removeChild (  )  == Token.EMPTY )  {^251^^^^^236^266^} else if  ( destBlock.getType (  )  == Token.EMPTY )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^} else if  ( newDestBlock.removeChild (  )  == Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P2_Replace_Operator]^} else if  ( destBlock.getType (  )  > Token.BLOCK )  {^254^^^^^239^269^} else if  ( destBlock.getType (  )  == Token.BLOCK )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^newDestBlock .addChildToFront ( ifNode )  ;^260^^^^^254^261^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^if  ( newDestBlock.getNext (  )  != null )  {^244^^^^^229^259^if  ( ifNode.getNext (  )  != null )  {^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P7_Replace_Invocation]^newDestBlock .addChildToFront ( exitNode )  ;^260^^^^^245^275^newDestBlock.addChildToBack ( destBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^moveAllFollowing ( srcBlock, ifNode .getNext (  )  , newDestBlock ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P8_Replace_Mix]^moveAllFollowing ( srcBlock, ifNode.removeChild (  ) , newDestBlock ) ;^264^^^^^249^279^moveAllFollowing ( ifNode, ifNode.getParent (  ) , newDestBlock ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^NodeUtil.removeChild ( srcBlock, exitNode ) ;^268^^^^^253^283^NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^NodeUtil.removeChild ( srcBlockParent, exitNode ) ;^268^^^^^253^283^NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^NodeUtil.removeChild (  exitNode ) ;^268^^^^^253^283^NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^NodeUtil.removeChild ( exitNodeParent ) ;^268^^^^^253^283^NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^NodeUtil.removeChild ( exitNode, exitNodeParent ) ;^268^^^^^253^283^NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P5_Replace_Variable]^NodeUtil.removeChild ( exitNodeParentParent, exitNode ) ;^268^^^^^253^283^NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P14_Delete_Statement]^^268^^^^^253^283^NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( n.getParent (  ) , n ) ;NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^268^^^^^253^283^NodeUtil.removeChild ( exitNodeParent, exitNode ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P14_Delete_Statement]^^270^^^^^255^285^compiler.reportCodeChange (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] tryMinimizeIfBlockExits [RETURN_TYPE] void   Node srcBlock Node destBlock Node ifNode int exitType String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  destBlock  exitNode  exitNodeParent  ifNode  newDestBlock  srcBlock  
[P2_Replace_Operator]^if  ( n.getType (  )  > type )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P2_Replace_Operator]^if  ( n.getType (  )  <= type )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P2_Replace_Operator]^if  ( n.getType (  )  >= type )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P6_Replace_Expression]^if  ( type == RETURN )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P6_Replace_Expression]^if  ( labelName == null )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P6_Replace_Expression]^if  ( n.hasChildren() && getString()) )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  == type )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P7_Replace_Invocation]^if  ( n .getParent (  )   == type )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.LABEL )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.TRY )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.IF )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P9_Replace_Statement]^if  ( c.getType (  )  == Token.IF )  {^285^^^^^284^299^if  ( n.getType (  )  == type )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P13_Insert_Block]^if  ( type ==  ( RETURN )  )  {     return ! ( n.hasChildren (  )  ) ; }else {     if  ( labelName == null )  {         return ! ( n.hasChildren (  )  ) ;     }else {         return  ( n.hasChildren (  )  )  &&  ( labelName.equals ( n.getFirstChild (  ) .getString (  )  )  ) ;     } }^285^^^^^284^299^[Delete]^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P2_Replace_Operator]^if  ( type >= Token.RETURN )  {^286^^^^^284^299^if  ( type == Token.RETURN )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P2_Replace_Operator]^if  ( type <= Token.RETURN )  {^286^^^^^284^299^if  ( type == Token.RETURN )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P6_Replace_Expression]^if  ( labelName == null )  {^286^^^^^284^299^if  ( type == Token.RETURN )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P6_Replace_Expression]^if  ( n.hasChildren() && getString()) )  {^286^^^^^284^299^if  ( type == Token.RETURN )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P2_Replace_Operator]^if  ( labelName != null )  {^290^^^^^284^299^if  ( labelName == null )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P5_Replace_Variable]^if  ( n == labelNameull )  {^290^^^^^284^299^if  ( labelName == null )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P6_Replace_Expression]^if  ( n.hasChildren() && getString()) )  {^290^^^^^284^299^if  ( labelName == null )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P8_Replace_Mix]^if  ( labelName == this )  {^290^^^^^284^299^if  ( labelName == null )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P9_Replace_Statement]^if  ( destBlock == null )  {^290^^^^^284^299^if  ( labelName == null )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P9_Replace_Statement]^if  ( elseBlock != null )  {^290^^^^^284^299^if  ( labelName == null )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P9_Replace_Statement]^if  ( falseBlock != null )  {^290^^^^^284^299^if  ( labelName == null )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P15_Unwrap_Block]^return !(n.hasChildren());^290^291^292^293^294^284^299^if  ( labelName == null )  { return !n.hasChildren (  ) ; } else { return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ; }^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P16_Remove_Block]^^290^291^292^293^294^284^299^if  ( labelName == null )  { return !n.hasChildren (  ) ; } else { return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ; }^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P2_Replace_Operator]^return n.hasChildren (  ) || labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^293^294^^^^284^299^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P5_Replace_Variable]^return labelName.hasChildren (  ) && n.equals ( n.getFirstChild (  ) .getString (  )  ) ;^293^294^^^^284^299^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P7_Replace_Invocation]^return n.removeChild (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^293^294^^^^284^299^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P7_Replace_Invocation]^return n.hasChildren (  ) && labelName.equals ( n.removeChild (  ) .getString (  )  ) ;^293^294^^^^284^299^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P8_Replace_Mix]^return n.hasChildren (  ) ;^293^294^^^^284^299^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P14_Delete_Statement]^^293^294^^^^284^299^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P1_Replace_Type]^&& labelName.equals ( n.getFirstChild (  ) .getchar (  )  ) ;^294^^^^^284^299^&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P5_Replace_Variable]^&& n.equals ( labelName.getFirstChild (  ) .getString (  )  ) ;^294^^^^^284^299^&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P7_Replace_Invocation]^&& labelName.equals ( n.removeChild (  ) .getString (  )  ) ;^294^^^^^284^299^&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P7_Replace_Invocation]^&& labelName.equals ( n .getLastChild (  )  .getString (  )  ) ;^294^^^^^284^299^&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P14_Delete_Statement]^^294^^^^^284^299^&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P11_Insert_Donor_Statement]^Node ifBlock = n.getFirstChild (  ) .getNext (  ) ;&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^294^^^^^284^299^&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P11_Insert_Donor_Statement]^tryMinimizeExits ( n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^294^^^^^284^299^&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P11_Insert_Donor_Statement]^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^294^^^^^284^299^&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P11_Insert_Donor_Statement]^trueBlock = ifTree.getFirstChild (  ) .getNext (  ) ;&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^294^^^^^284^299^&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P11_Insert_Donor_Statement]^n.getLastChild (  ) , Token.BREAK, n.getFirstChild (  ) .getString (  )  ) ;&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^294^^^^^284^299^&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P7_Replace_Invocation]^return !n.removeChild (  ) ;^291^^^^^284^299^return !n.hasChildren (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P7_Replace_Invocation]^return !n .children (  )  ;^291^^^^^284^299^return !n.hasChildren (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P14_Delete_Statement]^^291^^^^^284^299^return !n.hasChildren (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P7_Replace_Invocation]^return n.hasChildren (  ) && labelName.equals ( n .getLastChild (  )  .getString (  )  ) ;^293^294^^^^284^299^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P8_Replace_Mix]^return n .children (  )  && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^293^294^^^^284^299^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P7_Replace_Invocation]^&& labelName.equals ( n.getFirstChild (  )  .getNext (  )   ) ;^294^^^^^284^299^&& labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P7_Replace_Invocation]^return !n.removeChild (  ) ;^288^^^^^284^299^return !n.hasChildren (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P7_Replace_Invocation]^return !n .children (  )  ;^288^^^^^284^299^return !n.hasChildren (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P14_Delete_Statement]^^288^^^^^284^299^return !n.hasChildren (  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P8_Replace_Mix]^if  ( labelName == true )  {^290^^^^^284^299^if  ( labelName == null )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P7_Replace_Invocation]^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  )  .getNext (  )   ) ;^293^294^^^^284^299^return n.hasChildren (  ) && labelName.equals ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P2_Replace_Operator]^if  ( type != Token.RETURN )  {^286^^^^^284^299^if  ( type == Token.RETURN )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P8_Replace_Mix]^if  ( labelName == false )  {^290^^^^^284^299^if  ( labelName == null )  {^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P3_Replace_Literal]^return true;^298^^^^^284^299^return false;^[CLASS] MinimizeExitPoints  [METHOD] matchingExitNode [RETURN_TYPE] boolean   Node n int type String labelName [VARIABLES] AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  
[P5_Replace_Variable]^if  ( isFunctionDeclaratiostart )  {^316^^^^^308^322^if  ( isFunctionDeclaration )  {^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P15_Unwrap_Block]^destParent.addChildToFront(n);^316^317^318^319^320^308^322^if  ( isFunctionDeclaration )  { destParent.addChildToFront ( n ) ; } else { destParent.addChildToBack ( n ) ; }^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P16_Remove_Block]^^316^317^318^319^320^308^322^if  ( isFunctionDeclaration )  { destParent.addChildToFront ( n ) ; } else { destParent.addChildToBack ( n ) ; }^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P5_Replace_Variable]^destParent.addChildToBack ( start ) ;^319^^^^^308^322^destParent.addChildToBack ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P7_Replace_Invocation]^destParent.replaceChild ( n ) ;^319^^^^^308^322^destParent.addChildToBack ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P8_Replace_Mix]^destParent .addChildToFront ( srcParent )  ;^319^^^^^308^322^destParent.addChildToBack ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P14_Delete_Statement]^^319^^^^^308^322^destParent.addChildToBack ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P11_Insert_Donor_Statement]^newDestBlock.addChildToBack ( destBlock ) ;destParent.addChildToBack ( n ) ;^319^^^^^308^322^destParent.addChildToBack ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P11_Insert_Donor_Statement]^srcParent.removeChild ( n ) ;destParent.addChildToBack ( n ) ;^319^^^^^308^322^destParent.addChildToBack ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P11_Insert_Donor_Statement]^destParent.addChildToFront ( n ) ;destParent.addChildToBack ( n ) ;^319^^^^^308^322^destParent.addChildToBack ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P5_Replace_Variable]^destParent.addChildToFront ( start ) ;^317^^^^^308^322^destParent.addChildToFront ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P7_Replace_Invocation]^destParent.replaceChild ( n ) ;^317^^^^^308^322^destParent.addChildToFront ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P14_Delete_Statement]^^317^^^^^308^322^destParent.addChildToFront ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P11_Insert_Donor_Statement]^destParent.addChildToBack ( n ) ;destParent.addChildToFront ( n ) ;^317^^^^^308^322^destParent.addChildToFront ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P2_Replace_Operator]^for  ( Node n = start.getNext (  ) ; n == null; n = start.getNext (  )  )  {^310^^^^^308^322^for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P5_Replace_Variable]^for  ( Node n = srcParent.getNext (  ) ; n != null; n = start.getNext (  )  )  {^310^^^^^308^322^for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P5_Replace_Variable]^for  ( Node start = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^310^^^^^308^322^for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P7_Replace_Invocation]^for  ( Node n = start.removeChild (  ) ; n != null; n = start.getNext (  )  )  {^310^^^^^308^322^for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P5_Replace_Variable]^boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration ( start ) ;^311^312^^^^308^322^boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P7_Replace_Invocation]^boolean isFunctionDeclaration = NodeUtil.getConditionExpression ( n ) ;^311^312^^^^308^322^boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P5_Replace_Variable]^NodeUtil.isFunctionDeclaration ( start ) ;^312^^^^^308^322^NodeUtil.isFunctionDeclaration ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P7_Replace_Invocation]^NodeUtil.getConditionExpression ( n ) ;^312^^^^^308^322^NodeUtil.isFunctionDeclaration ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P14_Delete_Statement]^^312^^^^^308^322^NodeUtil.isFunctionDeclaration ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P12_Insert_Condition]^if  ( isFunctionDeclaration )  { NodeUtil.isFunctionDeclaration ( n ) ; }^312^^^^^308^322^NodeUtil.isFunctionDeclaration ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P5_Replace_Variable]^srcParent.removeChild ( start ) ;^314^^^^^308^322^srcParent.removeChild ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P7_Replace_Invocation]^srcParent.replaceChild ( n ) ;^314^^^^^308^322^srcParent.removeChild ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P7_Replace_Invocation]^srcParent .removeChild ( srcParent )  ;^314^^^^^308^322^srcParent.removeChild ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P14_Delete_Statement]^^314^^^^^308^322^srcParent.removeChild ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P11_Insert_Donor_Statement]^destParent.addChildToBack ( n ) ;srcParent.removeChild ( n ) ;^314^^^^^308^322^srcParent.removeChild ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P7_Replace_Invocation]^destParent .addChildToBack ( destParent )  ;^317^^^^^308^322^destParent.addChildToFront ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P7_Replace_Invocation]^for  ( Node n = start .getString (  )  ; n != null; n = start^310^^^^^308^322^for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P8_Replace_Mix]^for  ( Node n =  null.getNext (  ) ; n !^310^^^^^308^322^for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P8_Replace_Mix]^for  ( Node n = srcParent.removeChild (  ) ; n != null; n = start.getNext (  )  )  {^310^^^^^308^322^for  ( Node n = start.getNext (  ) ; n != null; n = start.getNext (  )  )  {^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P7_Replace_Invocation]^boolean isFunctionDeclaration = NodeUtil .getConditionExpression ( srcParent )  ;^311^312^^^^308^322^boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P8_Replace_Mix]^boolean isFunctionDeclaration = NodeUtil.getConditionExpression ( start ) ;^311^312^^^^308^322^boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P8_Replace_Mix]^destParent.replaceChild ( start ) ;^317^^^^^308^322^destParent.addChildToFront ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
[P7_Replace_Invocation]^destParent .addChildToFront ( destParent )  ;^319^^^^^308^322^destParent.addChildToBack ( n ) ;^[CLASS] MinimizeExitPoints  [METHOD] moveAllFollowing [RETURN_TYPE] void   Node start Node srcParent Node destParent [VARIABLES] AbstractCompiler  compiler  Node  destParent  n  srcParent  start  boolean  isFunctionDeclaration  
