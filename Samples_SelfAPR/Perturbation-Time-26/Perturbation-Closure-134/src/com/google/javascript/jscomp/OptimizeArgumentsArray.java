[P1_Replace_Type]^private static final char ARGUMENTS = "arguments";^50^^^^^45^55^private static final String ARGUMENTS = "arguments";^[CLASS] OptimizeArgumentsArray   [VARIABLES] 
[P3_Replace_Literal]^private static final String ARGUMENTS = "rgumentrguments";^50^^^^^45^55^private static final String ARGUMENTS = "arguments";^[CLASS] OptimizeArgumentsArray   [VARIABLES] 
[P1_Replace_Type]^private static final char PARAMETER_PREFIX = "JSCompiler_OptimizeArgumentsArray_p";^54^55^^^^54^55^private static final String PARAMETER_PREFIX = "JSCompiler_OptimizeArgumentsArray_p";^[CLASS] OptimizeArgumentsArray   [VARIABLES] 
[P3_Replace_Literal]^private static final String PARAMETER_PREFIX = "leSCompiler_OptimizeArgumentsArray_p";^54^55^^^^54^55^private static final String PARAMETER_PREFIX = "JSCompiler_OptimizeArgumentsArray_p";^[CLASS] OptimizeArgumentsArray   [VARIABLES] 
[P1_Replace_Type]^private final char paramPredix;^58^^^^^53^63^private final String paramPredix;^[CLASS] OptimizeArgumentsArray   [VARIABLES] 
[P1_Replace_Type]^private  short  uniqueId = 0;^62^^^^^57^67^private int uniqueId = 0;^[CLASS] OptimizeArgumentsArray   [VARIABLES] 
[P3_Replace_Literal]^private int uniqueId = -3;^62^^^^^57^67^private int uniqueId = 0;^[CLASS] OptimizeArgumentsArray   [VARIABLES] 
[P8_Replace_Mix]^private int uniqueId ;^62^^^^^57^67^private int uniqueId = 0;^[CLASS] OptimizeArgumentsArray   [VARIABLES] 
[P8_Replace_Mix]^private final Deque<List<Node>> argumentsAccessStack ;^68^^^^^63^73^private final Deque<List<Node>> argumentsAccessStack = Lists.newLinkedList (  ) ;^[CLASS] OptimizeArgumentsArray   [VARIABLES] 
[P8_Replace_Mix]^private List<Node> currentArgumentsAccess  = null ;^71^^^^^66^76^private List<Node> currentArgumentsAccess = null;^[CLASS] OptimizeArgumentsArray   [VARIABLES] 
[P12_Insert_Condition]^if  ( currentArgumentsAccess != null )  { private List<Node> currentArgumentsAccess = null; }^71^^^^^66^76^private List<Node> currentArgumentsAccess = null;^[CLASS] OptimizeArgumentsArray   [VARIABLES] 
[P12_Insert_Condition]^if  ( currentArgumentsAccess == null )  { private List<Node> currentArgumentsAccess = null; }^71^^^^^66^76^private List<Node> currentArgumentsAccess = null;^[CLASS] OptimizeArgumentsArray   [VARIABLES] 
[P5_Replace_Variable]^this ( compiler, paramPredix ) ;^78^^^^^77^79^this ( compiler, PARAMETER_PREFIX ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P5_Replace_Variable]^this (  PARAMETER_PREFIX ) ;^78^^^^^77^79^this ( compiler, PARAMETER_PREFIX ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P5_Replace_Variable]^this ( compiler ) ;^78^^^^^77^79^this ( compiler, PARAMETER_PREFIX ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P5_Replace_Variable]^this ( PARAMETER_PREFIX, compiler ) ;^78^^^^^77^79^this ( compiler, PARAMETER_PREFIX ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P14_Delete_Statement]^^78^^^^^77^79^this ( compiler, PARAMETER_PREFIX ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P7_Replace_Invocation]^this.compiler = Preconditions .checkState (  )  ;^86^^^^^85^88^this.compiler = Preconditions.checkNotNull ( compiler ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String paramPrefix [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^this.compiler =  Preconditions.checkNotNull ( null ) ;^86^^^^^85^88^this.compiler = Preconditions.checkNotNull ( compiler ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String paramPrefix [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;this.compiler = Preconditions.checkNotNull ( compiler ) ;^86^^^^^85^88^this.compiler = Preconditions.checkNotNull ( compiler ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String paramPrefix [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P14_Delete_Statement]^^86^^^^^85^88^this.compiler = Preconditions.checkNotNull ( compiler ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String paramPrefix [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( traversal ) ;this.compiler = Preconditions.checkNotNull ( compiler ) ;^86^^^^^85^88^this.compiler = Preconditions.checkNotNull ( compiler ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String paramPrefix [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( node ) ;this.compiler = Preconditions.checkNotNull ( compiler ) ;^86^^^^^85^88^this.compiler = Preconditions.checkNotNull ( compiler ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String paramPrefix [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;this.compiler = Preconditions.checkNotNull ( compiler ) ;^86^^^^^85^88^this.compiler = Preconditions.checkNotNull ( compiler ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String paramPrefix [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P5_Replace_Variable]^this.paramPredix = Preconditions.checkNotNull ( paramPredix ) ;^87^^^^^85^88^this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String paramPrefix [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^this.compiler = Preconditions.checkNotNull ( compiler ) ;this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;^87^^^^^85^88^this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String paramPrefix [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P14_Delete_Statement]^^87^^^^^85^88^this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String paramPrefix [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( traversal ) ;this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;^87^^^^^85^88^this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String paramPrefix [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( node ) ;this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;^87^^^^^85^88^this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String paramPrefix [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;^87^^^^^85^88^this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String paramPrefix [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  uniqueId  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( externs ) , this ) ;^92^^^^^91^93^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  externs  root  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P5_Replace_Variable]^NodeTraversal.traverse (  Preconditions.checkNotNull ( root ) , this ) ;^92^^^^^91^93^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  externs  root  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, Preconditions.checkNotNull ( compiler ) , this ) ;^92^^^^^91^93^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  externs  root  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P7_Replace_Invocation]^NodeTraversal .getScopeRoot (  )  ;^92^^^^^91^93^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  externs  root  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P14_Delete_Statement]^^92^^^^^91^93^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  externs  root  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^this.compiler = Preconditions.checkNotNull ( compiler ) ;NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^92^^^^^91^93^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  externs  root  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^92^^^^^91^93^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  externs  root  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^NodeTraversal.traverse ( compiler, Preconditions .checkState (  )  , this ) ;^92^^^^^91^93^NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Node  externs  root  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^Preconditions .checkState (  )  ;^97^^^^^96^112^Preconditions.checkNotNull ( traversal ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P14_Delete_Statement]^^97^^^^^96^112^Preconditions.checkNotNull ( traversal ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( node ) ;Preconditions.checkNotNull ( traversal ) ;^97^^^^^96^112^Preconditions.checkNotNull ( traversal ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^this.compiler = Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( traversal ) ;^97^^^^^96^112^Preconditions.checkNotNull ( traversal ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;Preconditions.checkNotNull ( traversal ) ;^97^^^^^96^112^Preconditions.checkNotNull ( traversal ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P7_Replace_Invocation]^Node function = traversal .getScope (  )  ;^101^^^^^96^112^Node function = traversal.getScopeRoot (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^Node index = ref.getNext (  ) ;Node function = traversal.getScopeRoot (  ) ;^101^^^^^96^112^Node function = traversal.getScopeRoot (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^Node getElem = ref.getParent (  ) ;Node function = traversal.getScopeRoot (  ) ;^101^^^^^96^112^Node function = traversal.getScopeRoot (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P14_Delete_Statement]^^101^^^^^96^112^Node function = traversal.getScopeRoot (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P7_Replace_Invocation]^if  ( !NodeUtil.isName ( function )  )  {^102^^^^^96^112^if  ( !NodeUtil.isFunction ( function )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P15_Unwrap_Block]^return ;^102^103^104^^^96^112^if  ( !NodeUtil.isFunction ( function )  )  { return; }^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P16_Remove_Block]^^102^103^104^^^96^112^if  ( !NodeUtil.isFunction ( function )  )  { return; }^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P13_Insert_Block]^if  (  ( isCall ( getElemParent )  )  &&  (  ( getElemParent.getFirstChild (  )  )  == getElem )  )  {     return false; }^102^^^^^96^112^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P13_Insert_Block]^if  ( ! ( isFunction ( function )  )  )  {     return ; }^102^^^^^96^112^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P2_Replace_Operator]^if  ( currentArgumentsAccess == null )  {^108^^^^^96^112^if  ( currentArgumentsAccess != null )  {^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^if  ( currentArgumentsAccess != false )  {^108^^^^^96^112^if  ( currentArgumentsAccess != null )  {^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P15_Unwrap_Block]^argumentsAccessStack.push(currentArgumentsAccess);^108^109^110^^^96^112^if  ( currentArgumentsAccess != null )  { argumentsAccessStack.push ( currentArgumentsAccess ) ; }^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P16_Remove_Block]^^108^109^110^^^96^112^if  ( currentArgumentsAccess != null )  { argumentsAccessStack.push ( currentArgumentsAccess ) ; }^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P13_Insert_Block]^if  (  ( currentArgumentsAccess )  == null )  {     return ; }^108^^^^^96^112^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P7_Replace_Invocation]^argumentsAccessStack.isEmpty ( currentArgumentsAccess ) ;^109^^^^^96^112^argumentsAccessStack.push ( currentArgumentsAccess ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P7_Replace_Invocation]^argumentsAccessStack .pop (  )  ;^109^^^^^96^112^argumentsAccessStack.push ( currentArgumentsAccess ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P14_Delete_Statement]^^109^^^^^96^112^argumentsAccessStack.push ( currentArgumentsAccess ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P13_Insert_Block]^if  (  ( currentArgumentsAccess )  != null )  {     argumentsAccessStack.push ( currentArgumentsAccess ) ; }^109^^^^^96^112^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P5_Replace_Variable]^argumentsAccessStack.push ( 2 ) ;^109^^^^^96^112^argumentsAccessStack.push ( currentArgumentsAccess ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^currentArgumentsAccess  = null ;^111^^^^^96^112^currentArgumentsAccess = Lists.newLinkedList (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^currentArgumentsAccess = argumentsAccessStack.pop (  ) ;currentArgumentsAccess = Lists.newLinkedList (  ) ;^111^^^^^96^112^currentArgumentsAccess = Lists.newLinkedList (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^currentArgumentsAccess = null;currentArgumentsAccess = Lists.newLinkedList (  ) ;^111^^^^^96^112^currentArgumentsAccess = Lists.newLinkedList (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P14_Delete_Statement]^^111^^^^^96^112^currentArgumentsAccess = Lists.newLinkedList (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^currentArgumentsAccess.add ( node ) ;currentArgumentsAccess = Lists.newLinkedList (  ) ;^111^^^^^96^112^currentArgumentsAccess = Lists.newLinkedList (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  function  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^116^^^^^115^141^Preconditions.checkNotNull ( traversal ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P14_Delete_Statement]^^116^^^^^115^141^Preconditions.checkNotNull ( traversal ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( node ) ;Preconditions.checkNotNull ( traversal ) ;^116^^^^^115^141^Preconditions.checkNotNull ( traversal ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^this.compiler = Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( traversal ) ;^116^^^^^115^141^Preconditions.checkNotNull ( traversal ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;Preconditions.checkNotNull ( traversal ) ;^116^^^^^115^141^Preconditions.checkNotNull ( traversal ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P2_Replace_Operator]^if  ( currentArgumentsAccess != null )  {^121^^^^^115^141^if  ( currentArgumentsAccess == null )  {^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P5_Replace_Variable]^if  ( null == null )  {^121^^^^^115^141^if  ( currentArgumentsAccess == null )  {^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^if  ( currentArgumentsAccess == this )  {^121^^^^^115^141^if  ( currentArgumentsAccess == null )  {^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P15_Unwrap_Block]^return ;^121^122^123^^^115^141^if  ( currentArgumentsAccess == null )  { return; }^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P16_Remove_Block]^^121^122^123^^^115^141^if  ( currentArgumentsAccess == null )  { return; }^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P13_Insert_Block]^if  (  ( currentArgumentsAccess )  != null )  {     argumentsAccessStack.push ( currentArgumentsAccess ) ; }^121^^^^^115^141^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P7_Replace_Invocation]^if  ( enterScope ( traversal.getScope (  )  )  )  {^127^^^^^115^141^if  ( tryReplaceArguments ( traversal.getScope (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P15_Unwrap_Block]^traversal.getCompiler().reportCodeChange();^127^128^129^^^115^141^if  ( tryReplaceArguments ( traversal.getScope (  )  )  )  { traversal.getCompiler (  ) .reportCodeChange (  ) ; }^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P16_Remove_Block]^^127^128^129^^^115^141^if  ( tryReplaceArguments ( traversal.getScope (  )  )  )  { traversal.getCompiler (  ) .reportCodeChange (  ) ; }^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P7_Replace_Invocation]^traversal.getCompiler (  )  .replaceChild (  )  ;^128^^^^^115^141^traversal.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P14_Delete_Statement]^^128^^^^^115^141^traversal.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P7_Replace_Invocation]^if  ( tryReplaceArguments ( traversal .getScopeRoot (  )   )  )  {^127^^^^^115^141^if  ( tryReplaceArguments ( traversal.getScope (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^traversal .getScope (  )  .reportCodeChange (  ) ;^128^^^^^115^141^traversal.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P7_Replace_Invocation]^if  ( !argumentsAccessStack.pop (  )  )  {^136^^^^^115^141^if  ( !argumentsAccessStack.isEmpty (  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P15_Unwrap_Block]^currentArgumentsAccess = argumentsAccessStack.pop();^136^137^138^139^140^115^141^if  ( !argumentsAccessStack.isEmpty (  )  )  { currentArgumentsAccess = argumentsAccessStack.pop (  ) ; } else { currentArgumentsAccess = null; }^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P16_Remove_Block]^^136^137^138^139^140^115^141^if  ( !argumentsAccessStack.isEmpty (  )  )  { currentArgumentsAccess = argumentsAccessStack.pop (  ) ; } else { currentArgumentsAccess = null; }^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^currentArgumentsAccess = false;^139^^^^^136^140^currentArgumentsAccess = null;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^currentArgumentsAccess = Lists.newLinkedList (  ) ;currentArgumentsAccess = null;^139^^^^^136^140^currentArgumentsAccess = null;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P12_Insert_Condition]^if  ( currentArgumentsAccess != null )  { currentArgumentsAccess = null; }^139^^^^^136^140^currentArgumentsAccess = null;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P12_Insert_Condition]^if  ( currentArgumentsAccess == null )  { currentArgumentsAccess = null; }^139^^^^^136^140^currentArgumentsAccess = null;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P13_Insert_Block]^if  (  ( currentArgumentsAccess )  == null )  {     return ; }^139^^^^^136^140^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P7_Replace_Invocation]^currentArgumentsAccess = argumentsAccessStack.isEmpty (  ) ;^137^^^^^115^141^currentArgumentsAccess = argumentsAccessStack.pop (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^currentArgumentsAccess ;^137^^^^^115^141^currentArgumentsAccess = argumentsAccessStack.pop (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^currentArgumentsAccess = Lists.newLinkedList (  ) ;currentArgumentsAccess = argumentsAccessStack.pop (  ) ;^137^^^^^115^141^currentArgumentsAccess = argumentsAccessStack.pop (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P13_Insert_Block]^if  (  ( currentArgumentsAccess )  != null )  {     argumentsAccessStack.push ( currentArgumentsAccess ) ; }^137^^^^^115^141^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P14_Delete_Statement]^^137^^^^^115^141^currentArgumentsAccess = argumentsAccessStack.pop (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^currentArgumentsAccess = this;^139^^^^^115^141^currentArgumentsAccess = null;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^currentArgumentsAccess = Lists.newLinkedList (  ) ;currentArgumentsAccess = null;^139^^^^^115^141^currentArgumentsAccess = null;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P12_Insert_Condition]^if  ( currentArgumentsAccess != null )  { currentArgumentsAccess = null; }^139^^^^^115^141^currentArgumentsAccess = null;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P12_Insert_Condition]^if  ( currentArgumentsAccess == null )  { currentArgumentsAccess = null; }^139^^^^^115^141^currentArgumentsAccess = null;^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P13_Insert_Block]^if  (  ( currentArgumentsAccess )  == null )  {     return ; }^139^^^^^115^141^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P3_Replace_Literal]^return false;^147^^^^^144^148^return true;^[CLASS] OptimizeArgumentsArray  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  nodeTraversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P14_Delete_Statement]^^152^153^^^^151^170^Preconditions.checkNotNull ( traversal ) ; Preconditions.checkNotNull ( node ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( node ) ;Preconditions.checkNotNull ( traversal ) ;^152^^^^^151^170^Preconditions.checkNotNull ( traversal ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^this.compiler = Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( traversal ) ;^152^^^^^151^170^Preconditions.checkNotNull ( traversal ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;Preconditions.checkNotNull ( traversal ) ;^152^^^^^151^170^Preconditions.checkNotNull ( traversal ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P5_Replace_Variable]^Preconditions.checkNotNull ( parent ) ;^153^^^^^151^170^Preconditions.checkNotNull ( node ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P14_Delete_Statement]^^153^^^^^151^170^Preconditions.checkNotNull ( node ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( traversal ) ;Preconditions.checkNotNull ( node ) ;^153^^^^^151^170^Preconditions.checkNotNull ( node ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^this.compiler = Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( node ) ;^153^^^^^151^170^Preconditions.checkNotNull ( node ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;Preconditions.checkNotNull ( node ) ;^153^^^^^151^170^Preconditions.checkNotNull ( node ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P2_Replace_Operator]^if  ( currentArgumentsAccess != null )  {^161^^^^^151^170^if  ( currentArgumentsAccess == null )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^if  ( currentArgumentsAccess == true )  {^161^^^^^151^170^if  ( currentArgumentsAccess == null )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P15_Unwrap_Block]^return ;^161^162^163^^^151^170^if  ( currentArgumentsAccess == null )  { return; }^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P16_Remove_Block]^^161^162^163^^^151^170^if  ( currentArgumentsAccess == null )  { return; }^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P13_Insert_Block]^if  (  ( currentArgumentsAccess )  != null )  {     argumentsAccessStack.push ( currentArgumentsAccess ) ; }^161^^^^^151^170^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( node )  || ARGUMENTS.equals ( node.getString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( parent )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( node )  && paramPrefix.equals ( node.getString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( node )  ) {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P6_Replace_Expression]^if  (  ARGUMENTS.equals ( node.getString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P7_Replace_Invocation]^if  ( NodeUtil.isCall ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.newString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^if  (  paramPrefix.equals ( node.getString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P15_Unwrap_Block]^currentArgumentsAccess.add(node);^167^168^169^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  { currentArgumentsAccess.add ( node ) ; }^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P16_Remove_Block]^^167^168^169^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  { currentArgumentsAccess.add ( node ) ; }^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P5_Replace_Variable]^currentArgumentsAccess.add ( parent ) ;^168^^^^^151^170^currentArgumentsAccess.add ( node ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P14_Delete_Statement]^^168^^^^^151^170^currentArgumentsAccess.add ( node ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^currentArgumentsAccess = argumentsAccessStack.pop (  ) ;currentArgumentsAccess.add ( node ) ;^168^^^^^151^170^currentArgumentsAccess.add ( node ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P11_Insert_Donor_Statement]^currentArgumentsAccess = Lists.newLinkedList (  ) ;currentArgumentsAccess.add ( node ) ;^168^^^^^151^170^currentArgumentsAccess.add ( node ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P12_Insert_Condition]^if  ( currentArgumentsAccess != null )  { currentArgumentsAccess.add ( node ) ; }^168^^^^^151^170^currentArgumentsAccess.add ( node ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P12_Insert_Condition]^if  ( currentArgumentsAccess == null )  { currentArgumentsAccess.add ( node ) ; }^168^^^^^151^170^currentArgumentsAccess.add ( node ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^if  ( NodeUtil.isCall ( parent )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P13_Insert_Block]^if  ( ! ( isFunction ( function )  )  )  {     return ; }^167^^^^^151^170^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( ARGUMENTS )  && node.equals ( node.getString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( parent )  && ARGUMENTS.equals ( node.newString (  )  )  )  {^167^^^^^151^170^if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[CLASS] OptimizeArgumentsArray  [METHOD] visit [RETURN_TYPE] void   NodeTraversal traversal Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  traversal  Node  node  parent  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  Deque  argumentsAccessStack  int  uniqueId  
[P8_Replace_Mix]^Node parametersList = scope.getRootNode (  )  .replaceChild (  )  .getNext (  ) ;^181^^^^^166^196^Node parametersList = scope.getRootNode (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^Node parametersList = scope.getRootNode (  ) .getFirstChild (  )  .getParent (  )  ;^181^^^^^166^196^Node parametersList = scope.getRootNode (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^181^182^^^^166^196^Node parametersList = scope.getRootNode (  ) .getFirstChild (  ) .getNext (  ) ; Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^181^^^^^166^196^Node parametersList = scope.getRootNode (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^Preconditions.checkState ( parametersList.getType (  )  >= Token.LP ) ;^182^^^^^167^197^Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Preconditions.checkState ( name.getType (  )  == Token.LP ) ;^182^^^^^167^197^Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( parametersList.getType (  )  == Token.LP ) ;^182^^^^^167^197^Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Preconditions.checkState ( parametersList.newString (  )  == Token.LP ) ;^182^^^^^167^197^Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^Preconditions.checkState ( ref.newString (  )  == Token.LP ) ;^182^^^^^167^197^Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^182^^^^^167^197^Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Preconditions.checkState ( ref.getType (  )  == Token.LP ) ;^182^^^^^167^197^Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Preconditions.checkState ( parametersList .getString (  )   == Token.LP ) ;^182^^^^^167^197^Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^boolean changed = true;^186^^^^^171^201^boolean changed = false;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P1_Replace_Type]^short  numNamedParameter = parametersList.getChildCount (  ) ;^190^^^^^175^205^int numNamedParameter = parametersList.getChildCount (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^int numNamedParameter = ref.getChildCount (  ) ;^190^^^^^175^205^int numNamedParameter = parametersList.getChildCount (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^int numNamedParameter = parametersList.newString (  ) ;^190^^^^^175^205^int numNamedParameter = parametersList.getChildCount (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node name = parametersList.getFirstChild (  ) ;int numNamedParameter = parametersList.getChildCount (  ) ;^190^^^^^175^205^int numNamedParameter = parametersList.getChildCount (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^190^^^^^175^205^int numNamedParameter = parametersList.getChildCount (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P1_Replace_Type]^short  highestIndex = numNamedParameter - 1;^195^^^^^180^210^int highestIndex = numNamedParameter - 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^int highestIndex = numNamedParameter  &&  1;^195^^^^^180^210^int highestIndex = numNamedParameter - 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^int highestIndex = numNamedParameter ;^195^^^^^180^210^int highestIndex = numNamedParameter - 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^int highestIndex = value - 1;^195^^^^^180^210^int highestIndex = numNamedParameter - 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^int numExtraArgs = highestIndex - numNamedParameter + 1;int highestIndex = numNamedParameter - 1;^195^^^^^180^210^int highestIndex = numNamedParameter - 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P12_Insert_Condition]^if  ( value >= numNamedParameter )  { int highestIndex = numNamedParameter - 1; }^195^^^^^180^210^int highestIndex = numNamedParameter - 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^if  ( getElem.getType (  )  <= Token.GETELEM )  {^206^^^^^191^221^if  ( getElem.getType (  )  != Token.GETELEM )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( ref.getType (  )  != Token.GETELEM )  {^206^^^^^191^221^if  ( getElem.getType (  )  != Token.GETELEM )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^if  ( getElem.newString (  )  != Token.GETELEM )  {^206^^^^^191^221^if  ( getElem.getType (  )  != Token.GETELEM )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P9_Replace_Statement]^if  ( index.getType (  )  != Token.NUMBER )  {^206^^^^^191^221^if  ( getElem.getType (  )  != Token.GETELEM )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P15_Unwrap_Block]^return false;^206^207^208^^^191^221^if  ( getElem.getType (  )  != Token.GETELEM )  { return false; }^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P16_Remove_Block]^^206^207^208^^^191^221^if  ( getElem.getType (  )  != Token.GETELEM )  { return false; }^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P13_Insert_Block]^if  (  ( index.getType (  )  )  !=  ( NUMBER )  )  {     return false; }^206^^^^^191^221^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P13_Insert_Block]^if  (  ( index.getType (  )  )  !=  ( NUMBER )  )  {     continue; }^206^^^^^191^221^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^return true;^207^^^^^192^222^return false;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^if  ( index.getType (  )  == Token.NUMBER )  {^214^^^^^199^229^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( parametersList.getType (  )  != Token.NUMBER )  {^214^^^^^199^229^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( index.getType (  )  != Token.null )  {^214^^^^^199^229^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^if  ( index.newString (  )  != Token.NUMBER )  {^214^^^^^199^229^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P9_Replace_Statement]^if  ( getElem.getType (  )  != Token.GETELEM )  {^214^^^^^199^229^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P13_Insert_Block]^if  (  ( index.getType (  )  )  !=  ( NUMBER )  )  {     continue; }^214^^^^^199^229^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P13_Insert_Block]^if  (  ( getElem.getType (  )  )  !=  ( GETELEM )  )  {     return false; }^214^^^^^199^229^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^return true;^219^^^^^204^234^return false;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^if  ( NodeUtil.isCall ( getElemParent )  || getElemParent.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  != getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( NodeUtil.isCall ( ref )  && getElemParent.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( NodeUtil.isCall ( refParent )  && getElemParent.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( NodeUtil.isCall ( getElem )  && getElemParentParent.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( NodeUtil.isCall ( getElemParentParent )  && getElem.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P6_Replace_Expression]^if  ( NodeUtil.isCall ( getElemParent )  ) {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P6_Replace_Expression]^if  (  getElemParent.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^if  ( NodeUtil .isName ( name )   && getElemParent.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.newString (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent .replaceChild (  )   == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^if  ( NodeUtil.isCall ( ref )  ) {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P15_Unwrap_Block]^return false;^225^226^^^229^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  { return false; }^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P16_Remove_Block]^^225^226^^^229^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  { return false; }^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P13_Insert_Block]^if  ( ! ( isFunction ( function )  )  )  {     return ; }^225^^^^^210^240^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^return true;^229^^^^^225^230^return false;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^if  ( value >= highestIndex )  {^235^^^^^220^250^if  ( value > highestIndex )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( uniqueId > highestIndex )  {^235^^^^^220^250^if  ( value > highestIndex )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( value > uniqueId )  {^235^^^^^220^250^if  ( value > highestIndex )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( highestIndex > value )  {^235^^^^^220^250^if  ( value > highestIndex )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P15_Unwrap_Block]^highestIndex = value;^235^236^237^^^220^250^if  ( value > highestIndex )  { highestIndex = value; }^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P16_Remove_Block]^^235^236^237^^^220^250^if  ( value > highestIndex )  { highestIndex = value; }^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^highestIndex = numNamedParameter;^236^^^^^221^251^highestIndex = value;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^highestIndex =  null;^236^^^^^221^251^highestIndex = value;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^highestIndex = uniqueId;^236^^^^^221^251^highestIndex = value;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^return true;^229^^^^^214^244^return false;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Node getElem = parametersList.getParent (  ) ;^201^^^^^186^216^Node getElem = ref.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node getElem = ref.newString (  ) ;^201^^^^^186^216^Node getElem = ref.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node index = ref.getNext (  ) ;Node getElem = ref.getParent (  ) ;^201^^^^^186^216^Node getElem = ref.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node getElemParent = getElem.getParent (  ) ;Node getElem = ref.getParent (  ) ;^201^^^^^186^216^Node getElem = ref.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node function = traversal.getScopeRoot (  ) ;Node getElem = ref.getParent (  ) ;^201^^^^^186^216^Node getElem = ref.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node index = ref.newString (  ) ;^210^^^^^195^225^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^Node index = parametersList.getNext (  ) ;^210^^^^^195^225^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node getElemParent = getElem.getParent (  ) ;Node index = ref.getNext (  ) ;^210^^^^^195^225^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node function = traversal.getScopeRoot (  ) ;Node index = ref.getNext (  ) ;^210^^^^^195^225^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node getElem = ref.getParent (  ) ;Node index = ref.getNext (  ) ;^210^^^^^195^225^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Node refParent = getElem.getParent (  ) ;^222^^^^^207^237^Node getElemParent = getElem.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node getElemParent = getElem.newString (  ) ;^222^^^^^207^237^Node getElemParent = getElem.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^Node refParent = getElem.newString (  ) ;^222^^^^^207^237^Node getElemParent = getElem.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node index = ref.getNext (  ) ;Node getElemParent = getElem.getParent (  ) ;^222^^^^^207^237^Node getElemParent = getElem.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node getElem = ref.getParent (  ) ;Node getElemParent = getElem.getParent (  ) ;^222^^^^^207^237^Node getElemParent = getElem.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P1_Replace_Type]^short  value =  (  short  )  index.getDouble (  ) ;^234^^^^^219^249^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^int value =  ( int )  ref.getDouble (  ) ;^234^^^^^219^249^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^int value =  ( int )  index.newString (  ) ;^234^^^^^219^249^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^int value =  ( int )  ref .getType (  )  ;^234^^^^^219^249^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Node getElem = name.getParent (  ) ;^201^^^^^186^216^Node getElem = ref.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node getElem = ref .getString (  )  ;^201^^^^^186^216^Node getElem = ref.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^201^^^^^186^216^Node getElem = ref.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^name = name.getNext (  ) ;Node getElem = ref.getParent (  ) ;^201^^^^^186^216^Node getElem = ref.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^Node index = parametersList.newString (  ) ;^210^^^^^195^225^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^210^^^^^195^225^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^name = name.getNext (  ) ;Node index = ref.getNext (  ) ;^210^^^^^195^225^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^if  ( index .getString (  )   != Token.NUMBER )  {^214^^^^^199^229^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^222^^^^^207^237^Node getElemParent = getElem.getParent (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^if  ( NodeUtil.isCall ( parametersList )  && getElemParent.getFirstChild (  )  == getElem )  {^225^226^^^^210^240^if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^getElemParent.newString (  )  == getElem )  {^226^^^^^211^241^getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^getElemParent .replaceChild (  )   == getElem )  {^226^^^^^211^241^getElemParent.getFirstChild (  )  == getElem )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P1_Replace_Type]^long  value =  (  long  )  index.getDouble (  ) ;^234^^^^^219^249^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^int value =  ( int )  parametersList.getDouble (  ) ;^234^^^^^219^249^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^234^^^^^219^249^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P1_Replace_Type]^short  numExtraArgs = highestIndex - numNamedParameter + 1;^244^^^^^229^259^int numExtraArgs = highestIndex - numNamedParameter + 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^int numExtraArgs = highestIndex  |  numNamedParameter + 1;^244^^^^^229^259^int numExtraArgs = highestIndex - numNamedParameter + 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^int numExtraArgs = highestIndex - numNamedParameter ;^244^^^^^229^259^int numExtraArgs = highestIndex - numNamedParameter + 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^int numExtraArgs = value - numNamedParameter + 1;^244^^^^^229^259^int numExtraArgs = highestIndex - numNamedParameter + 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^int numExtraArgs = highestIndex - value + 1;^244^^^^^229^259^int numExtraArgs = highestIndex - numNamedParameter + 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^int numExtraArgs = numNamedParameter - highestIndex + 1;^244^^^^^229^259^int numExtraArgs = highestIndex - numNamedParameter + 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^int highestIndex = numNamedParameter - 1;int numExtraArgs = highestIndex - numNamedParameter + 1;^244^^^^^229^259^int numExtraArgs = highestIndex - numNamedParameter + 1;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P1_Replace_Type]^for  (  long  i = 0; i < numExtraArgs; i++ )  {^251^^^^^236^266^for  ( int i = 0; i < numExtraArgs; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^for  ( int i = 0; i > numExtraArgs; i++ )  {^251^^^^^236^266^for  ( int i = 0; i < numExtraArgs; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^for  ( int i = -1; i < numExtraArgs; i++ )  {^251^^^^^236^266^for  ( int i = 0; i < numExtraArgs; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^for  ( uniqueIdnt i = 0; i < numExtraArgs; i++ )  {^251^^^^^236^266^for  ( int i = 0; i < numExtraArgs; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^for  ( numExtraArgsnt i = 0; i < i; i++ )  {^251^^^^^236^266^for  ( int i = 0; i < numExtraArgs; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^for  ( valuent i = 0; i < numExtraArgs; i++ )  {^251^^^^^236^266^for  ( int i = 0; i < numExtraArgs; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^argNames[i] = paramPrefix;^253^^^^^238^268^argNames[i] = name;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^argNames[i] ;^253^^^^^238^268^argNames[i] = name;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^changed = false;^255^^^^^240^270^changed = true;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P1_Replace_Type]^char name = getNewName (  ) ;^252^^^^^237^267^String name = getNewName (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^252^^^^^237^267^String name = getNewName (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^name = name.getNext (  ) ;String name = getNewName (  ) ;^252^^^^^237^267^String name = getNewName (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^parametersList.addChildrenToBack ( Node.newString ( Token.NAME, paramPrefix )  ) ;^254^^^^^239^269^parametersList.addChildrenToBack ( Node.newString ( Token.NAME, name )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^parametersList.addChildrenToBack ( Node.newString ( Token.NAME )  ) ;^254^^^^^239^269^parametersList.addChildrenToBack ( Node.newString ( Token.NAME, name )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^parametersList.addChildrenToBack ( Node .getString (  )   ) ;^254^^^^^239^269^parametersList.addChildrenToBack ( Node.newString ( Token.NAME, name )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^parametersList .getChildCount (  )  ;^254^^^^^239^269^parametersList.addChildrenToBack ( Node.newString ( Token.NAME, name )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^254^255^^^^239^269^parametersList.addChildrenToBack ( Node.newString ( Token.NAME, name )  ) ; changed = true;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^argNames[i]  =  argNames[i] ;^253^^^^^238^268^argNames[i] = name;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^for  ( int i = 1; i < numExtraArgs; i++ )  {^251^^^^^236^266^for  ( int i = 0; i < numExtraArgs; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^254^^^^^239^269^parametersList.addChildrenToBack ( Node.newString ( Token.NAME, name )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^parametersList.addChildrenToBack ( Node.newString ( Token.NAME, paramPredix )  ) ;^254^^^^^239^269^parametersList.addChildrenToBack ( Node.newString ( Token.NAME, name )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^if  ( index.getType (  )  <= Token.NUMBER )  {^263^^^^^248^278^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( ref.getType (  )  != Token.NUMBER )  {^263^^^^^248^278^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( index.getType (  )  != Token.null )  {^263^^^^^248^278^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^if  ( index.newString (  )  != Token.NUMBER )  {^263^^^^^248^278^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^if  ( index .getString (  )   != Token.NUMBER )  {^263^^^^^248^278^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^if  ( parametersList.newString (  )  != Token.NUMBER )  {^263^^^^^248^278^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P9_Replace_Statement]^if  ( getElem.getType (  )  != Token.GETELEM )  {^263^^^^^248^278^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P15_Unwrap_Block]^continue;^263^264^265^^^248^278^if  ( index.getType (  )  != Token.NUMBER )  { continue; }^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P16_Remove_Block]^^263^264^265^^^248^278^if  ( index.getType (  )  != Token.NUMBER )  { continue; }^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P13_Insert_Block]^if  (  ( index.getType (  )  )  !=  ( NUMBER )  )  {     return false; }^263^^^^^248^278^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P13_Insert_Block]^if  (  ( getElem.getType (  )  )  !=  ( GETELEM )  )  {     return false; }^263^^^^^248^278^[Delete]^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^if  ( value > numNamedParameter )  {^269^^^^^254^284^if  ( value >= numNamedParameter )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( uniqueId >= numNamedParameter )  {^269^^^^^254^284^if  ( value >= numNamedParameter )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( value >= value )  {^269^^^^^254^284^if  ( value >= numNamedParameter )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( numNamedParameter >= value )  {^269^^^^^254^284^if  ( value >= numNamedParameter )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P6_Replace_Expression]^if  ( value - numNamedParameter )  {^269^^^^^254^284^if  ( value >= numNamedParameter )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P6_Replace_Expression]^if  ( i < value )  {^269^^^^^254^284^if  ( value >= numNamedParameter )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P1_Replace_Type]^for  (  short  i = 0; i < value; i++ )  {^281^^^^^269^286^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^for  ( int i = 0; i <= value; i++ )  {^281^^^^^269^286^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^for  ( int i = i; i < value; i++ )  {^281^^^^^269^286^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^for  ( uniqueIdnt i = 0; i < value; i++ )  {^281^^^^^269^286^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^for  ( int i = 0; i < uniqueId; i++ )  {^281^^^^^269^286^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^for  ( valuent i = 0; i < i; i++ )  {^281^^^^^269^286^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^name = ref.getNext (  ) ;^282^^^^^269^286^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^name = name.newString (  ) ;^282^^^^^269^286^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^name = name .getParent (  )  ;^282^^^^^269^286^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^282^^^^^269^286^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node index = ref.getNext (  ) ;name = name.getNext (  ) ;^282^^^^^269^286^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^String name = getNewName (  ) ;name = name.getNext (  ) ;^282^^^^^269^286^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node getElem = ref.getParent (  ) ;name = name.getNext (  ) ;^282^^^^^269^286^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^name = parametersList.getNext (  ) ;^282^^^^^269^286^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Node name = ref.getFirstChild (  ) ;^276^^^^^269^286^Node name = parametersList.getFirstChild (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node name = parametersList.newString (  ) ;^276^^^^^269^286^Node name = parametersList.getFirstChild (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node name = parametersList .replaceChild (  )  ;^276^^^^^269^286^Node name = parametersList.getFirstChild (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^int numNamedParameter = parametersList.getChildCount (  ) ;Node name = parametersList.getFirstChild (  ) ;^276^^^^^269^286^Node name = parametersList.getFirstChild (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P1_Replace_Type]^for  (  long  i = 0; i < value; i++ )  {^281^^^^^269^286^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^for  ( int i = ; i < value; i++ )  {^281^^^^^269^286^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Node name = name.getFirstChild (  ) ;^276^^^^^269^286^Node name = parametersList.getFirstChild (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^276^^^^^269^286^Node name = parametersList.getFirstChild (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^ref.getParent (  ) .getParent (  ) .replaceChild ( parametersList.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, parametersList.getString (  )  )  ) ;^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME.getString (  )  )  ) ;^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^ref.getParent (  ) .getParent (  ) .replaceChild ( name.getParent (  ) , Node.newString ( Token.NAME, ref.getString (  )  )  ) ;^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^ref.getParent (  ) .getParent (  )  .getFirstChild (  )   )  ) ;^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^ref.newString (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.newString (  )  )  ) ;^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^ref .getString (  )^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^ref.getParent (  ) .getParent (  ) .replaceChild ( name.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^284^285^^^^269^286^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Node.newString ( Token.NAME, ref.getString (  )  )  ) ;^285^^^^^269^286^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node .getString (  )   ) ;^285^^^^^269^286^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node.newString ( Token.NAME, name.newString (  )  )  ) ;^285^^^^^269^286^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node.newString ( Token.NAME, name .newString ( PARAMETER_PREFIX )   )  ) ;^285^^^^^269^286^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^Node.newString ( Token.NAME, ref .newString ( ARGUMENTS )   )  ) ;^285^^^^^269^286^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^285^^^^^269^286^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;Node.newString ( Token.NAME, name.getString (  )  )  ) ;^285^^^^^269^286^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node.newString ( Token.NAME, name .newString ( name )   )  ) ;^285^^^^^269^286^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^Node.newString ( Token.NAME, ref.newString (  )  )  ) ;^285^^^^^269^286^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value  >  numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^ref.getParent (  ) .getParent (  ) .replaceChild ( parametersList.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[uniqueId - numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - value] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME[value - numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^ref.getParent (  ) .getParent (  ) .replaceChild ( argNames.getParent (  ) , Node.newString ( Token.NAME, ref[value - numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^ref.newString (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^ref .getString (  )^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node .newString ( PARAMETER_PREFIX )   ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^ref.getParent (  ) .getParent (  ) .replaceChild ( name.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^ref.newString (  ) .getParent (  ) .replaceChild ( name.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^Node.newString ( Token.NAME, argNames[value  |  numNamedParameter] )  ) ;^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Node.newString ( Token.NAME, argNames[uniqueId - numNamedParameter] )  ) ;^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Node.newString ( Token.NAME, argNames[value - uniqueId] )  ) ;^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Node.newString ( Token.NAME[value - numNamedParameter] )  ) ;^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Node.newString ( Token.NAME, numNamedParameter[value - argNames] )  ) ;^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, name.getString (  )  )  ) ;Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P1_Replace_Type]^for  (  short  i = 0; i < value; i++ )  {^281^^^^^266^296^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^for  ( int i = 0; i <= value; i++ )  {^281^^^^^266^296^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^for  ( int i = 6; i < value; i++ )  {^281^^^^^266^296^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^for  ( valuent i = 0; i < value; i++ )  {^281^^^^^266^296^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^for  ( int i = 0; i < uniqueId; i++ )  {^281^^^^^266^296^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^for  ( valuent i = 0; i < i; i++ )  {^281^^^^^266^296^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^name = ref.getNext (  ) ;^282^^^^^267^297^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^name = name.newString (  ) ;^282^^^^^267^297^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^name = parametersList.getNext (  ) ;^282^^^^^267^297^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^name = name .getParent (  )  ;^282^^^^^267^297^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^282^^^^^267^297^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node index = ref.getNext (  ) ;name = name.getNext (  ) ;^282^^^^^267^297^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^String name = getNewName (  ) ;name = name.getNext (  ) ;^282^^^^^267^297^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node getElem = ref.getParent (  ) ;name = name.getNext (  ) ;^282^^^^^267^297^name = name.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^changed = false;^287^^^^^272^302^changed = true;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Node index = parametersList.getNext (  ) ;^260^^^^^245^275^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node index = ref.newString (  ) ;^260^^^^^245^275^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node index = ref .getParent (  )  ;^260^^^^^245^275^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node getElemParent = getElem.getParent (  ) ;Node index = ref.getNext (  ) ;^260^^^^^245^275^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node function = traversal.getScopeRoot (  ) ;Node index = ref.getNext (  ) ;^260^^^^^245^275^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node getElem = ref.getParent (  ) ;Node index = ref.getNext (  ) ;^260^^^^^245^275^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P1_Replace_Type]^short  value =  (  short  )  index.getDouble (  ) ;^266^^^^^251^281^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^int value =  ( int )  ref.getDouble (  ) ;^266^^^^^251^281^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^int value =  ( int )  index.newString (  ) ;^266^^^^^251^281^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^int value =  ( int )  ref .getType (  )  ;^266^^^^^251^281^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Node name = ref.getFirstChild (  ) ;^276^^^^^261^291^Node name = parametersList.getFirstChild (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node name = parametersList.newString (  ) ;^276^^^^^261^291^Node name = parametersList.getFirstChild (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^int numNamedParameter = parametersList.getChildCount (  ) ;Node name = parametersList.getFirstChild (  ) ;^276^^^^^261^291^Node name = parametersList.getFirstChild (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P3_Replace_Literal]^for  ( int i = value; i < value; i++ )  {^281^^^^^266^296^for  ( int i = 0; i < value; i++ )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^Node index = parametersList .getParent (  )  ;^260^^^^^245^275^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^260^^^^^245^275^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^name = name.getNext (  ) ;Node index = ref.getNext (  ) ;^260^^^^^245^275^Node index = ref.getNext (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^if  ( parametersList.getType (  )  != Token.NUMBER )  {^263^^^^^248^278^if  ( index.getType (  )  != Token.NUMBER )  {^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^int value =  ( int )  index .getType (  )  ;^266^^^^^251^281^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^int value =  ( int )  parametersList.newString (  ) ;^266^^^^^251^281^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^266^^^^^251^281^int value =  ( int )  index.getDouble (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node .newString ( paramPredix )   ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^ref.newString (  ) .getParent (  ) .replaceChild ( parametersList.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^270^271^^^^255^285^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P2_Replace_Operator]^Node.newString ( Token.NAME, argNames[value  ||  numNamedParameter] )  ) ;^271^^^^^256^286^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Node name = name.getFirstChild (  ) ;^276^^^^^261^291^Node name = parametersList.getFirstChild (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^276^^^^^261^291^Node name = parametersList.getFirstChild (  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^ref.getParent (  ) .getParent (  ) .replaceChild ( parametersList.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^284^285^^^^269^299^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, parametersList.getString (  )  )  ) ;^284^285^^^^269^299^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME.getString (  )  )  ) ;^284^285^^^^269^299^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^ref.getParent (  ) .getParent (  ) .replaceChild ( name.getParent (  ) , Node.newString ( Token.NAME, ref.getString (  )  )  ) ;^284^285^^^^269^299^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^ref.newString (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^284^285^^^^269^299^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^ref .getString (  )^284^285^^^^269^299^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.newString (  )  )  ) ;^284^285^^^^269^299^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^284^285^^^^269^299^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^284^285^^^^269^299^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^Node.newString ( Token.NAME, ref.getString (  )  )  ) ;^285^^^^^270^300^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node.newString ( Token.NAME, name.newString (  )  )  ) ;^285^^^^^270^300^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node.newString ( Token.NAME, name .newString ( PARAMETER_PREFIX )   )  ) ;^285^^^^^270^300^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P14_Delete_Statement]^^285^^^^^270^300^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;Node.newString ( Token.NAME, name.getString (  )  )  ) ;^285^^^^^270^300^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P7_Replace_Invocation]^Node.newString ( Token.NAME, name .newString ( name )   )  ) ;^285^^^^^270^300^Node.newString ( Token.NAME, name.getString (  )  )  ) ;^[CLASS] OptimizeArgumentsArray  [METHOD] tryReplaceArguments [RETURN_TYPE] boolean   Scope scope [VARIABLES] AbstractCompiler  compiler  boolean  changed  Scope  scope  Node  getElem  getElemParent  index  name  parametersList  ref  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  String[]  argNames  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P5_Replace_Variable]^return paramPrefix + uniqueId++;^297^^^^^296^298^return paramPredix + uniqueId++;^[CLASS] OptimizeArgumentsArray  [METHOD] getNewName [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
[P8_Replace_Mix]^return paramPredix  ;^297^^^^^296^298^return paramPredix + uniqueId++;^[CLASS] OptimizeArgumentsArray  [METHOD] getNewName [RETURN_TYPE] String   [VARIABLES] AbstractCompiler  compiler  List  currentArgumentsAccess  String  ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  boolean  Deque  argumentsAccessStack  int  highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value  
