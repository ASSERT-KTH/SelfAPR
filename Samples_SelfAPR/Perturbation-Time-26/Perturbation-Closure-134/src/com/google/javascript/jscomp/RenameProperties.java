[P8_Replace_Mix]^private  boolean generatePseudoNames;^53^^^^^48^58^private final boolean generatePseudoNames;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P8_Replace_Mix]^private  VariableMap prevUsedPropertyMap;^56^^^^^51^61^private final VariableMap prevUsedPropertyMap;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P8_Replace_Mix]^private  List<Node> stringNodesToRename = new ArrayList<Node> (  ) ;^58^^^^^53^63^private final List<Node> stringNodesToRename = new ArrayList<Node> (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P8_Replace_Mix]^private  Map<Node, Node> callNodeToParentMap = new HashMap<Node, Node> (  ) ;^59^60^^^^59^60^private final Map<Node, Node> callNodeToParentMap = new HashMap<Node, Node> (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P8_Replace_Mix]^private final Map<String, Property> propertyMap  = null ;^64^65^^^^64^65^private final Map<String, Property> propertyMap = new HashMap<String, Property> (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P8_Replace_Mix]^private final Set<String> externedNames ;^68^69^^^^68^69^private final Set<String> externedNames = new HashSet<String> ( Arrays.asList ( "prototype" )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P8_Replace_Mix]^private  Set<String> quotedNames = new HashSet<String> (  ) ;^72^^^^^67^77^private final Set<String> quotedNames = new HashSet<String> (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P8_Replace_Mix]^private static final Comparator<Property> FREQUENCY_COMPARATOR  = null ;^78^79^^^^78^86^private static final Comparator<Property> FREQUENCY_COMPARATOR = new Comparator<Property> (  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P1_Replace_Type]^static final char RENAME_PROPERTY_FUNCTION_NAME = "JSCompiler_renameProperty";^96^97^^^^96^97^static final String RENAME_PROPERTY_FUNCTION_NAME = "JSCompiler_renameProperty";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P3_Replace_Literal]^static final String RENAME_PROPERTY_FUNCTION_NAME = "J";^96^97^^^^96^97^static final String RENAME_PROPERTY_FUNCTION_NAME = "JSCompiler_renameProperty";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P2_Replace_Operator]^static final DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad "  <  RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^99^100^101^102^^99^102^static final DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType BAD_CALL = DiagnosticType.error ( "D_RESC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^99^100^101^102^^99^102^static final DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad d" + RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^99^100^101^102^^99^102^static final DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + "alcall - " + "argument must be a string literal" ) ;^99^100^101^102^^99^102^static final DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literargument must be a string literal" ) ;^99^100^101^102^^99^102^static final DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P8_Replace_Mix]^static  DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^99^100^101^102^^99^102^static final DiagnosticType BAD_CALL = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " call - " + "argument must be a string literal" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P2_Replace_Operator]^static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad "  &&  RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^104^105^106^107^^104^107^static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_B", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^104^105^106^107^^104^107^static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "dad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^104^105^106^107^^104^107^static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - -" + "'{0}' is not a valid JavaScript identifier" ) ;^104^105^106^107^^104^107^static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier0}' is not a" ) ;^104^105^106^107^^104^107^static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType BAD_ARG ;^104^105^106^107^^104^107^static final DiagnosticType BAD_ARG = DiagnosticType.error ( "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", "Bad " + RENAME_PROPERTY_FUNCTION_NAME + " argument - " + "'{0}' is not a valid JavaScript identifier" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P1_Replace_Type]^final char oldName;^460^^^^^455^465^final String oldName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P8_Replace_Mix]^CompilerInput input;^461^^^^^456^466^final CompilerInput input;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P1_Replace_Type]^char newName;^462^^^^^457^467^String newName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P1_Replace_Type]^short  numOccurrences;^463^^^^^458^468^int numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property   [VARIABLES] 
[P5_Replace_Variable]^this (  generatePseudoNames, null, null ) ;^118^^^^^116^119^this ( compiler, generatePseudoNames, null, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean generatePseudoNames [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P5_Replace_Variable]^this ( compiler,  null, null ) ;^118^^^^^116^119^this ( compiler, generatePseudoNames, null, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean generatePseudoNames [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P5_Replace_Variable]^this ( generatePseudoNames, compiler, null, null ) ;^118^^^^^116^119^this ( compiler, generatePseudoNames, null, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean generatePseudoNames [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P14_Delete_Statement]^^118^^^^^116^119^this ( compiler, generatePseudoNames, null, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean generatePseudoNames [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P11_Insert_Donor_Statement]^this ( compiler, generatePseudoNames, prevUsedPropertyMap, null ) ;this ( compiler, generatePseudoNames, null, null ) ;^118^^^^^116^119^this ( compiler, generatePseudoNames, null, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean generatePseudoNames [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P5_Replace_Variable]^this (  generatePseudoNames, prevUsedPropertyMap, null ) ;^132^^^^^130^133^this ( compiler, generatePseudoNames, prevUsedPropertyMap, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] VariableMap)   AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P5_Replace_Variable]^this ( compiler,  prevUsedPropertyMap, null ) ;^132^^^^^130^133^this ( compiler, generatePseudoNames, prevUsedPropertyMap, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] VariableMap)   AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P5_Replace_Variable]^this ( compiler, generatePseudoNames,  null ) ;^132^^^^^130^133^this ( compiler, generatePseudoNames, prevUsedPropertyMap, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] VariableMap)   AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P5_Replace_Variable]^this ( prevUsedPropertyMap, generatePseudoNames, compiler, null ) ;^132^^^^^130^133^this ( compiler, generatePseudoNames, prevUsedPropertyMap, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] VariableMap)   AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P5_Replace_Variable]^this ( generatePseudoNames, compiler, prevUsedPropertyMap, null ) ;^132^^^^^130^133^this ( compiler, generatePseudoNames, prevUsedPropertyMap, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] VariableMap)   AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P14_Delete_Statement]^^132^^^^^130^133^this ( compiler, generatePseudoNames, prevUsedPropertyMap, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] VariableMap)   AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P11_Insert_Donor_Statement]^this ( compiler, generatePseudoNames, null, null ) ;this ( compiler, generatePseudoNames, prevUsedPropertyMap, null ) ;^132^^^^^130^133^this ( compiler, generatePseudoNames, prevUsedPropertyMap, null ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] VariableMap)   AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P8_Replace_Mix]^this.compiler =  null;^150^^^^^146^154^this.compiler = compiler;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] VariableMap,char[])   AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap Nullable
char[] reservedCharacters [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P8_Replace_Mix]^this.generatePseudoNames =  null;^151^^^^^146^154^this.generatePseudoNames = generatePseudoNames;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] VariableMap,char[])   AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap Nullable
char[] reservedCharacters [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P8_Replace_Mix]^this.prevUsedPropertyMap =  null;^152^^^^^146^154^this.prevUsedPropertyMap = prevUsedPropertyMap;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] VariableMap,char[])   AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap Nullable
char[] reservedCharacters [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P8_Replace_Mix]^this.reservedCharacters =  null;^153^^^^^146^154^this.reservedCharacters = reservedCharacters;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] VariableMap,char[])   AbstractCompiler compiler boolean generatePseudoNames VariableMap prevUsedPropertyMap Nullable
char[] reservedCharacters [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P5_Replace_Variable]^this.oldName = oldName;^466^^^^^465^468^this.oldName = name;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] CompilerInput)   String name CompilerInput input [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P11_Insert_Donor_Statement]^prop.newName = prevName;this.oldName = name;^466^^^^^465^468^this.oldName = name;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] CompilerInput)   String name CompilerInput input [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P8_Replace_Mix]^this.input =  null;^467^^^^^465^468^this.input = input;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] <init> [RETURN_TYPE] CompilerInput)   String name CompilerInput input [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  
[P2_Replace_Operator]^if  ( p1.numOccurrences == p2.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^if  ( p2.numOccurrences != p2.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^if  ( p1.numOccurrences != p1.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^if  ( numOccurrences != p2.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^if  ( p1.numOccurrences != numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^if  ( p2.numOccurrences != p1.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^if  ( p2 != p1.numOccurrences.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^if  ( p1.numOccurrences != p2 )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P6_Replace_Expression]^if  ( p2.numOccurrences - p1.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P15_Unwrap_Block]^return (p2.numOccurrences) - (p1.numOccurrences);^81^82^83^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  { return p2.numOccurrences - p1.numOccurrences; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P16_Remove_Block]^^81^82^83^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  { return p2.numOccurrences - p1.numOccurrences; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P2_Replace_Operator]^return p2.numOccurrences  ^  p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^return numOccurrences - p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^return p2.numOccurrences - numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^return p2.numOccurrences.numOccurrences - p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^return p1.numOccurrences - p2.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P12_Insert_Condition]^if  ( p1.numOccurrences != p2.numOccurrences )  { return p2.numOccurrences - p1.numOccurrences; }^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P2_Replace_Operator]^return p2.numOccurrences  <  p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^return p1 - p2.numOccurrences.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^return p2 - p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^return p1.oldName.compareTo ( p1.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^return oldName.compareTo ( p2.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^return p1.oldName.compareTo ( oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^return p2.oldName.oldName.compareTo ( p1 ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^return p1.oldName.compareTo ( p2.oldName.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^return p2.oldName.compareTo ( p1.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P5_Replace_Variable]^return p1.oldName.compareTo ( newName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P14_Delete_Statement]^^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] Set  externedNames  quotedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p1  p2  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, externs, NodeTraversal.traverse ( compiler, externs,  new Property ( name, t.getInput (  )  )   ) ;^160^^^^^145^175^NodeTraversal.traverse ( compiler, externs, new ProcessExterns (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root, new ProcessExterns (  )  ) ;^160^^^^^145^175^NodeTraversal.traverse ( compiler, externs, new ProcessExterns (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new ProcessExterns (  )  ) ;^160^^^^^145^175^NodeTraversal.traverse ( compiler, externs, new ProcessExterns (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^NodeTraversal.traverse (  externs, new ProcessExterns (  )  ) ;^160^^^^^145^175^NodeTraversal.traverse ( compiler, externs, new ProcessExterns (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^NodeTraversal.traverse ( externs, compiler, new ProcessExterns (  )  ) ;^160^^^^^145^175^NodeTraversal.traverse ( compiler, externs, new ProcessExterns (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^160^^^^^145^175^NodeTraversal.traverse ( compiler, externs, new ProcessExterns (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, root, NodeTraversal.traverse ( compiler, root,  new Property ( name, t.getInput (  )  )   ) ;^161^^^^^146^176^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, parent, new ProcessProperties (  )  ) ;^161^^^^^146^176^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new ProcessProperties (  )  ) ;^161^^^^^146^176^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new ProcessProperties (  )  ) ;^161^^^^^146^176^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new ProcessProperties (  )  ) ;^161^^^^^146^176^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^161^^^^^146^176^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^new HashSet<String> ( externedNames.size (  )   ^  quotedNames.size (  )  ) ;^164^^^^^149^179^new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P3_Replace_Literal]^new HashSet<String> ( externedNames.size() - 5  + quotedNames.size() - 5  ) ;^164^^^^^149^179^new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^new HashSet<String> ( quotedNames.size (  )  + externedNames.size (  )  ) ;^164^^^^^149^179^new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^new HashSet<String> ( externedNames .contains ( 2 )   + quotedNames^164^^^^^149^179^new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^Set<String> reservedNames = new HashSet<String> ( externedNames.size (  )   <  quotedNames.size (  )  ) ;^163^164^^^^148^178^Set<String> reservedNames = new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P3_Replace_Literal]^Set<String> reservedNames = new HashSet<String> ( externedNames.size() + 3  + quotedNames.size() + 3  ) ;^163^164^^^^148^178^Set<String> reservedNames = new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Set<String> reservedNames = new HashSet<String> ( quotedNames.size (  )  + externedNames.size (  )  ) ;^163^164^^^^148^178^Set<String> reservedNames = new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^Set<String> reservedNames = new HashSet<String> ( this.size (  )  + quotedNames.size (  )  ) ;^163^164^^^^148^178^Set<String> reservedNames = new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P3_Replace_Literal]^new HashSet<String> ( externedNames.size() + 6  + quotedNames.size() + 6  ) ;^164^^^^^149^179^new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^new HashSet<String> ( externedNames .contains ( 3 )   + quotedNames^164^^^^^149^179^new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^164^165^^^^149^179^new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ; reservedNames.addAll ( externedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P3_Replace_Literal]^new HashSet<String> ( externedNames.size() - 1  + quotedNames.size() - 1  ) ;^164^^^^^149^179^new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^164^^^^^149^179^new HashSet<String> ( externedNames.size (  )  + quotedNames.size (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^reservedNames.contains ( externedNames ) ;^165^^^^^150^180^reservedNames.addAll ( externedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^165^166^^^^150^180^reservedNames.addAll ( externedNames ) ; reservedNames.addAll ( quotedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^reservedNames.addAll ( quotedNames ) ;reservedNames.addAll ( externedNames ) ;^165^^^^^150^180^reservedNames.addAll ( externedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^reservedNames.add ( prevName ) ;reservedNames.addAll ( externedNames ) ;^165^^^^^150^180^reservedNames.addAll ( externedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^reservedNames.add ( p.newName ) ;reservedNames.addAll ( externedNames ) ;^165^^^^^150^180^reservedNames.addAll ( externedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^reservedNames.addAll ( null ) ;^166^^^^^151^181^reservedNames.addAll ( quotedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^reservedNames.contains ( quotedNames ) ;^166^^^^^151^181^reservedNames.addAll ( quotedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^166^^^^^151^181^reservedNames.addAll ( quotedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^reservedNames.add ( prevName ) ;reservedNames.addAll ( quotedNames ) ;^166^^^^^151^181^reservedNames.addAll ( quotedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^reservedNames.add ( p.newName ) ;reservedNames.addAll ( quotedNames ) ;^166^^^^^151^181^reservedNames.addAll ( quotedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^reservedNames.addAll ( externedNames ) ;reservedNames.addAll ( quotedNames ) ;^166^^^^^151^181^reservedNames.addAll ( quotedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P12_Insert_Condition]^if  ( reservedNames.contains ( prevName )  )  { reservedNames.addAll ( quotedNames ) ; }^166^^^^^151^181^reservedNames.addAll ( quotedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^if  ( prevUsedPropertyMap == null )  {^170^^^^^155^185^if  ( prevUsedPropertyMap != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^if  ( prevUsedPropertyMap != false )  {^170^^^^^155^185^if  ( prevUsedPropertyMap != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P15_Unwrap_Block]^reusePropertyNames(reservedNames, propertyMap.values());^170^171^172^^^155^185^if  ( prevUsedPropertyMap != null )  { reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P16_Remove_Block]^^170^171^172^^^155^185^if  ( prevUsedPropertyMap != null )  { reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^reusePropertyNames ( reservedNames, null.values (  )  ) ;^171^^^^^156^186^reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^reusePropertyNames (  propertyMap.values (  )  ) ;^171^^^^^156^186^reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^reusePropertyNames ( reservedNames.values (  )  ) ;^171^^^^^156^186^reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^reusePropertyNames ( propertyMap, reservedNames.values (  )  ) ;^171^^^^^156^186^reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^reusePropertyNames ( reservedNames, propertyMap.keySet (  )  ) ;^171^^^^^156^186^reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^171^^^^^156^186^reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^propsByFreq.addAll ( propertyMap.values (  )  ) ;reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^171^^^^^156^186^reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P13_Insert_Block]^if  (  ( prevUsedPropertyMap )  != null )  {     reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ; }^171^^^^^156^186^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P3_Replace_Literal]^compiler.addToDebugLog ( " p" ) ;^174^^^^^159^189^compiler.addToDebugLog ( "JS property assignments:" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^174^^^^^159^189^compiler.addToDebugLog ( "JS property assignments:" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;compiler.addToDebugLog ( "JS property assignments:" ) ;^174^^^^^159^189^compiler.addToDebugLog ( "JS property assignments:" ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P1_Replace_Type]^Set<Property> propsByFreq = new  ArrayList <Property> ( FREQUENCY_COMPARATOR ) ;^177^^^^^162^192^Set<Property> propsByFreq = new TreeSet<Property> ( FREQUENCY_COMPARATOR ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^propsByFreq.contains ( propertyMap.values (  )  ) ;^178^^^^^163^193^propsByFreq.addAll ( propertyMap.values (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^propsByFreq.addAll ( propertyMap.keySet (  )  ) ;^178^^^^^163^193^propsByFreq.addAll ( propertyMap.values (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^propsByFreq.addAll ( propertyMap .get ( 3 )   ) ;^178^^^^^163^193^propsByFreq.addAll ( propertyMap.values (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^178^^^^^163^193^propsByFreq.addAll ( propertyMap.values (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^Property prop = propertyMap.get ( name ) ;propsByFreq.addAll ( propertyMap.values (  )  ) ;^178^^^^^163^193^propsByFreq.addAll ( propertyMap.values (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^reusePropertyNames ( reservedNames, propertyMap.values (  )  ) ;propsByFreq.addAll ( propertyMap.values (  )  ) ;^178^^^^^163^193^propsByFreq.addAll ( propertyMap.values (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^generateNames (  reservedNames ) ;^179^^^^^164^194^generateNames ( propsByFreq, reservedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^generateNames ( propsByFreq ) ;^179^^^^^164^194^generateNames ( propsByFreq, reservedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^generateNames ( reservedNames, propsByFreq ) ;^179^^^^^164^194^generateNames ( propsByFreq, reservedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^reusePropertyNames ( propsByFreq, reservedNames ) ;^179^^^^^164^194^generateNames ( propsByFreq, reservedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^179^^^^^164^194^generateNames ( propsByFreq, reservedNames ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P3_Replace_Literal]^boolean changed = true;^182^^^^^167^197^boolean changed = false;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^if  ( p != null || p.newName != null )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^if  ( p == null && p.newName != null )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^if  ( p != null && p.newName == null )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^if  ( p != null && replacement != null )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^if  ( n != pull && p.newName != null )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^if  ( p != p.newNameull && n != null )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P6_Replace_Expression]^if  ( p != null ) {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P6_Replace_Expression]^if  (  p.newName != null )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P6_Replace_Expression]^if  ( changed || equals(oldName)) )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^if  ( p != true && replacement != true )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P9_Replace_Statement]^if  ( p.newName == null )  {^186^^^^^171^201^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P15_Unwrap_Block]^com.google.common.base.Preconditions.checkState(oldName.equals(p.oldName)); n.setString(p.newName); changed = changed || (!(p.newName.equals(oldName)));^186^187^188^189^190^171^201^if  ( p != null && p.newName != null )  { Preconditions.checkState ( oldName.equals ( p.oldName )  ) ; n.setString ( p.newName ) ; changed = changed || !p.newName.equals ( oldName ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P16_Remove_Block]^^186^187^188^189^190^171^201^if  ( p != null && p.newName != null )  { Preconditions.checkState ( oldName.equals ( p.oldName )  ) ; n.setString ( p.newName ) ; changed = changed || !p.newName.equals ( oldName ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P13_Insert_Block]^if  (  ( p != null )  &&  (  ( p.newName )  != null )  )  {     checkState ( oldName.equals ( p.oldName )  ) ;     replacement = p.newName; }else {     replacement = oldName; }^186^^^^^171^201^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^changed = changed && !p.newName.equals ( oldName ) ;^189^^^^^174^204^changed = changed || !p.newName.equals ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^changed = changed || !p.newName.equals ( newName ) ;^189^^^^^174^204^changed = changed || !p.newName.equals ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^changed = oldName || !p.newName.equals ( changed ) ;^189^^^^^174^204^changed = changed || !p.newName.equals ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^changed = changed || !p.newName .compareTo ( newName )  ;^189^^^^^174^204^changed = changed || !p.newName.equals ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^changed =  generatePseudoNames || !p.newName.equals ( oldName ) ;^189^^^^^174^204^changed = changed || !p.newName.equals ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Preconditions.checkState ( replacement.equals ( p.oldName )  ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Preconditions.checkState ( oldName.equals ( replacement )  ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Preconditions.checkState ( p.oldName.equals ( oldName )  ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Preconditions.checkState ( oldName.equals ( p.oldName.oldName )  ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Preconditions.checkState ( oldName.equals ( p )  ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^187^188^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ; n.setString ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Preconditions.checkState ( newName.equals ( p.oldName )  ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Preconditions.checkState ( p.equals ( oldName.oldName )  ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^Preconditions.checkState ( oldName .compareTo ( RENAME_PROPERTY_FUNCTION_NAME )   ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^n.setString ( newName ) ;^188^^^^^173^203^n.setString ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^n.setString ( p.newName.newName ) ;^188^^^^^173^203^n.setString ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^n.setString ( p ) ;^188^^^^^173^203^n.setString ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^n .getString (  )  ;^188^^^^^173^203^n.setString ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^n.setString ( oldName ) ;^188^^^^^173^203^n.setString ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^188^189^^^^173^203^n.setString ( p.newName ) ; changed = changed || !p.newName.equals ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^reservedNames.add ( p.newName ) ;n.setString ( p.newName ) ;^188^^^^^173^203^n.setString ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^changed = changed || !p.newName.equals ( replacement ) ;^189^^^^^174^204^changed = changed || !p.newName.equals ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^189^^^^^174^204^changed = changed || !p.newName.equals ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^changed =  null || !p.newName.equals ( oldName ) ;^189^^^^^174^204^changed = changed || !p.newName.equals ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P1_Replace_Type]^char oldName = n.getchar (  ) ;^184^^^^^169^199^String oldName = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^String oldName = n.setString (  ) ;^184^^^^^169^199^String oldName = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^String oldName = parent.getString (  ) ;^184^^^^^169^199^String oldName = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String oldName = n.getString (  ) ;^184^^^^^169^199^String oldName = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^Node fnName = n.getFirstChild (  ) ;String oldName = n.getString (  ) ;^184^^^^^169^199^String oldName = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^String name = n.getFirstChild (  ) .getString (  ) ;String oldName = n.getString (  ) ;^184^^^^^169^199^String oldName = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^StringBuilder sb = new StringBuilder (  ) ;String oldName = n.getString (  ) ;^184^^^^^169^199^String oldName = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Property p = propertyMap.get ( replacement ) ;^185^^^^^170^200^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Property p = 1.get ( oldName ) ;^185^^^^^170^200^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Property p = oldName.get ( propertyMap ) ;^185^^^^^170^200^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^Property p = propertyMap .keySet (  )  ;^185^^^^^170^200^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^Property prop = propertyMap.get ( name ) ;Property p = propertyMap.get ( oldName ) ;^185^^^^^170^200^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^String oldName = root.getString (  ) ;^184^^^^^169^199^String oldName = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^184^^^^^169^199^String oldName = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^externedNames.add ( child.getString (  )  ) ;String oldName = n.getString (  ) ;^184^^^^^169^199^String oldName = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^quotedNames.add ( key.getString (  )  ) ;String oldName = n.getString (  ) ;^184^^^^^169^199^String oldName = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^externedNames.add ( dest.getString (  )  ) ;String oldName = n.getString (  ) ;^184^^^^^169^199^String oldName = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^Property p = null.get ( oldName ) ;^185^^^^^170^200^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^185^^^^^170^200^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^Preconditions.checkState ( oldName .compareTo ( oldName )   ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Preconditions.checkState ( oldName.equals ( newName )  ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^Preconditions.checkState ( oldName .compareTo ( newName )   ) ;^187^^^^^172^202^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^n.setString ( replacement ) ;^188^^^^^173^203^n.setString ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^188^^^^^173^203^n.setString ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^if  ( p != null || p.newName != null )  {^201^^^^^186^216^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^if  ( p == null && p.newName != null )  {^201^^^^^186^216^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^if  ( p != null && p.newName == null )  {^201^^^^^186^216^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P6_Replace_Expression]^if  ( p != null ) {^201^^^^^186^216^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P6_Replace_Expression]^if  (  p.newName != null )  {^201^^^^^186^216^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^if  ( p != true && p.newName != true )  {^201^^^^^186^216^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P9_Replace_Statement]^if  ( p.newName == null )  {^201^^^^^186^216^if  ( p != null && p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P15_Unwrap_Block]^com.google.common.base.Preconditions.checkState(oldName.equals(p.oldName)); replacement = p.newName;^201^202^203^204^205^186^216^if  ( p != null && p.newName != null )  { Preconditions.checkState ( oldName.equals ( p.oldName )  ) ; replacement = p.newName; } else { replacement = oldName; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P16_Remove_Block]^^201^202^203^204^205^186^216^if  ( p != null && p.newName != null )  { Preconditions.checkState ( oldName.equals ( p.oldName )  ) ; replacement = p.newName; } else { replacement = oldName; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P13_Insert_Block]^if  (  ( p != null )  &&  (  ( p.newName )  != null )  )  {     checkState ( oldName.equals ( p.oldName )  ) ;     n.setString ( p.newName ) ;     changed = changed ||  ( ! ( equals ( oldName )  )  ) ; }^201^^^^^186^216^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^replacement = replacement;^205^^^^^201^206^replacement = oldName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^replacement =  newName;^205^^^^^201^206^replacement = oldName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^replacement = p.newName;replacement = oldName;^205^^^^^201^206^replacement = oldName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^replacement = p.newName.newName;^203^^^^^188^218^replacement = p.newName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^replacement = p;^203^^^^^188^218^replacement = p.newName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^replacement =  null.newName;^203^^^^^188^218^replacement = p.newName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^replacement = oldName;replacement = p.newName;^203^^^^^188^218^replacement = p.newName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Preconditions.checkState ( newName.equals ( p.oldName )  ) ;^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Preconditions.checkState ( oldName.equals ( replacement )  ) ;^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Preconditions.checkState ( p.oldName.equals ( oldName )  ) ;^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Preconditions.checkState ( p.equals ( oldName.oldName )  ) ;^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^Preconditions.checkState ( replacement.equals ( p.oldName )  ) ;^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Preconditions.checkState ( oldName.equals ( p.oldName.oldName )  ) ;^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^if  ( sb.length (  )  >= 0 )  {^207^^^^^192^222^if  ( sb.length (  )  > 0 )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P3_Replace_Literal]^if  ( sb.length (  )  > numOccurrences )  {^207^^^^^192^222^if  ( sb.length (  )  > 0 )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P3_Replace_Literal]^if  ( sb.length() + 4  > 0 )  {^207^^^^^192^222^if  ( sb.length (  )  > 0 )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^if  ( sb.length (  )  > 0  )  {^207^^^^^192^222^if  ( sb.length (  )  > 0 )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P15_Unwrap_Block]^sb.append('.');^207^208^209^^^192^222^if  ( sb.length (  )  > 0 )  { sb.append ( '.' ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P16_Remove_Block]^^207^208^209^^^192^222^if  ( sb.length (  )  > 0 )  { sb.append ( '.' ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^208^^^^^193^223^sb.append ( '.' ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^sb.append ( replacement ) ;sb.append ( '.' ) ;^208^^^^^193^223^sb.append ( '.' ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^replacement = newName;^203^^^^^188^218^replacement = p.newName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^replacement = replacement;^205^^^^^190^220^replacement = oldName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^replacement =  newName;^205^^^^^190^220^replacement = oldName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^replacement = p.newName;replacement = oldName;^205^^^^^190^220^replacement = oldName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P3_Replace_Literal]^changed = false;^213^^^^^198^228^changed = true;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Node parent = callNodeToParentMap.get ( root ) ;^195^^^^^180^210^Node parent = callNodeToParentMap.get ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Node parent = n.get ( callNodeToParentMap ) ;^195^^^^^180^210^Node parent = callNodeToParentMap.get ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^Node parent = callNodeToParentMap .keySet (  )  ;^195^^^^^180^210^Node parent = callNodeToParentMap.get ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^Node varNode = parent.getParent (  ) ;Node parent = callNodeToParentMap.get ( n ) ;^195^^^^^180^210^Node parent = callNodeToParentMap.get ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Node firstArg = root.getFirstChild (  ) .getNext (  ) ;^196^^^^^181^211^Node firstArg = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^Node firstArg = n.getFirstChild (  ) .split (  ) ;^196^^^^^181^211^Node firstArg = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^Node firstArg = n.setString (  ) .getNext (  ) ;^196^^^^^181^211^Node firstArg = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;StringBuilder sb = new StringBuilder (  ) ;^197^^^^^182^212^StringBuilder sb = new StringBuilder (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^String oldName = n.getString (  ) ;StringBuilder sb = new StringBuilder (  ) ;^197^^^^^182^212^StringBuilder sb = new StringBuilder (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P1_Replace_Type]^for  ( char oldName : firstArg.getchar (  ) .split ( "[.]" )  )  {^198^^^^^183^213^for  ( String oldName : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Property p = propertyMap.get ( newName ) ;^199^^^^^184^214^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Property p = null.get ( oldName ) ;^199^^^^^184^214^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Property p = oldName.get ( propertyMap ) ;^199^^^^^184^214^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^Property p = propertyMap .keySet (  )  ;^199^^^^^184^214^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^Property p = propertyMap.get ( replacement ) ;^199^^^^^184^214^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^Property prop = propertyMap.get ( name ) ;Property p = propertyMap.get ( oldName ) ;^199^^^^^184^214^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P1_Replace_Type]^char replacement;^200^^^^^185^215^String replacement;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^for  ( Node n : callNodeToParentMap.values (  )  )  {^194^^^^^179^209^for  ( Node n : callNodeToParentMap.keySet (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^195^196^^^^180^210^Node parent = callNodeToParentMap.get ( n ) ; Node firstArg = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^Node firstArg = parent.getFirstChild (  ) .getNext (  ) ;^196^^^^^181^211^Node firstArg = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^Node firstArg = n .getLastChild (  )  .getNext (  ) ;^196^^^^^181^211^Node firstArg = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^196^197^^^^181^211^Node firstArg = n.getFirstChild (  ) .getNext (  ) ; StringBuilder sb = new StringBuilder (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P3_Replace_Literal]^for  ( String oldName : firstArg.getString (  ) .split ( ".]" )  )  {^198^^^^^183^213^for  ( String oldName : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^for  ( String oldName : root.getString (  ) .split ( "[.]" )  )  {^198^^^^^183^213^for  ( String oldName : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^for  ( String oldName : firstArg.setString (  ) .split ( "[.]" )  )  {^198^^^^^183^213^for  ( String oldName : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^for  ( String oldName : firstArg .setString ( RENAME_PROPERTY_FUNCTION_NAME )  .split ( "[.]" )  )  {^198^^^^^183^213^for  ( String oldName : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^for  ( String oldName : parent.getString (  ) .split ( "[.]" )  )  {^198^^^^^183^213^for  ( String oldName : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^199^^^^^184^214^Property p = propertyMap.get ( oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^Preconditions.checkState ( oldName .compareTo ( oldName )   ) ;^202^^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^202^203^^^^187^217^Preconditions.checkState ( oldName.equals ( p.oldName )  ) ; replacement = p.newName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P3_Replace_Literal]^if  ( sb.length() - 5  > 0 )  {^207^^^^^192^222^if  ( sb.length (  )  > 0 )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^sb.append ( newName ) ;^210^^^^^195^225^sb.append ( replacement ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^210^^^^^195^225^sb.append ( replacement ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^sb.append ( '.' ) ;sb.append ( replacement ) ;^210^^^^^195^225^sb.append ( replacement ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^parent.replaceChild (  Node.newString ( sb.toString (  )  )  ) ;^212^^^^^197^227^parent.replaceChild ( n, Node.newString ( sb.toString (  )  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^parent.replaceChild ( sb, Node.newString ( n.toString (  )  )  ) ;^212^^^^^197^227^parent.replaceChild ( n, Node.newString ( sb.toString (  )  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^parent.replaceChild ( n, Node.setString ( sb.toString (  )  )  ) ;^212^^^^^197^227^parent.replaceChild ( n, Node.newString ( sb.toString (  )  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^parent.replaceChild ( n, Node .getString (  )   ) ;^212^^^^^197^227^parent.replaceChild ( n, Node.newString ( sb.toString (  )  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^parent.replaceChild ( n, Node.newString ( sb.append (  )  )  ) ;^212^^^^^197^227^parent.replaceChild ( n, Node.newString ( sb.toString (  )  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P7_Replace_Invocation]^parent.replaceChild ( n, Node.newString ( sb .StringBuilder (  )   )  ) ;^212^^^^^197^227^parent.replaceChild ( n, Node.newString ( sb.toString (  )  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^parent.replaceChild ( root, Node.newString ( sb.toString (  )  )  ) ;^212^^^^^197^227^parent.replaceChild ( n, Node.newString ( sb.toString (  )  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^212^^^^^197^227^parent.replaceChild ( n, Node.newString ( sb.toString (  )  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^if  ( generatePseudoNames )  {^216^^^^^201^231^if  ( changed )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P15_Unwrap_Block]^compiler.reportCodeChange();^216^217^218^^^201^231^if  ( changed )  { compiler.reportCodeChange (  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P16_Remove_Block]^^216^217^218^^^201^231^if  ( changed )  { compiler.reportCodeChange (  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^217^^^^^202^232^compiler.reportCodeChange (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P13_Insert_Block]^if  ( changed )  {     compiler.reportCodeChange (  ) ; }^217^^^^^202^232^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  StringBuilder  sb  Node  externs  firstArg  n  parent  root  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^if  ( !generatePseudoNames || prevName != null )  {^234^^^^^228^244^if  ( !generatePseudoNames && prevName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P2_Replace_Operator]^if  ( !generatePseudoNames && prevName == null )  {^234^^^^^228^244^if  ( !generatePseudoNames && prevName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P5_Replace_Variable]^if  ( !generatePseudoNames && replacement != null )  {^234^^^^^228^244^if  ( !generatePseudoNames && prevName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P5_Replace_Variable]^if  ( !changed && prevName != null )  {^234^^^^^228^244^if  ( !generatePseudoNames && prevName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P6_Replace_Expression]^if  ( !generatePseudoNames ) {^234^^^^^228^244^if  ( !generatePseudoNames && prevName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P6_Replace_Expression]^if  (  prevName != null )  {^234^^^^^228^244^if  ( !generatePseudoNames && prevName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P8_Replace_Mix]^if  ( !generatePseudoNames && replacement != false )  {^234^^^^^228^244^if  ( !generatePseudoNames && prevName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P15_Unwrap_Block]^if (reservedNames.contains(prevName)) {    continue;}; prop.newName = prevName; reservedNames.add(prevName);^234^235^236^237^238^228^244^if  ( !generatePseudoNames && prevName != null )  {  if  ( reservedNames.contains ( prevName )  )  { continue; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P16_Remove_Block]^^234^235^236^237^238^228^244^if  ( !generatePseudoNames && prevName != null )  {  if  ( reservedNames.contains ( prevName )  )  { continue; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P5_Replace_Variable]^if  ( reservedNames.contains ( replacement )  )  {^236^^^^^228^244^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P5_Replace_Variable]^if  ( prevName.contains ( reservedNames )  )  {^236^^^^^228^244^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P9_Replace_Statement]^if  ( !externedNames.contains ( name )  )  {^236^^^^^228^244^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P15_Unwrap_Block]^continue;^236^237^238^^^228^244^if  ( reservedNames.contains ( prevName )  )  { continue; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P16_Remove_Block]^^236^237^238^^^228^244^if  ( reservedNames.contains ( prevName )  )  { continue; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P13_Insert_Block]^if  ( ! ( externedNames.contains ( name )  )  )  {     countPropertyOccurrence ( name, t ) ; }^236^^^^^228^244^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P5_Replace_Variable]^prop.newName = replacement;^240^^^^^228^244^prop.newName = prevName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P8_Replace_Mix]^prop.newName =  prevName;^240^^^^^228^244^prop.newName = prevName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P11_Insert_Donor_Statement]^this.oldName = name;prop.newName = prevName;^240^^^^^228^244^prop.newName = prevName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P5_Replace_Variable]^if  ( reservedNames.contains ( oldName )  )  {^236^^^^^228^244^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P8_Replace_Mix]^if  ( reservedNames .size (  )   )  {^236^^^^^228^244^if  ( reservedNames.contains ( prevName )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P13_Insert_Block]^if  ( reservedNames.contains ( prevName )  )  {     continue; }^236^^^^^228^244^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P5_Replace_Variable]^reservedNames.add ( oldName ) ;^241^^^^^228^244^reservedNames.add ( prevName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P8_Replace_Mix]^reservedNames.add ( replacement ) ;^241^^^^^228^244^reservedNames.add ( prevName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P14_Delete_Statement]^^241^^^^^228^244^reservedNames.add ( prevName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P12_Insert_Condition]^if  ( reservedNames.contains ( prevName )  )  { reservedNames.add ( prevName ) ; }^241^^^^^228^244^reservedNames.add ( prevName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P5_Replace_Variable]^prop.newName = oldName;^240^^^^^228^244^prop.newName = prevName;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P1_Replace_Type]^char prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^233^^^^^228^244^String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P5_Replace_Variable]^String prevName = prevUsedPropertyMap.lookupNewName ( replacement ) ;^233^^^^^228^244^String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P5_Replace_Variable]^String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName.oldName ) ;^233^^^^^228^244^String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P5_Replace_Variable]^String prevName = prop.lookupNewName ( prevUsedPropertyMap.oldName ) ;^233^^^^^228^244^String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P5_Replace_Variable]^String prevName = prop.oldName.lookupNewName ( prevUsedPropertyMap ) ;^233^^^^^228^244^String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P7_Replace_Invocation]^String prevName = prevUsedPropertyMap.VariableMap ( prop.oldName ) ;^233^^^^^228^244^String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P5_Replace_Variable]^String prevName = prevUsedPropertyMap.lookupNewName ( prop ) ;^233^^^^^228^244^String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P14_Delete_Statement]^^233^^^^^228^244^String prevName = prevUsedPropertyMap.lookupNewName ( prop.oldName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] reusePropertyNames [RETURN_TYPE] void   String> reservedNames Property> allProps [VARIABLES] Set  externedNames  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  Collection  allProps  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  prop  
[P5_Replace_Variable]^NameGenerator nameGen = new NameGenerator (  "", reservedCharacters ) ;^254^255^^^^253^270^NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^NameGenerator nameGen = new NameGenerator ( reservedNames, "" ) ;^254^255^^^^253^270^NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^NameGenerator nameGen = new NameGenerator ( reservedCharacters, "", reservedNames ) ;^254^255^^^^253^270^NameGenerator nameGen = new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^if  ( changed )  {^257^^^^^253^270^if  ( generatePseudoNames )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P6_Replace_Expression]^if  ( "$" + p.oldName )  {^257^^^^^253^270^if  ( generatePseudoNames )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P6_Replace_Expression]^if  ( p.newName == null )  {^257^^^^^253^270^if  ( generatePseudoNames )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^if  ( p.newName != null )  {^261^^^^^253^270^if  ( p.newName == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^if  ( replacement == null )  {^261^^^^^253^270^if  ( p.newName == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^if  ( p.newName == false )  {^261^^^^^253^270^if  ( p.newName == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P9_Replace_Statement]^if  ( p != null && p.newName != null )  {^261^^^^^253^270^if  ( p.newName == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P9_Replace_Statement]^if  ( prop == null )  {^261^^^^^253^270^if  ( p.newName == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P15_Unwrap_Block]^p.newName = nameGen.generateNextName();^261^262^263^^^253^270^if  ( p.newName == null )  { p.newName = nameGen.generateNextName (  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P16_Remove_Block]^^261^262^263^^^253^270^if  ( p.newName == null )  { p.newName = nameGen.generateNextName (  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P13_Insert_Block]^if  (  ( p.newName )  != null )  {     map.put ( p.oldName, p.newName ) ; }^261^^^^^253^270^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^p.newName =  nameGen.generateNextName (  ) ;^262^^^^^253^270^p.newName = nameGen.generateNextName (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P13_Insert_Block]^if  (  ( p.newName )  == null )  {     p.newName = nameGen.generateNextName (  ) ; }^262^^^^^253^270^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^262^^^^^253^270^p.newName = nameGen.generateNextName (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^p.newName = "$"  &  p.oldName + "$";^258^^^^^253^270^p.newName = "$" + p.oldName + "$";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^p.newName = "$" + prevName + "$";^258^^^^^253^270^p.newName = "$" + p.oldName + "$";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^p.newName = "$" + p.oldName.oldName + "$";^258^^^^^253^270^p.newName = "$" + p.oldName + "$";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^p.newName = "$" + p + "$";^258^^^^^253^270^p.newName = "$" + p.oldName + "$";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^p.newName =  "$" + null.oldName + "$";^258^^^^^253^270^p.newName = "$" + p.oldName + "$";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^if  ( oldName == null )  {^261^^^^^253^270^if  ( p.newName == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^if  ( p.newName == this )  {^261^^^^^253^270^if  ( p.newName == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^p.newName = "$"  <<  p.oldName + "$";^258^^^^^253^270^p.newName = "$" + p.oldName + "$";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P3_Replace_Literal]^p.newName = "" + p.oldName + "";^258^^^^^253^270^p.newName = "$" + p.oldName + "$";^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^reservedNames.add ( p.newName.newName ) ;^266^^^^^253^270^reservedNames.add ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^reservedNames.add ( p ) ;^266^^^^^253^270^reservedNames.add ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^reservedNames.add ( oldName ) ;^266^^^^^253^270^reservedNames.add ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^266^^^^^253^270^reservedNames.add ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^reservedNames.addAll ( quotedNames ) ;reservedNames.add ( p.newName ) ;^266^^^^^253^270^reservedNames.add ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^reservedNames.add ( prevName ) ;reservedNames.add ( p.newName ) ;^266^^^^^253^270^reservedNames.add ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^externedNames.add ( child.getString (  )  ) ;reservedNames.add ( p.newName ) ;^266^^^^^253^270^reservedNames.add ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^n.setString ( p.newName ) ;reservedNames.add ( p.newName ) ;^266^^^^^253^270^reservedNames.add ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^reservedNames.addAll ( externedNames ) ;reservedNames.add ( p.newName ) ;^266^^^^^253^270^reservedNames.add ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^externedNames.add ( dest.getString (  )  ) ;reservedNames.add ( p.newName ) ;^266^^^^^253^270^reservedNames.add ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P12_Insert_Condition]^if  ( reservedNames.contains ( prevName )  )  { reservedNames.add ( p.newName ) ; }^266^^^^^253^270^reservedNames.add ( p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^compiler.addToDebugLog ( p.oldName  <<  " => " + p.newName ) ;^268^^^^^253^270^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P3_Replace_Literal]^compiler.addToDebugLog ( p.oldName + "=> " + p.newName ) ;^268^^^^^253^270^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^compiler.addToDebugLog ( oldName + " => " + p.newName ) ;^268^^^^^253^270^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^compiler.addToDebugLog ( p.newName.oldName + " => " + p ) ;^268^^^^^253^270^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^compiler.addToDebugLog ( p + " => " + p.oldName.newName ) ;^268^^^^^253^270^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P5_Replace_Variable]^compiler.addToDebugLog ( p.newName + " => " + p.oldName ) ;^268^^^^^253^270^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P8_Replace_Mix]^compiler.addToDebugLog ( p.oldName + " => " + replacement ) ;^268^^^^^253^270^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P14_Delete_Statement]^^268^^^^^253^270^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P11_Insert_Donor_Statement]^compiler.addToDebugLog ( "JS property assignments:" ) ;compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^268^^^^^253^270^compiler.addToDebugLog ( p.oldName + " => " + p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] generateNames [RETURN_TYPE] void   Property> props String> reservedNames [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NameGenerator  nameGen  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  propertyMap  Property  p  
[P2_Replace_Operator]^if  ( p.newName == null )  {^280^^^^^277^285^if  ( p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P5_Replace_Variable]^if  ( oldName != null )  {^280^^^^^277^285^if  ( p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P8_Replace_Mix]^if  ( p.newName != this )  {^280^^^^^277^285^if  ( p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P9_Replace_Statement]^if  ( p != null && p.newName != null )  {^280^^^^^277^285^if  ( p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P9_Replace_Statement]^if  ( prop == null )  {^280^^^^^277^285^if  ( p.newName != null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P15_Unwrap_Block]^map.put(p.oldName, p.newName);^280^281^282^^^277^285^if  ( p.newName != null )  { map.put ( p.oldName, p.newName ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P16_Remove_Block]^^280^281^282^^^277^285^if  ( p.newName != null )  { map.put ( p.oldName, p.newName ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P13_Insert_Block]^if  (  ( p.newName )  == null )  {     p.newName = nameGen.generateNextName (  ) ; }^280^^^^^277^285^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P5_Replace_Variable]^map.put ( prevName, p.newName ) ;^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P5_Replace_Variable]^map.put ( p.oldName, replacement ) ;^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P5_Replace_Variable]^map.put ( p.oldName.newName ) ;^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P5_Replace_Variable]^map.put (  p.newName ) ;^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P5_Replace_Variable]^map.put ( p.oldName ) ;^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P5_Replace_Variable]^map.put ( p.oldName.oldName, p.newName ) ;^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P5_Replace_Variable]^map.put ( p.newName.oldName, p ) ;^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P8_Replace_Mix]^map.put ( p.oldName, oldName ) ;^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P14_Delete_Statement]^^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P7_Replace_Invocation]^for  ( Property p : propertyMap.keySet (  )  )  {^279^^^^^277^285^for  ( Property p : propertyMap.values (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P14_Delete_Statement]^^279^280^281^282^^277^285^for  ( Property p : propertyMap.values (  )  )  { if  ( p.newName != null )  { map.put ( p.oldName, p.newName ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P5_Replace_Variable]^map.put ( oldName, p.newName ) ;^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P5_Replace_Variable]^map.put ( p.newName, p.oldName ) ;^281^^^^^277^285^map.put ( p.oldName, p.newName ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] getPropertyMap [RETURN_TYPE] VariableMap   [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  p  
[P2_Replace_Operator]^if  ( dest.getType (  )  >= Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( dest.setString (  )  == Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( dest .getString (  )   == Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( child != null && child.getType (  )  == Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( firstArg.getType (  )  != Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( propNode.getType (  )  == Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( varNode.getType (  )  == Token.VAR )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^externedNames.add(dest.getString());^299^300^301^^^295^313^if  ( dest.getType (  )  == Token.STRING )  { externedNames.add ( dest.getString (  )  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^299^300^301^^^295^313^if  ( dest.getType (  )  == Token.STRING )  { externedNames.add ( dest.getString (  )  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     externedNames.add ( child.getString (  )  ) ; }^299^^^^^295^313^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( child != null )  &&  (  ( child.getType (  )  )  ==  ( STRING )  )  )  {     quotedNames.add ( child.getString (  )  ) ; }^299^^^^^295^313^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     if  ( ! ( key.isQuotedString (  )  )  )  {         maybeMarkCandidate ( key, t ) ;     }else {         quotedNames.add ( key.getString (  )  ) ;     } }^299^^^^^295^313^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( firstArg.getType (  )  )  !=  ( STRING )  )  {     t.report ( callNode, BAD_CALL ) ;     return ; }^299^^^^^295^313^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( propNode.getType (  )  )  ==  ( STRING )  )  {     maybeMarkCandidate ( propNode, t ) ; }^299^^^^^295^313^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^externedNames.add ( parent.getString (  )  ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^externedNames.addAll ( dest.getString (  )  ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^externedNames.add ( dest.setString (  )  ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^externedNames.addAll ( parent.getString (  )  ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;externedNames.add ( dest.getString (  )  ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^reservedNames.add ( p.newName ) ;externedNames.add ( dest.getString (  )  ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^externedNames.add ( child.getString (  )  ) ;externedNames.add ( dest.getString (  )  ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^quotedNames.add ( key.getString (  )  ) ;externedNames.add ( dest.getString (  )  ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^String oldName = n.getString (  ) ;externedNames.add ( dest.getString (  )  ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^quotedNames.add ( child.getString (  )  ) ;externedNames.add ( dest.getString (  )  ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^if  ( child.getType (  )  != Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( child.setString (  )  == Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( child != null && child.getType (  )  == Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( firstArg.getType (  )  != Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( propNode.getType (  )  == Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( varNode.getType (  )  == Token.VAR )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^externedNames.add(child.getString());^307^308^309^^^295^313^if  ( child.getType (  )  == Token.STRING )  { externedNames.add ( child.getString (  )  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^307^308^309^^^295^313^if  ( child.getType (  )  == Token.STRING )  { externedNames.add ( child.getString (  )  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     externedNames.add ( dest.getString (  )  ) ; }^307^^^^^295^313^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( child != null )  &&  (  ( child.getType (  )  )  ==  ( STRING )  )  )  {     quotedNames.add ( child.getString (  )  ) ; }^307^^^^^295^313^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( firstArg.getType (  )  )  !=  ( STRING )  )  {     t.report ( callNode, BAD_CALL ) ;     return ; }^307^^^^^295^313^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( propNode.getType (  )  )  ==  ( STRING )  )  {     maybeMarkCandidate ( propNode, t ) ; }^307^^^^^295^313^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^externedNames.add ( parent.getString (  )  ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^externedNames.addAll ( child.getString (  )  ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^externedNames.add ( child.setString (  )  ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^externedNames.add ( child .setString ( name )   ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;externedNames.add ( child.getString (  )  ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^reservedNames.add ( p.newName ) ;externedNames.add ( child.getString (  )  ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^quotedNames.add ( key.getString (  )  ) ;externedNames.add ( child.getString (  )  ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^String oldName = n.getString (  ) ;externedNames.add ( child.getString (  )  ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^quotedNames.add ( child.getString (  )  ) ;externedNames.add ( child.getString (  )  ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^externedNames.add ( dest.getString (  )  ) ;externedNames.add ( child.getString (  )  ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^externedNames.add ( child .setString ( RENAME_PROPERTY_FUNCTION_NAME )   ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^for  ( Node child = parent.getFirstChild (  ) ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^for  ( Node parent = n.getFirstChild (  ) ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^for  ( Node n = child.getFirstChild (  ) ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^for  ( Node child = n.setString (  ) ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^for  ( Node child = n .getLastChild (  )  ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^externedNames.add ( parent.setString (  )  ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^child = parent.getNext (  ) .getNext (  )  )  {^306^^^^^295^313^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^child = child.split (  ) .getNext (  )  )  {^306^^^^^295^313^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^child = child.setString (  ) .getNext (  )  )  {^306^^^^^295^313^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^child = child .getString (  )^306^^^^^295^313^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^298^^^^^295^313^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node dest = n.getFirstChild (  ) .split (  ) ;^298^^^^^295^313^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node dest = n.setString (  ) .getNext (  ) ;^298^^^^^295^313^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^296^^^^^295^313^switch  ( n.getType (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^switch  ( n.setString (  )  )  {^296^^^^^295^313^switch  ( n.getType (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^296^297^298^^^295^313^switch  ( n.getType (  )  )  { case Token.GETPROP: Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node dest = n .getLastChild (  )  .getNext (  ) ;^298^^^^^295^313^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^298^^^^^295^313^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^Node dest = parent.setString (  ) .getNext (  ) ;^298^^^^^295^313^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^externedNames.add ( dest .setString ( prevName )   ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^externedNames.add ( dest .setString ( oldName )   ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^304^305^306^307^308^295^313^for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  ) .getNext (  )  )  { if  ( child.getType (  )  == Token.STRING )  { externedNames.add ( child.getString (  )  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^306^307^308^^^295^313^child = child.getNext (  ) .getNext (  )  )  { if  ( child.getType (  )  == Token.STRING )  { externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^externedNames.add ( child .setString ( newName )   ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  dest  n  parent  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^if  ( propNode.getType (  )  != Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( propNode.setString (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( propNode .getString (  )   == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( varNode.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( child != null && child.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( firstArg.getType (  )  != Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( varNode.getType (  )  == Token.VAR )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^maybeMarkCandidate(propNode, t);^329^330^331^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  { maybeMarkCandidate ( propNode, t ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^329^330^331^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  { maybeMarkCandidate ( propNode, t ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     externedNames.add ( child.getString (  )  ) ; }^329^^^^^314^344^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     externedNames.add ( dest.getString (  )  ) ; }^329^^^^^314^344^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( child != null )  &&  (  ( child.getType (  )  )  ==  ( STRING )  )  )  {     quotedNames.add ( child.getString (  )  ) ; }^329^^^^^314^344^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( firstArg.getType (  )  )  !=  ( STRING )  )  {     t.report ( callNode, BAD_CALL ) ;     return ; }^329^^^^^314^344^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^maybeMarkCandidate ( n, t ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^maybeMarkCandidate (  t ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^maybeMarkCandidate ( propNode ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^maybeMarkCandidate ( t, propNode ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^countCallCandidates ( propNode, t ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^maybeMarkCandidate ( key, t ) ;maybeMarkCandidate ( propNode, t ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^if  ( key.getType (  )  >= Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( key.setString (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( key .getString (  )   == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( varNode.getType (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( child != null && child.getType (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( firstArg.getType (  )  != Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( propNode.getType (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( varNode.getType (  )  == Token.VAR )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     externedNames.add ( dest.getString (  )  ) ; }^340^^^^^325^355^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  ( ! ( key.isQuotedString (  )  )  )  {     maybeMarkCandidate ( key, t ) ; }else {     quotedNames.add ( key.getString (  )  ) ; }^340^^^^^325^355^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( !key.setString (  )  )  {^341^^^^^326^356^if  ( !key.isQuotedString (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( !key .setString ( name )   )  {^341^^^^^326^356^if  ( !key.isQuotedString (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     if  ( ! ( key.isQuotedString (  )  )  )  {         maybeMarkCandidate ( key, t ) ;     }else {         quotedNames.add ( key.getString (  )  ) ;     } }^341^^^^^326^356^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^quotedNames.add ( varNode.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^quotedNames.addAll ( key.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^quotedNames.add ( key.setString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^externedNames.add ( child.getString (  )  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^String oldName = n.getString (  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^quotedNames.add ( child.getString (  )  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^externedNames.add ( dest.getString (  )  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^maybeMarkCandidate ( varNode, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^maybeMarkCandidate (  t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^maybeMarkCandidate ( key ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^maybeMarkCandidate ( t, key ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^countCallCandidates ( key, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^maybeMarkCandidate ( propNode, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^countCallCandidates ( t, n ) ;maybeMarkCandidate ( key, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^maybeMarkCandidate ( propNode, t ) ;maybeMarkCandidate ( key, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( !key .setString ( RENAME_PROPERTY_FUNCTION_NAME )   )  {^341^^^^^326^356^if  ( !key.isQuotedString (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^maybeMarkCandidate ( parent, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^countCallCandidates ( varNode, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^quotedNames.add ( varNode.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^quotedNames.addAll ( key.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^quotedNames.add ( key.setString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^externedNames.add ( child.getString (  )  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^String oldName = n.getString (  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^quotedNames.add ( child.getString (  )  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^externedNames.add ( dest.getString (  )  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^quotedNames.add ( key .setString ( name )   ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^quotedNames.add ( propNode.setString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^quotedNames.add ( key .setString ( name )   ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^if  ( child != null || child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^if  ( child == null && child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^if  ( child != null && child.getType (  )  != Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( parent != null && child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P6_Replace_Expression]^if  ( child != null ) {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P6_Replace_Expression]^if  (  child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P6_Replace_Expression]^if  ( child.getType (  )  == STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( child != null && child.setString (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( child != null && child .getString (  )   == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( firstArg.getType (  )  != Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( propNode.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^quotedNames.add(child.getString());^356^357^358^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  { quotedNames.add ( child.getString (  )  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^356^357^358^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  { quotedNames.add ( child.getString (  )  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     externedNames.add ( child.getString (  )  ) ; }^356^^^^^341^371^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     externedNames.add ( dest.getString (  )  ) ; }^356^^^^^341^371^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( propNode.getType (  )  )  ==  ( STRING )  )  {     maybeMarkCandidate ( propNode, t ) ; }^356^^^^^341^371^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^quotedNames.add ( parent.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^quotedNames.addAll ( child.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^quotedNames.add ( child.setString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^quotedNames.add ( parent.setString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;quotedNames.add ( child.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^externedNames.add ( child.getString (  )  ) ;quotedNames.add ( child.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^quotedNames.add ( key.getString (  )  ) ;quotedNames.add ( child.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^externedNames.add ( dest.getString (  )  ) ;quotedNames.add ( child.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^quotedNames.add ( varNode.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^if  ( fnName.getType (  )  == Token.NAME || RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^if  ( fnName.getType (  )  <= Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( propNode.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P6_Replace_Expression]^if  ( fnName.getType (  )  == Token.NAME ) {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P6_Replace_Expression]^if  (  RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P6_Replace_Expression]^if  ( fnName.getType (  )  == NAME )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( fnName.setString (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.compareTo ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.setString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^callNodeToParentMap.put(n, parent); countCallCandidates(t, n);^364^365^366^367^368^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  { callNodeToParentMap.put ( n, parent ) ; countCallCandidates ( t, n ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^364^365^366^367^368^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  { callNodeToParentMap.put ( n, parent ) ; countCallCandidates ( t, n ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^callNodeToParentMap.put ( varNode, parent ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^callNodeToParentMap.put ( n, varNode ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^callNodeToParentMap.put (  parent ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^callNodeToParentMap.put ( n ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^callNodeToParentMap.put ( parent, n ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^366^367^^^^364^368^callNodeToParentMap.put ( n, parent ) ; countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^varNode.removeChild ( parent ) ;callNodeToParentMap.put ( n, parent ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countCallCandidates ( t, propNode ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countCallCandidates (  n ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countCallCandidates ( t ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countCallCandidates ( n, t ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^maybeMarkCandidate ( t, n ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^maybeMarkCandidate ( t, parent ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^maybeMarkCandidate ( key, t ) ;countCallCandidates ( t, n ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( NodeUtil.isFunctionDeclaration ( propNode )  )  {^373^^^^^358^388^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P6_Replace_Expression]^if  ( parent.getType (  )  == NAME )  {^373^^^^^358^388^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P6_Replace_Expression]^if  ( varNode.getType() == VAR )  {^373^^^^^358^388^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isExpressionNode ( n )  )  {^373^^^^^358^388^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( NodeUtil.isFunctionDeclaration ( varNode )  )  {^373^^^^^358^388^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  == Token.NAME || RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  <= Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  != Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^} else if  ( propNode.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.NAME && replacement.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^} else if  ( RENAME_PROPERTY_FUNCTION_NAME.getType (  )  == Token.NAME && parent.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P6_Replace_Expression]^} else if  ( parent.getType (  )  == Token.NAME ) {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P6_Replace_Expression]^} else if  (  RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P6_Replace_Expression]^} else if  ( parent.getType (  )  == NAME )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P6_Replace_Expression]^} else if  ( varNode.getType() == VAR )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P6_Replace_Expression]^} else {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^} else if  ( parent.setString (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.compareTo ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME .compareTo ( name )   )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.setString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^}  if  ( propNode.setString (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^if  ( varNode.getType (  )  != Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( varNode.setString (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( propNode.getType (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( firstArg.getType (  )  != Token.STRING )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( propNode.getType (  )  == Token.STRING )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^varNode.removeChild(parent); if (!(varNode.hasChildren())) {    varNode.detachFromParent();}; compiler.reportCodeChange();^386^387^388^389^390^383^393^if  ( varNode.getType (  )  == Token.VAR )  { varNode.removeChild ( parent ) ; if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^386^387^388^389^390^383^393^if  ( varNode.getType (  )  == Token.VAR )  { varNode.removeChild ( parent ) ; if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( !varNode.setString (  )  )  {^388^^^^^383^393^if  ( !varNode.hasChildren (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( !varNode .getLastChild (  )   )  {^388^^^^^383^393^if  ( !varNode.hasChildren (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^varNode.detachFromParent();^388^389^390^^^383^393^if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^388^389^390^^^383^393^if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^varNode.setString (  ) ;^389^^^^^383^393^varNode.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^varNode .getParent (  )  ;^389^^^^^383^393^varNode.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^389^^^^^383^393^varNode.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^parent.detachFromParent (  ) ;varNode.detachFromParent (  ) ;^389^^^^^383^393^varNode.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^Node varNode = parent.getParent (  ) ;varNode.detachFromParent (  ) ;^389^^^^^383^393^varNode.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^varNode.removeChild ( parent ) ;varNode.detachFromParent (  ) ;^389^^^^^383^393^varNode.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^varNode.removeChild ( n ) ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^varNode.detachFromParent (  ) ;varNode.removeChild ( parent ) ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;varNode.removeChild ( parent ) ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^callNodeToParentMap.put ( n, parent ) ;varNode.removeChild ( parent ) ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^391^^^^^383^393^compiler.reportCodeChange (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^Node varNode = propNode.getParent (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node varNode = parent.setString (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^Node parent = callNodeToParentMap.get ( n ) ;Node varNode = parent.getParent (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^Node varNode = varNode.getParent (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node varNode = parent .getString (  )  ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^varNode.detachFromParent (  ) ;Node varNode = parent.getParent (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( n.setString (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^varNode.removeChild ( propNode ) ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^varNode .replaceChild ( child )  ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^if  ( varNode.getType (  )  != Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( propNode.getType (  )  == Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( varNode.setString (  )  == Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( firstArg.getType (  )  != Token.STRING )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( propNode.getType (  )  == Token.STRING )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^varNode.removeChild(parent); if (!(varNode.hasChildren())) {    varNode.detachFromParent();}; compiler.reportCodeChange();^386^387^388^389^390^371^401^if  ( varNode.getType (  )  == Token.VAR )  { varNode.removeChild ( parent ) ; if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^386^387^388^389^390^371^401^if  ( varNode.getType (  )  == Token.VAR )  { varNode.removeChild ( parent ) ; if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( !varNode.setString (  )  )  {^388^^^^^373^403^if  ( !varNode.hasChildren (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^varNode.detachFromParent();^388^389^390^^^373^403^if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^388^389^390^^^373^403^if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^varNode.setString (  ) ;^389^^^^^374^404^varNode.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^389^^^^^374^404^varNode.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^parent.detachFromParent (  ) ;varNode.detachFromParent (  ) ;^389^^^^^374^404^varNode.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^Node varNode = parent.getParent (  ) ;varNode.detachFromParent (  ) ;^389^^^^^374^404^varNode.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^varNode.removeChild ( parent ) ;varNode.detachFromParent (  ) ;^389^^^^^374^404^varNode.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^varNode.removeChild ( n ) ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^varNode .replaceChild ( fnName )  ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^varNode.removeChild ( propNode ) ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^varNode.detachFromParent (  ) ;varNode.removeChild ( parent ) ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;varNode.removeChild ( parent ) ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^callNodeToParentMap.put ( n, parent ) ;varNode.removeChild ( parent ) ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( !varNode .getLastChild (  )   )  {^388^^^^^373^403^if  ( !varNode.hasChildren (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^compiler .addToDebugLog ( newName )  ;^391^^^^^376^406^compiler.reportCodeChange (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^391^^^^^376^406^compiler.reportCodeChange (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node varNode = parent.setString (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node varNode = parent .getString (  )  ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^Node varNode = n.getParent (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^Node parent = callNodeToParentMap.get ( n ) ;Node varNode = parent.getParent (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^} else if  ( varNode.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^} else if  ( parent .getString (  )   == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^} else if  ( n.setString (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^RENAME_PROPERTY_FUNCTION_NAME.equals ( propNode.getString (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^RENAME_PROPERTY_FUNCTION_NAME.compareTo ( parent.getString (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.setString (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^RENAME_PROPERTY_FUNCTION_NAME.equals ( varNode.getString (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^384^385^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  { Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^varNode.detachFromParent (  ) ;Node varNode = parent.getParent (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^varNode .getParent (  )  ;^389^^^^^374^404^varNode.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( replacement )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( propNodeame )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( prevName.equals ( name )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( name.equals ( RENAME_PROPERTY_FUNCTION_NAME )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( RENAME_PROPERTY_FUNCTION_NAME.compareTo ( name )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( replacement.equals ( name )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^if (com.google.javascript.jscomp.NodeUtil.isExpressionNode(parent)) {    parent.detachFromParent();}else {    parent.removeChild(n);}; compiler.reportCodeChange();^375^376^377^378^379^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  { if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.detachFromParent (  ) ; } else { parent.removeChild ( n ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^375^376^377^378^379^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  { if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.detachFromParent (  ) ; } else { parent.removeChild ( n ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionDeclaration ( propNode )   )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( NodeUtil .isFunctionDeclaration ( fnName )   )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^parent.detachFromParent();^376^377^378^379^380^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.detachFromParent (  ) ; } else { parent.removeChild ( n ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^376^377^378^379^380^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.detachFromParent (  ) ; } else { parent.removeChild ( n ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^parent.removeChild ( varNode ) ;^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^varNode.removeChild ( parent ) ;parent.removeChild ( n ) ;^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^parent.setString (  ) ;^377^^^^^362^392^parent.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^377^^^^^362^392^parent.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^varNode.detachFromParent (  ) ;parent.detachFromParent (  ) ;^377^^^^^362^392^parent.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( n )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^parent .getParent (  )  ;^377^^^^^362^392^parent.detachFromParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^parent.removeChild ( propNode ) ;^379^^^^^364^394^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^parent .replaceChild ( propNode )  ;^379^^^^^364^394^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^parent.removeChild ( varNode ) ;^379^^^^^364^394^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^379^^^^^364^394^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^varNode.removeChild ( parent ) ;parent.removeChild ( n ) ;^379^^^^^364^394^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^compiler .addToDebugLog ( newName )  ;^381^^^^^366^396^compiler.reportCodeChange (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^381^^^^^366^396^compiler.reportCodeChange (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( varNode )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionDeclaration ( n )   )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^parent .replaceChild ( propNode )  ;^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^parent.removeChild ( propNode ) ;^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P1_Replace_Type]^char name = n.getFirstChild (  ) .getchar (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^String parentame = n.getFirstChild (  ) .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^String name = n.getFirstChild (  ) .split (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^String name = n.getFirstChild (  )  .setString ( RENAME_PROPERTY_FUNCTION_NAME )  ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^String name = n.setString (  ) .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^String varNodeame = n .getLastChild (  )  .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^String varNodeame = n.getFirstChild (  ) .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^String name = n.getFirstChild (  )  .setString ( prevName )  ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^compiler .addToDebugLog ( RENAME_PROPERTY_FUNCTION_NAME )  ;^381^^^^^366^396^compiler.reportCodeChange (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( propNode )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^parent .replaceChild ( parent )  ;^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^parent .replaceChild ( n )  ;^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME .compareTo ( RENAME_PROPERTY_FUNCTION_NAME )   )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^}  if  ( n.getType (  )  == Token.NAME ) {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( varNode.getType (  )  == Token.3 )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^varNode .replaceChild ( varNode )  ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^Node varNode = varNode .getString (  )  ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( varNode .getString (  )   == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^varNode .replaceChild ( n )  ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^varNode .replaceChild ( key )  ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^compiler .addToDebugLog ( oldName )  ;^391^^^^^383^393^compiler.reportCodeChange (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( varNode .getString (  )   == Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^for  ( Node key = n.getFirstChild (  ) ; key == null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^for  ( Node key = propNode.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^for  ( Node varNode = n.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^for  ( Node n = key.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^for  ( Node key = n.setString (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^for  ( Node key = varNode.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^if  ( key.getType (  )  <= Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( varNode.getType (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( key.setString (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( child != null && child.getType (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( firstArg.getType (  )  != Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( propNode.getType (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( varNode.getType (  )  == Token.VAR )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     externedNames.add ( dest.getString (  )  ) ; }^340^^^^^336^349^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  ( ! ( key.isQuotedString (  )  )  )  {     maybeMarkCandidate ( key, t ) ; }else {     quotedNames.add ( key.getString (  )  ) ; }^340^^^^^336^349^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( !key.setString (  )  )  {^341^^^^^336^349^if  ( !key.isQuotedString (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( !key .setString ( name )   )  {^341^^^^^336^349^if  ( !key.isQuotedString (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     if  ( ! ( key.isQuotedString (  )  )  )  {         maybeMarkCandidate ( key, t ) ;     }else {         quotedNames.add ( key.getString (  )  ) ;     } }^341^^^^^336^349^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^quotedNames.add ( propNode.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^quotedNames.addAll ( key.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^quotedNames.add ( key.setString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^externedNames.add ( child.getString (  )  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^String oldName = n.getString (  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^quotedNames.add ( child.getString (  )  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^externedNames.add ( dest.getString (  )  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^quotedNames.add ( varNode.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^maybeMarkCandidate ( varNode, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^maybeMarkCandidate (  t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^maybeMarkCandidate ( key ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^maybeMarkCandidate ( t, key ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^countCallCandidates ( key, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^maybeMarkCandidate ( propNode, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^countCallCandidates ( t, n ) ;maybeMarkCandidate ( key, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^maybeMarkCandidate ( propNode, t ) ;maybeMarkCandidate ( key, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^countCallCandidates ( parent, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^quotedNames.add ( key .setString ( newName )   ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^quotedNames.add ( key .setString ( replacement )   ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^quotedNames.addAll ( propNode.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^maybeMarkCandidate ( parent, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( key .getString (  )   == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^quotedNames.add ( varNode.setString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^key = varNode.getNext (  ) .getNext (  )  )  {^337^^^^^322^352^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^key = key.split (  ) .getNext (  )  )  {^337^^^^^322^352^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^key = key .getString (  )^337^^^^^322^352^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^key = key.setString (  ) .getNext (  )  )  {^337^^^^^322^352^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^Node propNode = varNode.getFirstChild (  ) .getNext (  ) ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node propNode = n.getFirstChild (  ) .split (  ) ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node propNode = n.getFirstChild (  )  .getString (  )  ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node propNode = n.setString (  ) .getNext (  ) ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node propNode = n .getLastChild (  )  .getNext (  ) ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^for  ( Node key = n .getLastChild (  )  ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^Node child = varNode.getLastChild (  ) ;^355^^^^^340^370^Node child = n.getLastChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node child = n.setString (  ) ;^355^^^^^340^370^Node child = n.getLastChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node child = n .getFirstChild (  )  ;^355^^^^^340^370^Node child = n.getLastChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^Node child = propNode.getLastChild (  ) ;^355^^^^^340^370^Node child = n.getLastChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^Node fnName = varNode.getFirstChild (  ) ;^363^^^^^348^378^Node fnName = n.getFirstChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node fnName = n.setString (  ) ;^363^^^^^348^378^Node fnName = n.getFirstChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node fnName = n .getLastChild (  )  ;^363^^^^^348^378^Node fnName = n.getFirstChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^Node fnName = propNode.setString (  ) ;^363^^^^^348^378^Node fnName = n.getFirstChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^Node varNode = propNode.getParent (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^Node varNode = propNode .getString (  )  ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^switch  ( varNode.getType (  )  )  {^326^^^^^311^341^switch  ( n.getType (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^switch  ( n.setString (  )  )  {^326^^^^^311^341^switch  ( n.getType (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^switch  ( varNode.setString (  )  )  {^326^^^^^311^341^switch  ( n.getType (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^326^327^328^^^311^341^switch  ( n.getType (  )  )  { case Token.GETPROP: Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^Node propNode = propNode.getFirstChild (  ) .getNext (  ) ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^Node propNode = propNode.setString (  ) .getNext (  ) ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^maybeMarkCandidate ( varNode, t ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^key = parent.getNext (  ) .getNext (  )  )  {^337^^^^^322^352^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^key = propNode.getNext (  ) .getNext (  )  )  {^337^^^^^322^352^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^quotedNames.add ( varNode .setString ( replacement )   ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^Node child = parent.setString (  ) ;^355^^^^^340^370^Node child = n.getLastChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^355^^^^^340^370^Node child = n.getLastChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( propNode != null && child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^quotedNames.add ( child .setString ( name )   ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^quotedNames.add ( varNode .setString ( name )   ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^363^^^^^348^378^Node fnName = n.getFirstChild (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( fnName .getString (  )   == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^RENAME_PROPERTY_FUNCTION_NAME.equals ( varNode.getString (  )  )  )  {^365^^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^RENAME_PROPERTY_FUNCTION_NAME.compareTo ( fnName.getString (  )  )  )  {^365^^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^RENAME_PROPERTY_FUNCTION_NAME .compareTo ( RENAME_PROPERTY_FUNCTION_NAME )   )  {^365^^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.setString (  )  )  )  {^365^^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^365^366^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  { callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^RENAME_PROPERTY_FUNCTION_NAME.equals ( propNode.getString (  )  )  )  {^365^^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^RENAME_PROPERTY_FUNCTION_NAME.equals ( varNode.setString (  )  )  )  {^365^^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^callNodeToParentMap.put ( propNode, parent ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^callNodeToParentMap.put ( n, propNode ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^callNodeToParentMap.put (  parent ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^callNodeToParentMap.put ( n ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^callNodeToParentMap.put ( parent, n ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^callNodeToParentMap.put ( varNode, parent ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^varNode.removeChild ( parent ) ;callNodeToParentMap.put ( n, parent ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countCallCandidates ( t, varNode ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countCallCandidates (  n ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countCallCandidates ( t ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countCallCandidates ( n, t ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^maybeMarkCandidate ( t, n ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^countCallCandidates ( t, parent ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^maybeMarkCandidate ( key, t ) ;countCallCandidates ( t, n ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( NodeUtil .isExpressionNode ( key )   )  {^373^^^^^358^388^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^String name = n .getLastChild (  )  .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^String propNodeame = n.getFirstChild (  ) .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^String varNodeame = n.setString (  ) .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionDeclaration ( key )   )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^} else if  ( n.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^RENAME_PROPERTY_FUNCTION_NAME.equals ( n.getString (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent .setString ( newName )   )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^Node varNode = varNode.getParent (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( propNode.setString (  )  == Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^varNode .replaceChild ( varNode )  ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P1_Replace_Type]^char name = n.getchar (  ) ;^406^^^^^405^411^String name = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^String name = n.setString (  ) ;^406^^^^^405^411^String name = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^String name = n .setString ( newName )  ;^406^^^^^405^411^String name = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^406^^^^^405^411^String name = n.getString (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( !externedNames.contains ( prevName )  )  {^407^^^^^405^411^if  ( !externedNames.contains ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( !externedNames.contains ( nameame )  )  {^407^^^^^405^411^if  ( !externedNames.contains ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( !externedNames.addAll ( name )  )  {^407^^^^^405^411^if  ( !externedNames.contains ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( !externedNames.contains ( replacement )  )  {^407^^^^^405^411^if  ( !externedNames.contains ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( reservedNames.contains ( prevName )  )  {^407^^^^^405^411^if  ( !externedNames.contains ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^stringNodesToRename.add(n); countPropertyOccurrence(name, t);^407^408^409^410^^405^411^if  ( !externedNames.contains ( name )  )  { stringNodesToRename.add ( n ) ; countPropertyOccurrence ( name, t ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^407^408^409^410^^405^411^if  ( !externedNames.contains ( name )  )  { stringNodesToRename.add ( n ) ; countPropertyOccurrence ( name, t ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  ( ! ( externedNames.contains ( name )  )  )  {     countPropertyOccurrence ( name, t ) ; }^407^^^^^405^411^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^408^409^^^^405^411^stringNodesToRename.add ( n ) ; countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countPropertyOccurrence ( replacement, t ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countPropertyOccurrence (  t ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countPropertyOccurrence ( name ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countPropertyOccurrence ( t, name ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^maybeMarkCandidate ( name, t ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^408^^^^^405^411^stringNodesToRename.add ( n ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countPropertyOccurrence ( prevName, t ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^maybeMarkCandidate ( prevName, t ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  n  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node firstArg = callNode.getFirstChild (  ) .split (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node firstArg = callNode.getFirstChild (  )  .getString (  )  ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^Node firstArg = callNode.setString (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^Node dest = n.getFirstChild (  ) .getNext (  ) ;Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^Node propNode = n.getFirstChild (  ) .getNext (  ) ;Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^Node fnName = n.getFirstChild (  ) ;Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^Node firstArg = n.getFirstChild (  ) .getNext (  ) ;Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^String name = n.getFirstChild (  ) .getString (  ) ;Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^Node firstArg = firstArg.getFirstChild (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^Node firstArg = firstArg.setString (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P2_Replace_Operator]^if  ( firstArg.getType (  )  == Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( firstArg.setString (  )  != Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^if  ( firstArg.getType (  )  != Token.this )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( child != null && child.getType (  )  == Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( propNode.getType (  )  == Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( varNode.getType (  )  == Token.VAR )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^t.report(callNode, com.google.javascript.jscomp.RenameProperties.BAD_CALL); return ;^422^423^424^425^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  { t.report ( callNode, BAD_CALL ) ; return; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^422^423^424^425^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  { t.report ( callNode, BAD_CALL ) ; return; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     externedNames.add ( child.getString (  )  ) ; }^422^^^^^420^436^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     externedNames.add ( dest.getString (  )  ) ; }^422^^^^^420^436^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  ( ! ( isJSIdentifier ( name )  )  )  {     t.report ( callNode, BAD_ARG, name ) ;     continue; }^422^^^^^420^436^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( propNode.getType (  )  )  ==  ( STRING )  )  {     maybeMarkCandidate ( propNode, t ) ; }^422^^^^^420^436^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report ( firstArg, BAD_CALL ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report ( callNode, BAD_ARG ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report (  BAD_CALL ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report ( callNode ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report ( BAD_CALL, callNode ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^t.report ( callNode, BAD_ARG, name ) ;t.report ( callNode, BAD_CALL ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( callNode.getType (  )  != Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( !TokenStream.isJSIdentifier ( replacement )  )  {^428^^^^^420^436^if  ( !TokenStream.isJSIdentifier ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^t.report(callNode, com.google.javascript.jscomp.RenameProperties.BAD_ARG, name); continue;^428^429^430^431^^420^436^if  ( !TokenStream.isJSIdentifier ( name )  )  { t.report ( callNode, BAD_ARG, name ) ; continue; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^428^429^430^431^^420^436^if  ( !TokenStream.isJSIdentifier ( name )  )  { t.report ( callNode, BAD_ARG, name ) ; continue; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  (  ( firstArg.getType (  )  )  !=  ( STRING )  )  {     t.report ( callNode, BAD_CALL ) ;     return ; }^428^^^^^420^436^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report ( firstArg, BAD_ARG, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report ( callNode, BAD_ARG, replacement ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report ( callNode, BAD_CALL, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report (  BAD_ARG, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report ( callNode, BAD_ARG ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report ( callNode,  name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report ( BAD_ARG, callNode, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report ( name, BAD_ARG, callNode ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report ( callNode, name, BAD_ARG ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^t.traverse ( callNode, BAD_ARG, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P11_Insert_Donor_Statement]^t.report ( callNode, BAD_CALL ) ;t.report ( callNode, BAD_ARG, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( !externedNames.contains ( replacement )  )  {^432^^^^^420^436^if  ( !externedNames.contains ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^if  ( !externedNames.addAll ( name )  )  {^432^^^^^420^436^if  ( !externedNames.contains ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P9_Replace_Statement]^if  ( reservedNames.contains ( prevName )  )  {^432^^^^^420^436^if  ( !externedNames.contains ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P15_Unwrap_Block]^countPropertyOccurrence(name, t);^432^433^434^^^420^436^if  ( !externedNames.contains ( name )  )  { countPropertyOccurrence ( name, t ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P16_Remove_Block]^^432^433^434^^^420^436^if  ( !externedNames.contains ( name )  )  { countPropertyOccurrence ( name, t ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  ( ! ( externedNames.contains ( name )  )  )  {     stringNodesToRename.add ( n ) ;     countPropertyOccurrence ( name, t ) ; }^432^^^^^420^436^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P13_Insert_Block]^if  ( reservedNames.contains ( prevName )  )  {     continue; }^432^^^^^420^436^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countPropertyOccurrence (  t ) ;^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countPropertyOccurrence ( name ) ;^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countPropertyOccurrence ( t, name ) ;^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^maybeMarkCandidate ( name, t ) ;^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^maybeMarkCandidate ( replacement, t ) ;^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P1_Replace_Type]^for  ( char name : firstArg.getchar (  ) .split ( "[.]" )  )  {^427^^^^^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P3_Replace_Literal]^for  ( String name : firstArg.getString (  ) .split ( "[..]" )  )  {^427^^^^^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^for  ( String name : callNode.getString (  ) .split ( "[.]" )  )  {^427^^^^^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^for  ( String name : firstArg.getString (  )  .getString (  )   )  {^427^^^^^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^for  ( String name : firstArg.setString (  ) .split ( "[.]" )  )  {^427^^^^^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P7_Replace_Invocation]^for  ( String name : firstArg .setString ( oldName )  .split ( "[.]" )  )  {^427^^^^^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P8_Replace_Mix]^for  ( String name : callNode.setString (  ) .split ( "[.]" )  )  {^427^^^^^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^427^428^429^430^431^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  { if  ( !TokenStream.isJSIdentifier ( name )  )  { t.report ( callNode, BAD_ARG, name ) ; continue; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^t.report ( callNode, BAD_ARG, prevName ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P14_Delete_Statement]^^429^430^^^^420^436^t.report ( callNode, BAD_ARG, name ) ; continue;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^if  ( !externedNames.contains ( prevName )  )  {^432^^^^^420^436^if  ( !externedNames.contains ( name )  )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^countPropertyOccurrence ( replacement, t ) ;^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  Node  callNode  firstArg  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  
[P5_Replace_Variable]^Property prop = propertyMap.get ( replacement ) ;^445^^^^^444^451^Property prop = propertyMap.get ( name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P5_Replace_Variable]^Property prop = name.get ( propertyMap ) ;^445^^^^^444^451^Property prop = propertyMap.get ( name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P11_Insert_Donor_Statement]^Property p = propertyMap.get ( oldName ) ;Property prop = propertyMap.get ( name ) ;^445^^^^^444^451^Property prop = propertyMap.get ( name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P5_Replace_Variable]^Property prop = propertyMap.get ( prevName ) ;^445^^^^^444^451^Property prop = propertyMap.get ( name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P14_Delete_Statement]^^445^^^^^444^451^Property prop = propertyMap.get ( name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P11_Insert_Donor_Statement]^propsByFreq.addAll ( propertyMap.values (  )  ) ;Property prop = propertyMap.get ( name ) ;^445^^^^^444^451^Property prop = propertyMap.get ( name ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P2_Replace_Operator]^if  ( prop != null )  {^446^^^^^444^451^if  ( prop == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P8_Replace_Mix]^if  ( prop == true )  {^446^^^^^444^451^if  ( prop == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P9_Replace_Statement]^if  ( p.newName == null )  {^446^^^^^444^451^if  ( prop == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P9_Replace_Statement]^if  ( p.newName != null )  {^446^^^^^444^451^if  ( prop == null )  {^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P15_Unwrap_Block]^prop = new com.google.javascript.jscomp.RenameProperties.Property(name, t.getInput()); propertyMap.put(name, prop);^446^447^448^449^^444^451^if  ( prop == null )  { prop = new Property ( name, t.getInput (  )  ) ; propertyMap.put ( name, prop ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P16_Remove_Block]^^446^447^448^449^^444^451^if  ( prop == null )  { prop = new Property ( name, t.getInput (  )  ) ; propertyMap.put ( name, prop ) ; }^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P4_Replace_Constructor]^prop = prop =  new ProcessProperties (  )   ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P4_Replace_Constructor]^prop = new Property (  t.getInput (  )  ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P4_Replace_Constructor]^prop = new Property ( name.getInput (  )  ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P5_Replace_Variable]^prop = new Property ( prevName, t.getInput (  )  ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P5_Replace_Variable]^prop = new Property ( t, name.getInput (  )  ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P8_Replace_Mix]^prop =  new Property ( null, t.getInput (  )  ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P13_Insert_Block]^if  ( prop == null )  {     prop = new Property ( name, t.getInput (  )  ) ;     propertyMap.put ( name, prop ) ; }^447^^^^^444^451^[Delete]^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P5_Replace_Variable]^prop = new Property ( replacement, t.getInput (  )  ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P7_Replace_Invocation]^prop = new Property ( name, t .report ( null , BAD_CALL )   ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P14_Delete_Statement]^^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P5_Replace_Variable]^propertyMap.put ( replacement, prop ) ;^448^^^^^444^451^propertyMap.put ( name, prop ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P5_Replace_Variable]^propertyMap.put (  prop ) ;^448^^^^^444^451^propertyMap.put ( name, prop ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P5_Replace_Variable]^propertyMap.put ( name ) ;^448^^^^^444^451^propertyMap.put ( name, prop ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P5_Replace_Variable]^propertyMap.put ( prop, name ) ;^448^^^^^444^451^propertyMap.put ( name, prop ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P8_Replace_Mix]^propertyMap.put ( prevName, prop ) ;^448^^^^^444^451^propertyMap.put ( name, prop ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P14_Delete_Statement]^^448^^^^^444^451^propertyMap.put ( name, prop ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P8_Replace_Mix]^prop =   new ProcessProperties (  )   ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P8_Replace_Mix]^prop = new Property ( replacement, t .report ( 0 , BAD_CALL )   ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] RenameProperties 1 ProcessExterns ProcessProperties Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] Set  externedNames  props  propsByFreq  quotedNames  reservedNames  NodeTraversal  t  String  RENAME_PROPERTY_FUNCTION_NAME  name  newName  oldName  prevName  replacement  int  numOccurrences  char[]  reservedCharacters  Comparator  FREQUENCY_COMPARATOR  AbstractCompiler  compiler  CompilerInput  input  boolean  changed  generatePseudoNames  VariableMap  prevUsedPropertyMap  DiagnosticType  BAD_ARG  BAD_CALL  List  stringNodesToRename  Map  callNodeToParentMap  map  propertyMap  Property  prop  
[P2_Replace_Operator]^if  ( p1.numOccurrences <= p2.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P5_Replace_Variable]^if  ( p2.numOccurrences != p2.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P5_Replace_Variable]^if  ( p1.numOccurrences != p1.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P5_Replace_Variable]^if  ( p2.numOccurrences.numOccurrences != p1 )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P5_Replace_Variable]^if  ( p2.numOccurrences != p1.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P5_Replace_Variable]^if  ( p1 != p2.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P6_Replace_Expression]^if  ( p2.numOccurrences - p1.numOccurrences )  {^81^^^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  {^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P15_Unwrap_Block]^return (p2.numOccurrences) - (p1.numOccurrences);^81^82^83^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  { return p2.numOccurrences - p1.numOccurrences; }^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P16_Remove_Block]^^81^82^83^^^80^85^if  ( p1.numOccurrences != p2.numOccurrences )  { return p2.numOccurrences - p1.numOccurrences; }^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P2_Replace_Operator]^return p2.numOccurrences  ==  p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P5_Replace_Variable]^return p1.numOccurrences - p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P5_Replace_Variable]^return p2.numOccurrences - p2.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P5_Replace_Variable]^return p1.numOccurrences - p2.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P5_Replace_Variable]^return p1 - p2.numOccurrences.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P8_Replace_Mix]^return p2.numOccurrences  ;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P12_Insert_Condition]^if  ( p1.numOccurrences != p2.numOccurrences )  { return p2.numOccurrences - p1.numOccurrences; }^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P2_Replace_Operator]^return p2.numOccurrences  >=  p1.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P5_Replace_Variable]^return p2.numOccurrences - p1.numOccurrences.numOccurrences;^82^^^^^80^85^return p2.numOccurrences - p1.numOccurrences;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P5_Replace_Variable]^return p2.oldName.compareTo ( p2.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P5_Replace_Variable]^return p2.oldName.compareTo ( p1.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P5_Replace_Variable]^return p2.compareTo ( p1.oldName.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P5_Replace_Variable]^return p1.oldName.compareTo ( p1.oldName ) ;^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P14_Delete_Statement]^^84^^^^^80^85^return p1.oldName.compareTo ( p2.oldName ) ;^[CLASS] 1  [METHOD] compare [RETURN_TYPE] int   Property p1 Property p2 [VARIABLES] boolean  Property  p1  p2  
[P2_Replace_Operator]^if  ( dest.getType (  )  != Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P7_Replace_Invocation]^if  ( dest .getString (  )   == Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.STRING )  {^299^^^^^295^313^if  ( dest.getType (  )  == Token.STRING )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P15_Unwrap_Block]^externedNames.add(dest.getString());^299^300^301^^^295^313^if  ( dest.getType (  )  == Token.STRING )  { externedNames.add ( dest.getString (  )  ) ; }^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P16_Remove_Block]^^299^300^301^^^295^313^if  ( dest.getType (  )  == Token.STRING )  { externedNames.add ( dest.getString (  )  ) ; }^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( STRING )  )  {     externedNames.add ( child.getString (  )  ) ; }^299^^^^^295^313^[Delete]^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P5_Replace_Variable]^externedNames.add ( parent.getString (  )  ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P14_Delete_Statement]^^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P11_Insert_Donor_Statement]^externedNames.add ( child.getString (  )  ) ;externedNames.add ( dest.getString (  )  ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P7_Replace_Invocation]^externedNames.add ( dest .getFirstChild (  )   ) ;^300^^^^^295^313^externedNames.add ( dest.getString (  )  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P2_Replace_Operator]^if  ( child.getType (  )  > Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P9_Replace_Statement]^if  ( dest.getType (  )  == Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P15_Unwrap_Block]^externedNames.add(child.getString());^307^308^309^^^295^313^if  ( child.getType (  )  == Token.STRING )  { externedNames.add ( child.getString (  )  ) ; }^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P16_Remove_Block]^^307^308^309^^^295^313^if  ( child.getType (  )  == Token.STRING )  { externedNames.add ( child.getString (  )  ) ; }^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P13_Insert_Block]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     externedNames.add ( dest.getString (  )  ) ; }^307^^^^^295^313^[Delete]^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P5_Replace_Variable]^externedNames.add ( parent.getString (  )  ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P7_Replace_Invocation]^externedNames.add ( child .getFirstChild (  )   ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P14_Delete_Statement]^^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P11_Insert_Donor_Statement]^externedNames.add ( dest.getString (  )  ) ;externedNames.add ( child.getString (  )  ) ;^308^^^^^295^313^externedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P5_Replace_Variable]^for  ( Node child = parent.getFirstChild (  ) ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P5_Replace_Variable]^for  ( Node parent = n.getFirstChild (  ) ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P5_Replace_Variable]^for  ( Node n = child.getFirstChild (  ) ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P7_Replace_Invocation]^for  ( Node child = n .getString (  )  ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P8_Replace_Mix]^for  ( Node child = parent .getString (  )  ;^304^^^^^295^313^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P2_Replace_Operator]^if  ( child.getType (  )  >= Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P7_Replace_Invocation]^if  ( child .getString (  )   == Token.STRING )  {^307^^^^^295^313^if  ( child.getType (  )  == Token.STRING )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P5_Replace_Variable]^child = parent.getNext (  ) .getNext (  )  )  {^306^^^^^295^313^child = child.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P5_Replace_Variable]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^298^^^^^295^313^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^296^^^^^295^313^switch  ( n.getType (  )  )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^296^^^^^295^313^switch  ( n.getType (  )  )  {^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P14_Delete_Statement]^^296^297^298^^^295^313^switch  ( n.getType (  )  )  { case Token.GETPROP: Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P14_Delete_Statement]^^298^^^^^295^313^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P14_Delete_Statement]^^304^305^306^307^308^295^313^for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  ) .getNext (  )  )  { if  ( child.getType (  )  == Token.STRING )  { externedNames.add ( child.getString (  )  ) ; }^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P14_Delete_Statement]^^306^307^308^^^295^313^child = child.getNext (  ) .getNext (  )  )  { if  ( child.getType (  )  == Token.STRING )  { externedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessExterns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  dest  n  parent  
[P2_Replace_Operator]^if  ( propNode.getType (  )  >= Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( propNode.removeChild (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( varNode.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( child != null && child.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( firstArg.getType (  )  != Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( varNode.getType (  )  == Token.VAR )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P15_Unwrap_Block]^maybeMarkCandidate(propNode, t);^329^330^331^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  { maybeMarkCandidate ( propNode, t ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P16_Remove_Block]^^329^330^331^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  { maybeMarkCandidate ( propNode, t ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P13_Insert_Block]^if  (  ( child != null )  &&  (  ( child.getType (  )  )  ==  ( STRING )  )  )  {     quotedNames.add ( child.getString (  )  ) ; }^329^^^^^314^344^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P13_Insert_Block]^if  (  ( firstArg.getType (  )  )  !=  ( STRING )  )  {     t.report ( callNode, BAD_CALL ) ;     return ; }^329^^^^^314^344^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^maybeMarkCandidate (  t ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^maybeMarkCandidate ( propNode ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^maybeMarkCandidate ( t, propNode ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^countCallCandidates ( propNode, t ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^maybeMarkCandidate ( varNode, t ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^maybeMarkCandidate ( key, t ) ;maybeMarkCandidate ( propNode, t ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^if  ( key.getType (  )  >= Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( varNode.getType (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( key.removeChild (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( key .getString (  )   == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( child != null && child.getType (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( firstArg.getType (  )  != Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( propNode.getType (  )  == Token.STRING )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( varNode.getType (  )  == Token.VAR )  {^340^^^^^325^355^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P13_Insert_Block]^if  ( ! ( key.isQuotedString (  )  )  )  {     maybeMarkCandidate ( key, t ) ; }else {     quotedNames.add ( key.getString (  )  ) ; }^340^^^^^325^355^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( !key.removeChild (  )  )  {^341^^^^^326^356^if  ( !key.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( !key .getString (  )   )  {^341^^^^^326^356^if  ( !key.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     if  ( ! ( key.isQuotedString (  )  )  )  {         maybeMarkCandidate ( key, t ) ;     }else {         quotedNames.add ( key.getString (  )  ) ;     } }^341^^^^^326^356^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^quotedNames.add ( propNode.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^quotedNames.contains ( key.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^quotedNames.add ( key.removeChild (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^quotedNames.add ( child.getString (  )  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^quotedNames.add ( varNode.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^quotedNames.add ( key .getParent (  )   ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^maybeMarkCandidate ( varNode, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^maybeMarkCandidate (  t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^maybeMarkCandidate ( key ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^maybeMarkCandidate ( t, key ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^countCallCandidates ( key, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^maybeMarkCandidate ( propNode, t ) ;maybeMarkCandidate ( key, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^countCallCandidates ( t, n ) ;maybeMarkCandidate ( key, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^maybeMarkCandidate ( parent, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^quotedNames.contains ( key.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^quotedNames.add ( key.removeChild (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^quotedNames.add ( propNode.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^quotedNames.add ( child.getString (  )  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^quotedNames.add ( propNode.removeChild (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^341^347^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^countCallCandidates ( parent, t ) ;^342^^^^^327^357^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^if  ( child != null || child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^if  ( child == null && child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^if  ( child != null && child.getType (  )  != Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( varNode != null && child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P6_Replace_Expression]^if  ( child != null ) {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P6_Replace_Expression]^if  (  child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P6_Replace_Expression]^if  ( child.getType (  )  == STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( child != null && child.removeChild (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( child != null && child .getString (  )   == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( firstArg.getType (  )  != Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( propNode.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P15_Unwrap_Block]^quotedNames.add(child.getString());^356^357^358^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  { quotedNames.add ( child.getString (  )  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P16_Remove_Block]^^356^357^358^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  { quotedNames.add ( child.getString (  )  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P13_Insert_Block]^if  (  ( propNode.getType (  )  )  ==  ( STRING )  )  {     maybeMarkCandidate ( propNode, t ) ; }^356^^^^^341^371^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^quotedNames.add ( varNode.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^quotedNames.contains ( child.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^quotedNames.add ( child.removeChild (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^quotedNames.add ( parent.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;quotedNames.add ( child.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^quotedNames.add ( key.getString (  )  ) ;quotedNames.add ( child.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^quotedNames.add ( propNode.getString (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^if  ( fnName.getType (  )  == Token.NAME || RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^if  ( fnName.getType (  )  != Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( propNode.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P6_Replace_Expression]^if  ( fnName.getType (  )  == Token.NAME ) {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P6_Replace_Expression]^if  (  RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P6_Replace_Expression]^if  ( fnName.getType (  )  == NAME )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( fnName.removeChild (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.removeChild (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName .getParent (  )   )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( varNode.getType (  )  == Token.NAME ) {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P15_Unwrap_Block]^callNodeToParentMap.put(n, parent); countCallCandidates(t, n);^364^365^366^367^368^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  { callNodeToParentMap.put ( n, parent ) ; countCallCandidates ( t, n ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P16_Remove_Block]^^364^365^366^367^368^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  { callNodeToParentMap.put ( n, parent ) ; countCallCandidates ( t, n ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^callNodeToParentMap.put ( varNode, parent ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^callNodeToParentMap.put ( n, n ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^callNodeToParentMap.put (  parent ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^callNodeToParentMap.put ( n ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^callNodeToParentMap.put ( parent, n ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^callNodeToParentMap.put ( propNode, parent ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^366^367^^^^364^368^callNodeToParentMap.put ( n, parent ) ; countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^varNode.removeChild ( parent ) ;callNodeToParentMap.put ( n, parent ) ;^366^^^^^364^368^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^countCallCandidates ( t, propNode ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^countCallCandidates (  n ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^countCallCandidates ( t ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^countCallCandidates ( n, t ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^maybeMarkCandidate ( t, n ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^countCallCandidates ( t, varNode ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^maybeMarkCandidate ( key, t ) ;countCallCandidates ( t, n ) ;^367^^^^^364^368^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( NodeUtil.isFunctionDeclaration ( varNode )  )  {^373^^^^^358^388^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == NAME )  {^373^^^^^358^388^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P6_Replace_Expression]^if  ( varNode.getType() == VAR )  {^373^^^^^358^388^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isExpressionNode ( n )  )  {^373^^^^^358^388^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  == Token.NAME || RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  > Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  != Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^} else if  ( propNode.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.NAME && name.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P6_Replace_Expression]^} else if  ( parent.getType (  )  == Token.NAME ) {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P6_Replace_Expression]^} else if  (  RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P6_Replace_Expression]^} else if  ( parent.getType (  )  == NAME )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P6_Replace_Expression]^} else if  ( varNode.getType() == VAR )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P6_Replace_Expression]^} else {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^} else if  ( parent.removeChild (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.removeChild (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent .getParent (  )   )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^}  if  (  RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^if  ( varNode.getType (  )  <= Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( varNode.removeChild (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( propNode.getType (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( firstArg.getType (  )  != Token.STRING )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( propNode.getType (  )  == Token.STRING )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P15_Unwrap_Block]^varNode.removeChild(parent); if (!(varNode.hasChildren())) {    varNode.detachFromParent();}; compiler.reportCodeChange();^386^387^388^389^390^383^393^if  ( varNode.getType (  )  == Token.VAR )  { varNode.removeChild ( parent ) ; if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P16_Remove_Block]^^386^387^388^389^390^383^393^if  ( varNode.getType (  )  == Token.VAR )  { varNode.removeChild ( parent ) ; if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( !varNode.removeChild (  )  )  {^388^^^^^383^393^if  ( !varNode.hasChildren (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P15_Unwrap_Block]^varNode.detachFromParent();^388^389^390^^^383^393^if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P16_Remove_Block]^^388^389^390^^^383^393^if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^varNode.removeChild (  ) ;^389^^^^^383^393^varNode.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^389^^^^^383^393^varNode.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^parent.detachFromParent (  ) ;varNode.detachFromParent (  ) ;^389^^^^^383^393^varNode.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^Node varNode = parent.getParent (  ) ;varNode.detachFromParent (  ) ;^389^^^^^383^393^varNode.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^varNode.removeChild ( parent ) ;varNode.detachFromParent (  ) ;^389^^^^^383^393^varNode.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^varNode.removeChild ( n ) ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^varNode .getLastChild (  )  ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^varNode.detachFromParent (  ) ;varNode.removeChild ( parent ) ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;varNode.removeChild ( parent ) ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^callNodeToParentMap.put ( n, parent ) ;varNode.removeChild ( parent ) ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( !varNode .getLastChild (  )   )  {^388^^^^^383^393^if  ( !varNode.hasChildren (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^varNode .getParent (  )  ;^389^^^^^383^393^varNode.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^391^^^^^383^393^compiler.reportCodeChange (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^Node varNode = n.getParent (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^Node varNode = parent.removeChild (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^Node varNode = propNode.getParent (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^Node varNode = parent .getNext (  )  ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^varNode.detachFromParent (  ) ;Node varNode = parent.getParent (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( varNode .getString (  )   == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( propNode.removeChild (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^varNode.removeChild ( propNode ) ;^387^^^^^383^393^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^if  ( varNode.getType (  )  >= Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( varNode.removeChild (  )  == Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( firstArg.getType (  )  != Token.STRING )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( propNode.getType (  )  == Token.STRING )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P15_Unwrap_Block]^varNode.removeChild(parent); if (!(varNode.hasChildren())) {    varNode.detachFromParent();}; compiler.reportCodeChange();^386^387^388^389^390^371^401^if  ( varNode.getType (  )  == Token.VAR )  { varNode.removeChild ( parent ) ; if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P16_Remove_Block]^^386^387^388^389^390^371^401^if  ( varNode.getType (  )  == Token.VAR )  { varNode.removeChild ( parent ) ; if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( !varNode.removeChild (  )  )  {^388^^^^^373^403^if  ( !varNode.hasChildren (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P15_Unwrap_Block]^varNode.detachFromParent();^388^389^390^^^373^403^if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P16_Remove_Block]^^388^389^390^^^373^403^if  ( !varNode.hasChildren (  )  )  { varNode.detachFromParent (  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^varNode.removeChild (  ) ;^389^^^^^374^404^varNode.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^389^^^^^374^404^varNode.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^parent.detachFromParent (  ) ;varNode.detachFromParent (  ) ;^389^^^^^374^404^varNode.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^Node varNode = parent.getParent (  ) ;varNode.detachFromParent (  ) ;^389^^^^^374^404^varNode.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^varNode.removeChild ( parent ) ;varNode.detachFromParent (  ) ;^389^^^^^374^404^varNode.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^varNode.removeChild ( n ) ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^varNode.detachFromParent (  ) ;varNode.removeChild ( parent ) ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;varNode.removeChild ( parent ) ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^callNodeToParentMap.put ( n, parent ) ;varNode.removeChild ( parent ) ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( !varNode .getLastChild (  )   )  {^388^^^^^373^403^if  ( !varNode.hasChildren (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^391^^^^^376^406^compiler.reportCodeChange (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^Node varNode = propNode.getParent (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^Node varNode = parent.removeChild (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^Node varNode = parent .getNext (  )  ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^Node varNode = propNode .getNext (  )  ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^} else if  ( varNode.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^RENAME_PROPERTY_FUNCTION_NAME.equals ( n.getString (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.removeChild (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent .getParent (  )   )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^RENAME_PROPERTY_FUNCTION_NAME.equals ( varNode.getString (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^384^385^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  { Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^RENAME_PROPERTY_FUNCTION_NAME.equals ( propNode.getString (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^Node varNode = n.getParent (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^Node varNode = varNode.removeChild (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^varNode.detachFromParent (  ) ;Node varNode = parent.getParent (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( propNode.getType (  )  == Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^varNode.removeChild ( propNode ) ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( varNodeame )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( name.equals ( RENAME_PROPERTY_FUNCTION_NAME )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( n.equals ( RENAME_PROPERTY_FUNCTION_NAMEame )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P15_Unwrap_Block]^if (com.google.javascript.jscomp.NodeUtil.isExpressionNode(parent)) {    parent.detachFromParent();}else {    parent.removeChild(n);}; compiler.reportCodeChange();^375^376^377^378^379^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  { if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.detachFromParent (  ) ; } else { parent.removeChild ( n ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P16_Remove_Block]^^375^376^377^378^379^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  { if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.detachFromParent (  ) ; } else { parent.removeChild ( n ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( propNode )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( varNode )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P15_Unwrap_Block]^parent.detachFromParent();^376^377^378^379^380^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.detachFromParent (  ) ; } else { parent.removeChild ( n ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P16_Remove_Block]^^376^377^378^379^380^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  { parent.detachFromParent (  ) ; } else { parent.removeChild ( n ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^parent.removeChild ( propNode ) ;^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^parent.removeChild ( varNode ) ;^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^varNode.removeChild ( parent ) ;parent.removeChild ( n ) ;^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^parent.removeChild (  ) ;^377^^^^^362^392^parent.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^parent .getParent (  )  ;^377^^^^^362^392^parent.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^377^^^^^362^392^parent.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^varNode.detachFromParent (  ) ;parent.detachFromParent (  ) ;^377^^^^^362^392^parent.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionDeclaration ( child )   )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( NodeUtil.isFunctionDeclaration ( propNode )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^parent .getLastChild (  )  ;^379^^^^^364^394^parent.removeChild ( n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^379^^^^^364^394^parent.removeChild ( n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^varNode.removeChild ( parent ) ;parent.removeChild ( n ) ;^379^^^^^364^394^parent.removeChild ( n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^381^^^^^366^396^compiler.reportCodeChange (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P1_Replace_Type]^char name = n.getFirstChild (  ) .getchar (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^String propNodeame = n.getFirstChild (  ) .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^String name = n.getFirstChild (  ) .split (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^String name = n.getFirstChild (  )  .getParent (  )  ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^String name = n.removeChild (  ) .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^String varNodeame = n.getFirstChild (  ) .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^String varNodeame = n.getFirstChild (  ) .split (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( NodeUtil.isFunctionDeclaration ( varNode )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^parent.removeChild ( varNode ) ;^379^^^^^364^394^parent.removeChild ( n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( name.equals ( name )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( n )  )  {^375^^^^^360^390^if  ( RENAME_PROPERTY_FUNCTION_NAME.equals ( name )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionDeclaration ( n )   )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( n )  )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^parent .getLastChild (  )  ;^379^^^^^376^380^parent.removeChild ( n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  <= Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^} else if  ( parent .getString (  )   == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^}  if  ( parent.getType (  )  == Token.NAME ) {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^if  ( varNode.getType (  )  != Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^Node varNode = varNode.getParent (  ) ;^385^^^^^383^393^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( n.removeChild (  )  == Token.VAR )  {^386^^^^^383^393^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^if  ( varNode.getType (  )  != Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( varNode.getType (  )  == Token.null )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^varNode .getLastChild (  )  ;^387^^^^^372^402^varNode.removeChild ( parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^varNode .getParent (  )  ;^389^^^^^374^404^varNode.detachFromParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^for  ( Node key = n.getFirstChild (  ) ; key == null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^for  ( Node key = varNode.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^for  ( Node parent = n.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^for  ( Node n = key.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^for  ( Node key = n.removeChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P2_Replace_Operator]^if  ( key.getType (  )  != Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( key.removeChild (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( propNode.getType (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( child != null && child.getType (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( firstArg.getType (  )  != Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P9_Replace_Statement]^if  ( varNode.getType (  )  == Token.VAR )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P13_Insert_Block]^if  ( ! ( key.isQuotedString (  )  )  )  {     maybeMarkCandidate ( key, t ) ; }else {     quotedNames.add ( key.getString (  )  ) ; }^340^^^^^336^349^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( !key.removeChild (  )  )  {^341^^^^^336^349^if  ( !key.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     if  ( ! ( key.isQuotedString (  )  )  )  {         maybeMarkCandidate ( key, t ) ;     }else {         quotedNames.add ( key.getString (  )  ) ;     } }^341^^^^^336^349^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^quotedNames.add ( parent.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^quotedNames.contains ( key.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^quotedNames.add ( key.removeChild (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^quotedNames.add ( child.getString (  )  ) ;quotedNames.add ( key.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^quotedNames.add ( propNode.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^maybeMarkCandidate ( parent, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^maybeMarkCandidate (  t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^maybeMarkCandidate ( key ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^maybeMarkCandidate ( t, key ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^countCallCandidates ( key, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^countCallCandidates ( parent, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^maybeMarkCandidate ( propNode, t ) ;maybeMarkCandidate ( key, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^countCallCandidates ( t, n ) ;maybeMarkCandidate ( key, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( !key .getString (  )   )  {^341^^^^^336^349^if  ( !key.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^maybeMarkCandidate ( varNode, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^quotedNames.add ( varNode.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^quotedNames.add ( varNode.removeChild (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^maybeMarkCandidate ( propNode, t ) ;^342^^^^^336^349^maybeMarkCandidate ( key, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( key .getString (  )   == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( varNode.getType (  )  == Token.STRING )  {^340^^^^^336^349^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^quotedNames .contains ( 2 )  ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^quotedNames.add ( key .getParent (  )   ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^quotedNames.contains ( varNode.getString (  )  ) ;^346^^^^^336^349^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^key = parent.getNext (  ) .getNext (  )  )  {^337^^^^^322^352^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^key = key.split (  ) .getNext (  )  )  {^337^^^^^322^352^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^key = key.removeChild (  ) .getNext (  )  )  {^337^^^^^322^352^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^key =  varNode.getNext (  ) .getNext (  )  )  {^337^^^^^322^352^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^Node propNode = varNode.getFirstChild (  ) .getNext (  ) ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^Node propNode = n.getFirstChild (  ) .split (  ) ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^Node propNode = n.removeChild (  ) .getNext (  ) ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^Node propNode = parent.getFirstChild (  ) .getNext (  ) ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^Node propNode = n.getFirstChild (  ) .getNext (  ) ;for  ( Node key = n.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^Node fnName = n.getFirstChild (  ) ;for  ( Node key = n.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^String name = n.getFirstChild (  ) .getString (  ) ;for  ( Node key = n.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^Node child = varNode.getLastChild (  ) ;^355^^^^^340^370^Node child = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^Node child = n.removeChild (  ) ;^355^^^^^340^370^Node child = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^Node propNode = n.getFirstChild (  ) .getNext (  ) ;Node child = n.getLastChild (  ) ;^355^^^^^340^370^Node child = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^Node fnName = n.getFirstChild (  ) ;Node child = n.getLastChild (  ) ;^355^^^^^340^370^Node child = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^Node fnName = n.removeChild (  ) ;^363^^^^^348^378^Node fnName = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^Node fnName = n .getLastChild (  )  ;^363^^^^^348^378^Node fnName = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^Node fnName = propNode.getFirstChild (  ) ;^363^^^^^348^378^Node fnName = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^String name = n .getLastChild (  )  .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^String parentame = n.getFirstChild (  ) .getString (  ) ;^374^^^^^359^389^String name = n.getFirstChild (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^Node varNode = propNode.removeChild (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^switch  ( varNode.getType (  )  )  {^326^^^^^311^341^switch  ( n.getType (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^switch  ( n.removeChild (  )  )  {^326^^^^^311^341^switch  ( n.getType (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^326^^^^^311^341^switch  ( n.getType (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^326^327^328^^^311^341^switch  ( n.getType (  )  )  { case Token.GETPROP: Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^Node propNode = n .getLastChild (  )  .getNext (  ) ;^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^328^^^^^313^343^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^329^^^^^314^344^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^maybeMarkCandidate ( n, t ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^countCallCandidates ( varNode, t ) ;^330^^^^^315^345^maybeMarkCandidate ( propNode, t ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^for  ( Node key = propNode.getFirstChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^for  ( Node key = n .getLastChild (  )  ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^for  ( Node key = propNode.removeChild (  ) ; key != null;^336^^^^^321^351^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^quotedNames.add ( key .getParent (  )   ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^quotedNames.add ( varNode.getString (  )  ) ;^346^^^^^331^361^quotedNames.add ( key.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^Node child = propNode.getLastChild (  ) ;^355^^^^^340^370^Node child = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^Node child = varNode .getFirstChild (  )  ;^355^^^^^340^370^Node child = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^355^^^^^340^370^Node child = n.getLastChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^if  ( parent != null && child.getType (  )  == Token.STRING )  {^356^^^^^341^371^if  ( child != null && child.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^quotedNames.add ( child .getParent (  )   ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^quotedNames.add ( varNode.removeChild (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^quotedNames.add ( parent.removeChild (  )  ) ;^357^^^^^342^372^quotedNames.add ( child.getString (  )  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^Node fnName = varNode.getFirstChild (  ) ;^363^^^^^348^378^Node fnName = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^Node fnName = parent.getFirstChild (  ) ;^363^^^^^348^378^Node fnName = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^363^^^^^348^378^Node fnName = n.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^364^365^^^^349^379^if  ( fnName.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.removeChild (  )  )  )  {^365^^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^365^366^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  { callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^RENAME_PROPERTY_FUNCTION_NAME.equals ( varNode.getString (  )  )  )  {^365^^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName .getParent (  )   )  )  {^365^^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^365^^^^^350^380^RENAME_PROPERTY_FUNCTION_NAME.equals ( fnName.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^callNodeToParentMap.put ( varNode, parent ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^callNodeToParentMap.put ( n, varNode ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^callNodeToParentMap.put (  parent ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^callNodeToParentMap.put ( n ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^callNodeToParentMap.put ( parent, n ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^varNode.removeChild ( parent ) ;callNodeToParentMap.put ( n, parent ) ;^366^^^^^351^381^callNodeToParentMap.put ( n, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^countCallCandidates ( t, parent ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^countCallCandidates (  n ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^countCallCandidates ( t ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^countCallCandidates ( n, t ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^maybeMarkCandidate ( t, n ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P14_Delete_Statement]^^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P11_Insert_Donor_Statement]^maybeMarkCandidate ( key, t ) ;countCallCandidates ( t, n ) ;^367^^^^^352^382^countCallCandidates ( t, n ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^373^^^^^358^388^if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionDeclaration ( fnName )   )  {^376^^^^^361^391^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^} else if  ( varNode .getString (  )   == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^383^384^^^^368^398^} else if  ( parent.getType (  )  == Token.NAME && RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P8_Replace_Mix]^RENAME_PROPERTY_FUNCTION_NAME.equals ( varNode.removeChild (  )  )  )  {^384^^^^^369^399^RENAME_PROPERTY_FUNCTION_NAME.equals ( parent.getString (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P5_Replace_Variable]^Node varNode = varNode.getParent (  ) ;^385^^^^^370^400^Node varNode = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P7_Replace_Invocation]^if  ( varNode .getString (  )   == Token.VAR )  {^386^^^^^371^401^if  ( varNode.getType (  )  == Token.VAR )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  child  fnName  key  n  parent  propNode  varNode  String  name  
[P1_Replace_Type]^char name = n.getchar (  ) ;^406^^^^^405^411^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P7_Replace_Invocation]^String name = n.removeChild (  ) ;^406^^^^^405^411^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P8_Replace_Mix]^String name = n .getParent (  )  ;^406^^^^^405^411^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node fnName = n.getFirstChild (  ) ;String name = n.getString (  ) ;^406^^^^^405^411^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P11_Insert_Donor_Statement]^String name = n.getFirstChild (  ) .getString (  ) ;String name = n.getString (  ) ;^406^^^^^405^411^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P14_Delete_Statement]^^406^^^^^405^411^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P11_Insert_Donor_Statement]^quotedNames.add ( key.getString (  )  ) ;String name = n.getString (  ) ;^406^^^^^405^411^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P11_Insert_Donor_Statement]^quotedNames.add ( child.getString (  )  ) ;String name = n.getString (  ) ;^406^^^^^405^411^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P7_Replace_Invocation]^if  ( !externedNames.add ( name )  )  {^407^^^^^405^411^if  ( !externedNames.contains ( name )  )  {^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P15_Unwrap_Block]^stringNodesToRename.add(n); countPropertyOccurrence(name, t);^407^408^409^410^^405^411^if  ( !externedNames.contains ( name )  )  { stringNodesToRename.add ( n ) ; countPropertyOccurrence ( name, t ) ; }^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P16_Remove_Block]^^407^408^409^410^^405^411^if  ( !externedNames.contains ( name )  )  { stringNodesToRename.add ( n ) ; countPropertyOccurrence ( name, t ) ; }^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P13_Insert_Block]^if  ( ! ( externedNames.contains ( name )  )  )  {     countPropertyOccurrence ( name, t ) ; }^407^^^^^405^411^[Delete]^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P14_Delete_Statement]^^408^^^^^405^411^stringNodesToRename.add ( n ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P5_Replace_Variable]^countPropertyOccurrence (  t ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P5_Replace_Variable]^countPropertyOccurrence ( name ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P5_Replace_Variable]^countPropertyOccurrence ( t, name ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P7_Replace_Invocation]^maybeMarkCandidate ( name, t ) ;^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P14_Delete_Statement]^^409^^^^^405^411^countPropertyOccurrence ( name, t ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P14_Delete_Statement]^^408^409^^^^405^411^stringNodesToRename.add ( n ) ; countPropertyOccurrence ( name, t ) ;^[CLASS] ProcessProperties  [METHOD] maybeMarkCandidate [RETURN_TYPE] void   Node n NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  Node  n  String  name  
[P7_Replace_Invocation]^Node firstArg = callNode.getFirstChild (  ) .split (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P7_Replace_Invocation]^Node firstArg = callNode.removeChild (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P11_Insert_Donor_Statement]^Node propNode = n.getFirstChild (  ) .getNext (  ) ;Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P11_Insert_Donor_Statement]^Node fnName = n.getFirstChild (  ) ;Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P11_Insert_Donor_Statement]^String name = n.getFirstChild (  ) .getString (  ) ;Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^Node firstArg = firstArg.getFirstChild (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P14_Delete_Statement]^^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P8_Replace_Mix]^Node firstArg = firstArg.removeChild (  ) .getNext (  ) ;^421^^^^^420^436^Node firstArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P2_Replace_Operator]^if  ( firstArg.getType (  )  == Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P7_Replace_Invocation]^if  ( firstArg.removeChild (  )  != Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P9_Replace_Statement]^if  ( child != null && child.getType (  )  == Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P9_Replace_Statement]^if  ( propNode.getType (  )  == Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P9_Replace_Statement]^if  ( varNode.getType (  )  == Token.VAR )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P15_Unwrap_Block]^t.report(callNode, com.google.javascript.jscomp.RenameProperties.BAD_CALL); return ;^422^423^424^425^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  { t.report ( callNode, BAD_CALL ) ; return; }^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P16_Remove_Block]^^422^423^424^425^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  { t.report ( callNode, BAD_CALL ) ; return; }^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P13_Insert_Block]^if  ( ! ( isJSIdentifier ( name )  )  )  {     t.report ( callNode, BAD_ARG, name ) ;     continue; }^422^^^^^420^436^[Delete]^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P13_Insert_Block]^if  (  ( propNode.getType (  )  )  ==  ( STRING )  )  {     maybeMarkCandidate ( propNode, t ) ; }^422^^^^^420^436^[Delete]^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^t.report ( callNode, 4 ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^t.report (  BAD_CALL ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^t.report ( callNode ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^t.report ( BAD_CALL, callNode ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P8_Replace_Mix]^t.report ( firstArg, BAD_CALL ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P14_Delete_Statement]^^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P11_Insert_Donor_Statement]^t.report ( callNode, BAD_ARG, name ) ;t.report ( callNode, BAD_CALL ) ;^423^^^^^420^436^t.report ( callNode, BAD_CALL ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^if  ( callNode.getType (  )  != Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P7_Replace_Invocation]^if  ( firstArg .getString (  )   != Token.STRING )  {^422^^^^^420^436^if  ( firstArg.getType (  )  != Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P14_Delete_Statement]^^423^424^^^^420^436^t.report ( callNode, BAD_CALL ) ; return;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P15_Unwrap_Block]^t.report(callNode, com.google.javascript.jscomp.RenameProperties.BAD_ARG, name); continue;^428^429^430^431^^420^436^if  ( !TokenStream.isJSIdentifier ( name )  )  { t.report ( callNode, BAD_ARG, name ) ; continue; }^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P16_Remove_Block]^^428^429^430^431^^420^436^if  ( !TokenStream.isJSIdentifier ( name )  )  { t.report ( callNode, BAD_ARG, name ) ; continue; }^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P13_Insert_Block]^if  (  ( firstArg.getType (  )  )  !=  ( STRING )  )  {     t.report ( callNode, BAD_CALL ) ;     return ; }^428^^^^^420^436^[Delete]^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^t.report ( firstArg, BAD_ARG, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^t.report ( callNode, this, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^t.report (  BAD_ARG, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^t.report ( callNode, BAD_ARG ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^t.report ( callNode,  name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^t.report ( BAD_ARG, callNode, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^t.report ( callNode, name, BAD_ARG ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P14_Delete_Statement]^^429^430^^^^420^436^t.report ( callNode, BAD_ARG, name ) ; continue;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P11_Insert_Donor_Statement]^t.report ( callNode, BAD_CALL ) ;t.report ( callNode, BAD_ARG, name ) ;^429^^^^^420^436^t.report ( callNode, BAD_ARG, name ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P7_Replace_Invocation]^if  ( !externedNames.add ( name )  )  {^432^^^^^420^436^if  ( !externedNames.contains ( name )  )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P15_Unwrap_Block]^countPropertyOccurrence(name, t);^432^433^434^^^420^436^if  ( !externedNames.contains ( name )  )  { countPropertyOccurrence ( name, t ) ; }^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P16_Remove_Block]^^432^433^434^^^420^436^if  ( !externedNames.contains ( name )  )  { countPropertyOccurrence ( name, t ) ; }^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P13_Insert_Block]^if  ( ! ( externedNames.contains ( name )  )  )  {     stringNodesToRename.add ( n ) ;     countPropertyOccurrence ( name, t ) ; }^432^^^^^420^436^[Delete]^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^countPropertyOccurrence (  t ) ;^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^countPropertyOccurrence ( name ) ;^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^countPropertyOccurrence ( t, name ) ;^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P7_Replace_Invocation]^maybeMarkCandidate ( name, t ) ;^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P14_Delete_Statement]^^433^^^^^420^436^countPropertyOccurrence ( name, t ) ;^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P1_Replace_Type]^for  ( char name : firstArg.getchar (  ) .split ( "[.]" )  )  {^427^^^^^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^for  ( String name : callNode.getString (  ) .split ( "[.]" )  )  {^427^^^^^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P7_Replace_Invocation]^for  ( String name : firstArg.getString (  )  .getString (  )   )  {^427^^^^^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P7_Replace_Invocation]^for  ( String name : firstArg.removeChild (  ) .split ( "[.]" )  )  {^427^^^^^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P14_Delete_Statement]^^427^428^429^430^431^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  { if  ( !TokenStream.isJSIdentifier ( name )  )  { t.report ( callNode, BAD_ARG, name ) ; continue; }^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P8_Replace_Mix]^for  ( String name : callNode.removeChild (  ) .split ( "[.]" )  )  {^427^^^^^420^436^for  ( String name : firstArg.getString (  ) .split ( "[.]" )  )  {^[CLASS] ProcessProperties  [METHOD] countCallCandidates [RETURN_TYPE] void   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  firstArg  String  name  
[P5_Replace_Variable]^Property prop = name.get ( propertyMap ) ;^445^^^^^444^451^Property prop = propertyMap.get ( name ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P14_Delete_Statement]^^445^^^^^444^451^Property prop = propertyMap.get ( name ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P2_Replace_Operator]^if  ( prop != null )  {^446^^^^^444^451^if  ( prop == null )  {^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P8_Replace_Mix]^if  ( prop == this )  {^446^^^^^444^451^if  ( prop == null )  {^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P15_Unwrap_Block]^prop = new com.google.javascript.jscomp.RenameProperties.Property(name, t.getInput()); propertyMap.put(name, prop);^446^447^448^449^^444^451^if  ( prop == null )  { prop = new Property ( name, t.getInput (  )  ) ; propertyMap.put ( name, prop ) ; }^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P16_Remove_Block]^^446^447^448^449^^444^451^if  ( prop == null )  { prop = new Property ( name, t.getInput (  )  ) ; propertyMap.put ( name, prop ) ; }^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P4_Replace_Constructor]^prop = new Property (  t.getInput (  )  ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P4_Replace_Constructor]^prop = new Property ( name.getInput (  )  ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P5_Replace_Variable]^prop = new Property ( t, name.getInput (  )  ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P8_Replace_Mix]^prop =  new Property ( null, t.getInput (  )  ) ;^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P13_Insert_Block]^if  ( prop == null )  {     prop = new Property ( name, t.getInput (  )  ) ;     propertyMap.put ( name, prop ) ; }^447^^^^^444^451^[Delete]^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P14_Delete_Statement]^^447^448^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ; propertyMap.put ( name, prop ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P5_Replace_Variable]^propertyMap.put (  prop ) ;^448^^^^^444^451^propertyMap.put ( name, prop ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P5_Replace_Variable]^propertyMap.put ( name ) ;^448^^^^^444^451^propertyMap.put ( name, prop ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P14_Delete_Statement]^^448^^^^^444^451^propertyMap.put ( name, prop ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P14_Delete_Statement]^^447^^^^^444^451^prop = new Property ( name, t.getInput (  )  ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P5_Replace_Variable]^propertyMap.put ( prop, name ) ;^448^^^^^444^451^propertyMap.put ( name, prop ) ;^[CLASS] ProcessProperties  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P1_Replace_Type]^final char oldName;^460^^^^^455^465^final String oldName;^[CLASS] Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P1_Replace_Type]^char newName;^462^^^^^457^467^String newName;^[CLASS] Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P1_Replace_Type]^short  numOccurrences;^463^^^^^458^468^int numOccurrences;^[CLASS] Property  [METHOD] countPropertyOccurrence [RETURN_TYPE] void   String name NodeTraversal t [VARIABLES] boolean  NodeTraversal  t  String  name  Property  prop  
[P5_Replace_Variable]^this.oldName = oldName;^466^^^^^465^468^this.oldName = name;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] CompilerInput)   String name CompilerInput input [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  numOccurrences  
[P8_Replace_Mix]^this.input =  null;^467^^^^^465^468^this.input = input;^[CLASS] Property  [METHOD] <init> [RETURN_TYPE] CompilerInput)   String name CompilerInput input [VARIABLES] CompilerInput  input  String  name  newName  oldName  boolean  int  numOccurrences  
