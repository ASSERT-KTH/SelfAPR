[P8_Replace_Mix]^private  EdgeCallback<N, E> callback;^43^^^^^38^48^private final EdgeCallback<N, E> callback;^[CLASS] FixedPointGraphTraversal   [VARIABLES] 
[P1_Replace_Type]^public static final char NON_HALTING_ERROR_MSG = "Fixed point computation not halting";^45^46^^^^45^46^public static final String NON_HALTING_ERROR_MSG = "Fixed point computation not halting";^[CLASS] FixedPointGraphTraversal   [VARIABLES] 
[P3_Replace_Literal]^public static final String NON_HALTING_ERROR_MSG = "putation not haltinixed point computation not halting";^45^46^^^^45^46^public static final String NON_HALTING_ERROR_MSG = "Fixed point computation not halting";^[CLASS] FixedPointGraphTraversal   [VARIABLES] 
[P8_Replace_Mix]^this.callback =  null;^54^^^^^53^55^this.callback = callback;^[CLASS] FixedPointGraphTraversal  [METHOD] <init> [RETURN_TYPE] FixedPointGraphTraversal$EdgeCallback)   EdgeCallback<N, E> callback [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  boolean  
[P5_Replace_Variable]^return new FixedPointGraphTraversal<NODE, EDGE> ( this ) ;^62^^^^^60^63^return new FixedPointGraphTraversal<NODE, EDGE> ( callback ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] newTraversal [RETURN_TYPE] <NODE,EDGE>   EdgeCallback<NODE, EDGE> callback [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  boolean  
[P7_Replace_Invocation]^Set<N> nodes = Sets.newLinkedHashSet (  ) ;^70^^^^^69^75^Set<N> nodes = Sets.newHashSet (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P11_Insert_Donor_Statement]^Set<N> entrySet = Sets.newHashSet (  ) ;Set<N> nodes = Sets.newHashSet (  ) ;^70^^^^^69^75^Set<N> nodes = Sets.newHashSet (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P14_Delete_Statement]^^70^^^^^69^75^Set<N> nodes = Sets.newHashSet (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P11_Insert_Donor_Statement]^Sets.newLinkedHashSet (  ) ;Set<N> nodes = Sets.newHashSet (  ) ;^70^^^^^69^75^Set<N> nodes = Sets.newHashSet (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P7_Replace_Invocation]^for  ( DiGraphNode<N, E> node : graph.getDirectedGraphNode (  )  )  {^71^^^^^69^75^for  ( DiGraphNode<N, E> node : graph.getDirectedGraphNodes (  )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P14_Delete_Statement]^^71^72^73^^^69^75^for  ( DiGraphNode<N, E> node : graph.getDirectedGraphNodes (  )  )  { nodes.add ( node.getValue (  )  ) ; }^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P7_Replace_Invocation]^nodes.add ( node .getOutEdges (  )   ) ;^72^^^^^69^75^nodes.add ( node.getValue (  )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P14_Delete_Statement]^^72^^^^^69^75^nodes.add ( node.getValue (  )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P11_Insert_Donor_Statement]^workSet.add ( edge.getDestination (  )  ) ;nodes.add ( node.getValue (  )  ) ;^72^^^^^69^75^nodes.add ( node.getValue (  )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P11_Insert_Donor_Statement]^N sourceValue = source.getValue (  ) ;nodes.add ( node.getValue (  )  ) ;^72^^^^^69^75^nodes.add ( node.getValue (  )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P5_Replace_Variable]^nodes.add ( this.getValue (  )  ) ;^72^^^^^69^75^nodes.add ( node.getValue (  )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P5_Replace_Variable]^computeFixedPoint ( 3, nodes ) ;^74^^^^^69^75^computeFixedPoint ( graph, nodes ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P5_Replace_Variable]^computeFixedPoint (  nodes ) ;^74^^^^^69^75^computeFixedPoint ( graph, nodes ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P5_Replace_Variable]^computeFixedPoint ( graph ) ;^74^^^^^69^75^computeFixedPoint ( graph, nodes ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P5_Replace_Variable]^computeFixedPoint ( nodes, graph ) ;^74^^^^^69^75^computeFixedPoint ( graph, nodes ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P14_Delete_Statement]^^74^^^^^69^75^computeFixedPoint ( graph, nodes ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P11_Insert_Donor_Statement]^computeFixedPoint ( graph, entrySet ) ;computeFixedPoint ( graph, nodes ) ;^74^^^^^69^75^computeFixedPoint ( graph, nodes ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph [VARIABLES] EdgeCallback  callback  DiGraphNode  node  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  nodes  boolean  
[P7_Replace_Invocation]^Set<N> entrySet = Sets.newLinkedHashSet (  ) ;^83^^^^^82^86^Set<N> entrySet = Sets.newHashSet (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[P11_Insert_Donor_Statement]^LinkedHashSet<DiGraphNode<N, E>> workSet = Sets.newLinkedHashSet (  ) ;Set<N> entrySet = Sets.newHashSet (  ) ;^83^^^^^82^86^Set<N> entrySet = Sets.newHashSet (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[P11_Insert_Donor_Statement]^Set<N> nodes = Sets.newHashSet (  ) ;Set<N> entrySet = Sets.newHashSet (  ) ;^83^^^^^82^86^Set<N> entrySet = Sets.newHashSet (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[P14_Delete_Statement]^^83^84^^^^82^86^Set<N> entrySet = Sets.newHashSet (  ) ; entrySet.add ( entry ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[P14_Delete_Statement]^^84^^^^^82^86^entrySet.add ( entry ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[P5_Replace_Variable]^computeFixedPoint (  entrySet ) ;^85^^^^^82^86^computeFixedPoint ( graph, entrySet ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[P5_Replace_Variable]^computeFixedPoint ( graph ) ;^85^^^^^82^86^computeFixedPoint ( graph, entrySet ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[P5_Replace_Variable]^computeFixedPoint ( entrySet, graph ) ;^85^^^^^82^86^computeFixedPoint ( graph, entrySet ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[P14_Delete_Statement]^^85^^^^^82^86^computeFixedPoint ( graph, entrySet ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[P11_Insert_Donor_Statement]^computeFixedPoint ( graph, nodes ) ;computeFixedPoint ( graph, entrySet ) ;^85^^^^^82^86^computeFixedPoint ( graph, entrySet ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph N entry [VARIABLES] EdgeCallback  callback  String  NON_HALTING_ERROR_MSG  DiGraph  graph  Set  entrySet  boolean  N  entry  
[P1_Replace_Type]^short  cycleCount = 0;^94^^^^^79^109^int cycleCount = 0;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P3_Replace_Literal]^int cycleCount = cycleCount;^94^^^^^79^109^int cycleCount = 0;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P1_Replace_Type]^short  nodeCount = graph.getNodes (  ) .size (  ) ;^95^^^^^80^110^long nodeCount = graph.getNodes (  ) .size (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P3_Replace_Literal]^long nodeCount = graph.getNodes (  ) .size() - 5 ;^95^^^^^80^110^long nodeCount = graph.getNodes (  ) .size (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P7_Replace_Invocation]^long nodeCount = graph.getNodes (  )  .getValue (  )  ;^95^^^^^80^110^long nodeCount = graph.getNodes (  ) .size (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P7_Replace_Invocation]^long nodeCount = graph.getDirectedGraphNode (  ) .size (  ) ;^95^^^^^80^110^long nodeCount = graph.getNodes (  ) .size (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P7_Replace_Invocation]^long nodeCount = graph .getDirectedGraphNodes (  )  .size (  ) ;^95^^^^^80^110^long nodeCount = graph.getNodes (  ) .size (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P3_Replace_Literal]^long nodeCount = graph.getNodes (  ) .size() + 2 ;^95^^^^^80^110^long nodeCount = graph.getNodes (  ) .size (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P14_Delete_Statement]^^95^^^^^80^110^long nodeCount = graph.getNodes (  ) .size (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P3_Replace_Literal]^long nodeCount = graph.getNodes (  ) .size() + 7 ;^95^^^^^80^110^long nodeCount = graph.getNodes (  ) .size (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P1_Replace_Type]^short  maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^99^^^^^84^114^long maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P2_Replace_Operator]^long + maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^99^^^^^84^114^long maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P2_Replace_Operator]^long maxIterations = Math.max ( nodeCount - nodeCount * nodeCount, 100 ) ;^99^^^^^84^114^long maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P3_Replace_Literal]^long maxIterations = Math.max ( nodeCount * nodeCount * nodeCount,  ) ;^99^^^^^84^114^long maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P2_Replace_Operator]^long maxIterations = Math.max ( nodeCount / nodeCount * nodeCount, 100 ) ;^99^^^^^84^114^long maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P3_Replace_Literal]^long maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 97 ) ;^99^^^^^84^114^long maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^long maxIterations = Math.max ( maxIterations * nodeCount * nodeCount, 100 ) ;^99^^^^^84^114^long maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P14_Delete_Statement]^^99^^^^^84^114^long maxIterations = Math.max ( nodeCount * nodeCount * nodeCount, 100 ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P7_Replace_Invocation]^LinkedHashSet<DiGraphNode<N, E>> workSet = Sets.newHashSet (  ) ;^102^103^^^^87^117^LinkedHashSet<DiGraphNode<N, E>> workSet = Sets.newLinkedHashSet (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P11_Insert_Donor_Statement]^Set<N> entrySet = Sets.newHashSet (  ) ;LinkedHashSet<DiGraphNode<N, E>> workSet = Sets.newLinkedHashSet (  ) ;^102^103^^^^87^117^LinkedHashSet<DiGraphNode<N, E>> workSet = Sets.newLinkedHashSet (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P7_Replace_Invocation]^Sets.newHashSet (  ) ;^103^^^^^88^118^Sets.newLinkedHashSet (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P14_Delete_Statement]^^103^^^^^88^118^Sets.newLinkedHashSet (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P11_Insert_Donor_Statement]^Set<N> nodes = Sets.newHashSet (  ) ;Sets.newLinkedHashSet (  ) ;^103^^^^^88^118^Sets.newLinkedHashSet (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^workSet.add ( graph.getDirectedGraphNode ( sourceValue )  ) ;^105^^^^^90^120^workSet.add ( graph.getDirectedGraphNode ( n )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^workSet.add ( n.getDirectedGraphNode ( graph )  ) ;^105^^^^^90^120^workSet.add ( graph.getDirectedGraphNode ( n )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P8_Replace_Mix]^workSet.add ( graph .getDirectedGraphNodes (  )   ) ;^105^^^^^90^120^workSet.add ( graph.getDirectedGraphNode ( n )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P14_Delete_Statement]^^105^^^^^90^120^workSet.add ( graph.getDirectedGraphNode ( n )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P11_Insert_Donor_Statement]^workSet.add ( edge.getDestination (  )  ) ;workSet.add ( graph.getDirectedGraphNode ( n )  ) ;^105^^^^^90^120^workSet.add ( graph.getDirectedGraphNode ( n )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^if  ( callback.traverseEdge ( n, edge.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , sourceValue )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^if  ( callback.traverseEdge (  edge.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^if  ( callback.traverseEdge ( sourceValue.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  )  )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^if  ( callback.traverseEdge ( destNode, edge.getValue (  ) , sourceValue )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^if  ( edge.traverseEdge ( sourceValue, callback.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P15_Unwrap_Block]^workSet.add(edge.getDestination());^120^121^122^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  { workSet.add ( edge.getDestination (  )  ) ; }^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P16_Remove_Block]^^120^121^122^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  { workSet.add ( edge.getDestination (  )  ) ; }^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P14_Delete_Statement]^^121^^^^^106^136^workSet.add ( edge.getDestination (  )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P11_Insert_Donor_Statement]^nodes.add ( node.getValue (  )  ) ;workSet.add ( edge.getDestination (  )  ) ;^121^^^^^106^136^workSet.add ( edge.getDestination (  )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P11_Insert_Donor_Statement]^workSet.add ( graph.getDirectedGraphNode ( n )  ) ;workSet.add ( edge.getDestination (  )  ) ;^121^^^^^106^136^workSet.add ( edge.getDestination (  )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P11_Insert_Donor_Statement]^N destNode = edge.getDestination (  ) .getValue (  ) ;workSet.add ( edge.getDestination (  )  ) ;^121^^^^^106^136^workSet.add ( edge.getDestination (  )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P2_Replace_Operator]^for  ( ; !workSet.isEmpty (  )  || cycleCount < maxIterations; cycleCount++ )  {^107^^^^^92^122^for  ( ; !workSet.isEmpty (  )  && cycleCount < maxIterations; cycleCount++ )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P2_Replace_Operator]^for  ( ; !workSet.isEmpty (  )  && cycleCount <= maxIterations; cycleCount++ )  {^107^^^^^92^122^for  ( ; !workSet.isEmpty (  )  && cycleCount < maxIterations; cycleCount++ )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^for  ( ; !workSet.isEmpty (  )  && cycleCount < nodeCount; cycleCount++ )  {^107^^^^^92^122^for  ( ; !workSet.isEmpty (  )  && cycleCount < maxIterations; cycleCount++ )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P7_Replace_Invocation]^for  ( ; !workSet.remove (  )  && cycleCount < maxIterations; cycleCount++ )  {^107^^^^^92^122^for  ( ; !workSet.isEmpty (  )  && cycleCount < maxIterations; cycleCount++ )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , n )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^if  ( callback.traverseEdge ( edge, sourceValue.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^if  ( destNode.traverseEdge ( sourceValue, edge.getValue (  ) , callback )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^workSet.add ( null.getDestination (  )  ) ;^121^^^^^106^136^workSet.add ( edge.getDestination (  )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P7_Replace_Invocation]^workSet.add ( edge .getValue (  )   ) ;^121^^^^^106^136^workSet.add ( edge.getDestination (  )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P7_Replace_Invocation]^DiGraphNode<N, E> source = workSet.remove (  ) .next (  ) ;^112^^^^^97^127^DiGraphNode<N, E> source = workSet.iterator (  ) .next (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P8_Replace_Mix]^DiGraphNode<N, E> source = workSet.iterator (  )  .getValue (  )  ;^112^^^^^97^127^DiGraphNode<N, E> source = workSet.iterator (  ) .next (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P8_Replace_Mix]^N thisValue = source .getOutEdges (  )  ;^113^^^^^98^128^N sourceValue = source.getValue (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P7_Replace_Invocation]^List<DiGraphEdge<N, E>> outEdges = source .getValue (  )  ;^117^^^^^102^132^List<DiGraphEdge<N, E>> outEdges = source.getOutEdges (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P8_Replace_Mix]^List<DiGraphEdge<N, E>> outEdges = null.getOutEdges (  ) ;^117^^^^^102^132^List<DiGraphEdge<N, E>> outEdges = source.getOutEdges (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P8_Replace_Mix]^N destNode = 0.getDestination (  ) .getValue (  ) ;^119^^^^^104^134^N destNode = edge.getDestination (  ) .getValue (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P7_Replace_Invocation]^DiGraphNode<N, E> source = workSet .isEmpty (  )  .next (  ) ;^112^^^^^97^127^DiGraphNode<N, E> source = workSet.iterator (  ) .next (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P14_Delete_Statement]^^112^113^^^^97^127^DiGraphNode<N, E> source = workSet.iterator (  ) .next (  ) ; N sourceValue = source.getValue (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P8_Replace_Mix]^N sourceValue = source .getOutEdges (  )  ;^113^^^^^98^128^N sourceValue = source.getValue (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P14_Delete_Statement]^^113^^^^^98^128^N sourceValue = source.getValue (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P11_Insert_Donor_Statement]^nodes.add ( node.getValue (  )  ) ;N sourceValue = source.getValue (  ) ;^113^^^^^98^128^N sourceValue = source.getValue (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P8_Replace_Mix]^workSet .isEmpty (  )  ;^115^^^^^100^130^workSet.remove ( source ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P14_Delete_Statement]^^115^^^^^100^130^workSet.remove ( source ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P14_Delete_Statement]^^117^^^^^102^132^List<DiGraphEdge<N, E>> outEdges = source.getOutEdges (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P7_Replace_Invocation]^N destNode = edge.getDestination (  )  .getOutEdges (  )  ;^119^^^^^104^134^N destNode = edge.getDestination (  ) .getValue (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P14_Delete_Statement]^^119^^^^^104^134^N destNode = edge.getDestination (  ) .getValue (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P11_Insert_Donor_Statement]^workSet.add ( edge.getDestination (  )  ) ;N destNode = edge.getDestination (  ) .getValue (  ) ;^119^^^^^104^134^N destNode = edge.getDestination (  ) .getValue (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^if  ( sourceValue.traverseEdge ( callback, edge.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P7_Replace_Invocation]^if  ( callback.traverseEdge ( sourceValue, edge .getOutEdges (  )  , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P8_Replace_Mix]^if  ( callback.traverseEdge ( sourceValue, 3.getValue (  ) , destNode )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P13_Insert_Block]^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {     workSet.add ( edge.getDestination (  )  ) ; }^120^^^^^105^135^[Delete]^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P8_Replace_Mix]^N destNode = edge .getValue (  )  .getValue (  ) ;^119^^^^^104^134^N destNode = edge.getDestination (  ) .getValue (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P14_Delete_Statement]^^112^^^^^97^127^DiGraphNode<N, E> source = workSet.iterator (  ) .next (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P8_Replace_Mix]^List<DiGraphEdge<N, E>> outEdges = this .getValue (  )  ;^117^^^^^102^132^List<DiGraphEdge<N, E>> outEdges = source.getOutEdges (  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^if  ( callback.traverseEdge ( sourceValue, destNode.getValue (  ) , edge )  )  {^120^^^^^105^135^if  ( callback.traverseEdge ( sourceValue, edge.getValue (  ) , destNode )  )  {^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P8_Replace_Mix]^workSet.add ( 3.getDestination (  )  ) ;^121^^^^^106^136^workSet.add ( edge.getDestination (  )  ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P2_Replace_Operator]^Preconditions.checkState ( cycleCount < maxIterations, NON_HALTING_ERROR_MSG ) ;^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^Preconditions.checkState ( cycleCount != nodeCount, NON_HALTING_ERROR_MSG ) ;^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^Preconditions.checkState ( cycleCount !=  NON_HALTING_ERROR_MSG ) ;^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^Preconditions.checkState ( cycleCount != maxIterations ) ;^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^Preconditions.checkState ( maxIterations != cycleCount, NON_HALTING_ERROR_MSG ) ;^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P5_Replace_Variable]^Preconditions.checkState ( cycleCount != NON_HALTING_ERROR_MSG, maxIterations ) ;^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
[P14_Delete_Statement]^^126^127^^^^111^141^Preconditions.checkState ( cycleCount != maxIterations, NON_HALTING_ERROR_MSG ) ;^[CLASS] FixedPointGraphTraversal  [METHOD] computeFixedPoint [RETURN_TYPE] void   DiGraph<N, E> graph Set<N> entrySet [VARIABLES] LinkedHashSet  workSet  DiGraphNode  source  Set  entrySet  DiGraphEdge  edge  boolean  EdgeCallback  callback  List  outEdges  String  NON_HALTING_ERROR_MSG  DiGraph  graph  int  cycleCount  long  maxIterations  nodeCount  N  destNode  n  sourceValue  
