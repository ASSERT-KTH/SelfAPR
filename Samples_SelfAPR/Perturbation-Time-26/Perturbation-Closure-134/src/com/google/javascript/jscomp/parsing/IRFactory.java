[P1_Replace_Type]^private static  long  TMP_JSDOC_PROP = Node.LAST_PROP + 1;^85^^^^^80^90^private static int TMP_JSDOC_PROP = Node.LAST_PROP + 1;^[CLASS] IRFactory TransformDispatcher   [VARIABLES] 
[P3_Replace_Literal]^private static int TMP_JSDOC_PROP = Node.LAST_PROP ;^85^^^^^80^90^private static int TMP_JSDOC_PROP = Node.LAST_PROP + 1;^[CLASS] IRFactory TransformDispatcher   [VARIABLES] 
[P5_Replace_Variable]^private static int TMP_JSDOC_PROP = Node.null + 1;^85^^^^^80^90^private static int TMP_JSDOC_PROP = Node.LAST_PROP + 1;^[CLASS] IRFactory TransformDispatcher   [VARIABLES] 
[P8_Replace_Mix]^private static int TMP_JSDOC_PROP = Node.LAST_PROP + 1 / 4;^85^^^^^80^90^private static int TMP_JSDOC_PROP = Node.LAST_PROP + 1;^[CLASS] IRFactory TransformDispatcher   [VARIABLES] 
[P1_Replace_Type]^private final char sourceString;^87^^^^^82^92^private final String sourceString;^[CLASS] IRFactory TransformDispatcher   [VARIABLES] 
[P1_Replace_Type]^private final char sourceName;^88^^^^^83^93^private final String sourceName;^[CLASS] IRFactory TransformDispatcher   [VARIABLES] 
[P8_Replace_Mix]^private  Config config;^89^^^^^84^94^private final Config config;^[CLASS] IRFactory TransformDispatcher   [VARIABLES] 
[P8_Replace_Mix]^private  ErrorReporter errorReporter;^91^^^^^86^96^private final ErrorReporter errorReporter;^[CLASS] IRFactory TransformDispatcher   [VARIABLES] 
[P3_Replace_Literal]^private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet ( "use strictu" ) ;^95^^^^^90^100^private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet ( "use strict" ) ;^[CLASS] IRFactory TransformDispatcher   [VARIABLES] 
[P8_Replace_Mix]^private  Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet ( "use strict" ) ;^95^^^^^90^100^private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet ( "use strict" ) ;^[CLASS] IRFactory TransformDispatcher   [VARIABLES] 
[P1_Replace_Type]^this.sourcechar = sourceString;^101^^^^^97^107^this.sourceString = sourceString;^[CLASS] IRFactory TransformDispatcher  [METHOD] <init> [RETURN_TYPE] ErrorReporter)   String sourceString String sourceName Config config ErrorReporter errorReporter [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  
[P5_Replace_Variable]^this.sourceString = sourceName;^101^^^^^97^107^this.sourceString = sourceString;^[CLASS] IRFactory TransformDispatcher  [METHOD] <init> [RETURN_TYPE] ErrorReporter)   String sourceString String sourceName Config config ErrorReporter errorReporter [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  
[P11_Insert_Donor_Statement]^this.sourceName = sourceName;this.sourceString = sourceString;^101^^^^^97^107^this.sourceString = sourceString;^[CLASS] IRFactory TransformDispatcher  [METHOD] <init> [RETURN_TYPE] ErrorReporter)   String sourceString String sourceName Config config ErrorReporter errorReporter [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  
[P5_Replace_Variable]^this.sourceName = sourceString;^102^^^^^97^107^this.sourceName = sourceName;^[CLASS] IRFactory TransformDispatcher  [METHOD] <init> [RETURN_TYPE] ErrorReporter)   String sourceString String sourceName Config config ErrorReporter errorReporter [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  
[P8_Replace_Mix]^this.sourceName =  null;^102^^^^^97^107^this.sourceName = sourceName;^[CLASS] IRFactory TransformDispatcher  [METHOD] <init> [RETURN_TYPE] ErrorReporter)   String sourceString String sourceName Config config ErrorReporter errorReporter [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  
[P11_Insert_Donor_Statement]^this.sourceString = sourceString;this.sourceName = sourceName;^102^^^^^97^107^this.sourceName = sourceName;^[CLASS] IRFactory TransformDispatcher  [METHOD] <init> [RETURN_TYPE] ErrorReporter)   String sourceString String sourceName Config config ErrorReporter errorReporter [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  
[P8_Replace_Mix]^this.registry =  null.registry;^103^^^^^97^107^this.registry = config.registry;^[CLASS] IRFactory TransformDispatcher  [METHOD] <init> [RETURN_TYPE] ErrorReporter)   String sourceString String sourceName Config config ErrorReporter errorReporter [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  
[P8_Replace_Mix]^this.config =  null;^104^^^^^97^107^this.config = config;^[CLASS] IRFactory TransformDispatcher  [METHOD] <init> [RETURN_TYPE] ErrorReporter)   String sourceString String sourceName Config config ErrorReporter errorReporter [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  
[P8_Replace_Mix]^this.errorReporter =  null;^105^^^^^97^107^this.errorReporter = errorReporter;^[CLASS] IRFactory TransformDispatcher  [METHOD] <init> [RETURN_TYPE] ErrorReporter)   String sourceString String sourceName Config config ErrorReporter errorReporter [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  
[P8_Replace_Mix]^this.transformDispatcher  = null ;^106^^^^^97^107^this.transformDispatcher = new TransformDispatcher (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] <init> [RETURN_TYPE] ErrorReporter)   String sourceString String sourceName Config config ErrorReporter errorReporter [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  
[P4_Replace_Constructor]^IRFactory irFactory = new IRFactory (  node.getSourceName (  ) , config, errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P4_Replace_Constructor]^IRFactory irFactory = new IRFactory ( sourceString.getSourceName (  ) , config, errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P4_Replace_Constructor]^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) ,  errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P4_Replace_Constructor]^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^IRFactory irFactory = new IRFactory ( sourceName, node.getSourceName (  ) , config, errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^IRFactory irFactory = new IRFactory ( node, sourceString.getSourceName (  ) , config, errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^IRFactory irFactory = new IRFactory ( sourceString, config.getSourceName (  ) , node, errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , errorReporter, config ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^IRFactory irFactory = new IRFactory ( sourceString, errorReporter.getSourceName (  ) , config, node ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^IRFactory irFactory = new IRFactory ( sourceString, node .getComments (  )  , config, errorReporter ) ;^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^113^114^^^^98^128^IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^Node irNode = node.transform ( irFactory ) ;^115^^^^^100^130^Node irNode = irFactory.transform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^Node irNode = irFactory .transformTree ( node , sourceName , config , errorReporter )  ;^115^^^^^100^130^Node irNode = irFactory.transform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;Node irNode = irFactory.transform ( node ) ;^115^^^^^100^130^Node irNode = irFactory.transform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P11_Insert_Donor_Statement]^Node ret = transform ( n ) ;Node irNode = irFactory.transform ( node ) ;^115^^^^^100^130^Node irNode = irFactory.transform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P11_Insert_Donor_Statement]^Node irNode = justTransform ( node ) ;Node irNode = irFactory.transform ( node ) ;^115^^^^^100^130^Node irNode = irFactory.transform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P11_Insert_Donor_Statement]^Node newName = transform ( name ) ;Node irNode = irFactory.transform ( node ) ;^115^^^^^100^130^Node irNode = irFactory.transform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;Node irNode = irFactory.transform ( node ) ;^115^^^^^100^130^Node irNode = irFactory.transform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = irNode.getProp (  ) ;^118^119^^^^103^133^Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = irNode.getJsDocBuilderForNode (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^irNode.getProp (  ) ;^119^^^^^104^134^irNode.getJsDocBuilderForNode (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^irNode .getJSDocInfo (  )  ;^119^^^^^104^134^irNode.getJsDocBuilderForNode (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^119^^^^^104^134^irNode.getJsDocBuilderForNode (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P11_Insert_Donor_Statement]^node.setJSDocInfo ( info ) ;irNode.getJsDocBuilderForNode (  ) ;^119^^^^^104^134^irNode.getJsDocBuilderForNode (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P12_Insert_Condition]^if  ( fileOverviewInfo != null )  { JSDocInfo fileOverviewInfo = null; }^124^^^^^109^139^JSDocInfo fileOverviewInfo = null;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P12_Insert_Condition]^if  ( info != null && fileOverviewInfo == null )  { JSDocInfo fileOverviewInfo = null; }^124^^^^^109^139^JSDocInfo fileOverviewInfo = null;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  ( node.getComments (  )  == null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( comment.getCommentType() == CommentType.JSDOC && contains("@fileoverview") || contains("@preserve")) || contains("@license") )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( comment.getCommentType (  )  == CommentType.JSDOC )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( contains("@fileoverview") || contains("@preserve") || contains("@license")) )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( contains("@fileoverview" || contains("@preserve")) )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( info != null && fileOverviewInfo == null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( info != null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( fileOverviewInfo == null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( fileOverviewInfo != null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( irNode.getJSDocInfo() != null && getLicense() != null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( irNode.getJSDocInfo (  )  != null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^if  ( node .getSourceName (  )   != null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^if  ( node .getSourceName (  )   != false )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P9_Replace_Statement]^if  ( node.getJsDoc (  )  != null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P9_Replace_Statement]^if  ( clauseNode.getCatchCondition (  )  != null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P9_Replace_Statement]^if  ( statementNode.getLabel (  )  != null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P9_Replace_Statement]^if  ( statementNode.getElsePart (  )  != null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P9_Replace_Statement]^if  ( irNode.getLineno (  )  == -1 )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P9_Replace_Statement]^if  ( caseNode.getStatements (  )  != null )  {^125^^^^^110^140^if  ( node.getComments (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  ( comment.getCommentType (  )  == JSDOC || ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  ( comment.getCommentType (  )  != JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  && comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  ( comment.getCommentType (  )  <= JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "ffileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@pr" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@licen" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  ) {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  (  comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( comment.getCommentType (  )  == CommentType.JSDOC )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( contains("@fileoverview") || contains("@preserve") || contains("@license")) )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( contains("@fileoverview" || contains("@preserve")) )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( info != null && fileOverviewInfo == null )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( info != null )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( fileOverviewInfo == null )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^if  ( comment .getLineno (  )   == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  )  .contains ( sourceString )   || comment.getValue (  )^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^if  ( comment.getCommentType (  )  == JSDOC && ( comment .getLineno (  )  .contains ( "@fileoverview" )  || comment^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  ( info != null || fileOverviewInfo == null )  {^134^^^^^127^137^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  ( info == null && fileOverviewInfo == null )  {^134^^^^^127^137^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  ( info != null && fileOverviewInfo != null )  {^134^^^^^127^137^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^if  ( fileOverviewInfo != null && info == null )  {^134^^^^^127^137^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( info != null ) {^134^^^^^127^137^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  (  fileOverviewInfo == null )  {^134^^^^^127^137^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^if  ( info != true && fileOverviewInfo == true )  {^134^^^^^127^137^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P9_Replace_Statement]^if  ( fileOverviewInfo != null )  {^134^^^^^127^137^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P15_Unwrap_Block]^fileOverviewInfo = info;^134^135^136^^^127^137^if  ( info != null && fileOverviewInfo == null )  { fileOverviewInfo = info; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P16_Remove_Block]^^134^135^136^^^127^137^if  ( info != null && fileOverviewInfo == null )  { fileOverviewInfo = info; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^fileOverviewInfo = fileOverviewInfo;^135^^^^^127^137^fileOverviewInfo = info;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^fileOverviewInfo =  null;^135^^^^^127^137^fileOverviewInfo = info;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P12_Insert_Condition]^if  ( fileOverviewInfo != null )  { fileOverviewInfo = info; }^135^^^^^127^137^fileOverviewInfo = info;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) .getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) ,  fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = fileOverviewInfo.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, irFactory ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = irFactory.parseJSDocInfo ( fileLevelJsDocBuilder.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , comment, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = irFactory.parseJSDocInfo ( fileOverviewInfo.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, comment ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^JSDocInfo info = irFactory.parseJSDocInfo ( comment .getLineno (  )  , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment .getCommentType (  )  , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment .getCommentType (  )  , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^JSDocInfo info = irFactory .parseJSDocInfo ( sourceName , TMP_JSDOC_PROP , TMP_JSDOC_PROP , fileLevelJsDocBuilder , info )  , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, info ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = fileLevelJsDocBuilder.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , irFactory, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = comment.parseJSDocInfo ( irFactory.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileOverviewInfo, fileLevelJsDocBuilder ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^comment .getCommentType (  )  , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^132^133^^^^127^137^comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^132^133^^^^127^137^comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^comment.getLineno (  ) , comment .getCommentType (  )  , fileLevelJsDocBuilder, fileOverviewInfo ) ;^132^133^^^^127^137^comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  ( info != null || fileOverviewInfo == null )  {^134^^^^^119^149^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  ( info == null && fileOverviewInfo == null )  {^134^^^^^119^149^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  ( info != null && fileOverviewInfo != null )  {^134^^^^^119^149^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^if  ( fileOverviewInfo != null && info == null )  {^134^^^^^119^149^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( info != null ) {^134^^^^^119^149^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  (  fileOverviewInfo == null )  {^134^^^^^119^149^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^if  (  fileOverviewInfo == true )  {^134^^^^^119^149^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P9_Replace_Statement]^if  ( fileOverviewInfo != null )  {^134^^^^^119^149^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P15_Unwrap_Block]^fileOverviewInfo = info;^134^135^136^^^119^149^if  ( info != null && fileOverviewInfo == null )  { fileOverviewInfo = info; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P16_Remove_Block]^^134^135^136^^^119^149^if  ( info != null && fileOverviewInfo == null )  { fileOverviewInfo = info; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^fileOverviewInfo = fileOverviewInfo;^135^^^^^120^150^fileOverviewInfo = info;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^fileOverviewInfo =  null;^135^^^^^120^150^fileOverviewInfo = info;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P12_Insert_Condition]^if  ( fileOverviewInfo != null )  { fileOverviewInfo = info; }^135^^^^^120^150^fileOverviewInfo = info;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  ( fileOverviewInfo == null )  {^143^^^^^128^158^if  ( fileOverviewInfo != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( irNode.getJSDocInfo() != null && getLicense() != null )  {^143^^^^^128^158^if  ( fileOverviewInfo != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( irNode.getJSDocInfo (  )  != null )  {^143^^^^^128^158^if  ( fileOverviewInfo != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  {^143^^^^^128^158^if  ( fileOverviewInfo != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^if  ( fileOverviewInfo != this )  {^143^^^^^128^158^if  ( fileOverviewInfo != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P9_Replace_Statement]^if  ( directives != null )  {^143^^^^^128^158^if  ( fileOverviewInfo != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P9_Replace_Statement]^if  ( info != null && fileOverviewInfo == null )  {^143^^^^^128^158^if  ( fileOverviewInfo != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P15_Unwrap_Block]^if (((irNode.getJSDocInfo()) != null) && ((irNode.getJSDocInfo().getLicense()) != null)) {    fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());}; irNode.setJSDocInfo(fileOverviewInfo);^143^144^145^146^147^128^158^if  ( fileOverviewInfo != null )  { if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  { fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P16_Remove_Block]^^143^144^145^146^147^128^158^if  ( fileOverviewInfo != null )  { if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  { fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  (  ( irNode.getJSDocInfo (  )  != null )  || ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  (  ( irNode.getJSDocInfo (  )  == null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P2_Replace_Operator]^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  == null )  )  {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  (  ( irNode.getJSDocInfo (  )  != null )  ) {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  (  ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( irNode.getJSDocInfo (  )  != null )  {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P6_Replace_Expression]^if  ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^if  (  ( irNode.getProp (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .contains (  )  != null )  )  {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^if  (  ( irNode .setJSDocInfo ( info )   != null )  && ( irNode^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  )  .getLineno (  )   != null )  )  {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^if  (  ( irNode.getJSDocInfo (  )  != false )  ) {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P15_Unwrap_Block]^fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());^144^145^146^147^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  { fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P16_Remove_Block]^^144^145^146^147^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  { fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P13_Insert_Block]^if  ( fileOverviewInfo != null )  {     if  (  (  ( irNode.getJSDocInfo (  )  )  != null )  &&  (  ( irNode.getJSDocInfo (  ) .getLicense (  )  )  != null )  )  {         fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;     }     irNode.setJSDocInfo ( fileOverviewInfo ) ; }^144^^^^^129^159^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^fileOverviewInfo .hasEnumParameterType (  )   ) ;^146^^^^^144^147^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .contains (  )  ) ;^146^^^^^144^147^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^fileOverviewInfo.setLicense ( irNode.getProp (  ) .getLicense (  )  ) ;^146^^^^^144^147^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^fileOverviewInfo.setLicense ( irNode .setJSDocInfo ( fileOverviewInfo )  .getLicense (  )  ) ;^146^^^^^144^147^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^146^^^^^144^147^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P12_Insert_Condition]^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  { fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ; }^146^^^^^144^147^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^if  (  ( irNode .setJSDocInfo ( fileOverviewInfo )   != null )  && ( irNode^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^( irNode.getJSDocInfo (  ) .contains (  )  != null )  )  {^145^^^^^130^160^( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^( irNode.getJSDocInfo (  )  .getLineno (  )   != null )  )  {^145^^^^^130^160^( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^( irNode.getProp (  ) .getLicense (  )  != null )  )  {^145^^^^^130^160^( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^( irNode .setJSDocInfo ( fileOverviewInfo )  .getLicense (  )  != null )  )  {^145^^^^^130^160^( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^145^146^^^^130^160^( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  { fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^fileOverviewInfo .hasEnumParameterType (  )   ) ;^146^^^^^131^161^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .contains (  )  ) ;^146^^^^^131^161^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^fileOverviewInfo.setLicense ( irNode.getProp (  ) .getLicense (  )  ) ;^146^^^^^131^161^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  )  .getLineno (  )   ) ;^146^^^^^131^161^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^146^^^^^131^161^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P12_Insert_Condition]^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  { fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ; }^146^^^^^131^161^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^fileOverviewInfo.setLicense ( irNode .setJSDocInfo ( fileOverviewInfo )  .getLicense (  )  ) ;^146^^^^^131^161^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^irNode.setJSDocInfo ( info ) ;^148^^^^^133^163^irNode.setJSDocInfo ( fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^irNode .getJSDocInfo (  )  ;^148^^^^^133^163^irNode.setJSDocInfo ( fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^148^^^^^133^163^irNode.setJSDocInfo ( fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P11_Insert_Donor_Statement]^node.setJSDocInfo ( info ) ;irNode.setJSDocInfo ( fileOverviewInfo ) ;^148^^^^^133^163^irNode.setJSDocInfo ( fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P11_Insert_Donor_Statement]^jsdocParser.setFileOverviewJSDocInfo ( fileOverviewInfo ) ;irNode.setJSDocInfo ( fileOverviewInfo ) ;^148^^^^^133^163^irNode.setJSDocInfo ( fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P11_Insert_Donor_Statement]^irNode.setCharno ( charno ) ;irNode.setJSDocInfo ( fileOverviewInfo ) ;^148^^^^^133^163^irNode.setJSDocInfo ( fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P11_Insert_Donor_Statement]^irNode.setLineno ( lineno ) ;irNode.setJSDocInfo ( fileOverviewInfo ) ;^148^^^^^133^163^irNode.setJSDocInfo ( fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^if  (  ( irNode.getJSDocInfo (  ) .getLicense (  )  != true )  )  {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  )  .getLineno (  )   ) ;^146^^^^^144^147^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^comments = comments.getComments (  ) .toArray ( node ) ;^152^^^^^137^167^comments = node.getComments (  ) .toArray ( comments ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^comments =  null.getComments (  ) .toArray ( comments ) ;^152^^^^^137^167^comments = node.getComments (  ) .toArray ( comments ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) .getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) ,  fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = fileLevelJsDocBuilder.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , irFactory, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = irFactory.parseJSDocInfo ( fileOverviewInfo.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, comment ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = fileOverviewInfo.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, irFactory ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^Comment[] comments = new Comment[node.getComments (  ) .size() - 5 ];^151^^^^^136^166^Comment[] comments = new Comment[node.getComments (  ) .size (  ) ];^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^Comment[] comments = new Comment[node.getComments (  ) .contains (  ) ];^151^^^^^136^166^Comment[] comments = new Comment[node.getComments (  ) .size (  ) ];^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^Comment[] comments = new Comment[node .getSourceName (  )  .size (  ) ];^151^^^^^136^166^Comment[] comments = new Comment[node.getComments (  ) .size (  ) ];^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^( comment.getValue (  ) .contains ( "ile" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^128^129^130^^^113^143^( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^( comment .getLineno (  )  .contains ( "@fileoverview" )  || comment^128^129^130^^^113^143^( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^comment.getValue (  ) .contains ( "prpreserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^129^130^^^^114^144^comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^comment.getValue (  )  .contains ( sourceString )   || comment.getValue (  )^129^130^^^^114^144^comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^comment .getLineno (  )  .contains ( "@preserve" )  || comment^129^130^^^^114^144^comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^comment.getValue (  ) .contains ( "@licenselicen" )  )  )  {^130^^^^^115^145^comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, info ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = comment.parseJSDocInfo ( irFactory.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileOverviewInfo, fileLevelJsDocBuilder ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment .getCommentType (  )  , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^JSDocInfo info = irFactory.parseJSDocInfo ( comment .getLineno (  )  , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^132^133^^^^117^147^comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^comment.getLineno (  ) , comment .getCommentType (  )  , fileLevelJsDocBuilder, fileOverviewInfo ) ;^132^133^^^^117^147^comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^( irNode .setJSDocInfo ( info )  .getLicense (  )  != null )  )  {^145^^^^^130^160^( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^Comment[] comments = new Comment[node.getComments (  )  .getLineno (  )  ];^151^^^^^136^166^Comment[] comments = new Comment[node.getComments (  ) .size (  ) ];^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^151^152^^^^136^166^Comment[] comments = new Comment[node.getComments (  ) .size (  ) ]; comments = node.getComments (  ) .toArray ( comments ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^Comment[] comments = new Comment[node.getComments (  ) .size() - 2 ];^151^^^^^136^166^Comment[] comments = new Comment[node.getComments (  ) .size (  ) ];^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^151^^^^^136^166^Comment[] comments = new Comment[node.getComments (  ) .size (  ) ];^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^comments = node .getSourceName (  )  .toArray ( comments ) ;^152^^^^^137^167^comments = node.getComments (  ) .toArray ( comments ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^152^^^^^137^167^comments = node.getComments (  ) .toArray ( comments ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^irFactory.parseAllJsDocInfo ( irNode, comments, TMP_JSDOC_PROP ) ;^153^^^^^138^168^irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^irFactory.parseAllJsDocInfo (  comments, 0 ) ;^153^^^^^138^168^irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^irFactory.parseAllJsDocInfo ( irNode,  0 ) ;^153^^^^^138^168^irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^irFactory.parseAllJsDocInfo ( comments, irNode, 0 ) ;^153^^^^^138^168^irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^irFactory.IRFactory ( irNode, comments, 0 ) ;^153^^^^^138^168^irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^153^^^^^138^168^irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P11_Insert_Donor_Statement]^ci = parseAllJsDocInfo ( child, comments, ci ) ;irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^153^^^^^138^168^irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverviewe" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "rpreserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@llicense" )  )  )  {^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  )  .contains ( sourceName )   || comment.getValue (  )^127^128^129^130^^112^142^if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^if  ( info != false ) {^134^^^^^127^137^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^JSDocInfo info = irFactory.parseJSDocInfo ( comment .getLineno (  )  , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, info ) ;^131^132^133^^^127^137^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^if  ( info != this ) {^134^^^^^119^149^if  ( info != null && fileOverviewInfo == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^if  ( info != null )  {^143^^^^^128^158^if  ( fileOverviewInfo != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^if  ( fileOverviewInfo != true )  {^143^^^^^128^158^if  ( fileOverviewInfo != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^if  (  ( irNode.getJSDocInfo (  ) .getLicense (  )  != false )  )  {^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^fileOverviewInfo.setLicense ( irNode .setJSDocInfo ( info )  .getLicense (  )  ) ;^146^^^^^144^147^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^if  (  ( irNode .setJSDocInfo ( fileOverviewInfo )   != false )  && ( irNode^144^145^^^^129^159^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^comments = node.getComments (  )  .getCharno (  )  ;^152^^^^^137^167^comments = node.getComments (  ) .toArray ( comments ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P5_Replace_Variable]^JSDocInfo info = irFactory.parseJSDocInfo ( fileLevelJsDocBuilder.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , comment, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^Comment[] comments = new Comment[node.getComments (  ) .size() + 2 ];^151^^^^^136^166^Comment[] comments = new Comment[node.getComments (  ) .size (  ) ];^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^( comment.getValue (  ) .contains ( "@fileoverviewver" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^128^129^130^^^113^143^( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^( comment.getValue (  )  .contains ( sourceName )   || comment.getValue (  )^128^129^130^^^113^143^( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^( comment.getValue (  )  .contains ( sourceString )   || comment.getValue (  )^128^129^130^^^113^143^( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^comment.getValue (  ) .contains ( "ppreserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^129^130^^^^114^144^comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^comment.getValue (  ) .contains ( "@licenselice" )  )  )  {^130^^^^^115^145^comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^comment .getLineno (  )  .contains ( "@license" )  )  )  {^130^^^^^115^145^comment.getValue (  ) .contains ( "@license" )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment .getCommentType (  )  , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P8_Replace_Mix]^JSDocInfo info = irFactory .parseJSDocInfo ( sourceName , TMP_JSDOC_PROP , TMP_JSDOC_PROP , fileLevelJsDocBuilder , fileOverviewInfo )  , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, info ) ;^131^132^133^^^116^146^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^Comment[] comments = new Comment[node.getComments (  ) .size() + 5 ];^151^^^^^136^166^Comment[] comments = new Comment[node.getComments (  ) .size (  ) ];^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P3_Replace_Literal]^Comment[] comments = new Comment[node.getComments (  ) .size() - 0 ];^151^^^^^136^166^Comment[] comments = new Comment[node.getComments (  ) .size (  ) ];^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P14_Delete_Statement]^^152^153^^^^137^167^comments = node.getComments (  ) .toArray ( comments ) ; irFactory.parseAllJsDocInfo ( irNode, comments, 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTree [RETURN_TYPE] Node   AstRoot node String sourceString Config config ErrorReporter errorReporter [VARIABLES] Comment  comment  Set  ALLOWED_DIRECTIVES  Config  config  IRFactory  irFactory  Node  irNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  JSDocInfo  fileOverviewInfo  info  int  TMP_JSDOC_PROP  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  Comment[]  comments  TransformDispatcher  transformDispatcher  AstRoot  node  
[P7_Replace_Invocation]^Node irNode = transform ( node ) ;^159^^^^^158^180^Node irNode = justTransform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^Node irNode = irFactory.transform ( node ) ;Node irNode = justTransform ( node ) ;^159^^^^^158^180^Node irNode = justTransform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;Node irNode = justTransform ( node ) ;^159^^^^^158^180^Node irNode = justTransform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^Node ret = transform ( n ) ;Node irNode = justTransform ( node ) ;^159^^^^^158^180^Node irNode = justTransform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^Node newName = transform ( name ) ;Node irNode = justTransform ( node ) ;^159^^^^^158^180^Node irNode = justTransform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;Node irNode = justTransform ( node ) ;^159^^^^^158^180^Node irNode = justTransform ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P2_Replace_Operator]^if  ( irNode.getType (  )  == Token.FUNCTION || irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P2_Replace_Operator]^if  ( irNode.getType (  )  != Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P2_Replace_Operator]^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  <= -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P3_Replace_Literal]^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != - )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P3_Replace_Literal]^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -charno )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P6_Replace_Expression]^if  ( irNode.getType (  )  == Token.FUNCTION ) {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P6_Replace_Expression]^if  (  irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P6_Replace_Expression]^if  ( irNode.getType (  )  == FUNCTION )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P6_Replace_Expression]^if  ( irNode.getLineno() == -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^if  ( irNode.getProp (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .contains (  )  != -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getProp (  ) .getLineno (  )  != -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^if  ( irNode.getType (  )  == Token.FUNCTION && irNode .removeFirstChild (  )  .getLineno (  )  != -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .setLineno (  )  != -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  )  .getCommentType (  )   != -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P8_Replace_Mix]^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 << 4 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P2_Replace_Operator]^if  ( irNode.getLineno (  )  != -1 )  {^166^^^^^158^180^if  ( irNode.getLineno (  )  == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P3_Replace_Literal]^if  ( irNode.getLineno (  )  == -9 )  {^166^^^^^158^180^if  ( irNode.getLineno (  )  == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^if  ( irNode.setLineno (  )  == -1 )  {^166^^^^^158^180^if  ( irNode.getLineno (  )  == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P8_Replace_Mix]^if  ( irNode.setLineno (  )  == -4 )  {^166^^^^^158^180^if  ( irNode.getLineno (  )  == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P9_Replace_Statement]^if  ( node.getJsDoc (  )  != null )  {^166^^^^^158^180^if  ( irNode.getLineno (  )  == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P9_Replace_Statement]^if  ( node.getComments (  )  != null )  {^166^^^^^158^180^if  ( irNode.getLineno (  )  == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P1_Replace_Type]^long  lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^int lineno = node .getCommentType (  )  ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^int nType = n.getType (  ) ;int lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P1_Replace_Type]^short  charno = position2charno ( node.getAbsolutePosition (  )  ) ;^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^int charno = transformTokenType ( node.getAbsolutePosition (  )  ) ;^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^int charno = position2charno ( node .getCommentType (  )   ) ;^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P14_Delete_Statement]^^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;int lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;int lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;int lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;int lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;int lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;int lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;int lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;int lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;int lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;int lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;int lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^functionNode.getLp (  ) ;int lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P8_Replace_Mix]^irNode.setLineno ( charno ) ;^171^^^^^158^180^irNode.setLineno ( lineno ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P14_Delete_Statement]^^171^^^^^158^180^irNode.setLineno ( lineno ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P14_Delete_Statement]^^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^position2charno ( catchVar.getAbsolutePosition (  )  ) ;int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^comments[ci].getAbsolutePosition (  )  ) ;int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^lp.setCharno ( position2charno ( lparenCharno )  ) ;int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^node.setCharno ( position2charno ( leftParamPos )  ) ;int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^functionNode.getAbsolutePosition (  ) ;int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^catchCondition.setCharno ( clauseAbsolutePosition ) ;int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P14_Delete_Statement]^^172^173^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ; irNode.setCharno ( charno ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P5_Replace_Variable]^irNode.setCharno ( lineno ) ;^173^^^^^158^180^irNode.setCharno ( charno ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode .setCharno (  )  ;^173^^^^^158^180^irNode.setCharno ( charno ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P14_Delete_Statement]^^173^^^^^158^180^irNode.setCharno ( charno ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^node.setJSDocInfo ( info ) ;irNode.setCharno ( charno ) ;^173^^^^^158^180^irNode.setCharno ( charno ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^irNode.setJSDocInfo ( fileOverviewInfo ) ;irNode.setCharno ( charno ) ;^173^^^^^158^180^irNode.setCharno ( charno ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P11_Insert_Donor_Statement]^irNode.setLineno ( lineno ) ;irNode.setCharno ( charno ) ;^173^^^^^158^180^irNode.setCharno ( charno ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P1_Replace_Type]^long  charno = position2charno ( node.getAbsolutePosition (  )  ) ;^172^^^^^158^180^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P14_Delete_Statement]^^170^171^^^^158^180^int lineno = node.getLineno (  ) ; irNode.setLineno ( lineno ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode .setLineno (  )  ;^171^^^^^158^180^irNode.setLineno ( lineno ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P12_Insert_Condition]^if  ( irNode.getLineno (  )  == -1 )  { irNode.setLineno ( lineno ) ; }^171^^^^^158^180^irNode.setLineno ( lineno ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode .setLineno (  )   ) ;^163^^^^^158^180^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode.setLineno ( irNode.getFirstChild (  ) .contains (  )  ) ;^163^^^^^158^180^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode.setLineno ( irNode.getProp (  ) .getLineno (  )  ) ;^163^^^^^158^180^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode.setLineno ( irNode .removeFirstChild (  )  .getLineno (  )  ) ;^163^^^^^158^180^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P14_Delete_Statement]^^163^164^^^^158^180^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ; irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P12_Insert_Condition]^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  { irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ; }^163^^^^^158^180^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P14_Delete_Statement]^^163^^^^^158^180^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode.setCharno ( irNode.getFirstChild (  ) .contains (  )  ) ;^164^^^^^158^180^irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode.setCharno ( irNode.getFirstChild (  )  .getLineno (  )   ) ;^164^^^^^158^180^irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode.setCharno ( irNode.getProp (  ) .getCharno (  )  ) ;^164^^^^^158^180^irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P14_Delete_Statement]^^164^^^^^158^180^irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P12_Insert_Condition]^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  { irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ; }^164^^^^^158^180^irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode.setCharno ( irNode .removeFirstChild (  )  .getCharno (  )  ) ;^164^^^^^158^180^irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P2_Replace_Operator]^if  ( irNode.getLineno (  )  <= -1 )  {^166^^^^^158^180^if  ( irNode.getLineno (  )  == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P3_Replace_Literal]^if  ( irNode.getLineno (  )  == --8 )  {^166^^^^^158^180^if  ( irNode.getLineno (  )  == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^if  ( irNode .getCommentType (  )   == -1 )  {^166^^^^^158^180^if  ( irNode.getLineno (  )  == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P8_Replace_Mix]^if  ( irNode .getCommentType (  )   == -3 )  {^166^^^^^158^180^if  ( irNode.getLineno (  )  == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P1_Replace_Type]^short  lineno = node.getLineno (  ) ;^170^^^^^158^180^int lineno = node.getLineno (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P14_Delete_Statement]^^171^172^^^^158^180^irNode.setLineno ( lineno ) ; int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^if  ( irNode .setType (  )   == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^161^162^^^^158^180^if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode.getFirstChild (  ) .contains (  )  != -1 )  {^162^^^^^158^180^irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode.getFirstChild (  )  .getCommentType (  )   != -1 )  {^162^^^^^158^180^irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode.getProp (  ) .getLineno (  )  != -1 )  {^162^^^^^158^180^irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P14_Delete_Statement]^^162^163^^^^158^180^irNode.getFirstChild (  ) .getLineno (  )  != -1 )  { irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode .setCharno (  )   ) ;^164^^^^^158^180^irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P2_Replace_Operator]^if  ( node.getJsDoc (  )  == null )  {^176^^^^^158^180^if  ( node.getJsDoc (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P8_Replace_Mix]^if  ( node.getJsDoc (  )  != false )  {^176^^^^^158^180^if  ( node.getJsDoc (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P9_Replace_Statement]^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^176^^^^^158^180^if  ( node.getJsDoc (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P9_Replace_Statement]^if  ( clauseNode.getCatchCondition (  )  != null )  {^176^^^^^158^180^if  ( node.getJsDoc (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P9_Replace_Statement]^if  ( statementNode.getLabel (  )  != null )  {^176^^^^^158^180^if  ( node.getJsDoc (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P9_Replace_Statement]^if  ( node.getComments (  )  != null )  {^176^^^^^158^180^if  ( node.getJsDoc (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.NAME )  {^176^^^^^158^180^if  ( node.getJsDoc (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P9_Replace_Statement]^if  ( statementNode.getElsePart (  )  != null )  {^176^^^^^158^180^if  ( node.getJsDoc (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P9_Replace_Statement]^if  ( irNode.getLineno (  )  == -1 )  {^176^^^^^158^180^if  ( node.getJsDoc (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P9_Replace_Statement]^if  ( caseNode.getStatements (  )  != null )  {^176^^^^^158^180^if  ( node.getJsDoc (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P15_Unwrap_Block]^irNode.putProp(com.google.javascript.jscomp.parsing.IRFactory.TMP_JSDOC_PROP, node.getJsDoc());^176^177^178^^^158^180^if  ( node.getJsDoc (  )  != null )  { irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P16_Remove_Block]^^176^177^178^^^158^180^if  ( node.getJsDoc (  )  != null )  { irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P5_Replace_Variable]^irNode.putProp ( TMP_JSDOC_PROP.getJsDoc (  )  ) ;^177^^^^^158^180^irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P5_Replace_Variable]^irNode.putProp (  node.getJsDoc (  )  ) ;^177^^^^^158^180^irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P5_Replace_Variable]^irNode.putProp ( node, TMP_JSDOC_PROP.getJsDoc (  )  ) ;^177^^^^^158^180^irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode.putProp ( TMP_JSDOC_PROP, node .getType (  )   ) ;^177^^^^^158^180^irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P14_Delete_Statement]^^177^^^^^158^180^irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P12_Insert_Condition]^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  { irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ; }^177^^^^^158^180^irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P13_Insert_Block]^if  (  ( node.getJsDoc (  )  )  != null )  {     irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ; }^177^^^^^158^180^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^if  ( node .getType (  )   != null )  {^176^^^^^158^180^if  ( node.getJsDoc (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P7_Replace_Invocation]^irNode .putProp ( charno )  ;^177^^^^^158^180^irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P8_Replace_Mix]^irNode .putProp ( lineno )  ;^177^^^^^158^180^irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  lineno  AstNode  node  
[P2_Replace_Operator]^if  ( ci > comments.length )  {^194^^^^^179^209^if  ( ci >= comments.length )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P15_Unwrap_Block]^return ci;^194^195^196^197^^179^209^if  ( ci >= comments.length )  {  return ci; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P16_Remove_Block]^^194^195^196^197^^179^209^if  ( ci >= comments.length )  {  return ci; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^return lineno;^196^^^^^181^211^return ci;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^while  ( comments[ci].getCommentType (  )  != JSDOC && !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^204^205^^^^189^219^while  ( comments[ci].getCommentType (  )  != JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^while  ( comments[ci].getCommentType (  )  <= JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^204^205^^^^189^219^while  ( comments[ci].getCommentType (  )  != JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^while  ( comments[ci] .getLineno (  )   != JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^204^205^^^^189^219^while  ( comments[ci].getCommentType (  )  != JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^while  ( comments[ci].getCommentType (  )  != JSDOC || !comments[ci].getValue (  )  .getValue (  )   )  {^204^205^^^^189^219^while  ( comments[ci].getCommentType (  )  != JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^while  ( comments[ci].getCommentType (  )  != JSDOC || !comments[ci] .getLineno (  )  .equals ( jsDoc )  )  {^204^205^^^^189^219^while  ( comments[ci].getCommentType (  )  != JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^Preconditions.checkState ( ci <= comments.length ) ;^207^^^^^204^208^Preconditions.checkState ( ci < comments.length ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^207^^^^^204^208^Preconditions.checkState ( ci < comments.length ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^if  ( node.getProp ( TMP_JSDOC_PROP )  == null )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( comments[ci].getCommentType() != CommentType.JSDOC || equals(jsDoc)) )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( comments[ci].getCommentType (  )  != CommentType.JSDOC )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( ci < comments.length )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( info != null && info.hasEnumParameterType() )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( info != null )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( node.getType() == NAME )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( node.getType() == VAR && node.getChildCount() == 1 )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( node.getType (  )  == VAR )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( node.getChildCount (  )  == 1 )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( node.getType() == ASSIGN )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^if  ( node.putProp ( TMP_JSDOC_PROP )  != null )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^if  ( node.getProp ( TMP_JSDOC_PROP )  != false )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P9_Replace_Statement]^if  ( node.getJsDoc (  )  != null )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^while  ( comments[ci].getCommentType (  )  == JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^204^205^^^^189^219^while  ( comments[ci].getCommentType (  )  != JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^if  ( info != null || info.hasEnumParameterType (  )  )  {^213^^^^^198^228^if  ( info != null && info.hasEnumParameterType (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^if  ( info == null && info.hasEnumParameterType (  )  )  {^213^^^^^198^228^if  ( info != null && info.hasEnumParameterType (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( info != null ) {^213^^^^^198^228^if  ( info != null && info.hasEnumParameterType (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  (  info.hasEnumParameterType (  )  )  {^213^^^^^198^228^if  ( info != null && info.hasEnumParameterType (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( node.getType() == NAME )  {^213^^^^^198^228^if  ( info != null && info.hasEnumParameterType (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( node.getType() == VAR && node.getChildCount() == 1 )  {^213^^^^^198^228^if  ( info != null && info.hasEnumParameterType (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( node.getType (  )  == VAR )  {^213^^^^^198^228^if  ( info != null && info.hasEnumParameterType (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( node.getChildCount (  )  == 1 )  {^213^^^^^198^228^if  ( info != null && info.hasEnumParameterType (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( node.getType() == ASSIGN )  {^213^^^^^198^228^if  ( info != null && info.hasEnumParameterType (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^if  ( node.getType (  )  > Token.NAME )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^if  ( node.getType (  )  <= Token.NAME )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^if  ( node.getType (  )  != Token.NAME )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^if  ( child.getType (  )  == Token.NAME )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( node.getType() == VAR && node.getChildCount() == 1 )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( node.getType (  )  == VAR )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( node.getChildCount (  )  == 1 )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^if  ( node.getType() == ASSIGN )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^if  ( node.getProp (  )  == Token.NAME )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^if  ( node .setType (  )   == Token.NAME )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P9_Replace_Statement]^if  ( node.getJsDoc (  )  != null )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  == Token.VAR || node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  <= Token.VAR && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  != 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P3_Replace_Literal]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == charno )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^} else if  ( child.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^} else if  ( node.getType (  )  == Token.VAR ) {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^} else if  (  node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^} else if  ( node.getType (  )  == VAR )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^} else if  ( node.getType() == ASSIGN )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^} else {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^} else if  ( node.getProp (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^} else if  ( node.getType (  )  == Token.VAR && node.setCharno (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^} else if  ( node.getType (  )  == Token.VAR && node .children (  )   == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^}  if  ( node.getType (  )  == Token.VAR && node.setCharno (  )  == 0 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P15_Unwrap_Block]^registry.identifyEnumName(node.getFirstChild().getString());^216^217^218^219^220^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  { registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ; } else if  ( node.getType (  )  == Token.ASSIGN )  { registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P16_Remove_Block]^^216^217^218^219^220^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  { registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ; } else if  ( node.getType (  )  == Token.ASSIGN )  { registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  <= Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^} else if  ( child.getType (  )  == Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P6_Replace_Expression]^} else {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^} else if  ( node.getProp (  )  == Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^}  if  ( child.getType (  )  == Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P15_Unwrap_Block]^registry.identifyEnumName(node.getFirstChild().getQualifiedName());^219^220^221^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  { registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P16_Remove_Block]^^219^220^221^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  { registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P13_Insert_Block]^if  (  ( c.getType (  )  )  ==  ( EMPTY )  )  {     skipCount++; }^219^^^^^204^234^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P13_Insert_Block]^if  (  ( ret.getType (  )  )  ==  ( NAME )  )  {     ret.setType ( Token.STRING ) ; }^219^^^^^204^234^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( EMPTY )  )  {     node.removeChild ( child ) ;     skipIndexes[j] = i;     j++; }^219^^^^^204^234^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^registry.identifyEnumName ( child.getFirstChild (  ) .getQualifiedName (  )  ) ;^220^^^^^205^235^registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^registry.identifyEnumName ( node.getFirstChild (  ) .equals (  )  ) ;^220^^^^^205^235^registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^registry.identifyEnumName ( node.getProp (  ) .getQualifiedName (  )  ) ;^220^^^^^205^235^registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^220^221^^^^205^235^registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^registry.identifyEnumName ( node.getFirstChild (  )  .getLicense (  )   ) ;^220^^^^^205^235^registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^registry.identifyEnumName ( child.getFirstChild (  ) .equals (  )  ) ;^220^^^^^205^235^registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^registry.identifyEnumName ( node .removeFirstChild (  )  .getQualifiedName (  )  ) ;^220^^^^^205^235^registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^} else if  ( node .setType (  )   == Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^registry.identifyEnumName ( child.getProp (  ) .getQualifiedName (  )  ) ;^220^^^^^205^235^registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^registry.identifyEnumName ( child.getFirstChild (  ) .getString (  )  ) ;^218^^^^^216^221^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^registry.identifyEnumName ( node.getFirstChild (  ) .contains (  )  ) ;^218^^^^^216^221^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^registry.identifyEnumName ( node.getProp (  ) .getString (  )  ) ;^218^^^^^216^221^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^registry.identifyEnumName ( child.getFirstChild (  )  .newString (  )   ) ;^218^^^^^216^221^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^218^219^220^221^^216^221^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ; } else if  ( node.getType (  )  == Token.ASSIGN )  { registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^registry.identifyEnumName ( node.getFirstChild (  )  .newString (  )   ) ;^218^^^^^216^221^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^registry.identifyEnumName ( node .removeFirstChild (  )  .getString (  )  ) ;^218^^^^^216^221^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^registry.identifyEnumName ( child .removeFirstChild (  )  .getString (  )  ) ;^218^^^^^216^221^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  != Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^node.setCharno (  )  == 1 )  {^217^^^^^202^232^node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^node .children (  )   == 1 )  {^217^^^^^202^232^node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^217^218^^^^202^232^node.getChildCount (  )  == 1 )  { registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^registry.identifyEnumName ( child.getFirstChild (  ) .getString (  )  ) ;^218^^^^^203^233^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^registry.identifyEnumName ( node.getFirstChild (  ) .contains (  )  ) ;^218^^^^^203^233^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^registry.identifyEnumName ( node.getFirstChild (  )  .newString (  )   ) ;^218^^^^^203^233^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^registry.identifyEnumName ( node.getProp (  ) .getString (  )  ) ;^218^^^^^203^233^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^registry.identifyEnumName ( node .removeFirstChild (  )  .getString (  )  ) ;^218^^^^^203^233^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^registry.identifyEnumName ( child.getFirstChild (  ) .contains (  )  ) ;^218^^^^^203^233^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^218^219^220^221^^203^233^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ; } else if  ( node.getType (  )  == Token.ASSIGN )  { registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^registry.identifyEnumName ( child.getProp (  ) .getString (  )  ) ;^218^^^^^203^233^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^registry.identifyEnumName ( child.getString (  )  ) ;^215^^^^^200^230^registry.identifyEnumName ( node.getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^registry.identifyEnumName ( node.getProp (  )  ) ;^215^^^^^200^230^registry.identifyEnumName ( node.getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^registry.identifyEnumName ( child.getProp (  )  ) ;^215^^^^^200^230^registry.identifyEnumName ( node.getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  != Token.VAR && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  >= 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P3_Replace_Literal]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 8 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^} else if  (  node.getChildCount (  )  == 4 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  >= Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^} else if  ( node.getType (  )  == Token.3 )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  < Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^registry.identifyEnumName ( node .newString (  )   ) ;^215^^^^^200^230^registry.identifyEnumName ( node.getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^} else if  ( child.getProp (  )  == Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  > 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^registry.identifyEnumName ( child.getProp (  ) .getString (  )  ) ;^218^^^^^216^221^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  > Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^registry.identifyEnumName ( child.getFirstChild (  )  .getLicense (  )   ) ;^220^^^^^205^235^registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^} else if  ( node .setType (  )   == Token.VAR && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^} else if  ( child .setType (  )   == Token.VAR && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P3_Replace_Literal]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == -7 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^}  if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1L )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^registry.identifyEnumName ( child .removeFirstChild (  )  .getQualifiedName (  )  ) ;^220^^^^^205^235^registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^}  if  ( child.getProp (  )  == Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P1_Replace_Type]^char jsDoc =  ( char )  node.getProp ( TMP_JSDOC_PROP ) ;^201^^^^^186^216^String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^String jsDoc =  ( String )  child.getProp ( TMP_JSDOC_PROP ) ;^201^^^^^186^216^String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^String jsDoc =  ( String )  node.getProp ( lineno ) ;^201^^^^^186^216^String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^String jsDoc =  ( String )  TMP_JSDOC_PROP.getProp ( node ) ;^201^^^^^186^216^String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^String jsDoc =  ( String )  node.putProp ( TMP_JSDOC_PROP ) ;^201^^^^^186^216^String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P13_Insert_Block]^if  (  ( node.getJsDoc (  )  )  != null )  {     irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ; }^201^^^^^186^216^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^JSDocInfo info = parseJSDocInfo ( sourceString, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^210^211^^^^195^225^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^JSDocInfo info = parseJSDocInfo (  comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^210^211^^^^195^225^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^JSDocInfo info = parseJSDocInfo ( jsDoc[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^210^211^^^^195^225^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci] .getCommentType (  )  , comments[ci].getAbsolutePosition (  )  ) ;^210^211^^^^195^225^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci] .getCommentType (  )   ) ;^210^211^^^^195^225^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^String jsDoc =  ( String )  node .putProp ( ci )  ;^201^^^^^186^216^String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^201^^^^^186^216^String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^204^205^206^^^189^219^while  ( comments[ci].getCommentType (  )  != JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  { ci++;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^!comments[ci].getValue (  ) .equals ( sourceString )  )  {^205^^^^^190^220^!comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^!comments[ci].getValue (  )  .getValue (  )   )  {^205^^^^^190^220^!comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^205^206^^^^190^220^!comments[ci].getValue (  ) .equals ( jsDoc )  )  { ci++;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^Preconditions.checkState ( ci <= comments.length ) ;^207^^^^^192^222^Preconditions.checkState ( ci < comments.length ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^207^^^^^192^222^Preconditions.checkState ( ci < comments.length ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^JSDocInfo info = parseJSDocInfo ( comments, jsDoc[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^210^211^^^^195^225^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^210^211^^^^195^225^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^211^212^^^^196^226^comments[ci].getAbsolutePosition (  )  ) ; node.setJSDocInfo ( info ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P11_Insert_Donor_Statement]^position2charno ( catchVar.getAbsolutePosition (  )  ) ;comments[ci].getAbsolutePosition (  )  ) ;^211^^^^^196^226^comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P11_Insert_Donor_Statement]^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;comments[ci].getAbsolutePosition (  )  ) ;^211^^^^^196^226^comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P11_Insert_Donor_Statement]^functionNode.getAbsolutePosition (  ) ;comments[ci].getAbsolutePosition (  )  ) ;^211^^^^^196^226^comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^node .getJSDocInfo (  )  ;^212^^^^^197^227^node.setJSDocInfo ( info ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^212^^^^^197^227^node.setJSDocInfo ( info ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P11_Insert_Donor_Statement]^irNode.getJsDocBuilderForNode (  ) ;node.setJSDocInfo ( info ) ;^212^^^^^197^227^node.setJSDocInfo ( info ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P11_Insert_Donor_Statement]^irNode.setJSDocInfo ( fileOverviewInfo ) ;node.setJSDocInfo ( info ) ;^212^^^^^197^227^node.setJSDocInfo ( info ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P11_Insert_Donor_Statement]^node.setDirectives ( directives ) ;node.setJSDocInfo ( info ) ;^212^^^^^197^227^node.setJSDocInfo ( info ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P11_Insert_Donor_Statement]^irNode.setCharno ( charno ) ;node.setJSDocInfo ( info ) ;^212^^^^^197^227^node.setJSDocInfo ( info ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P11_Insert_Donor_Statement]^irNode.setLineno ( lineno ) ;node.setJSDocInfo ( info ) ;^212^^^^^197^227^node.setJSDocInfo ( info ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^if  ( child.getProp (  )  == Token.NAME )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^node.removeProp ( lineno ) ;^225^^^^^210^240^node.removeProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^node.getProp ( TMP_JSDOC_PROP ) ;^225^^^^^210^240^node.removeProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^node .removeChild ( child )  ;^225^^^^^210^240^node.removeProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^225^^^^^210^240^node.removeProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P12_Insert_Condition]^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  { node.removeProp ( TMP_JSDOC_PROP ) ; }^225^^^^^210^240^node.removeProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^if  ( info != true && info.hasEnumParameterType (  )  )  {^213^^^^^198^228^if  ( info != null && info.hasEnumParameterType (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  < 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P3_Replace_Literal]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == -8 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^}  if  (  node.getChildCount (  )  == 1 * 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^registry.identifyEnumName ( child.getFirstChild (  ) .contains (  )  ) ;^218^^^^^216^221^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^} else if  ( child.getProp (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^registry.identifyEnumName ( child .newString (  )   ) ;^215^^^^^200^230^registry.identifyEnumName ( node.getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  <= 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  > Token.VAR && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^} else if  ( node.getType (  )  == Token.null && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^} else if  ( node.getProp (  )  == Token.VAR ) {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^if  ( node.getType (  )  >= Token.NAME )  {^214^^^^^199^229^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^}  if  ( child.getType (  )  == Token.VAR && node.getChildCount (  )  == 3 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P2_Replace_Operator]^} else if  ( node.getType (  )  >= Token.VAR && node.getChildCount (  )  == 1 )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P3_Replace_Literal]^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == lineno )  {^216^217^^^^201^231^} else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^}  if  ( node.getProp (  )  == Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^} else if  ( child .setType (  )   == Token.ASSIGN )  {^219^^^^^204^234^} else if  ( node.getType (  )  == Token.ASSIGN )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^String jsDoc =  ( String )  child.putProp ( TMP_JSDOC_PROP ) ;^201^^^^^186^216^String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^if  ( node.getProp ( lineno )  != null )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^if  ( TMP_JSDOC_PROP.getProp ( node )  != null )  {^200^^^^^185^215^if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P13_Insert_Block]^if  (  ( node.getJsDoc (  )  )  != null )  {     irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ; }^200^^^^^185^215^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^!comments[ci] .getLineno (  )  .equals ( jsDoc )  )  {^205^^^^^190^220^!comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^comments[ci] .getCommentType (  )   ) ;^211^^^^^196^226^comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^211^^^^^196^226^comments[ci].getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P8_Replace_Mix]^if  ( info != null && info .setLicense (  )   )  {^213^^^^^198^228^if  ( info != null && info.hasEnumParameterType (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^ci = parseAllJsDocInfo ( node, comments, ci ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^ci = parseAllJsDocInfo ( child, comments, lineno ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^ci = parseAllJsDocInfo (  comments, ci ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^ci = parseAllJsDocInfo ( child,  ci ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^ci = parseAllJsDocInfo ( child, comments ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^ci = parseAllJsDocInfo ( ci, comments, child ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^ci = parseAllJsDocInfo ( comments, child, ci ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^ci = parseAllJsDocInfo ( child, ci, comments ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^ci = parseJSDocInfo ( child, comments, ci ) ;^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^for  ( Node child : child.children (  )  )  {^229^^^^^214^244^for  ( Node child : node.children (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P7_Replace_Invocation]^for  ( Node child : node.setLineno (  )  )  {^229^^^^^214^244^for  ( Node child : node.children (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^229^230^231^^^214^244^for  ( Node child : node.children (  )  )  { ci = parseAllJsDocInfo ( child, comments, ci ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P14_Delete_Statement]^^230^^^^^215^245^ci = parseAllJsDocInfo ( child, comments, ci ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^return lineno;^233^^^^^218^248^return ci;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseAllJsDocInfo [RETURN_TYPE] int   Node node Comment[] comments int ci [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Comment[]  comments  Config  config  Node  child  node  String  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  info  int  TMP_JSDOC_PROP  charno  ci  lineno  
[P5_Replace_Variable]^return parseJSDocInfo ( comment, ci, position, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[P5_Replace_Variable]^return parseJSDocInfo (  lineno, position, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[P5_Replace_Variable]^return parseJSDocInfo ( comment,  position, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[P5_Replace_Variable]^return parseJSDocInfo ( comment, lineno,  null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[P5_Replace_Variable]^return parseJSDocInfo ( lineno, comment, position, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[P5_Replace_Variable]^return parseJSDocInfo ( comment, position, lineno, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[P8_Replace_Mix]^return parseJSDocInfo ( comment, lineno, position, false, false ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[P5_Replace_Variable]^return parseJSDocInfo ( sourceString, lineno, position, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[P5_Replace_Variable]^return parseJSDocInfo ( comment, lineno, ci, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[P5_Replace_Variable]^return parseJSDocInfo ( position, lineno, comment, null, null ) ;^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[P14_Delete_Statement]^^237^^^^^236^238^return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineno  position  
[P1_Replace_Type]^short  numOpeningChars = 3;^263^^^^^259^280^int numOpeningChars = 3;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P3_Replace_Literal]^int numOpeningChars = numOpeningChars;^263^^^^^259^280^int numOpeningChars = 3;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P2_Replace_Operator]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )   ==  numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P4_Replace_Constructor]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) ,  position2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P4_Replace_Constructor]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^new JsDocInfoParser ( new JsDocTokenStream ( sourceString.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( lineno ) , lineno, position2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , position, position2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, lineno2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( position ) , lineno, numOpeningChars2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^new JsDocInfoParser ( new JsDocTokenStream ( comment .lastIndexOf ( position , ci )  , lineno, position2charno ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, transformTokenType ( position )  + numOpeningChars ) ,^265^266^267^268^^259^280^new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P2_Replace_Operator]^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )   &  numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P4_Replace_Constructor]^new JsDocTokenStream ( comment.substring ( numOpeningChars ) ,  position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P4_Replace_Constructor]^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^new JsDocTokenStream ( sourceString.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , position, position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^new JsDocTokenStream ( numOpeningChars.substring ( comment ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^new JsDocTokenStream ( comment.substring ( position ) , lineno, numOpeningChars2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , position, lineno2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, transformTokenType ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P4_Replace_Constructor]^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) ,^264^265^266^267^^259^280^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( sourceString.substring ( numOpeningChars ) , lineno,^264^265^266^267^^259^280^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( lineno ) , lineno,^264^265^266^267^^259^280^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( lineno.substring ( numOpeningChars ) , comment,^264^265^266^267^^259^280^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^new JsDocTokenStream ( comment.substring ( position ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^new JsDocTokenStream ( comment .lastIndexOf ( numOpeningChars , lineno )  , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P8_Replace_Mix]^new JsDocTokenStream ( comment.substring ( lineno ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^266^267^268^269^^259^280^new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno, position2charno ( position )  + numOpeningChars ) , sourceName,^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P5_Replace_Variable]^position2charno ( lineno )  + numOpeningChars ) , sourceName, config, errorReporter ) ;^268^269^270^271^^259^280^position2charno ( position )  + numOpeningChars ) , sourceName, config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^transformTokenType ( position )  + numOpeningChars ) , sourceName, config, errorReporter ) ;^268^269^270^271^^259^280^position2charno ( position )  + numOpeningChars ) , sourceName, config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P8_Replace_Mix]^position2charno ( numOpeningChars )  + numOpeningChars ) , sourceName, config, errorReporter ) ;^268^269^270^271^^259^280^position2charno ( position )  + numOpeningChars ) , sourceName, config, errorReporter ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P8_Replace_Mix]^jsdocParser .setFileOverviewJSDocInfo ( fileOverviewInfo )  ;^272^^^^^259^280^jsdocParser.setFileLevelJsDocBuilder ( fileLevelJsDocBuilder ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P14_Delete_Statement]^^272^^^^^259^280^jsdocParser.setFileLevelJsDocBuilder ( fileLevelJsDocBuilder ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^jsdocParser.setFileOverviewJSDocInfo ( fileOverviewInfo ) ;jsdocParser.setFileLevelJsDocBuilder ( fileLevelJsDocBuilder ) ;^272^^^^^259^280^jsdocParser.setFileLevelJsDocBuilder ( fileLevelJsDocBuilder ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P14_Delete_Statement]^^273^274^^^^259^280^jsdocParser.setFileOverviewJSDocInfo ( fileOverviewInfo ) ; jsdocParser.parse (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^jsdocParser.setFileLevelJsDocBuilder ( fileLevelJsDocBuilder ) ;jsdocParser.setFileOverviewJSDocInfo ( fileOverviewInfo ) ;^273^^^^^259^280^jsdocParser.setFileOverviewJSDocInfo ( fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^return jsdocParser.getFileOverviewJSDocInfo (  ) ;jsdocParser.setFileOverviewJSDocInfo ( fileOverviewInfo ) ;^273^^^^^259^280^jsdocParser.setFileOverviewJSDocInfo ( fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^irNode.setJSDocInfo ( fileOverviewInfo ) ;jsdocParser.setFileOverviewJSDocInfo ( fileOverviewInfo ) ;^273^^^^^259^280^jsdocParser.setFileOverviewJSDocInfo ( fileOverviewInfo ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^jsdocParser.setFileLevelJsDocBuilder (  ) ;^274^^^^^259^280^jsdocParser.parse (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^jsdocParser .retrieveAndResetParsedJSDocInfo (  )  ;^274^^^^^259^280^jsdocParser.parse (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P14_Delete_Statement]^^274^^^^^259^280^jsdocParser.parse (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P2_Replace_Operator]^if  ( fileLevelJsDocBuilder == null )  {^275^^^^^259^280^if  ( fileLevelJsDocBuilder != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P8_Replace_Mix]^if  ( fileLevelJsDocBuilder != true )  {^275^^^^^259^280^if  ( fileLevelJsDocBuilder != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P15_Unwrap_Block]^return jsdocParser.getFileOverviewJSDocInfo();^275^276^277^278^279^259^280^if  ( fileLevelJsDocBuilder != null )  { return jsdocParser.getFileOverviewJSDocInfo (  ) ; } else { return jsdocParser.retrieveAndResetParsedJSDocInfo (  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P16_Remove_Block]^^275^276^277^278^279^259^280^if  ( fileLevelJsDocBuilder != null )  { return jsdocParser.getFileOverviewJSDocInfo (  ) ; } else { return jsdocParser.retrieveAndResetParsedJSDocInfo (  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^return jsdocParser.setFileLevelJsDocBuilder (  ) ;^278^^^^^259^280^return jsdocParser.retrieveAndResetParsedJSDocInfo (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P8_Replace_Mix]^return jsdocParser .setFileOverviewJSDocInfo ( fileOverviewInfo )  ;^278^^^^^259^280^return jsdocParser.retrieveAndResetParsedJSDocInfo (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P14_Delete_Statement]^^278^^^^^259^280^return jsdocParser.retrieveAndResetParsedJSDocInfo (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^return jsdocParser.setFileLevelJsDocBuilder (  ) ;^276^^^^^259^280^return jsdocParser.getFileOverviewJSDocInfo (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^return jsdocParser .setFileOverviewJSDocInfo ( fileOverviewInfo )  ;^276^^^^^259^280^return jsdocParser.getFileOverviewJSDocInfo (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P14_Delete_Statement]^^276^^^^^259^280^return jsdocParser.getFileOverviewJSDocInfo (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseJSDocInfo [RETURN_TYPE] JSDocInfo   String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  JsDocInfoParser  jsdocParser  Config  config  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  int  TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position  
[P1_Replace_Type]^short  lineIndex = sourceString.lastIndexOf ( '\n', position ) ;^283^^^^^282^290^int lineIndex = sourceString.lastIndexOf ( '\n', position ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P5_Replace_Variable]^int lineIndex = sourceString.lastIndexOf ( '\n', lineno ) ;^283^^^^^282^290^int lineIndex = sourceString.lastIndexOf ( '\n', position ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P5_Replace_Variable]^int lineIndex = sourceName.lastIndexOf ( '\n', position ) ;^283^^^^^282^290^int lineIndex = sourceString.lastIndexOf ( '\n', position ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P5_Replace_Variable]^int lineIndex = sourceString.lastIndexOf ( '\n' ) ;^283^^^^^282^290^int lineIndex = sourceString.lastIndexOf ( '\n', position ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P5_Replace_Variable]^int lineIndex = position.lastIndexOf ( '\n', sourceString ) ;^283^^^^^282^290^int lineIndex = sourceString.lastIndexOf ( '\n', position ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P5_Replace_Variable]^int lineIndex = sourceString.lastIndexOf ( '\n', numOpeningChars ) ;^283^^^^^282^290^int lineIndex = sourceString.lastIndexOf ( '\n', position ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P14_Delete_Statement]^^283^^^^^282^290^int lineIndex = sourceString.lastIndexOf ( '\n', position ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P2_Replace_Operator]^if  ( lineIndex > -1 )  {^284^^^^^282^290^if  ( lineIndex == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P3_Replace_Literal]^if  ( lineIndex == -lineIndex )  {^284^^^^^282^290^if  ( lineIndex == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P3_Replace_Literal]^if  ( lineIndex == -TMP_JSDOC_PROP )  {^284^^^^^282^290^if  ( lineIndex == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P5_Replace_Variable]^if  ( numOpeningChars == -1 )  {^284^^^^^282^290^if  ( lineIndex == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P6_Replace_Expression]^if  ( position - lineIndex - 1 )  {^284^^^^^282^290^if  ( lineIndex == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P6_Replace_Expression]^if  ( position - lineIndex )  {^284^^^^^282^290^if  ( lineIndex == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P8_Replace_Mix]^if  ( lineIndex == -1 - 4 )  {^284^^^^^282^290^if  ( lineIndex == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P9_Replace_Statement]^if  ( lineSet == false )  {^284^^^^^282^290^if  ( lineIndex == -1 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P15_Unwrap_Block]^return position;^284^285^286^^288^282^290^if  ( lineIndex == -1 )  { return position; } else { return position - lineIndex - 1; }^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P16_Remove_Block]^^284^285^286^^288^282^290^if  ( lineIndex == -1 )  { return position; } else { return position - lineIndex - 1; }^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P2_Replace_Operator]^return position  <  lineIndex - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P2_Replace_Operator]^return position  !=  lineIndex - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P3_Replace_Literal]^return position - lineIndex ;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P5_Replace_Variable]^return lineno - lineIndex - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P5_Replace_Variable]^return lineIndex - position - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P8_Replace_Mix]^returnposition - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P5_Replace_Variable]^return lineIndex;^285^^^^^282^290^return position;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P8_Replace_Mix]^return lineno;^285^^^^^282^290^return position;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P5_Replace_Variable]^return numOpeningChars;^285^^^^^282^290^return position;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P2_Replace_Operator]^return position  &  lineIndex - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P2_Replace_Operator]^return position  >  lineIndex - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P3_Replace_Literal]^return position - lineIndex - lineIndex;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P5_Replace_Variable]^return numOpeningChars - lineIndex - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P5_Replace_Variable]^return position - lineno - 1;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P8_Replace_Mix]^return numOpeningChars  ;^288^^^^^282^290^return position - lineIndex - 1;^[CLASS] IRFactory TransformDispatcher  [METHOD] position2charno [RETURN_TYPE] int   int position [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P5_Replace_Variable]^return node.process ( transformDispatcher ) ;^293^^^^^292^294^return transformDispatcher.process ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] justTransform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  node  
[P7_Replace_Invocation]^return transformDispatcher.processScope ( node ) ;^293^^^^^292^294^return transformDispatcher.process ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] justTransform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  node  
[P14_Delete_Statement]^^293^294^^^^292^294^return transformDispatcher.process ( node ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] justTransform [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  node  
[P5_Replace_Variable]^Node nodeode = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^Node node = new Node ( position2charno ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenType ( n.getProp (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P5_Replace_Variable]^Node childode = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenType ( n .setType (  )   )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P8_Replace_Mix]^Node childode = new Node ( position2charno ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P14_Delete_Statement]^^299^300^301^302^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ; for  ( com.google.javascript.jscomp.mozilla.rhino.Node child : n )  { node.addChildToBack ( transform (  ( AstNode ) child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P14_Delete_Statement]^^301^302^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P8_Replace_Mix]^return n;^303^^^^^297^304^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  n  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  
[P7_Replace_Invocation]^Node ret = justTransform ( n ) ;^316^^^^^315^323^Node ret = transform ( n ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P11_Insert_Donor_Statement]^Node irNode = irFactory.transform ( node ) ;Node ret = transform ( n ) ;^316^^^^^315^323^Node ret = transform ( n ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;Node ret = transform ( n ) ;^316^^^^^315^323^Node ret = transform ( n ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P11_Insert_Donor_Statement]^Node irNode = justTransform ( node ) ;Node ret = transform ( n ) ;^316^^^^^315^323^Node ret = transform ( n ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P11_Insert_Donor_Statement]^Node newName = transform ( name ) ;Node ret = transform ( n ) ;^316^^^^^315^323^Node ret = transform ( n ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P14_Delete_Statement]^^316^317^318^319^320^315^323^Node ret = transform ( n ) ; if  ( ret.getType (  )  == Token.STRING )  { ret.putBooleanProp ( Node.QUOTED_PROP, true ) ; } else if  ( ret.getType (  )  == Token.NAME )  { ret.setType ( Token.STRING ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P2_Replace_Operator]^if  ( ret.getType (  )  > Token.STRING )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P2_Replace_Operator]^if  ( ret.getType (  )  >= Token.STRING )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P5_Replace_Variable]^if  ( ret.getType (  )  == Token.transformDispatcher )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P6_Replace_Expression]^if  ( ret.getType() == NAME )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P7_Replace_Invocation]^if  ( ret.getProp (  )  == Token.STRING )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P7_Replace_Invocation]^if  ( ret .setType (  )   == Token.STRING )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.EMPTY )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P9_Replace_Statement]^if  ( c.getType (  )  == Token.EMPTY )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.NAME )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P15_Unwrap_Block]^ret.putBooleanProp(Node.QUOTED_PROP, true);^317^318^319^320^321^315^323^if  ( ret.getType (  )  == Token.STRING )  { ret.putBooleanProp ( Node.QUOTED_PROP, true ) ; } else if  ( ret.getType (  )  == Token.NAME )  { ret.setType ( Token.STRING ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P16_Remove_Block]^^317^318^319^320^321^315^323^if  ( ret.getType (  )  == Token.STRING )  { ret.putBooleanProp ( Node.QUOTED_PROP, true ) ; } else if  ( ret.getType (  )  == Token.NAME )  { ret.setType ( Token.STRING ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P13_Insert_Block]^if  (  (  ( node.getType (  )  )  ==  ( VAR )  )  &&  (  ( node.getChildCount (  )  )  == 1 )  )  {     registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ; }else     if  (  ( node.getType (  )  )  ==  ( ASSIGN )  )  {         registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;     }^317^^^^^315^323^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P2_Replace_Operator]^} else if  ( ret.getType (  )  <= Token.NAME )  {^319^^^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P5_Replace_Variable]^} else if  ( ret.getType (  )  == Token.transformDispatcher )  {^319^^^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P6_Replace_Expression]^} else {^319^^^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P7_Replace_Invocation]^} else if  ( ret.getProp (  )  == Token.NAME )  {^319^^^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P8_Replace_Mix]^}  if  ( ret.getProp (  )  == Token.NAME )  {^319^^^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P15_Unwrap_Block]^ret.setType(Token.STRING);^319^320^321^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  { ret.setType ( Token.STRING ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P16_Remove_Block]^^319^320^321^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  { ret.setType ( Token.STRING ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( ASSIGN )  )  {     registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^319^^^^^315^323^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P13_Insert_Block]^if  (  ( c.getType (  )  )  ==  ( EMPTY )  )  {     skipCount++; }^319^^^^^315^323^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( EMPTY )  )  {     node.removeChild ( child ) ;     skipIndexes[j] = i;     j++; }^319^^^^^315^323^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P7_Replace_Invocation]^ret.setLineno ( Token.STRING ) ;^320^^^^^315^323^ret.setType ( Token.STRING ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P7_Replace_Invocation]^ret .getType (  )  ;^320^^^^^315^323^ret.setType ( Token.STRING ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P14_Delete_Statement]^^320^^^^^315^323^ret.setType ( Token.STRING ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P12_Insert_Condition]^if  ( ret.getType (  )  == Token.STRING )  { ret.setType ( Token.STRING ) ; }^320^^^^^315^323^ret.setType ( Token.STRING ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P3_Replace_Literal]^ret.putBooleanProp ( Node.QUOTED_PROP, false ) ;^318^^^^^315^323^ret.putBooleanProp ( Node.QUOTED_PROP, true ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P8_Replace_Mix]^ret .putProp ( position )  ;^318^^^^^315^323^ret.putBooleanProp ( Node.QUOTED_PROP, true ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P14_Delete_Statement]^^318^^^^^315^323^ret.putBooleanProp ( Node.QUOTED_PROP, true ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P2_Replace_Operator]^} else if  ( ret.getType (  )  != Token.NAME )  {^319^^^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P8_Replace_Mix]^ret .putProp ( ci )  ;^318^^^^^315^323^ret.putBooleanProp ( Node.QUOTED_PROP, true ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  ret  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  AstNode  n  
[P9_Replace_Statement]^if  ( caseNode.isDefault (  )  )  {^327^^^^^326^356^if  ( literalNode.isDestructuring (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P15_Unwrap_Block]^reportDestructuringAssign(literalNode);^327^328^329^^^326^356^if  ( literalNode.isDestructuring (  )  )  { reportDestructuringAssign ( literalNode ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P16_Remove_Block]^^327^328^329^^^326^356^if  ( literalNode.isDestructuring (  )  )  { reportDestructuringAssign ( literalNode ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^transformAsString ( literalNode ) ;^328^^^^^326^356^reportDestructuringAssign ( literalNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^328^^^^^326^356^reportDestructuringAssign ( literalNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^if  ( literalNode .getElements (  )   )  {^327^^^^^326^356^if  ( literalNode.isDestructuring (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^Node node = new Node ( Token.transformDispatcher ) ;^331^^^^^326^356^Node node = new Node ( Token.ARRAYLIT ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P1_Replace_Type]^short  skipCount = 0;^332^^^^^326^356^int skipCount = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P3_Replace_Literal]^int skipCount = 2;^332^^^^^326^356^int skipCount = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^int i = 0;int skipCount = 0;^332^^^^^326^356^int skipCount = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P12_Insert_Condition]^if  ( skipCount > 0 )  { int skipCount = 0; }^332^^^^^326^356^int skipCount = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P2_Replace_Operator]^if  ( c.getType (  )  != Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^if  ( c.getType (  )  == Token.transformDispatcher )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^if  ( c.getProp (  )  == Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P9_Replace_Statement]^if  ( ret.getType (  )  == Token.STRING )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.NAME )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P15_Unwrap_Block]^skipCount++;^335^336^337^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  { skipCount++; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P16_Remove_Block]^^335^336^337^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  { skipCount++; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( ASSIGN )  )  {     registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^335^^^^^326^356^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P13_Insert_Block]^if  (  ( ret.getType (  )  )  ==  ( NAME )  )  {     ret.setType ( Token.STRING ) ; }^335^^^^^326^356^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( EMPTY )  )  {     node.removeChild ( child ) ;     skipIndexes[j] = i;     j++; }^335^^^^^326^356^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^Node c = justTransform ( child ) ;^334^^^^^326^356^Node c = transform ( child ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node irNode = irFactory.transform ( node ) ;Node c = transform ( child ) ;^334^^^^^326^356^Node c = transform ( child ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node ret = transform ( n ) ;Node c = transform ( child ) ;^334^^^^^326^356^Node c = transform ( child ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node irNode = justTransform ( node ) ;Node c = transform ( child ) ;^334^^^^^326^356^Node c = transform ( child ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node newName = transform ( name ) ;Node c = transform ( child ) ;^334^^^^^326^356^Node c = transform ( child ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^for  ( AstNode child : literalNode .isDestructuring (  )   )  {^333^^^^^326^356^for  ( AstNode child : literalNode.getElements (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^333^334^335^336^337^326^356^for  ( AstNode child : literalNode.getElements (  )  )  { Node c = transform ( child ) ; if  ( c.getType (  )  == Token.EMPTY )  { skipCount++; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^334^335^336^337^^326^356^Node c = transform ( child ) ; if  ( c.getType (  )  == Token.EMPTY )  { skipCount++; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;Node c = transform ( child ) ;^334^^^^^326^356^Node c = transform ( child ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.removeChild ( child ) ;Node c = transform ( child ) ;^334^^^^^326^356^Node c = transform ( child ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;Node c = transform ( child ) ;^334^^^^^326^356^Node c = transform ( child ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^if  ( c .setType (  )   == Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P8_Replace_Mix]^if  ( node.getProp (  )  == Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^node.addChildToBack ( child ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P2_Replace_Operator]^if  ( skipCount >= 0 )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P3_Replace_Literal]^if  ( skipCount > charno )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P3_Replace_Literal]^if  ( skipCount > i )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P3_Replace_Literal]^if  ( skipCount >  )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^if  ( numOpeningChars > 0 )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P6_Replace_Expression]^if  ( child.getType() == EMPTY )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P8_Replace_Mix]^if  ( skipCount > 0L )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P2_Replace_Operator]^if  ( child.getType (  )  != Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^if  ( child.getType (  )  == Token.transformDispatcher )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^if  ( child.getProp (  )  == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^if  ( child .setType (  )   == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P8_Replace_Mix]^if  ( child.getProp (  )  == Token.transformDispatcher )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P9_Replace_Statement]^if  ( c.getType (  )  == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P9_Replace_Statement]^if  ( ret.getType (  )  == Token.STRING )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.NAME )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P15_Unwrap_Block]^node.removeChild(child); skipIndexes[j] = i; j++;^346^347^348^349^350^326^356^if  ( child.getType (  )  == Token.EMPTY )  { node.removeChild ( child ) ; skipIndexes[j] = i; j++; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P16_Remove_Block]^^346^347^348^349^350^326^356^if  ( child.getType (  )  == Token.EMPTY )  { node.removeChild ( child ) ; skipIndexes[j] = i; j++; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( ASSIGN )  )  {     registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^346^^^^^326^356^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P13_Insert_Block]^if  (  ( c.getType (  )  )  ==  ( EMPTY )  )  {     skipCount++; }^346^^^^^326^356^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P13_Insert_Block]^if  (  ( ret.getType (  )  )  ==  ( NAME )  )  {     ret.setType ( Token.STRING ) ; }^346^^^^^326^356^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^skipIndexes[j] = numOpeningChars;^348^^^^^326^356^skipIndexes[j] = i;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P8_Replace_Mix]^skipIndexes[j] ;^348^^^^^326^356^skipIndexes[j] = i;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^node.removeChild ( c ) ;^347^^^^^326^356^node.removeChild ( child ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^347^^^^^326^356^node.removeChild ( child ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.setDirectives ( directives ) ;node.removeChild ( child ) ;^347^^^^^326^356^node.removeChild ( child ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;node.removeChild ( child ) ;^347^^^^^326^356^node.removeChild ( child ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P8_Replace_Mix]^skipIndexes[j]  =  skipIndexes[j] ;^348^^^^^326^356^skipIndexes[j] = i;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P1_Replace_Type]^long  i = 0;^343^^^^^326^356^int i = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P3_Replace_Literal]^int i = ci;^343^^^^^326^356^int i = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^int j = 0;int i = 0;^343^^^^^326^356^int i = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^int skipCount = 0;int i = 0;^343^^^^^326^356^int i = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P1_Replace_Type]^short  j = 0;^344^^^^^326^356^int j = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P3_Replace_Literal]^int j = charno;^344^^^^^326^356^int j = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^int i = 0;int j = 0;^344^^^^^326^356^int j = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^for  ( Node child : child.children (  )  )  {^345^^^^^326^356^for  ( Node child : node.children (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^for  ( Node child : node.setLineno (  )  )  {^345^^^^^326^356^for  ( Node child : node.children (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^for  ( Node child : node .getChildCount (  )   )  {^345^^^^^326^356^for  ( Node child : node.children (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^345^346^347^348^349^326^356^for  ( Node child : node.children (  )  )  { if  ( child.getType (  )  == Token.EMPTY )  { node.removeChild ( child ) ; skipIndexes[j] = i; j++; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P8_Replace_Mix]^node .removeFirstChild (  )  ;^347^^^^^326^356^node.removeChild ( child ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^347^348^^^^326^356^node.removeChild ( child ) ; skipIndexes[j] = i;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^node.putProp ( Node.SKIP_INDEXES_PROP ) ;^353^^^^^326^356^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P8_Replace_Mix]^node .putProp ( position )  ;^353^^^^^326^356^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^353^^^^^326^356^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^353^^^^^326^356^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^353^^^^^326^356^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^353^^^^^326^356^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^skipIndexes[j] = skipCount;^348^^^^^326^356^skipIndexes[j] = i;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P1_Replace_Type]^short  i = 0;^343^^^^^326^356^int i = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P3_Replace_Literal]^int i = -8;^343^^^^^326^356^int i = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P3_Replace_Literal]^int j = skipCount;^344^^^^^326^356^int j = 0;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P8_Replace_Mix]^for  ( Node child : child.setLineno (  )  )  {^345^^^^^326^356^for  ( Node child : node.children (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P8_Replace_Mix]^if  ( node.getProp (  )  == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^return child;^355^^^^^326^356^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  c  child  node  int[]  skipIndexes  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  ArrayLiteral  literalNode  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^return processNewExpression ( assignmentNode ) ;^360^^^^^359^361^return processInfixExpression ( assignmentNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAssignment [RETURN_TYPE] Node   Assignment assignmentNode [VARIABLES] Assignment  assignmentNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^360^^^^^359^361^return processInfixExpression ( assignmentNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAssignment [RETURN_TYPE] Node   Assignment assignmentNode [VARIABLES] Assignment  assignmentNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node node = new ScriptOrFnNode ( Token.transformDispatcher ) ;^365^^^^^364^371^Node node = new ScriptOrFnNode ( Token.SCRIPT ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P14_Delete_Statement]^^367^368^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P5_Replace_Variable]^parseDirectives ( child ) ;^369^^^^^364^371^parseDirectives ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P7_Replace_Invocation]^isDirective ( node ) ;^369^^^^^364^371^parseDirectives ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P8_Replace_Mix]^isDirective ( child ) ;^369^^^^^364^371^parseDirectives ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P14_Delete_Statement]^^369^370^^^^364^371^parseDirectives ( node ) ; return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.setDirectives ( directives ) ;parseDirectives ( node ) ;^369^^^^^364^371^parseDirectives ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^parseDirectives ( bodyNode ) ;parseDirectives ( node ) ;^369^^^^^364^371^parseDirectives ( node ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P5_Replace_Variable]^return child;^370^^^^^364^371^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  child  node  String  comment  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  AstRoot  rootNode  
[P7_Replace_Invocation]^while  ( parseDirectives ( node.getFirstChild (  )  )  )  {^385^^^^^382^397^while  ( isDirective ( node.getFirstChild (  )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^while  ( isDirective ( node.getProp (  )  )  )  {^385^^^^^382^397^while  ( isDirective ( node.getFirstChild (  )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^while  ( isDirective ( node.contains (  )  )  )  {^385^^^^^382^397^while  ( isDirective ( node.getFirstChild (  )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^while  ( isDirective ( node .removeFirstChild (  )   )  )  {^385^^^^^382^397^while  ( isDirective ( node.getFirstChild (  )  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^if  ( directives != null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^if  ( sourceNames == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^if  ( directive == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^if  ( directivess == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^if  ( sourceStrings == this )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( name == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( prev != null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( fnName != null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P15_Unwrap_Block]^directives = com.google.common.collect.Sets.newHashSet(directive);^387^388^389^390^391^382^397^if  ( directives == null )  { directives = Sets.newHashSet ( directive ) ; } else { directives.add ( directive ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P16_Remove_Block]^^387^388^389^390^391^382^397^if  ( directives == null )  { directives = Sets.newHashSet ( directive ) ; } else { directives.add ( directive ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^directives.add ( sourceString ) ;^390^^^^^382^397^directives.add ( directive ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^390^^^^^382^397^directives.add ( directive ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.setDirectives ( directives ) ;directives.add ( directive ) ;^390^^^^^382^397^directives.add ( directive ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^directives = Sets.newHashSet ( directive ) ;directives.add ( directive ) ;^390^^^^^382^397^directives.add ( directive ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^directives = Sets.newHashSet ( sourceString ) ;^388^^^^^382^397^directives = Sets.newHashSet ( directive ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^directives =  Sets.newHashSet ( sourceName ) ;^388^^^^^382^397^directives = Sets.newHashSet ( directive ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^388^^^^^382^397^directives = Sets.newHashSet ( directive ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^directives.add ( directive ) ;directives = Sets.newHashSet ( directive ) ;^388^^^^^382^397^directives = Sets.newHashSet ( directive ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P1_Replace_Type]^char directive = node.removeFirstChild (  ) .getFirstChild (  ) .getchar (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .contains (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^String directive = node.removeFirstChild (  ) .contains (  ) .getString (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^String directive = node.removeProp (  ) .getFirstChild (  ) .getString (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^while  ( isDirective ( node.getFirstChild (  )  )  )  { String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^String directive = node .getFirstChild (  )  .getFirstChild (  ) .getString (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^directives.add ( sourceName ) ;^390^^^^^382^397^directives.add ( directive ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^if  ( sourceStrings == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^if  ( directives == true )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^directives .contains ( sourceName )  ;^390^^^^^382^397^directives.add ( directive ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^String directive = node.removeFirstChild (  )  .removeFirstChild (  )  .getString (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^385^386^^^^382^397^while  ( isDirective ( node.getFirstChild (  )  )  )  { String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^String directive = node.removeFirstChild (  ) .getFirstChild (  )  .newString (  )  ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^directives .contains ( jsDoc )  ;^390^^^^^382^397^directives.add ( directive ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^if  ( directives == null )  {^394^^^^^382^397^if  ( directives != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^if  ( directives != false )  {^394^^^^^382^397^if  ( directives != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( name == null )  {^394^^^^^382^397^if  ( directives != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( prev != null )  {^394^^^^^382^397^if  ( directives != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( fileOverviewInfo != null )  {^394^^^^^382^397^if  ( directives != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( fnName != null )  {^394^^^^^382^397^if  ( directives != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P15_Unwrap_Block]^node.setDirectives(directives);^394^395^396^^^382^397^if  ( directives != null )  { node.setDirectives ( directives ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P16_Remove_Block]^^394^395^396^^^382^397^if  ( directives != null )  { node.setDirectives ( directives ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  ( prev != null )  {     prev.addChildToBack ( cur ) ; }^394^^^^^382^397^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^395^^^^^382^397^node.setDirectives ( directives ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^parseDirectives ( node ) ;node.setDirectives ( directives ) ;^395^^^^^382^397^node.setDirectives ( directives ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.setJSDocInfo ( info ) ;node.setDirectives ( directives ) ;^395^^^^^382^397^node.setDirectives ( directives ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.removeChild ( child ) ;node.setDirectives ( directives ) ;^395^^^^^382^397^node.setDirectives ( directives ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^parseDirectives ( bodyNode ) ;node.setDirectives ( directives ) ;^395^^^^^382^397^node.setDirectives ( directives ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^directives.add ( directive ) ;node.setDirectives ( directives ) ;^395^^^^^382^397^node.setDirectives ( directives ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^if  ( n != null )  return false;^400^^^^^399^406^if  ( n == null )  return false;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P3_Replace_Literal]^if  ( n == null )  return true;^400^^^^^399^406^if  ( n == null )  return false;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^if  ( n == true )  return false;^400^^^^^399^406^if  ( n == null )  return false;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P1_Replace_Type]^short  nType = n.getType (  ) ;^402^^^^^399^406^int nType = n.getType (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^int nType = n.getProp (  ) ;^402^^^^^399^406^int nType = n.getType (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^int nType = n .setType (  )  ;^402^^^^^399^406^int nType = n.getType (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^int lineno = node.getLineno (  ) ;int nType = n.getType (  ) ;^402^^^^^399^406^int nType = n.getType (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^402^^^^^399^406^int nType = n.getType (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  || n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^return  ( nType == Token.EXPR_RESULT && nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^return  ( nType >= Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^return  ( nType != Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^return  ( skipCount == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^return  ( nType == Token.transformDispatcher || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^return  ( nType == Token.EXPR_RESULT || nType == Token.transformDispatcher )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.transformDispatcher && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && 4.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^return  ( nTypeType == Token.EXPR_RESULT || n == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^return  ( ALLOWED_DIRECTIVESType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && n.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .equals (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  )  .setType (  )   == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getProp (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.add ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .contains (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  )  .newString (  )   ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^return  ( lineIndex ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^n.getFirstChild (  ) .equals (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^404^405^^^^399^406^n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^n.getFirstChild (  )  .setType (  )   == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^404^405^^^^399^406^n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^n.getProp (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^404^405^^^^399^406^n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^404^405^^^^399^406^n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^n .removeFirstChild (  )  .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n^404^405^^^^399^406^n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^ALLOWED_DIRECTIVES.add ( n.getFirstChild (  ) .getString (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^ALLOWED_DIRECTIVES .getString (  )   ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .contains (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^ALLOWED_DIRECTIVES.contains ( n.getProp (  ) .getString (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  )  .newString (  )   ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.getChildCount (  )  == 1 )  { registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return parseDirectives ( blockNode ) ;^410^^^^^409^411^return processGeneric ( blockNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processBlock [RETURN_TYPE] Node   Block blockNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Block  blockNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^410^^^^^409^411^return processGeneric ( blockNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processBlock [RETURN_TYPE] Node   Block blockNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Block  blockNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node node = new Node ( Token.transformDispatcher ) ;^415^^^^^414^420^Node node = new Node ( Token.BREAK ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^if  ( statementNode.getBreakLabel (  )  == null )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^if  ( statementNode.getBreakLabel (  )  != false )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( initializerNode.getInitializer (  )  != null )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( statementNode.getLabel (  )  != null )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( statementNode.getElsePart (  )  != null )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( statementNode.getReturnValue (  )  != null )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( caseNode.getStatements (  )  != null )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P15_Unwrap_Block]^node.addChildToBack(transform(statementNode.getBreakLabel()));^416^417^418^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  { node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P16_Remove_Block]^^416^417^418^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  { node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getReturnValue (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^416^^^^^414^420^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^416^^^^^414^420^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  ( finallyBlock != null )  {     node.addChildToBack ( transform ( finallyBlock )  ) ; }^416^^^^^414^420^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( initializerNode.getInitializer (  )  )  != null )  {     node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;     node.setLineno ( node.getLineno (  )  ) ; }^416^^^^^414^420^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getElsePart (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^416^^^^^414^420^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^417^^^^^414^420^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( statementNode.getBreakLabel (  )  )  ) ;^417^^^^^414^420^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^417^418^^^^414^420^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getBreakLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^417^^^^^414^420^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^AstNode catchVar = clauseNode .getLineno (  )  ;^424^^^^^423^440^AstNode catchVar = clauseNode.getVarName (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^AstNode expr = caseNode.getExpression (  ) ;AstNode catchVar = clauseNode.getVarName (  ) ;^424^^^^^423^440^AstNode catchVar = clauseNode.getVarName (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;AstNode catchVar = clauseNode.getVarName (  ) ;^424^^^^^423^440^AstNode catchVar = clauseNode.getVarName (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P14_Delete_Statement]^^424^425^^^^423^440^AstNode catchVar = clauseNode.getVarName (  ) ; Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P5_Replace_Variable]^Node node = new Node ( Token. transform ( catchVar )  ) ;^425^^^^^423^440^Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P7_Replace_Invocation]^Node node = new Node ( Token.CATCH, justTransform ( catchVar )  ) ;^425^^^^^423^440^Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^425^^^^^423^440^Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^425^^^^^423^440^Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P2_Replace_Operator]^if  ( clauseNode.getCatchCondition (  )  == null )  {^426^^^^^423^440^if  ( clauseNode.getCatchCondition (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P7_Replace_Invocation]^if  ( clauseNode .getVarName (  )   != null )  {^426^^^^^423^440^if  ( clauseNode.getCatchCondition (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P8_Replace_Mix]^if  ( clauseNode .getVarName (  )   != this )  {^426^^^^^423^440^if  ( clauseNode.getCatchCondition (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P9_Replace_Statement]^if  ( node.getJsDoc (  )  != null )  {^426^^^^^423^440^if  ( clauseNode.getCatchCondition (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P9_Replace_Statement]^if  ( node.getComments (  )  != null )  {^426^^^^^423^440^if  ( clauseNode.getCatchCondition (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P9_Replace_Statement]^if  ( caseNode.getStatements (  )  != null )  {^426^^^^^423^440^if  ( clauseNode.getCatchCondition (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P5_Replace_Variable]^Node catchCondition = new Node ( Token.transformDispatcher ) ;^429^^^^^423^440^Node catchCondition = new Node ( Token.EMPTY ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P1_Replace_Type]^long  clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^433^434^^^^423^440^int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P7_Replace_Invocation]^int clauseAbsolutePosition = transformTokenType ( catchVar.getAbsolutePosition (  )  ) ;^433^434^^^^423^440^int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^433^434^^^^423^440^int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P7_Replace_Invocation]^catchCondition.setLineno ( catchVar .getCommentType (  )   ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P14_Delete_Statement]^^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^catchCondition.setCharno ( clauseAbsolutePosition ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P7_Replace_Invocation]^transformTokenType ( catchVar.getAbsolutePosition (  )  ) ;^434^^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P7_Replace_Invocation]^position2charno ( catchVar .getCommentType (  )   ) ;^434^^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P14_Delete_Statement]^^434^^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^comments[ci].getAbsolutePosition (  )  ) ;position2charno ( catchVar.getAbsolutePosition (  )  ) ;^434^^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;position2charno ( catchVar.getAbsolutePosition (  )  ) ;^434^^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;position2charno ( catchVar.getAbsolutePosition (  )  ) ;^434^^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^functionNode.getAbsolutePosition (  ) ;position2charno ( catchVar.getAbsolutePosition (  )  ) ;^434^^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^catchCondition.setCharno ( clauseAbsolutePosition ) ;position2charno ( catchVar.getAbsolutePosition (  )  ) ;^434^^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P14_Delete_Statement]^^434^435^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ; catchCondition.setCharno ( clauseAbsolutePosition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P5_Replace_Variable]^catchCondition.setCharno ( lineno ) ;^435^^^^^423^440^catchCondition.setCharno ( clauseAbsolutePosition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P14_Delete_Statement]^^435^^^^^423^440^catchCondition.setCharno ( clauseAbsolutePosition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;catchCondition.setCharno ( clauseAbsolutePosition ) ;^435^^^^^423^440^catchCondition.setCharno ( clauseAbsolutePosition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^position2charno ( catchVar.getAbsolutePosition (  )  ) ;catchCondition.setCharno ( clauseAbsolutePosition ) ;^435^^^^^423^440^catchCondition.setCharno ( clauseAbsolutePosition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;catchCondition.setCharno ( clauseAbsolutePosition ) ;^435^^^^^423^440^catchCondition.setCharno ( clauseAbsolutePosition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P8_Replace_Mix]^node .addChildToBack (  )  ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P14_Delete_Statement]^^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( clauseNode.getCatchCondition (  )  )  ) ;^427^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P7_Replace_Invocation]^node.addChildToBack ( transform ( clauseNode .getVarName (  )   )  ) ;^427^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P8_Replace_Mix]^node .addChildToBack (  )   ) ;^427^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P12_Insert_Condition]^if  ( clauseNode.getCatchCondition (  )  != null )  { node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ; }^427^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P1_Replace_Type]^short  clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^433^434^^^^423^440^int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P8_Replace_Mix]^catchCondition .setLineno (  )  ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P8_Replace_Mix]^catchCondition.setCharno ( numOpeningChars ) ;^435^^^^^423^440^catchCondition.setCharno ( clauseAbsolutePosition ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P14_Delete_Statement]^^438^439^440^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ; return node; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P7_Replace_Invocation]^node.addChildToBack ( transform ( clauseNode .getLineno (  )   )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P5_Replace_Variable]^return catchCondition;^439^^^^^423^440^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  catchCondition  node  String  comment  directive  jsDoc  sourceName  sourceString  CatchClause  clauseNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  catchVar  
[P5_Replace_Variable]^return new Node ( Token. transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^444^445^446^447^^443^449^return new Node ( Token.HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.HOOK, justTransform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^444^445^446^447^^443^449^return new Node ( Token.HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.HOOK, transform ( exprNode .getTrueExpression (  )   ) , transform ( exprNode.getTrueExpression (  )  ) ,^444^445^446^447^^443^449^return new Node ( Token.HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^return new Node ( Token.HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode .getTestExpression (  )   ) ,^444^445^446^447^^443^449^return new Node ( Token.HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ;^446^447^448^^^443^449^transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^446^447^448^449^^443^449^transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transform ( exprNode .getTrueExpression (  )   ) , transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ;^446^447^448^^^443^449^transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ;^447^448^^^^443^449^transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^447^448^449^^^443^449^transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transform ( exprNode .getTestExpression (  )   ) , transform ( exprNode.getFalseExpression (  )  )  ) ;^447^448^^^^443^449^transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^448^449^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^exprNode.getOperatorPosition (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ConditionalExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node node = new Node ( Token.transformDispatcher ) ;^453^^^^^452^458^Node node = new Node ( Token.CONTINUE ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P2_Replace_Operator]^if  ( statementNode.getLabel (  )  == null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P8_Replace_Mix]^if  ( statementNode.getLabel (  )  != this )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P9_Replace_Statement]^if  ( node.getJsDoc (  )  != null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P9_Replace_Statement]^if  ( initializerNode.getInitializer (  )  != null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P9_Replace_Statement]^if  ( node.getComments (  )  != null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P9_Replace_Statement]^if  ( statementNode.getBreakLabel (  )  != null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P9_Replace_Statement]^if  ( statementNode.getElsePart (  )  != null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P9_Replace_Statement]^if  ( statementNode.getReturnValue (  )  != null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P9_Replace_Statement]^if  ( caseNode.getStatements (  )  != null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P15_Unwrap_Block]^node.addChildToBack(transform(statementNode.getLabel()));^454^455^456^^^452^458^if  ( statementNode.getLabel (  )  != null )  { node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P16_Remove_Block]^^454^455^456^^^452^458^if  ( statementNode.getLabel (  )  != null )  { node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P13_Insert_Block]^if  (  ( statementNode.getReturnValue (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^454^^^^^452^458^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P13_Insert_Block]^if  ( finallyBlock != null )  {     node.addChildToBack ( transform ( finallyBlock )  ) ; }^454^^^^^452^458^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P13_Insert_Block]^if  (  ( initializerNode.getInitializer (  )  )  != null )  {     node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;     node.setLineno ( node.getLineno (  )  ) ; }^454^^^^^452^458^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P13_Insert_Block]^if  (  ( statementNode.getBreakLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^454^^^^^452^458^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P13_Insert_Block]^if  (  ( statementNode.getElsePart (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^454^^^^^452^458^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^455^^^^^452^458^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( statementNode.getLabel (  )  )  ) ;^455^^^^^452^458^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P14_Delete_Statement]^^455^456^^^^452^458^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P13_Insert_Block]^if  (  ( statementNode.getLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^455^^^^^452^458^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ContinueStatement  statementNode  
[P5_Replace_Variable]^return new Node ( Token. transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^462^463^464^465^^461^466^return new Node ( Token.DO, transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.DO, justTransform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^462^463^464^465^^461^466^return new Node ( Token.DO, transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.DO, transform ( loopNode .getLineno (  )   ) , transform ( loopNode.getCondition (  )  )  ) ;^462^463^464^465^^461^466^return new Node ( Token.DO, transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^464^465^^^^461^466^transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^464^465^466^^^461^466^transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transform ( loopNode .getBody (  )   )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^465^466^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P12_Insert_Condition]^if  ( clauseNode.getCatchCondition (  )  != null )  { transform ( loopNode.getCondition (  )  )  ) ; }^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  DoLoop  loopNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^return new Node ( Token. transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^470^471^472^473^^469^474^return new Node ( Token.GETELEM, transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P7_Replace_Invocation]^return new Node ( Token.GETELEM, justTransform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^470^471^472^473^^469^474^return new Node ( Token.GETELEM, transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P7_Replace_Invocation]^justTransform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^472^473^^^^469^474^transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P14_Delete_Statement]^^472^473^474^^^469^474^transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P8_Replace_Mix]^transform ( getNode .getElement (  )   ) , transform ( getNode.getElement (  )  )  ) ;^472^473^^^^469^474^transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P7_Replace_Invocation]^justTransform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P7_Replace_Invocation]^transform ( getNode .getTarget (  )   )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P14_Delete_Statement]^^473^474^^^^469^474^transform ( getNode.getElement (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P12_Insert_Condition]^if  ( irNode.getLineno (  )  == -1 )  { transform ( getNode.getElement (  )  )  ) ; }^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  ElementGet  getNode  
[P5_Replace_Variable]^Node node = new Node ( Token.transformDispatcher ) ;^478^^^^^477^480^Node node = new Node ( Token.EMPTY ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processEmptyExpression [RETURN_TYPE] Node   EmptyExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  EmptyExpression  exprNode  
[P7_Replace_Invocation]^Node node = new Node ( position2charno ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenType ( statementNode .setType (  )   )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^484^485^486^487^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ; node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ; return node; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^485^^^^^483^487^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( statementNode.getExpression (  )  )  ) ;^485^^^^^483^487^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( transform ( statementNode .getType (  )   )  ) ;^485^^^^^483^487^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^485^486^487^^^483^487^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ; return node; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  ExpressionStatement  statementNode  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P4_Replace_Constructor]^return return  Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratednew Node ( HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  )   ) ,^491^492^493^494^^490^496^return new Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^return new Node ( Token. transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^491^492^493^494^^490^496^return new Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.FOR, justTransform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^491^492^493^494^^490^496^return new Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^493^494^495^^^490^496^transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transform ( loopNode .getIteratedObject (  )   ) , transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^493^494^495^^^490^496^transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^493^494^495^496^^490^496^transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^494^495^^^^490^496^transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^494^495^496^^^490^496^transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transform ( loopNode .getLineno (  )   )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^495^496^^^^490^496^transform ( loopNode.getBody (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node node = new Node ( Token. transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^500^501^502^503^^499^507^Node node = new Node ( Token.FOR, transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node node = new Node ( Token.FOR, justTransform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^500^501^502^503^^499^507^Node node = new Node ( Token.FOR, transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^Node node = new Node ( Token.FOR, transform ( loopNode.getInitializer (  )  ) , transform ( loopNode .getBody (  )   ) ,^500^501^502^503^^499^507^Node node = new Node ( Token.FOR, transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^Node node = new Node ( Token.FOR, transform ( loopNode .getCondition (  )   ) , transform ( loopNode.getCondition (  )  ) ,^500^501^502^503^^499^507^Node node = new Node ( Token.FOR, transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;^502^503^504^^^499^507^transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^502^503^504^505^506^499^507^transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ; node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ; return node; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transform ( loopNode .getCondition (  )   ) , transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;^502^503^504^^^499^507^transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;^503^504^^^^499^507^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transform ( loopNode .getBody (  )   ) , transform ( loopNode.getIncrement (  )  )  ) ;^503^504^^^^499^507^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^503^504^505^506^507^499^507^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ; node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ; return node; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^504^505^506^507^^499^507^transform ( loopNode.getIncrement (  )  )  ) ; node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ; return node; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^transform ( loopNode .getInitializer (  )   )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^505^506^507^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ; return node; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( transform ( loopNode .getLineno (  )   )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  ForLoop  loopNode  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node node = new Node ( position2charno ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;^511^512^^^^510^521^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^Node node = new Node ( justTransformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;^511^512^^^^510^521^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenType ( callNode .setType (  )   ) , transform ( callNode.getTarget (  )  )  ) ;^511^512^^^^510^521^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode .getElement (  )   )  ) ;^511^512^^^^510^521^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^511^512^513^514^515^510^521^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ; for  ( AstNode child : callNode.getArguments (  )  )  { node.addChildToBack ( transform ( child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^justTransform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^512^513^514^515^^510^521^transform ( callNode.getTarget (  )  )  ) ; for  ( AstNode child : callNode.getArguments (  )  )  { node.addChildToBack ( transform ( child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P12_Insert_Condition]^if  ( caseNode.isDefault (  )  )  { transform ( callNode.getTarget (  )  )  ) ; }^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P8_Replace_Mix]^for  ( AstNode child : callNode .getTarget (  )   )  {^513^^^^^510^521^for  ( AstNode child : callNode.getArguments (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^513^514^515^^^510^521^for  ( AstNode child : callNode.getArguments (  )  )  { node.addChildToBack ( transform ( child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^514^515^^^^510^521^node.addChildToBack ( transform ( child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P1_Replace_Type]^short  leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^517^^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P2_Replace_Operator]^int leftParamPos = callNode.getAbsolutePosition (  >=  )  + callNode.getLp (  ) ;^517^^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode .getType (  )  ;^517^^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^517^^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^int leftParamPos = callNode .getCommentType (  )   + callNode.getLp (  ) ;^517^^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^517^^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^517^^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^irNode.setLineno ( lineno ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^int lineno = node.getLineno (  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^node.setLineno ( callNode .getCommentType (  )   ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^node.setCharno ( position2charno ( nType )  ) ;^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^node .setCharno (  )  ;^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^node.setCharno ( transformTokenType ( leftParamPos )  ) ;^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^519^520^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ; return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^lp.setCharno ( position2charno ( lparenCharno )  ) ;node.setCharno ( position2charno ( leftParamPos )  ) ;^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;node.setCharno ( position2charno ( leftParamPos )  ) ;^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^newName.setCharno ( position2charno ( lpColumn )  ) ;node.setCharno ( position2charno ( leftParamPos )  ) ;^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;node.setCharno ( position2charno ( leftParamPos )  ) ;^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;node.setCharno ( position2charno ( leftParamPos )  ) ;^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P8_Replace_Mix]^node.setCharno ( transformTokenType ( skipCount )  ) ;^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  FunctionCall  callNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Name fnName = functionNode.getFunctionName (  ) ;Name name = functionNode.getFunctionName (  ) ;^525^^^^^510^540^Name name = functionNode.getFunctionName (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^525^^^^^510^540^Name name = functionNode.getFunctionName (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;Name name = functionNode.getFunctionName (  ) ;^525^^^^^510^540^Name name = functionNode.getFunctionName (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;Name name = functionNode.getFunctionName (  ) ;^525^^^^^510^540^Name name = functionNode.getFunctionName (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P3_Replace_Literal]^Boolean isUnnamedFunction = true;^526^^^^^511^541^Boolean isUnnamedFunction = false;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^boolean lineSet = false;Boolean isUnnamedFunction = false;^526^^^^^511^541^Boolean isUnnamedFunction = false;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P12_Insert_Condition]^if  ( isUnnamedFunction )  { Boolean isUnnamedFunction = false; }^526^^^^^511^541^Boolean isUnnamedFunction = false;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P2_Replace_Operator]^if  ( name != null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^if  ( fnName == null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^if  ( name == false )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P9_Replace_Statement]^if  ( prev != null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P9_Replace_Statement]^if  ( lineSet == false )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P9_Replace_Statement]^if  ( directives == null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P9_Replace_Statement]^if  ( directives != null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P9_Replace_Statement]^if  ( fnName != null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P15_Unwrap_Block]^name = new com.google.javascript.jscomp.mozilla.rhino.ast.Name(); name.setIdentifier(""); isUnnamedFunction = true;^527^528^529^530^531^512^542^if  ( name == null )  { name = new Name (  ) ; name.setIdentifier ( "" ) ; isUnnamedFunction = true; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P16_Remove_Block]^^527^528^529^530^531^512^542^if  ( name == null )  { name = new Name (  ) ; name.setIdentifier ( "" ) ; isUnnamedFunction = true; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^name  =  name ;^528^^^^^513^543^name = new Name (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node = new Node ( Token.DEFAULT ) ;name = new Name (  ) ;^528^^^^^513^543^name = new Name (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P3_Replace_Literal]^isUnnamedFunction = false;^530^^^^^515^545^isUnnamedFunction = true;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P12_Insert_Condition]^if  ( isUnnamedFunction )  { isUnnamedFunction = true; }^530^^^^^515^545^isUnnamedFunction = true;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^name .getIdentifier (  )  ;^529^^^^^514^544^name.setIdentifier ( "" ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^529^530^531^^^514^544^name.setIdentifier ( "" ) ; isUnnamedFunction = true; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^name ;^528^^^^^513^543^name = new Name (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^Node node = new com.google.javascript.rhino.FunctionNode ( fnName.getIdentifier (  )  ) ;^532^533^^^^517^547^Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^Node node = new com.google.javascript.rhino.FunctionNode ( name.setIdentifier (  )  ) ;^532^533^^^^517^547^Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^Node node = new com.google.javascript.rhino.FunctionNode ( fnName.setIdentifier (  )  ) ;^532^533^^^^517^547^Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^Node node = new com.google.javascript.rhino.FunctionNode ( name .setIdentifier ( sourceName )   ) ;^532^533^^^^517^547^Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^name.setIdentifier (  )  ) ;^533^^^^^518^548^name.getIdentifier (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^name .setIdentifier ( sourceString )   ) ;^533^^^^^518^548^name.getIdentifier (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^node.putProp ( Node.SOURCENAME_PROP.getSourceName (  )  ) ;^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^node .putProp ( TMP_JSDOC_PROP )  ;^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^node.putProp ( Node.SOURCENAME_PROP, functionNode .getComments (  )   ) ;^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^534^535^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ; Node newName = transform ( name ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^Node newName = transform ( fnName ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^Node newName = justTransform ( name ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^Node newName = justTransform ( fnName ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node irNode = irFactory.transform ( node ) ;Node newName = transform ( name ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;Node newName = transform ( name ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node ret = transform ( n ) ;Node newName = transform ( name ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node irNode = justTransform ( node ) ;Node newName = transform ( name ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;Node newName = transform ( name ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P1_Replace_Type]^short  lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P2_Replace_Operator]^int lpColumn = functionNode.getAbsolutePosition (  <  )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^int lpColumn = functionNode .getCommentType (  )   + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^newName.setCharno ( position2charno ( lpColumn )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^int lineno = node.getLineno (  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Name name = functionNode.getFunctionName (  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Name fnName = functionNode.getFunctionName (  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^544^^^^^529^559^functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^int lineno = node.getLineno (  ) ;functionNode.getLp (  ) ;^544^^^^^529^559^functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^functionNode.getAbsolutePosition (  ) ;functionNode.getLp (  ) ;^544^^^^^529^559^functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;functionNode.getLp (  ) ;^544^^^^^529^559^functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^newName.setCharno ( transformTokenType ( lpColumn )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^newName.setCharno ( position2charno ( lineIndex )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^lp.setCharno ( position2charno ( lparenCharno )  ) ;newName.setCharno ( position2charno ( lpColumn )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.setCharno ( position2charno ( leftParamPos )  ) ;newName.setCharno ( position2charno ( lpColumn )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;newName.setCharno ( position2charno ( lpColumn )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;newName.setCharno ( position2charno ( lpColumn )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^newName.setCharno ( position2charno ( numOpeningChars )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P1_Replace_Type]^long  lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P2_Replace_Operator]^int lpColumn = functionNode.getAbsolutePosition (  ^  )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode .getType (  )  ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^newName .setLineno (  )  ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^newName.setLineno ( functionNode .getCommentType (  )   ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^newName.setCharno ( position2charno ( lparenCharno )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^newName.setCharno ( position2charno ( lineno )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^newName.setCharno ( transformTokenType ( lineIndex )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^node.addChildToBack ( lp ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^node .addChildToBack (  )  ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^548^549^^^^533^563^node.addChildToBack ( newName ) ; Node lp = new Node ( Token.LP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^Node lp = new Node ( Token.transformDispatcher ) ;^549^^^^^534^564^Node lp = new Node ( Token.LP ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Name name = functionNode.getFunctionName (  ) ;Name fnName = functionNode.getFunctionName (  ) ;^556^^^^^541^571^Name fnName = functionNode.getFunctionName (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^Name fnName = functionNode .getSourceName (  )  ;^556^^^^^541^571^Name fnName = functionNode.getFunctionName (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^556^^^^^541^571^Name fnName = functionNode.getFunctionName (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;Name fnName = functionNode.getFunctionName (  ) ;^556^^^^^541^571^Name fnName = functionNode.getFunctionName (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;Name fnName = functionNode.getFunctionName (  ) ;^556^^^^^541^571^Name fnName = functionNode.getFunctionName (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P2_Replace_Operator]^if  ( fnName == null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^if  ( fnName != false )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P9_Replace_Statement]^if  ( name == null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P9_Replace_Statement]^if  ( prev != null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P9_Replace_Statement]^if  ( directives == null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P9_Replace_Statement]^if  ( directives != null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P9_Replace_Statement]^if  ( finallyBlock != null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P15_Unwrap_Block]^lp.setLineno(fnName.getLineno());^557^558^559^560^561^542^572^if  ( fnName != null )  { lp.setLineno ( fnName.getLineno (  )  ) ; } else { lp.setLineno ( functionNode.getLineno (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P16_Remove_Block]^^557^558^559^560^561^542^572^if  ( fnName != null )  { lp.setLineno ( fnName.getLineno (  )  ) ; } else { lp.setLineno ( functionNode.getLineno (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^lp.setLineno ( functionNode .getCommentType (  )   ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^lp .setLineno (  )  ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^int lineno = node.getLineno (  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Name name = functionNode.getFunctionName (  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Name fnName = functionNode.getFunctionName (  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^functionNode.getLp (  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^lp.setLineno ( name.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^lp.setLineno ( fnName.setIdentifier (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^int lineno = node.getLineno (  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^lp .setLineno (  )  ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^lp.setLineno ( name.setIdentifier (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^lp.setLineno ( functionNode .getCommentType (  )   ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^int lineno = node.getLineno (  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Name name = functionNode.getFunctionName (  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Name fnName = functionNode.getFunctionName (  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^functionNode.getLp (  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P1_Replace_Type]^short  lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^562^563^^^^547^577^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P2_Replace_Operator]^int lparenCharno = functionNode.getLp (  >=  )  + functionNode.getAbsolutePosition (  ) ;^562^563^^^^547^577^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^int lparenCharno = functionNode .getType (  )   + functionNode.getAbsolutePosition (  ) ;^562^563^^^^547^577^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^int lparenCharno = functionNode.getLp (  )  + functionNode .getCommentType (  )  ;^562^563^^^^547^577^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^562^563^^^^547^577^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^562^563^^^^547^577^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^562^563^^^^547^577^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^functionNode .getCommentType (  )  ;^563^^^^^548^578^functionNode.getAbsolutePosition (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^563^^^^^548^578^functionNode.getAbsolutePosition (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^position2charno ( catchVar.getAbsolutePosition (  )  ) ;functionNode.getAbsolutePosition (  ) ;^563^^^^^548^578^functionNode.getAbsolutePosition (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^comments[ci].getAbsolutePosition (  )  ) ;functionNode.getAbsolutePosition (  ) ;^563^^^^^548^578^functionNode.getAbsolutePosition (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;functionNode.getAbsolutePosition (  ) ;^563^^^^^548^578^functionNode.getAbsolutePosition (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^functionNode.getLp (  ) ;functionNode.getAbsolutePosition (  ) ;^563^^^^^548^578^functionNode.getAbsolutePosition (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^lp.setCharno ( position2charno ( nodearenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^lp.setCharno ( position2charno ( lineno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^lp.setCharno ( position2charno ( lparenCharnoarenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^lp.setCharno ( position2charno ( lp )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^lp .setCharno (  )  ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^lp.setCharno ( transformTokenType ( lparenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^lp.setCharno ( position2charno ( numOpeningChars )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.setCharno ( position2charno ( leftParamPos )  ) ;lp.setCharno ( position2charno ( lparenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;lp.setCharno ( position2charno ( lparenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^newName.setCharno ( position2charno ( lpColumn )  ) ;lp.setCharno ( position2charno ( lparenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;lp.setCharno ( position2charno ( lparenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;lp.setCharno ( position2charno ( lparenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^lp.setCharno ( position2charno ( lineIndex )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^for  ( AstNode param : functionNode .getSourceName (  )   )  {^566^^^^^551^581^for  ( AstNode param : functionNode.getParams (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^566^567^568^^^551^581^for  ( AstNode param : functionNode.getParams (  )  )  { lp.addChildToBack ( transform ( param )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^lp .addChildToBack (  )  ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^lp.addChildToBack ( justTransform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^567^568^^^^552^582^lp.addChildToBack ( transform ( param )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^node.addChildToBack ( newName ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^node .addChildToBack (  )  ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^Node bodyNode = justTransform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^Node bodyNode = transform ( functionNode .getLineno (  )   ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^571^572^573^574^575^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ; parseDirectives ( bodyNode ) ; node.addChildToBack ( bodyNode ) ; return node; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node n = Node.newString ( literalNode.getValue (  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^parseDirectives ( node ) ;^572^^^^^557^587^parseDirectives ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^isDirective ( bodyNode ) ;^572^^^^^557^587^parseDirectives ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^572^^^^^557^587^parseDirectives ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^parseDirectives ( node ) ;parseDirectives ( bodyNode ) ;^572^^^^^557^587^parseDirectives ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.setDirectives ( directives ) ;parseDirectives ( bodyNode ) ;^572^^^^^557^587^parseDirectives ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^node.addChildToBack ( newName ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P7_Replace_Invocation]^node .addChildToBack (  )  ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P14_Delete_Statement]^^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P5_Replace_Variable]^return newName;^574^^^^^559^589^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] Set  ALLOWED_DIRECTIVES  directives  Config  config  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  String  comment  directive  jsDoc  sourceName  sourceString  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  fnName  name  JSTypeRegistry  registry  ErrorReporter  errorReporter  boolean  TransformDispatcher  transformDispatcher  Boolean  isUnnamedFunction  AstNode  param  
[P8_Replace_Mix]^Node node = new Node ( Token.transformDispatcher ) ;^579^^^^^578^586^Node node = new Node ( Token.IF ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( statementNode.getCondition (  )  )  ) ;^580^^^^^578^586^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^580^581^582^583^584^578^586^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ; node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ; if  ( statementNode.getElsePart (  )  != null )  { node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( statementNode.getThenPart (  )  )  ) ;^581^^^^^578^586^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^node .addChildToBack (  )   ) ;^581^^^^^578^586^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^581^582^583^584^^578^586^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ; if  ( statementNode.getElsePart (  )  != null )  { node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( transform ( statementNode .getElsePart (  )   )  ) ;^581^^^^^578^586^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^if  ( statementNode.getElsePart (  )  == null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^if  ( statementNode.getElsePart (  )  != true )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( node.getJsDoc (  )  != null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( initializerNode.getInitializer (  )  != null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( statementNode.getLabel (  )  != null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( node.getComments (  )  != null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( statementNode.getBreakLabel (  )  != null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( statementNode.getReturnValue (  )  != null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( caseNode.getStatements (  )  != null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P15_Unwrap_Block]^node.addChildToBack(transform(statementNode.getElsePart()));^582^583^584^^^578^586^if  ( statementNode.getElsePart (  )  != null )  { node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P16_Remove_Block]^^582^583^584^^^578^586^if  ( statementNode.getElsePart (  )  != null )  { node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getReturnValue (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^582^^^^^578^586^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^582^^^^^578^586^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  ( finallyBlock != null )  {     node.addChildToBack ( transform ( finallyBlock )  ) ; }^582^^^^^578^586^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( initializerNode.getInitializer (  )  )  != null )  {     node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;     node.setLineno ( node.getLineno (  )  ) ; }^582^^^^^578^586^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getBreakLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^582^^^^^578^586^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^583^^^^^578^586^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( statementNode.getElsePart (  )  )  ) ;^583^^^^^578^586^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^583^584^^^^578^586^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getElsePart (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^583^^^^^578^586^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( transform ( statementNode .getThenPart (  )   )  ) ;^583^^^^^578^586^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node n =  new Node ( position2charno ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^590^591^592^593^^589^603^Node n =  new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node n =  new Node ( transformTokenType ( exprNode .setType (  )   ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^590^591^592^593^^589^603^Node n =  new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node n =  new Node ( justTransformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^590^591^592^593^^589^603^Node n =  new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node n =  new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode .getLeft (  )   )  ) ;^590^591^592^593^^589^603^Node n =  new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^position2charno ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^591^592^593^^^589^603^transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^transformTokenType ( exprNode .setType (  )   ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^591^592^593^^^589^603^transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^592^593^^^^589^603^transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transform ( exprNode .getLineno (  )   ) , transform ( exprNode.getRight (  )  )  ) ;^592^593^^^^589^603^transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P12_Insert_Condition]^if  ( exprNode.isPostfix (  )  )  { transform ( exprNode.getRight (  )  )  ) ; }^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transform ( exprNode .getLeft (  )   )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^n.setLineno ( exprNode .getCommentType (  )   ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^int lineno = node.getLineno (  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )   !=  exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^n.setCharno ( position2charno ( exprNode .getCommentType (  )   + exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode .getAbsolutePosition (  )   )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )   |  exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^exprNode .getAbsolutePosition (  )   )  ) ;^601^^^^^589^603^exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^601^602^^^^589^603^exprNode.getOperatorPosition (  )  )  ) ; return n;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;exprNode.getOperatorPosition (  )  )  ) ;^601^^^^^589^603^exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  n  InfixExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( position2charno ( literalNode.getType (  )  )  ) ;^607^^^^^606^608^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processKeywordLiteral [RETURN_TYPE] Node   KeywordLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  KeywordLiteral  literalNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^607^608^^^^606^608^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processKeywordLiteral [RETURN_TYPE] Node   KeywordLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  KeywordLiteral  literalNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( transformTokenType ( literalNode .setType (  )   )  ) ;^607^^^^^606^608^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processKeywordLiteral [RETURN_TYPE] Node   KeywordLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  KeywordLiteral  literalNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return Node.getProp ( Token.NAME, labelNode.getName (  )  ) ;^612^^^^^611^613^return Node.newString ( Token.NAME, labelNode.getName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabel [RETURN_TYPE] Node   Label labelNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Label  labelNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return Node .getString (  )  ;^612^^^^^611^613^return Node.newString ( Token.NAME, labelNode.getName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabel [RETURN_TYPE] Node   Label labelNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Label  labelNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^612^^^^^611^613^return Node.newString ( Token.NAME, labelNode.getName (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabel [RETURN_TYPE] Node   Label labelNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Label  labelNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node node = new Node ( Token.transformDispatcher ) ;^617^^^^^616^630^Node node = new Node ( Token.LABEL ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node cur = node;Node prev = null;^618^^^^^616^630^Node prev = null;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node cur = prev;^619^^^^^616^630^Node cur = node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node prev = null;Node cur = node;^619^^^^^616^630^Node cur = node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node;Node cur = node;^619^^^^^616^630^Node cur = node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^if  ( prev == null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^if  ( node != null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^if  ( node != false )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( name == null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( directives == null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( directives != null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( fnName != null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P15_Unwrap_Block]^prev.addChildToBack(cur);^621^622^623^^^616^630^if  ( prev != null )  { prev.addChildToBack ( cur ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P16_Remove_Block]^^621^622^623^^^616^630^if  ( prev != null )  { prev.addChildToBack ( cur ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  ( finallyBlock != null )  {     node.addChildToBack ( transform ( finallyBlock )  ) ; }^621^^^^^616^630^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  ( directives != null )  {     node.setDirectives ( directives ) ; }^621^^^^^616^630^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^prev.addChildToBack ( node ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^prev .addChildToBack (  )  ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^prev = prev;^625^^^^^616^630^prev = cur;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^prev =  node;^625^^^^^616^630^prev = cur;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^cur = new Node ( Token.transformDispatcher ) ;^626^^^^^616^630^cur = new Node ( Token.LABEL ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^cur ;^626^^^^^616^630^cur = new Node ( Token.LABEL ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node = new Node ( Token.DEFAULT ) ;cur = new Node ( Token.LABEL ) ;^626^^^^^616^630^cur = new Node ( Token.LABEL ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^for  ( Label label : statementNode .getStatement (  )   )  {^620^^^^^616^630^for  ( Label label : statementNode.getLabels (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^620^621^622^623^^616^630^for  ( Label label : statementNode.getLabels (  )  )  { if  ( prev != null )  { prev.addChildToBack ( cur ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^cur.addChildToBack ( justTransform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^624^625^626^627^^616^630^cur.addChildToBack ( transform ( label )  ) ; prev = cur; cur = new Node ( Token.LABEL ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^prev.addChildToBack ( justTransform ( statementNode.getStatement (  )  )  ) ;^628^^^^^616^630^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^prev.addChildToBack ( transform ( statementNode .getLabels (  )   )  ) ;^628^^^^^616^630^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^628^629^630^^^616^630^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ; return node; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^return prev;^629^^^^^616^630^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  LabeledStatement  statementNode  boolean  Config  config  Node  cur  node  prev  Label  label  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return Node.getProp ( Token.NAME, nameNode.getIdentifier (  )  ) ;^634^^^^^633^635^return Node.newString ( Token.NAME, nameNode.getIdentifier (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processName [RETURN_TYPE] Node   Name nameNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  nameNode  
[P7_Replace_Invocation]^return Node.newString ( Token.NAME, nameNode.setIdentifier (  )  ) ;^634^^^^^633^635^return Node.newString ( Token.NAME, nameNode.getIdentifier (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processName [RETURN_TYPE] Node   Name nameNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  nameNode  
[P7_Replace_Invocation]^return Node .getString (  )  ;^634^^^^^633^635^return Node.newString ( Token.NAME, nameNode.getIdentifier (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processName [RETURN_TYPE] Node   Name nameNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  nameNode  
[P14_Delete_Statement]^^634^635^^^^633^635^return Node.newString ( Token.NAME, nameNode.getIdentifier (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processName [RETURN_TYPE] Node   Name nameNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  Name  nameNode  
[P7_Replace_Invocation]^return processFunctionNode ( exprNode ) ;^639^^^^^638^640^return processFunctionCall ( exprNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processNewExpression [RETURN_TYPE] Node   NewExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  NewExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^639^^^^^638^640^return processFunctionCall ( exprNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processNewExpression [RETURN_TYPE] Node   NewExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  NewExpression  exprNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node newNode = Node.getProp ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  newNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^Node n = Node.newString ( literalNode.getValue (  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  newNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  newNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  newNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  newNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  newNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  NumberLiteral  literalNode  
[P7_Replace_Invocation]^Node newNode = Node .newString (  )  ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  newNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  NumberLiteral  literalNode  
[P14_Delete_Statement]^^644^645^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ; return newNode;^[CLASS] IRFactory TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  newNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  newNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  newNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  newNode  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  NumberLiteral  literalNode  
[P7_Replace_Invocation]^if  ( literalNode .getElements (  )   )  {^650^^^^^649^660^if  ( literalNode.isDestructuring (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( caseNode.isDefault (  )  )  {^650^^^^^649^660^if  ( literalNode.isDestructuring (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P15_Unwrap_Block]^reportDestructuringAssign(literalNode);^650^651^652^^^649^660^if  ( literalNode.isDestructuring (  )  )  { reportDestructuringAssign ( literalNode ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P16_Remove_Block]^^650^651^652^^^649^660^if  ( literalNode.isDestructuring (  )  )  { reportDestructuringAssign ( literalNode ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transformAsString ( literalNode ) ;^651^^^^^649^660^reportDestructuringAssign ( literalNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^651^^^^^649^660^reportDestructuringAssign ( literalNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node node = new Node ( Token.transformDispatcher ) ;^654^^^^^649^660^Node node = new Node ( Token.OBJECTLIT ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^655^656^657^658^^649^660^for  ( ObjectProperty el : literalNode.getElements (  )  )  { node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ; node.addChildToBack ( transform ( el.getRight (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( process ( el.getLeft (  )  )  ) ;^656^^^^^649^660^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( transformAsString ( el .getLineno (  )   )  ) ;^656^^^^^649^660^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^656^657^658^^^649^660^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ; node.addChildToBack ( transform ( el.getRight (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( transform ( el .getLeft (  )   )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^657^658^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  ObjectLiteral  literalNode  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return processNewExpression ( propertyNode ) ;^664^^^^^663^665^return processInfixExpression ( propertyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectProperty [RETURN_TYPE] Node   ObjectProperty propertyNode [VARIABLES] ObjectProperty  propertyNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^664^^^^^663^665^return processInfixExpression ( propertyNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processObjectProperty [RETURN_TYPE] Node   ObjectProperty propertyNode [VARIABLES] ObjectProperty  propertyNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node node = justTransform ( exprNode.getExpression (  )  ) ;^669^^^^^668^672^Node node = transform ( exprNode.getExpression (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processParenthesizedExpression [RETURN_TYPE] Node   ParenthesizedExpression exprNode [VARIABLES] ParenthesizedExpression  exprNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node node = transform ( exprNode .getType (  )   ) ;^669^^^^^668^672^Node node = transform ( exprNode.getExpression (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processParenthesizedExpression [RETURN_TYPE] Node   ParenthesizedExpression exprNode [VARIABLES] ParenthesizedExpression  exprNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^669^670^671^672^^668^672^Node node = transform ( exprNode.getExpression (  )  ) ; node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ; return node; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processParenthesizedExpression [RETURN_TYPE] Node   ParenthesizedExpression exprNode [VARIABLES] ParenthesizedExpression  exprNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.putBooleanProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;^670^^^^^668^672^node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processParenthesizedExpression [RETURN_TYPE] Node   ParenthesizedExpression exprNode [VARIABLES] ParenthesizedExpression  exprNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^670^671^^^^668^672^node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ; return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processParenthesizedExpression [RETURN_TYPE] Node   ParenthesizedExpression exprNode [VARIABLES] ParenthesizedExpression  exprNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;^670^^^^^668^672^node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processParenthesizedExpression [RETURN_TYPE] Node   ParenthesizedExpression exprNode [VARIABLES] ParenthesizedExpression  exprNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;^670^^^^^668^672^node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processParenthesizedExpression [RETURN_TYPE] Node   ParenthesizedExpression exprNode [VARIABLES] ParenthesizedExpression  exprNode  JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^return new Node ( Token. transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^676^677^678^679^^675^680^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.GETPROP, justTransform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^676^677^678^679^^675^680^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.GETPROP, transform ( getNode .getElement (  )   ) , transformAsString ( getNode.getProperty (  )  )  ) ;^676^677^678^679^^675^680^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , process ( getNode.getProperty (  )  )  ) ;^676^677^678^679^^675^680^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode .getTarget (  )   )  ) ;^676^677^678^679^^675^680^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^678^679^^^^675^680^transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^678^679^680^^^675^680^transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transform ( getNode .getElement (  )   ) , transformAsString ( getNode.getProperty (  )  )  ) ;^678^679^^^^675^680^transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^process ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transformAsString ( getNode .getTarget (  )   )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^679^680^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  PropertyGet  getNode  Config  config  String  comment  directive  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node literalStringNode = Node.getProp ( literalNode.getValue (  )  ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node literalStringNode = Node .getString (  )  ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node n = Node.newString ( literalNode.getValue (  )  ) ;Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node flagsNode = Node.newString ( flags ) ;Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^Node literalStringNode = Node.newString ( literalNode .getLineno (  )   ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^literalStringNode.setLineno ( literalNode .getCommentType (  )   ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^686^687^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ; Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^String flags = literalNode.getFlags (  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node n = Node.newString ( literalNode.getValue (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^int lineno = node.getLineno (  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node node = new Node ( Token.REGEXP, node ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node node = new Node ( Token.REGEXP ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node node = new Node ( Token. literalStringNode ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node node = new Node ( Token.REGEXP, flagsNode ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P1_Replace_Type]^char flags = literalNode.getFlags (  ) ;^688^^^^^683^696^String flags = literalNode.getFlags (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^String flags = literalNode .getValue (  )  ;^688^^^^^683^696^String flags = literalNode.getFlags (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^688^^^^^683^696^String flags = literalNode.getFlags (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;String flags = literalNode.getFlags (  ) ;^688^^^^^683^696^String flags = literalNode.getFlags (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^if  ( flags != null || !flags.isEmpty (  )  )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^if  ( flags == null && !flags.isEmpty (  )  )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^if  ( sourceString != null && !flags.isEmpty (  )  )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P6_Replace_Expression]^if  ( flags != null ) {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P6_Replace_Expression]^if  (  !flags.isEmpty (  )  )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^if  ( flags != null && !flags.valueOf (  )  )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^if  ( flags != null && !flags .substring ( ci )   )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node flagsNode = com.google.javascript.rhino.Node.newString(flags); flagsNode.setLineno(literalNode.getLineno()); node.addChildToBack(flagsNode);^689^690^^692^693^683^696^if  ( flags != null && !flags.isEmpty (  )  )  { Node flagsNode = Node.newString ( flags ) ; flagsNode.setLineno ( literalNode.getLineno (  )  ) ; node.addChildToBack ( flagsNode ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P16_Remove_Block]^^689^690^^692^693^683^696^if  ( flags != null && !flags.isEmpty (  )  )  { Node flagsNode = Node.newString ( flags ) ; flagsNode.setLineno ( literalNode.getLineno (  )  ) ; node.addChildToBack ( flagsNode ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node sourceStringNode = Node.newString ( flags ) ;^690^^^^^683^696^Node flagsNode = Node.newString ( flags ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node flagsNode = Node.putProp ( flags ) ;^690^^^^^683^696^Node flagsNode = Node.newString ( flags ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;Node flagsNode = Node.newString ( flags ) ;^690^^^^^683^696^Node flagsNode = Node.newString ( flags ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node sourceNameNode = Node.newString ( flags ) ;^690^^^^^683^696^Node flagsNode = Node.newString ( flags ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^Node sourceStringNode = Node .getString (  )  ;^690^^^^^683^696^Node flagsNode = Node.newString ( flags ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^690^^^^^683^696^Node flagsNode = Node.newString ( flags ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^flagsNode .setLineno (  )  ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^692^693^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ; node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^irNode.setLineno ( lineno ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node n = Node.newString ( literalNode.getValue (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^int lineno = node.getLineno (  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^node.addChildToBack ( literalStringNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^if  ( flags != null && !flags .substring ( clauseAbsolutePosition )   )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^if  ( sourceName != null && !flags.isEmpty (  )  )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node flagsNode = Node .getString (  )  ;^690^^^^^683^696^Node flagsNode = Node.newString ( flags ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^flagsNode.setLineno ( literalNode .getCommentType (  )   ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^return literalStringNode;^695^^^^^683^696^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node node = new Node ( Token.transformDispatcher ) ;^700^^^^^699^705^Node node = new Node ( Token.RETURN ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^if  ( statementNode.getReturnValue (  )  == null )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^if  ( statementNode.getReturnValue (  )  != true )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( initializerNode.getInitializer (  )  != null )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( statementNode.getLabel (  )  != null )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( statementNode.getBreakLabel (  )  != null )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( statementNode.getElsePart (  )  != null )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( caseNode.getStatements (  )  != null )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P15_Unwrap_Block]^node.addChildToBack(transform(statementNode.getReturnValue()));^701^702^703^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  { node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P16_Remove_Block]^^701^702^703^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  { node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^701^^^^^699^705^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  ( finallyBlock != null )  {     node.addChildToBack ( transform ( finallyBlock )  ) ; }^701^^^^^699^705^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( initializerNode.getInitializer (  )  )  != null )  {     node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;     node.setLineno ( node.getLineno (  )  ) ; }^701^^^^^699^705^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getBreakLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^701^^^^^699^705^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getElsePart (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^701^^^^^699^705^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( statementNode.getReturnValue (  )  )  ) ;^702^^^^^699^705^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^702^703^^^^699^705^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P12_Insert_Condition]^if  ( statementNode.getReturnValue (  )  != null )  { node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^702^^^^^699^705^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getReturnValue (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^702^^^^^699^705^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  ReturnStatement  statementNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return parseDirectives ( scopeNode ) ;^709^^^^^708^710^return processGeneric ( scopeNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processScope [RETURN_TYPE] Node   Scope scopeNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Scope  scopeNode  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^709^^^^^708^710^return processGeneric ( scopeNode ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processScope [RETURN_TYPE] Node   Scope scopeNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Scope  scopeNode  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node n = Node.getProp ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  StringLiteral  literalNode  Config  config  Node  n  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node n = Node.newString ( literalNode .getLineno (  )   ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  StringLiteral  literalNode  Config  config  Node  n  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^Node n = Node .getString (  )  ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  StringLiteral  literalNode  Config  config  Node  n  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  StringLiteral  literalNode  Config  config  Node  n  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  StringLiteral  literalNode  Config  config  Node  n  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  StringLiteral  literalNode  Config  config  Node  n  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  StringLiteral  literalNode  Config  config  Node  n  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^714^715^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ; return n;^[CLASS] IRFactory TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  StringLiteral  literalNode  Config  config  Node  n  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  StringLiteral  literalNode  Config  config  Node  n  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^return Node.newString ( Token.NAME, labelNode.getName (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  StringLiteral  literalNode  Config  config  Node  n  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^return Node.newString ( Token.NAME, nameNode.getIdentifier (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  StringLiteral  literalNode  Config  config  Node  n  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  StringLiteral  literalNode  Config  config  Node  n  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  StringLiteral  literalNode  Config  config  Node  n  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node cur = node;Node node;^720^^^^^719^738^Node node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P9_Replace_Statement]^if  ( literalNode.isDestructuring (  )  )  {^721^^^^^719^738^if  ( caseNode.isDefault (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P9_Replace_Statement]^if  ( exprNode.isPostfix (  )  )  {^721^^^^^719^738^if  ( caseNode.isDefault (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P15_Unwrap_Block]^node = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.DEFAULT);^721^722^723^724^725^719^738^if  ( caseNode.isDefault (  )  )  { node = new Node ( Token.DEFAULT ) ; } else { AstNode expr = caseNode.getExpression (  ) ; node = new Node ( Token.CASE, transform ( expr )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P16_Remove_Block]^^721^722^723^724^725^719^738^if  ( caseNode.isDefault (  )  )  { node = new Node ( Token.DEFAULT ) ; } else { AstNode expr = caseNode.getExpression (  ) ; node = new Node ( Token.CASE, transform ( expr )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P5_Replace_Variable]^node = new Node ( Token.CASE, transform ( child )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P5_Replace_Variable]^node = new Node ( Token. transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P7_Replace_Invocation]^node = new Node ( Token.CASE, justTransform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node = new Node ( Token.DEFAULT ) ;node = new Node ( Token.CASE, transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;AstNode expr = caseNode.getExpression (  ) ;^724^^^^^719^738^AstNode expr = caseNode.getExpression (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^AstNode catchVar = clauseNode.getVarName (  ) ;AstNode expr = caseNode.getExpression (  ) ;^724^^^^^719^738^AstNode expr = caseNode.getExpression (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P14_Delete_Statement]^^724^^^^^719^738^AstNode expr = caseNode.getExpression (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;AstNode expr = caseNode.getExpression (  ) ;^724^^^^^719^738^AstNode expr = caseNode.getExpression (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P14_Delete_Statement]^^725^726^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node = new Node ( Token.CASE, transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^Node irNode = irFactory.transform ( node ) ;node = new Node ( Token.CASE, transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^Node irNode = justTransform ( node ) ;node = new Node ( Token.CASE, transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^Node newName = transform ( name ) ;node = new Node ( Token.CASE, transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;node = new Node ( Token.CASE, transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;node = new Node ( Token.CASE, transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P5_Replace_Variable]^node = new Node ( Token.transformDispatcher ) ;^722^^^^^719^738^node = new Node ( Token.DEFAULT ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P8_Replace_Mix]^node  = null ;^722^^^^^719^738^node = new Node ( Token.DEFAULT ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^name = new Name (  ) ;node = new Node ( Token.DEFAULT ) ;^722^^^^^719^738^node = new Node ( Token.DEFAULT ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;node = new Node ( Token.DEFAULT ) ;^722^^^^^719^738^node = new Node ( Token.DEFAULT ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^cur = new Node ( Token.LABEL ) ;node = new Node ( Token.DEFAULT ) ;^722^^^^^719^738^node = new Node ( Token.DEFAULT ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P8_Replace_Mix]^node ;^722^^^^^719^738^node = new Node ( Token.DEFAULT ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P8_Replace_Mix]^AstNode expr = caseNode .getType (  )  ;^724^^^^^719^738^AstNode expr = caseNode.getExpression (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P14_Delete_Statement]^^724^725^^^^719^738^AstNode expr = caseNode.getExpression (  ) ; node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P5_Replace_Variable]^Node block = new Node ( Token.transformDispatcher ) ;^727^^^^^719^738^Node block = new Node ( Token.BLOCK ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P3_Replace_Literal]^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, false ) ;^728^^^^^719^738^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P14_Delete_Statement]^^728^729^^^^719^738^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ; block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^728^^^^^719^738^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^ret.putBooleanProp ( Node.QUOTED_PROP, true ) ;block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^728^^^^^719^738^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P7_Replace_Invocation]^block.setLineno ( caseNode .getCommentType (  )   ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P14_Delete_Statement]^^729^730^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ; block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^int lineno = node.getLineno (  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P7_Replace_Invocation]^block.setCharno ( transformTokenType ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P7_Replace_Invocation]^block.setCharno ( position2charno ( caseNode .getCommentType (  )   )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P8_Replace_Mix]^block .setCharno (  )   ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P14_Delete_Statement]^^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^position2charno ( catchVar.getAbsolutePosition (  )  ) ;block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^lp.setCharno ( position2charno ( lparenCharno )  ) ;block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.setCharno ( position2charno ( leftParamPos )  ) ;block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^int charno = position2charno ( node.getAbsolutePosition (  )  ) ;block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^newName.setCharno ( position2charno ( lpColumn )  ) ;block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P2_Replace_Operator]^if  ( caseNode.getStatements (  )  == null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P7_Replace_Invocation]^if  ( caseNode .getLineno (  )   != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P8_Replace_Mix]^if  ( caseNode.getStatements (  )  != true )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P9_Replace_Statement]^if  ( node.getJsDoc (  )  != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P9_Replace_Statement]^if  ( initializerNode.getInitializer (  )  != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P9_Replace_Statement]^if  ( clauseNode.getCatchCondition (  )  != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P9_Replace_Statement]^if  ( statementNode.getLabel (  )  != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P9_Replace_Statement]^if  ( node.getComments (  )  != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P9_Replace_Statement]^if  ( statementNode.getBreakLabel (  )  != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P9_Replace_Statement]^if  ( statementNode.getElsePart (  )  != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P9_Replace_Statement]^if  ( statementNode.getReturnValue (  )  != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P15_Unwrap_Block]^for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : caseNode.getStatements()) {    block.addChildToBack(transform(child));};^731^732^733^734^^719^738^if  ( caseNode.getStatements (  )  != null )  { for  ( AstNode child : caseNode.getStatements (  )  )  { block.addChildToBack ( transform ( child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P16_Remove_Block]^^731^732^733^734^^719^738^if  ( caseNode.getStatements (  )  != null )  { for  ( AstNode child : caseNode.getStatements (  )  )  { block.addChildToBack ( transform ( child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P14_Delete_Statement]^^732^733^734^^^719^738^for  ( AstNode child : caseNode.getStatements (  )  )  { block.addChildToBack ( transform ( child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P5_Replace_Variable]^block.addChildToBack ( transform ( expr )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P7_Replace_Invocation]^block .addChildToBack (  )  ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P7_Replace_Invocation]^block.addChildToBack ( justTransform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P14_Delete_Statement]^^733^734^^^^719^738^block.addChildToBack ( transform ( child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P8_Replace_Mix]^block.addChildToBack ( justTransform ( expr )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P14_Delete_Statement]^^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P5_Replace_Variable]^return block;^737^^^^^719^738^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchCase  caseNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  expr  
[P5_Replace_Variable]^Node node = new Node ( Token. transform ( statementNode.getExpression (  )  )  ) ;^742^743^^^^741^748^Node node = new Node ( Token.SWITCH, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^Node node = new Node ( Token.SWITCH, justTransform ( statementNode.getExpression (  )  )  ) ;^742^743^^^^741^748^Node node = new Node ( Token.SWITCH, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P8_Replace_Mix]^Node node = new Node ( Token.SWITCH, transform ( statementNode .getType (  )   )  ) ;^742^743^^^^741^748^Node node = new Node ( Token.SWITCH, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^justTransform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^743^744^745^746^^741^748^transform ( statementNode.getExpression (  )  )  ) ; for  ( AstNode child : statementNode.getCases (  )  )  { node.addChildToBack ( transform ( child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^AstNode expr = caseNode.getExpression (  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P12_Insert_Condition]^if  ( statementNode.getLabel (  )  != null )  { transform ( statementNode.getExpression (  )  )  ) ; }^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P12_Insert_Condition]^if  ( statementNode.getElsePart (  )  != null )  { transform ( statementNode.getExpression (  )  )  ) ; }^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P12_Insert_Condition]^if  ( statementNode.getReturnValue (  )  != null )  { transform ( statementNode.getExpression (  )  )  ) ; }^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P8_Replace_Mix]^for  ( AstNode child : statementNode .getExpression (  )   )  {^744^^^^^741^748^for  ( AstNode child : statementNode.getCases (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^744^745^746^^^741^748^for  ( AstNode child : statementNode.getCases (  )  )  { node.addChildToBack ( transform ( child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^node .addChildToBack (  )  ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P14_Delete_Statement]^^745^746^^^^741^748^node.addChildToBack ( transform ( child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  SwitchStatement  statementNode  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  child  
[P5_Replace_Variable]^return new Node ( Token. transform ( statementNode.getExpression (  )  )  ) ;^752^753^^^^751^754^return new Node ( Token.THROW, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.THROW, justTransform ( statementNode.getExpression (  )  )  ) ;^752^753^^^^751^754^return new Node ( Token.THROW, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.THROW, transform ( statementNode .getType (  )   )  ) ;^752^753^^^^751^754^return new Node ( Token.THROW, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^transform ( statementNode .getType (  )   )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^753^754^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^AstNode expr = caseNode.getExpression (  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P12_Insert_Condition]^if  ( statementNode.getLabel (  )  != null )  { transform ( statementNode.getExpression (  )  )  ) ; }^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P12_Insert_Condition]^if  ( statementNode.getElsePart (  )  != null )  { transform ( statementNode.getExpression (  )  )  ) ; }^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P12_Insert_Condition]^if  ( statementNode.getReturnValue (  )  != null )  { transform ( statementNode.getExpression (  )  )  ) ; }^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  ThrowStatement  statementNode  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node node = new Node ( Token. transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P7_Replace_Invocation]^Node node = new Node ( Token.TRY, justTransform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P8_Replace_Mix]^Node node = new Node ( Token.TRY, transform ( statementNode .getFinallyBlock (  )   )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P5_Replace_Variable]^Node block = new Node ( Token.transformDispatcher ) ;^759^^^^^757^786^Node block = new Node ( Token.BLOCK ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P3_Replace_Literal]^boolean lineSet = true;^760^^^^^757^786^boolean lineSet = false;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Boolean isUnnamedFunction = false;boolean lineSet = false;^760^^^^^757^786^boolean lineSet = false;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P12_Insert_Condition]^if  ( lineSet == false )  { boolean lineSet = false; }^760^^^^^757^786^boolean lineSet = false;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P2_Replace_Operator]^if  ( lineSet != false )  {^765^^^^^757^786^if  ( lineSet == false )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P3_Replace_Literal]^if  ( lineSet == true )  {^765^^^^^757^786^if  ( lineSet == false )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P9_Replace_Statement]^if  ( name == null )  {^765^^^^^757^786^if  ( lineSet == false )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P9_Replace_Statement]^if  ( lineIndex == -1 )  {^765^^^^^757^786^if  ( lineSet == false )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P15_Unwrap_Block]^block.setLineno(cc.getLineno()); lineSet = true;^765^766^767^768^^757^786^if  ( lineSet == false )  { block.setLineno ( cc.getLineno (  )  ) ; lineSet = true; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P16_Remove_Block]^^765^766^767^768^^757^786^if  ( lineSet == false )  { block.setLineno ( cc.getLineno (  )  ) ; lineSet = true; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P3_Replace_Literal]^lineSet = false;^767^^^^^757^786^lineSet = true;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P7_Replace_Invocation]^block .setLineno (  )  ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P7_Replace_Invocation]^block.setLineno ( cc .getCommentType (  )   ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P14_Delete_Statement]^^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^irNode.setLineno ( lineno ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^int lineno = node.getLineno (  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P14_Delete_Statement]^^766^767^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ; lineSet = true;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P7_Replace_Invocation]^block.addChildToBack ( justTransform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P14_Delete_Statement]^^769^770^^^^757^786^block.addChildToBack ( transform ( cc )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P7_Replace_Invocation]^node .addChildToBack (  )  ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P14_Delete_Statement]^^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P7_Replace_Invocation]^AstNode finallyBlock = statementNode .getTryBlock (  )  ;^773^^^^^757^786^AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^AstNode catchVar = clauseNode.getVarName (  ) ;AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;^773^^^^^757^786^AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P14_Delete_Statement]^^773^^^^^757^786^AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P2_Replace_Operator]^if  ( finallyBlock == null )  {^774^^^^^757^786^if  ( finallyBlock != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P8_Replace_Mix]^if  ( finallyBlock != true )  {^774^^^^^757^786^if  ( finallyBlock != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P9_Replace_Statement]^if  ( fnName != null )  {^774^^^^^757^786^if  ( finallyBlock != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P15_Unwrap_Block]^node.addChildToBack(transform(finallyBlock));^774^775^776^^^757^786^if  ( finallyBlock != null )  { node.addChildToBack ( transform ( finallyBlock )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P16_Remove_Block]^^774^775^776^^^757^786^if  ( finallyBlock != null )  { node.addChildToBack ( transform ( finallyBlock )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P13_Insert_Block]^if  (  ( statementNode.getReturnValue (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^774^^^^^757^786^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P13_Insert_Block]^if  (  ( statementNode.getLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^774^^^^^757^786^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P13_Insert_Block]^if  ( prev != null )  {     prev.addChildToBack ( cur ) ; }^774^^^^^757^786^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P13_Insert_Block]^if  (  ( statementNode.getBreakLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^774^^^^^757^786^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P13_Insert_Block]^if  (  ( statementNode.getElsePart (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^774^^^^^757^786^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P14_Delete_Statement]^^775^776^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P13_Insert_Block]^if  ( finallyBlock != null )  {     node.addChildToBack ( transform ( finallyBlock )  ) ; }^775^^^^^757^786^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P2_Replace_Operator]^if  (  ( lineSet == false )  ||  ( finallyBlock != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P2_Replace_Operator]^if  (  ( lineSet != false )  &&  ( finallyBlock != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P2_Replace_Operator]^if  (  ( lineSet == false )  &&  ( finallyBlock == null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P3_Replace_Literal]^if  (  ( lineSet == true )  &&  ( finallyBlock != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P5_Replace_Variable]^if  (  ( finallyBlock == false )  &&  ( lineSet != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P6_Replace_Expression]^if  (  ( lineSet == false )  ) {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P6_Replace_Expression]^if  (   ( finallyBlock != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P6_Replace_Expression]^if  ( lineSet == false )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P6_Replace_Expression]^if  ( finallyBlock != null )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P8_Replace_Mix]^if  (  ( lineSet == true )  ) {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P15_Unwrap_Block]^block.setLineno(finallyBlock.getLineno());^781^782^783^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  { block.setLineno ( finallyBlock.getLineno (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P16_Remove_Block]^^781^782^783^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  { block.setLineno ( finallyBlock.getLineno (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P7_Replace_Invocation]^block.setLineno ( finallyBlock .getCommentType (  )   ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P8_Replace_Mix]^block .setLineno (  )  ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P14_Delete_Statement]^^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^int lineno = node.getLineno (  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P5_Replace_Variable]^return block;^785^^^^^757^786^return node;^[CLASS] IRFactory TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  lineSet  TryStatement  statementNode  Config  config  Node  block  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  CatchClause  cc  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  finallyBlock  
[P7_Replace_Invocation]^Node node = new Node ( position2charno ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^790^791^^^^789^796^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenType ( exprNode .setType (  )   ) , transform ( exprNode.getOperand (  )  )  ) ;^790^791^^^^789^796^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node node = new Node ( justTransformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^790^791^^^^789^796^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode .getType (  )   )  ) ;^790^791^^^^789^796^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^790^791^792^793^794^789^796^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ; if  ( exprNode.isPostfix (  )  )  { node.putBooleanProp ( Node.INCRDECR_PROP, true ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^transform ( exprNode .getType (  )   )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^791^792^793^794^^789^796^transform ( exprNode.getOperand (  )  )  ) ; if  ( exprNode.isPostfix (  )  )  { node.putBooleanProp ( Node.INCRDECR_PROP, true ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P12_Insert_Condition]^if  ( exprNode.isPostfix (  )  )  { transform ( exprNode.getOperand (  )  )  ) ; }^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( caseNode.isDefault (  )  )  {^792^^^^^789^796^if  ( exprNode.isPostfix (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P15_Unwrap_Block]^node.putBooleanProp(Node.INCRDECR_PROP, true);^792^793^794^^^789^796^if  ( exprNode.isPostfix (  )  )  { node.putBooleanProp ( Node.INCRDECR_PROP, true ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P16_Remove_Block]^^792^793^794^^^789^796^if  ( exprNode.isPostfix (  )  )  { node.putBooleanProp ( Node.INCRDECR_PROP, true ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P3_Replace_Literal]^node.putBooleanProp ( Node.INCRDECR_PROP, false ) ;^793^^^^^789^796^node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^793^^^^^789^796^node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  ( exprNode.isPostfix (  )  )  {     node.putBooleanProp ( Node.INCRDECR_PROP, true ) ; }^793^^^^^789^796^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^if  ( exprNode .getType (  )   )  {^792^^^^^789^796^if  ( exprNode.isPostfix (  )  )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node .putProp ( lpColumn )  ;^793^^^^^789^796^node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^node .putProp ( nType )  ;^793^^^^^789^796^node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  UnaryExpression  exprNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^Node node = new Node ( Token.transformDispatcher ) ;^800^^^^^799^805^Node node = new Node ( Token.VAR ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^801^802^803^^^799^805^for  ( VariableInitializer child : declarationNode.getVariables (  )  )  { node.addChildToBack ( transform ( child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^node .addChildToBack (  )  ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^802^803^^^^799^805^node.addChildToBack ( transform ( child )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  VariableDeclaration  declarationNode  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  child  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node node = justTransform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^Node node = transform ( initializerNode .getElement (  )   ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^809^810^811^812^813^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ; if  ( initializerNode.getInitializer (  )  != null )  { node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ; node.setLineno ( node.getLineno (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node n = Node.newString ( literalNode.getValue (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^if  ( initializerNode.getInitializer (  )  == null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^if  ( initializerNode .getCondition (  )   != null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^if  ( initializerNode .getCondition (  )   != true )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( statementNode.getLabel (  )  != null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( statementNode.getBreakLabel (  )  != null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( statementNode.getElsePart (  )  != null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( statementNode.getReturnValue (  )  != null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P9_Replace_Statement]^if  ( caseNode.getStatements (  )  != null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P15_Unwrap_Block]^node.addChildToBack(transform(initializerNode.getInitializer())); node.setLineno(node.getLineno());^810^811^812^813^^808^815^if  ( initializerNode.getInitializer (  )  != null )  { node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ; node.setLineno ( node.getLineno (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P16_Remove_Block]^^810^811^812^813^^808^815^if  ( initializerNode.getInitializer (  )  != null )  { node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ; node.setLineno ( node.getLineno (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getReturnValue (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^810^^^^^808^815^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^810^^^^^808^815^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getBreakLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^810^^^^^808^815^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P13_Insert_Block]^if  (  ( statementNode.getElsePart (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^810^^^^^808^815^[Delete]^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( justTransform ( initializerNode.getInitializer (  )  )  ) ;^811^^^^^808^815^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.addChildToBack ( transform ( initializerNode .getCondition (  )   )  ) ;^811^^^^^808^815^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^811^812^813^^^808^815^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ; node.setLineno ( node.getLineno (  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P12_Insert_Condition]^if  ( initializerNode.getInitializer (  )  != null )  { node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ; }^811^^^^^808^815^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^node.setLineno ( node.setLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^node.setLineno ( node .getCommentType (  )   ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.getLineno (  ) , "", 0 ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^irNode.setLineno ( lineno ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^registry.identifyEnumName ( node.getString (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^int lineno = node.getLineno (  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^node .setLineno (  )  ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  node  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  VariableInitializer  initializerNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^return new Node ( Token. transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^819^820^821^822^^818^823^return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.WHILE, justTransform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^819^820^821^822^^818^823^return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode .getLineno (  )   )  ) ;^819^820^821^822^^818^823^return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.WHILE, transform ( loopNode .getBody (  )   ) , transform ( loopNode.getBody (  )  )  ) ;^819^820^821^822^^818^823^return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^821^822^^^^818^823^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^821^822^823^^^818^823^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^transform ( loopNode .getBody (  )   ) , transform ( loopNode.getBody (  )  )  ) ;^821^822^^^^818^823^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transform ( loopNode .getLineno (  )   )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^822^823^^^^818^823^transform ( loopNode.getBody (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WhileLoop  loopNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P5_Replace_Variable]^return new Node ( Token. transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^827^828^829^830^^826^831^return new Node ( Token.WITH, transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.WITH, justTransform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^827^828^829^830^^826^831^return new Node ( Token.WITH, transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^return new Node ( Token.WITH, transform ( statementNode.getExpression (  )  ) , transform ( statementNode .getLabels (  )   )  ) ;^827^828^829^830^^826^831^return new Node ( Token.WITH, transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P8_Replace_Mix]^return new Node ( Token.WITH, transform ( statementNode .getType (  )   ) , transform ( statementNode.getStatement (  )  )  ) ;^827^828^829^830^^826^831^return new Node ( Token.WITH, transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^829^830^^^^826^831^transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transform ( statementNode .getType (  )   ) , transform ( statementNode.getStatement (  )  )  ) ;^829^830^^^^826^831^transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^829^830^831^^^826^831^transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^justTransform ( statementNode.getStatement (  )  )  ) ;^830^^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P14_Delete_Statement]^^830^831^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ; }^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P12_Insert_Condition]^if  ( statementNode.getLabel (  )  != null )  { transform ( statementNode.getStatement (  )  )  ) ; }^830^^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P12_Insert_Condition]^if  ( statementNode.getBreakLabel (  )  != null )  { transform ( statementNode.getStatement (  )  )  ) ; }^830^^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P12_Insert_Condition]^if  ( statementNode.getElsePart (  )  != null )  { transform ( statementNode.getStatement (  )  )  ) ; }^830^^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P12_Insert_Condition]^if  ( statementNode.getReturnValue (  )  != null )  { transform ( statementNode.getStatement (  )  )  ) ; }^830^^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P12_Insert_Condition]^if  ( caseNode.getStatements (  )  != null )  { transform ( statementNode.getStatement (  )  )  ) ; }^830^^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P7_Replace_Invocation]^transform ( statementNode .getLabels (  )   )  ) ;^830^^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  WithStatement  statementNode  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  
[P2_Replace_Operator]^errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  >  )  ) ,^835^836^837^838^^834^842^errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P3_Replace_Literal]^errorReporter.error ( "Unsunsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^835^836^837^838^^834^842^errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P7_Replace_Invocation]^errorReporter .error ( sourceName , sourceString , clauseAbsolutePosition )  ,^835^836^837^838^^834^842^errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P8_Replace_Mix]^errorReporter .error ( flags , jsDoc , lparenCharno )  ,^835^836^837^838^^834^842^errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^[CLASS] IRFactory TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P7_Replace_Invocation]^com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node .setType (  )   ) , sourceName, node.getLineno (  ) , "", 0 ) ;^837^838^839^840^^834^842^com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) , sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P14_Delete_Statement]^^838^839^840^^^834^842^node.getType (  )  ) , sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P7_Replace_Invocation]^node .getCommentType (  )  , "", 0 ) ;^840^^^^^834^842^node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P14_Delete_Statement]^^840^^^^^834^842^node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P5_Replace_Variable]^return new Node ( Token.transformDispatcher ) ;^841^^^^^834^842^return new Node ( Token.EMPTY ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P3_Replace_Literal]^errorReporter.error ( "uctur", sourceName, node.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P3_Replace_Literal]^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", charno ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P5_Replace_Variable]^errorReporter.error ( "destructuring assignment forbidden", sourceString, node.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P5_Replace_Variable]^errorReporter.error ( "destructuring assignment forbidden", sourceName.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P5_Replace_Variable]^errorReporter.error ( "destructuring assignment forbidden",  node.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P5_Replace_Variable]^errorReporter.error ( "destructuring assignment forbidden", node, sourceName.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P7_Replace_Invocation]^errorReporter.error ( "destructuring assignment forbidden", sourceName, node .getCommentType (  )  , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P14_Delete_Statement]^^848^^^^^844^849^node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P12_Insert_Condition]^if  ( irNode.getLineno (  )  == -1 )  { node.getLineno (  ) , "", 0 ) ; }^848^^^^^844^849^node.getLineno (  ) , "", 0 ) ;^[CLASS] IRFactory TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  AstNode  node  
[P14_Delete_Statement]^^1163^^^^^1148^1178^throw new IllegalStateException  (" ")  ;^[CLASS] IRFactory TransformDispatcher  [METHOD] transformTokenType [RETURN_TYPE] int   int token [VARIABLES] JSTypeRegistry  registry  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  String  comment  directive  flags  jsDoc  sourceName  sourceString  TransformDispatcher  transformDispatcher  int  TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token  
[P5_Replace_Variable]^Node nodeode = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P7_Replace_Invocation]^Node node = new Node ( position2charno ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenType ( n.setCharno (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenType ( n .setType (  )   )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P5_Replace_Variable]^Node childode = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P8_Replace_Mix]^Node nodeode = new Node ( position2charno ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P14_Delete_Statement]^^299^300^301^302^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ; for  ( com.google.javascript.jscomp.mozilla.rhino.Node child : n )  { node.addChildToBack ( transform (  ( AstNode ) child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P14_Delete_Statement]^^301^302^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^301^^^^^297^304^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P5_Replace_Variable]^return n;^303^^^^^297^304^return node;^[CLASS] TransformDispatcher  [METHOD] processGeneric [RETURN_TYPE] Node   Node n [VARIABLES] boolean  Node  child  n  node  
[P7_Replace_Invocation]^Node ret = transformTokenType ( n ) ;^316^^^^^315^323^Node ret = transform ( n ) ;^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;Node ret = transform ( n ) ;^316^^^^^315^323^Node ret = transform ( n ) ;^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P11_Insert_Donor_Statement]^Node newName = transform ( name ) ;Node ret = transform ( n ) ;^316^^^^^315^323^Node ret = transform ( n ) ;^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P14_Delete_Statement]^^316^317^318^319^320^315^323^Node ret = transform ( n ) ; if  ( ret.getType (  )  == Token.STRING )  { ret.putBooleanProp ( Node.QUOTED_PROP, true ) ; } else if  ( ret.getType (  )  == Token.NAME )  { ret.setType ( Token.STRING ) ; }^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P2_Replace_Operator]^if  ( ret.getType (  )  >= Token.STRING )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P2_Replace_Operator]^if  ( ret.getType (  )  != Token.STRING )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P6_Replace_Expression]^if  ( ret.getType() == NAME )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P7_Replace_Invocation]^if  ( ret.setCharno (  )  == Token.STRING )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P8_Replace_Mix]^if  ( ret .setType (  )   == Token.STRING )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.EMPTY )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P9_Replace_Statement]^if  ( c.getType (  )  == Token.EMPTY )  {^317^^^^^315^323^if  ( ret.getType (  )  == Token.STRING )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P15_Unwrap_Block]^ret.putBooleanProp(Node.QUOTED_PROP, true);^317^318^319^320^321^315^323^if  ( ret.getType (  )  == Token.STRING )  { ret.putBooleanProp ( Node.QUOTED_PROP, true ) ; } else if  ( ret.getType (  )  == Token.NAME )  { ret.setType ( Token.STRING ) ; }^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P16_Remove_Block]^^317^318^319^320^321^315^323^if  ( ret.getType (  )  == Token.STRING )  { ret.putBooleanProp ( Node.QUOTED_PROP, true ) ; } else if  ( ret.getType (  )  == Token.NAME )  { ret.setType ( Token.STRING ) ; }^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P2_Replace_Operator]^} else if  ( ret.getType (  )  != Token.NAME )  {^319^^^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P6_Replace_Expression]^} else {^319^^^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P7_Replace_Invocation]^} else if  ( ret.setCharno (  )  == Token.NAME )  {^319^^^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P8_Replace_Mix]^} else if  ( ret .setType (  )   == Token.NAME )  {^319^^^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P15_Unwrap_Block]^ret.setType(Token.STRING);^319^320^321^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  { ret.setType ( Token.STRING ) ; }^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P16_Remove_Block]^^319^320^321^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  { ret.setType ( Token.STRING ) ; }^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P13_Insert_Block]^if  (  ( c.getType (  )  )  ==  ( EMPTY )  )  {     skipCount++; }^319^^^^^315^323^[Delete]^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( EMPTY )  )  {     node.removeChild ( child ) ;     skipIndexes[j] = i;     j++; }^319^^^^^315^323^[Delete]^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P7_Replace_Invocation]^ret.setCharno ( Token.STRING ) ;^320^^^^^315^323^ret.setType ( Token.STRING ) ;^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P8_Replace_Mix]^ret .getType (  )  ;^320^^^^^315^323^ret.setType ( Token.STRING ) ;^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P14_Delete_Statement]^^320^^^^^315^323^ret.setType ( Token.STRING ) ;^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P12_Insert_Condition]^if  ( ret.getType (  )  == Token.STRING )  { ret.setType ( Token.STRING ) ; }^320^^^^^315^323^ret.setType ( Token.STRING ) ;^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P3_Replace_Literal]^ret.putBooleanProp ( Node.QUOTED_PROP, false ) ;^318^^^^^315^323^ret.putBooleanProp ( Node.QUOTED_PROP, true ) ;^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P14_Delete_Statement]^^318^^^^^315^323^ret.putBooleanProp ( Node.QUOTED_PROP, true ) ;^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P2_Replace_Operator]^} else if  ( ret.getType (  )  <= Token.NAME )  {^319^^^^^315^323^} else if  ( ret.getType (  )  == Token.NAME )  {^[CLASS] TransformDispatcher  [METHOD] transformAsString [RETURN_TYPE] Node   AstNode n [VARIABLES] boolean  Node  ret  AstNode  n  
[P8_Replace_Mix]^if  ( literalNode .getElements (  )   )  {^327^^^^^326^356^if  ( literalNode.isDestructuring (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P9_Replace_Statement]^if  ( caseNode.isDefault (  )  )  {^327^^^^^326^356^if  ( literalNode.isDestructuring (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P15_Unwrap_Block]^reportDestructuringAssign(literalNode);^327^328^329^^^326^356^if  ( literalNode.isDestructuring (  )  )  { reportDestructuringAssign ( literalNode ) ; }^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P16_Remove_Block]^^327^328^329^^^326^356^if  ( literalNode.isDestructuring (  )  )  { reportDestructuringAssign ( literalNode ) ; }^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P7_Replace_Invocation]^transformAsString ( literalNode ) ;^328^^^^^326^356^reportDestructuringAssign ( literalNode ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P14_Delete_Statement]^^328^^^^^326^356^reportDestructuringAssign ( literalNode ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P1_Replace_Type]^short  skipCount = 0;^332^^^^^326^356^int skipCount = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P3_Replace_Literal]^int skipCount = j;^332^^^^^326^356^int skipCount = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^int i = 0;int skipCount = 0;^332^^^^^326^356^int skipCount = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P12_Insert_Condition]^if  ( skipCount > 0 )  { int skipCount = 0; }^332^^^^^326^356^int skipCount = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P2_Replace_Operator]^if  ( c.getType (  )  <= Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P7_Replace_Invocation]^if  ( c.setCharno (  )  == Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P7_Replace_Invocation]^if  ( c .setType (  )   == Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P8_Replace_Mix]^if  ( c.getType (  )  == Token.null )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.EMPTY )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P9_Replace_Statement]^if  ( ret.getType (  )  == Token.STRING )  {^335^^^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P15_Unwrap_Block]^skipCount++;^335^336^337^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  { skipCount++; }^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P16_Remove_Block]^^335^336^337^^^326^356^if  ( c.getType (  )  == Token.EMPTY )  { skipCount++; }^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P13_Insert_Block]^if  (  ( ret.getType (  )  )  ==  ( NAME )  )  {     ret.setType ( Token.STRING ) ; }^335^^^^^326^356^[Delete]^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( EMPTY )  )  {     node.removeChild ( child ) ;     skipIndexes[j] = i;     j++; }^335^^^^^326^356^[Delete]^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P7_Replace_Invocation]^Node c = transformTokenType ( child ) ;^334^^^^^326^356^Node c = transform ( child ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node ret = transform ( n ) ;Node c = transform ( child ) ;^334^^^^^326^356^Node c = transform ( child ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node newName = transform ( name ) ;Node c = transform ( child ) ;^334^^^^^326^356^Node c = transform ( child ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P14_Delete_Statement]^^333^334^335^336^337^326^356^for  ( AstNode child : literalNode.getElements (  )  )  { Node c = transform ( child ) ; if  ( c.getType (  )  == Token.EMPTY )  { skipCount++; }^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P14_Delete_Statement]^^334^335^336^337^^326^356^Node c = transform ( child ) ; if  ( c.getType (  )  == Token.EMPTY )  { skipCount++; }^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;Node c = transform ( child ) ;^334^^^^^326^356^Node c = transform ( child ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.removeChild ( child ) ;Node c = transform ( child ) ;^334^^^^^326^356^Node c = transform ( child ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;Node c = transform ( child ) ;^334^^^^^326^356^Node c = transform ( child ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P5_Replace_Variable]^node.addChildToBack ( child ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P14_Delete_Statement]^^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( c ) ;^338^^^^^326^356^node.addChildToBack ( c ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P2_Replace_Operator]^if  ( skipCount >= 0 )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P3_Replace_Literal]^if  ( skipCount > 2 )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P3_Replace_Literal]^if  ( skipCount > -9 )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P3_Replace_Literal]^if  ( skipCount > skipCount )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P5_Replace_Variable]^if  ( j > 0 )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P6_Replace_Expression]^if  ( child.getType() == EMPTY )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P8_Replace_Mix]^if  ( j > 1 )  {^341^^^^^326^356^if  ( skipCount > 0 )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P2_Replace_Operator]^if  ( child.getType (  )  > Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P5_Replace_Variable]^if  ( c.getType (  )  == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P7_Replace_Invocation]^if  ( child.setCharno (  )  == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P7_Replace_Invocation]^if  ( child .setType (  )   == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P9_Replace_Statement]^if  ( ret.getType (  )  == Token.STRING )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P15_Unwrap_Block]^node.removeChild(child); skipIndexes[j] = i; j++;^346^347^348^349^350^326^356^if  ( child.getType (  )  == Token.EMPTY )  { node.removeChild ( child ) ; skipIndexes[j] = i; j++; }^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P16_Remove_Block]^^346^347^348^349^350^326^356^if  ( child.getType (  )  == Token.EMPTY )  { node.removeChild ( child ) ; skipIndexes[j] = i; j++; }^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P13_Insert_Block]^if  (  ( c.getType (  )  )  ==  ( EMPTY )  )  {     skipCount++; }^346^^^^^326^356^[Delete]^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P13_Insert_Block]^if  (  ( ret.getType (  )  )  ==  ( NAME )  )  {     ret.setType ( Token.STRING ) ; }^346^^^^^326^356^[Delete]^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P5_Replace_Variable]^skipIndexes[j] = skipCount;^348^^^^^326^356^skipIndexes[j] = i;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P8_Replace_Mix]^skipIndexes[j]  =  skipIndexes[j] ;^348^^^^^326^356^skipIndexes[j] = i;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P5_Replace_Variable]^node.removeChild ( c ) ;^347^^^^^326^356^node.removeChild ( child ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P7_Replace_Invocation]^node .removeFirstChild (  )  ;^347^^^^^326^356^node.removeChild ( child ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P14_Delete_Statement]^^347^^^^^326^356^node.removeChild ( child ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.setDirectives ( directives ) ;node.removeChild ( child ) ;^347^^^^^326^356^node.removeChild ( child ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;node.removeChild ( child ) ;^347^^^^^326^356^node.removeChild ( child ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P8_Replace_Mix]^skipIndexes[j]  = null ;^348^^^^^326^356^skipIndexes[j] = i;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P1_Replace_Type]^long  i = 0;^343^^^^^326^356^int i = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P3_Replace_Literal]^int i = 6;^343^^^^^326^356^int i = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^int j = 0;int i = 0;^343^^^^^326^356^int i = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^int skipCount = 0;int i = 0;^343^^^^^326^356^int i = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P1_Replace_Type]^long  j = 0;^344^^^^^326^356^int j = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P3_Replace_Literal]^int j = 2;^344^^^^^326^356^int j = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^int i = 0;int j = 0;^344^^^^^326^356^int j = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P5_Replace_Variable]^for  ( Node child : child.children (  )  )  {^345^^^^^326^356^for  ( Node child : node.children (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P7_Replace_Invocation]^for  ( Node child : node.setCharno (  )  )  {^345^^^^^326^356^for  ( Node child : node.children (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P7_Replace_Invocation]^for  ( Node child : node .addChildToBack (  )   )  {^345^^^^^326^356^for  ( Node child : node.children (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P8_Replace_Mix]^for  ( Node child : child.setCharno (  )  )  {^345^^^^^326^356^for  ( Node child : node.children (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P14_Delete_Statement]^^345^346^347^348^349^326^356^for  ( Node child : node.children (  )  )  { if  ( child.getType (  )  == Token.EMPTY )  { node.removeChild ( child ) ; skipIndexes[j] = i; j++; }^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P8_Replace_Mix]^if  ( node.setCharno (  )  == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P5_Replace_Variable]^node.putProp ( Node.SKIP_INDEXES_PROP ) ;^353^^^^^326^356^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P14_Delete_Statement]^^353^^^^^326^356^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^353^^^^^326^356^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^353^^^^^326^356^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P11_Insert_Donor_Statement]^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^353^^^^^326^356^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P2_Replace_Operator]^if  ( child.getType (  )  >= Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P14_Delete_Statement]^^347^348^^^^326^356^node.removeChild ( child ) ; skipIndexes[j] = i;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P1_Replace_Type]^short  i = 0;^343^^^^^326^356^int i = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P3_Replace_Literal]^int i = 8;^343^^^^^326^356^int i = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P1_Replace_Type]^short  j = 0;^344^^^^^326^356^int j = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P3_Replace_Literal]^int j = j;^344^^^^^326^356^int j = 0;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P8_Replace_Mix]^if  ( node .setType (  )   == Token.EMPTY )  {^346^^^^^326^356^if  ( child.getType (  )  == Token.EMPTY )  {^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P8_Replace_Mix]^node .putProp ( skipIndexes )  ;^353^^^^^326^356^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P5_Replace_Variable]^return child;^355^^^^^326^356^return node;^[CLASS] TransformDispatcher  [METHOD] processArrayLiteral [RETURN_TYPE] Node   ArrayLiteral literalNode [VARIABLES] boolean  Node  c  child  node  int[]  skipIndexes  ArrayLiteral  literalNode  int  i  j  skipCount  AstNode  child  
[P7_Replace_Invocation]^return processNewExpression ( assignmentNode ) ;^360^^^^^359^361^return processInfixExpression ( assignmentNode ) ;^[CLASS] TransformDispatcher  [METHOD] processAssignment [RETURN_TYPE] Node   Assignment assignmentNode [VARIABLES] Assignment  assignmentNode  boolean  
[P14_Delete_Statement]^^360^^^^^359^361^return processInfixExpression ( assignmentNode ) ;^[CLASS] TransformDispatcher  [METHOD] processAssignment [RETURN_TYPE] Node   Assignment assignmentNode [VARIABLES] Assignment  assignmentNode  boolean  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P14_Delete_Statement]^^367^368^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^367^^^^^364^371^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P5_Replace_Variable]^parseDirectives ( child ) ;^369^^^^^364^371^parseDirectives ( node ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P7_Replace_Invocation]^isDirective ( node ) ;^369^^^^^364^371^parseDirectives ( node ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P14_Delete_Statement]^^369^370^^^^364^371^parseDirectives ( node ) ; return node;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^node.setDirectives ( directives ) ;parseDirectives ( node ) ;^369^^^^^364^371^parseDirectives ( node ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P11_Insert_Donor_Statement]^parseDirectives ( bodyNode ) ;parseDirectives ( node ) ;^369^^^^^364^371^parseDirectives ( node ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P12_Insert_Condition]^if  ( directives == null )  { parseDirectives ( node ) ; }^369^^^^^364^371^parseDirectives ( node ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P12_Insert_Condition]^if  ( directives != null )  { parseDirectives ( node ) ; }^369^^^^^364^371^parseDirectives ( node ) ;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P5_Replace_Variable]^return child;^370^^^^^364^371^return node;^[CLASS] TransformDispatcher  [METHOD] processAstRoot [RETURN_TYPE] Node   AstRoot rootNode [VARIABLES] boolean  Node  child  node  AstRoot  rootNode  
[P7_Replace_Invocation]^while  ( parseDirectives ( node.getFirstChild (  )  )  )  {^385^^^^^382^397^while  ( isDirective ( node.getFirstChild (  )  )  )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P7_Replace_Invocation]^while  ( isDirective ( node.setCharno (  )  )  )  {^385^^^^^382^397^while  ( isDirective ( node.getFirstChild (  )  )  )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P8_Replace_Mix]^while  ( isDirective ( node .removeFirstChild (  )   )  )  {^385^^^^^382^397^while  ( isDirective ( node.getFirstChild (  )  )  )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P2_Replace_Operator]^if  ( directives != null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P5_Replace_Variable]^if  ( directive == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P5_Replace_Variable]^if  ( directivess == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P8_Replace_Mix]^if  ( directives == this )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P9_Replace_Statement]^if  ( name == null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P9_Replace_Statement]^if  ( prev != null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P9_Replace_Statement]^if  ( fnName != null )  {^387^^^^^382^397^if  ( directives == null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P15_Unwrap_Block]^directives = com.google.common.collect.Sets.newHashSet(directive);^387^388^389^390^391^382^397^if  ( directives == null )  { directives = Sets.newHashSet ( directive ) ; } else { directives.add ( directive ) ; }^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P16_Remove_Block]^^387^388^389^390^391^382^397^if  ( directives == null )  { directives = Sets.newHashSet ( directive ) ; } else { directives.add ( directive ) ; }^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P14_Delete_Statement]^^390^^^^^382^397^directives.add ( directive ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P11_Insert_Donor_Statement]^node.setDirectives ( directives ) ;directives.add ( directive ) ;^390^^^^^382^397^directives.add ( directive ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P11_Insert_Donor_Statement]^directives = Sets.newHashSet ( directive ) ;directives.add ( directive ) ;^390^^^^^382^397^directives.add ( directive ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P8_Replace_Mix]^directives =  Sets.newHashSet ( null ) ;^388^^^^^382^397^directives = Sets.newHashSet ( directive ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P14_Delete_Statement]^^388^^^^^382^397^directives = Sets.newHashSet ( directive ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P11_Insert_Donor_Statement]^directives.add ( directive ) ;directives = Sets.newHashSet ( directive ) ;^388^^^^^382^397^directives = Sets.newHashSet ( directive ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P1_Replace_Type]^char directive = node.removeFirstChild (  ) .getFirstChild (  ) .getchar (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P7_Replace_Invocation]^String directive = node.setCharno (  ) .getFirstChild (  ) .getString (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P7_Replace_Invocation]^String directive = node .removeChild ( node )  .getFirstChild (  ) .getString (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P7_Replace_Invocation]^String directive = node.removeFirstChild (  )  .removeFirstChild (  )  .getString (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P8_Replace_Mix]^String directive = node.removeFirstChild (  ) .getFirstChild (  )  .getFirstChild (  )  ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P14_Delete_Statement]^^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P11_Insert_Donor_Statement]^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P11_Insert_Donor_Statement]^while  ( isDirective ( node.getFirstChild (  )  )  )  { String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^386^^^^^382^397^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P14_Delete_Statement]^^385^386^^^^382^397^while  ( isDirective ( node.getFirstChild (  )  )  )  { String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P2_Replace_Operator]^if  ( directives == null )  {^394^^^^^382^397^if  ( directives != null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P8_Replace_Mix]^if  ( directives != false )  {^394^^^^^382^397^if  ( directives != null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P9_Replace_Statement]^if  ( name == null )  {^394^^^^^382^397^if  ( directives != null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P9_Replace_Statement]^if  ( prev != null )  {^394^^^^^382^397^if  ( directives != null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P9_Replace_Statement]^if  ( fnName != null )  {^394^^^^^382^397^if  ( directives != null )  {^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P15_Unwrap_Block]^node.setDirectives(directives);^394^395^396^^^382^397^if  ( directives != null )  { node.setDirectives ( directives ) ; }^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P16_Remove_Block]^^394^395^396^^^382^397^if  ( directives != null )  { node.setDirectives ( directives ) ; }^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P13_Insert_Block]^if  ( prev != null )  {     prev.addChildToBack ( cur ) ; }^394^^^^^382^397^[Delete]^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P5_Replace_Variable]^node.setDirectives ( null ) ;^395^^^^^382^397^node.setDirectives ( directives ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P14_Delete_Statement]^^395^^^^^382^397^node.setDirectives ( directives ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P11_Insert_Donor_Statement]^parseDirectives ( node ) ;node.setDirectives ( directives ) ;^395^^^^^382^397^node.setDirectives ( directives ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P11_Insert_Donor_Statement]^node.removeChild ( child ) ;node.setDirectives ( directives ) ;^395^^^^^382^397^node.setDirectives ( directives ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P11_Insert_Donor_Statement]^parseDirectives ( bodyNode ) ;node.setDirectives ( directives ) ;^395^^^^^382^397^node.setDirectives ( directives ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P11_Insert_Donor_Statement]^directives.add ( directive ) ;node.setDirectives ( directives ) ;^395^^^^^382^397^node.setDirectives ( directives ) ;^[CLASS] TransformDispatcher  [METHOD] parseDirectives [RETURN_TYPE] void   Node node [VARIABLES] Set  directives  boolean  Node  node  String  directive  
[P2_Replace_Operator]^if  ( n != null )  return false;^400^^^^^399^406^if  ( n == null )  return false;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P3_Replace_Literal]^if  ( n == null )  return true;^400^^^^^399^406^if  ( n == null )  return false;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P8_Replace_Mix]^if  ( n == false )  return false;^400^^^^^399^406^if  ( n == null )  return false;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P1_Replace_Type]^short  nType = n.getType (  ) ;^402^^^^^399^406^int nType = n.getType (  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P7_Replace_Invocation]^int nType = n.setCharno (  ) ;^402^^^^^399^406^int nType = n.getType (  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P14_Delete_Statement]^^402^^^^^399^406^int nType = n.getType (  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P2_Replace_Operator]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  || n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P2_Replace_Operator]^return  ( nType == Token.EXPR_RESULT && nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P2_Replace_Operator]^return  ( nType != Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P2_Replace_Operator]^return  ( nType <= Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P5_Replace_Variable]^return  ( nType == Token.1 || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P5_Replace_Variable]^return  ( ALLOWED_DIRECTIVESType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && n.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P7_Replace_Invocation]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.setCharno (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P7_Replace_Invocation]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n .removeFirstChild (  )  .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P7_Replace_Invocation]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.add ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P7_Replace_Invocation]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  )  .getFirstChild (  )   ) ;^403^404^405^^^399^406^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P7_Replace_Invocation]^n.getFirstChild (  )  .setType (  )   == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^404^405^^^^399^406^n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P7_Replace_Invocation]^n.setCharno (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^404^405^^^^399^406^n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P14_Delete_Statement]^^404^405^^^^399^406^n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P11_Insert_Donor_Statement]^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^404^405^^^^399^406^n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P7_Replace_Invocation]^n .removeFirstChild (  )  .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n^404^405^^^^399^406^n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P7_Replace_Invocation]^ALLOWED_DIRECTIVES.add ( n.getFirstChild (  ) .getString (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P7_Replace_Invocation]^ALLOWED_DIRECTIVES .add ( 3 )   ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P7_Replace_Invocation]^ALLOWED_DIRECTIVES.contains ( n.setCharno (  ) .getString (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P14_Delete_Statement]^^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P11_Insert_Donor_Statement]^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P11_Insert_Donor_Statement]^n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P7_Replace_Invocation]^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  )  .getFirstChild (  )   ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P8_Replace_Mix]^ALLOWED_DIRECTIVES.contains ( n .removeFirstChild (  )  .getString (  )  ) ;^405^^^^^399^406^ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] isDirective [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  int  nType  
[P7_Replace_Invocation]^return parseDirectives ( blockNode ) ;^410^^^^^409^411^return processGeneric ( blockNode ) ;^[CLASS] TransformDispatcher  [METHOD] processBlock [RETURN_TYPE] Node   Block blockNode [VARIABLES] boolean  Block  blockNode  
[P14_Delete_Statement]^^410^^^^^409^411^return processGeneric ( blockNode ) ;^[CLASS] TransformDispatcher  [METHOD] processBlock [RETURN_TYPE] Node   Block blockNode [VARIABLES] boolean  Block  blockNode  
[P2_Replace_Operator]^if  ( statementNode.getBreakLabel (  )  == null )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P8_Replace_Mix]^if  ( statementNode.getBreakLabel (  )  != true )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P9_Replace_Statement]^if  ( initializerNode.getInitializer (  )  != null )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P9_Replace_Statement]^if  ( statementNode.getLabel (  )  != null )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P9_Replace_Statement]^if  ( statementNode.getElsePart (  )  != null )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P9_Replace_Statement]^if  ( statementNode.getReturnValue (  )  != null )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P9_Replace_Statement]^if  ( caseNode.getStatements (  )  != null )  {^416^^^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P15_Unwrap_Block]^node.addChildToBack(transform(statementNode.getBreakLabel()));^416^417^418^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  { node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P16_Remove_Block]^^416^417^418^^^414^420^if  ( statementNode.getBreakLabel (  )  != null )  { node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P13_Insert_Block]^if  (  ( statementNode.getReturnValue (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^416^^^^^414^420^[Delete]^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P13_Insert_Block]^if  (  ( statementNode.getLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^416^^^^^414^420^[Delete]^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P13_Insert_Block]^if  ( finallyBlock != null )  {     node.addChildToBack ( transform ( finallyBlock )  ) ; }^416^^^^^414^420^[Delete]^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P13_Insert_Block]^if  (  ( initializerNode.getInitializer (  )  )  != null )  {     node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;     node.setLineno ( node.getLineno (  )  ) ; }^416^^^^^414^420^[Delete]^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P13_Insert_Block]^if  (  ( statementNode.getElsePart (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^416^^^^^414^420^[Delete]^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( statementNode.getBreakLabel (  )  )  ) ;^417^^^^^414^420^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P14_Delete_Statement]^^417^418^^^^414^420^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P13_Insert_Block]^if  (  ( statementNode.getBreakLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^417^^^^^414^420^[Delete]^[CLASS] TransformDispatcher  [METHOD] processBreakStatement [RETURN_TYPE] Node   BreakStatement statementNode [VARIABLES] BreakStatement  statementNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^AstNode expr = caseNode.getExpression (  ) ;AstNode catchVar = clauseNode.getVarName (  ) ;^424^^^^^423^440^AstNode catchVar = clauseNode.getVarName (  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;AstNode catchVar = clauseNode.getVarName (  ) ;^424^^^^^423^440^AstNode catchVar = clauseNode.getVarName (  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P7_Replace_Invocation]^AstNode catchVar = clauseNode .getLineno (  )  ;^424^^^^^423^440^AstNode catchVar = clauseNode.getVarName (  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P14_Delete_Statement]^^424^^^^^423^440^AstNode catchVar = clauseNode.getVarName (  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P5_Replace_Variable]^Node node = new Node ( Token. transform ( catchVar )  ) ;^425^^^^^423^440^Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P7_Replace_Invocation]^Node node = new Node ( Token.CATCH, transformTokenType ( catchVar )  ) ;^425^^^^^423^440^Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^425^^^^^423^440^Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^425^^^^^423^440^Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P2_Replace_Operator]^if  ( clauseNode.getCatchCondition (  )  == null )  {^426^^^^^423^440^if  ( clauseNode.getCatchCondition (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P8_Replace_Mix]^if  ( clauseNode.getCatchCondition (  )  != true )  {^426^^^^^423^440^if  ( clauseNode.getCatchCondition (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P9_Replace_Statement]^if  ( caseNode.getStatements (  )  != null )  {^426^^^^^423^440^if  ( clauseNode.getCatchCondition (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P8_Replace_Mix]^Node catchCondition = new Node ( Token.null ) ;^429^^^^^423^440^Node catchCondition = new Node ( Token.EMPTY ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P1_Replace_Type]^short  clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^433^434^^^^423^440^int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P7_Replace_Invocation]^int clauseAbsolutePosition = transformTokenType ( catchVar.getAbsolutePosition (  )  ) ;^433^434^^^^423^440^int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P7_Replace_Invocation]^catchCondition .getLineno (  )  ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P7_Replace_Invocation]^catchCondition.setLineno ( catchVar .getType (  )   ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P14_Delete_Statement]^^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^catchCondition.setCharno ( clauseAbsolutePosition ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^432^^^^^423^440^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P7_Replace_Invocation]^transformTokenType ( catchVar.getAbsolutePosition (  )  ) ;^434^^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P7_Replace_Invocation]^position2charno ( catchVar .getLineno (  )   ) ;^434^^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P14_Delete_Statement]^^434^435^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ; catchCondition.setCharno ( clauseAbsolutePosition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;position2charno ( catchVar.getAbsolutePosition (  )  ) ;^434^^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^functionNode.getAbsolutePosition (  ) ;position2charno ( catchVar.getAbsolutePosition (  )  ) ;^434^^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^catchCondition.setCharno ( clauseAbsolutePosition ) ;position2charno ( catchVar.getAbsolutePosition (  )  ) ;^434^^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P14_Delete_Statement]^^434^^^^^423^440^position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P14_Delete_Statement]^^435^436^^^^423^440^catchCondition.setCharno ( clauseAbsolutePosition ) ; node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;catchCondition.setCharno ( clauseAbsolutePosition ) ;^435^^^^^423^440^catchCondition.setCharno ( clauseAbsolutePosition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^position2charno ( catchVar.getAbsolutePosition (  )  ) ;catchCondition.setCharno ( clauseAbsolutePosition ) ;^435^^^^^423^440^catchCondition.setCharno ( clauseAbsolutePosition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P7_Replace_Invocation]^node .addChildToBack (  )  ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P14_Delete_Statement]^^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( catchCondition ) ;^436^^^^^423^440^node.addChildToBack ( catchCondition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( clauseNode.getCatchCondition (  )  )  ) ;^427^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P8_Replace_Mix]^node.addChildToBack ( transform ( clauseNode .getVarName (  )   )  ) ;^427^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P12_Insert_Condition]^if  ( clauseNode.getCatchCondition (  )  != null )  { node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ; }^427^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P1_Replace_Type]^long  clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^433^434^^^^423^440^int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P8_Replace_Mix]^int clauseAbsolutePosition = position2charno ( catchVar .getLineno (  )   ) ;^433^434^^^^423^440^int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P7_Replace_Invocation]^if  ( clauseNode .getVarName (  )   != null )  {^426^^^^^423^440^if  ( clauseNode.getCatchCondition (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^427^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P14_Delete_Statement]^^435^^^^^423^440^catchCondition.setCharno ( clauseAbsolutePosition ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P7_Replace_Invocation]^node.addChildToBack ( transform ( clauseNode .getLineno (  )   )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P14_Delete_Statement]^^438^439^440^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ; return node; }^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^438^^^^^423^440^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P5_Replace_Variable]^return catchCondition;^439^^^^^423^440^return node;^[CLASS] TransformDispatcher  [METHOD] processCatchClause [RETURN_TYPE] Node   CatchClause clauseNode [VARIABLES] boolean  Node  catchCondition  node  CatchClause  clauseNode  AstNode  catchVar  int  clauseAbsolutePosition  
[P5_Replace_Variable]^return new Node ( Token. transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^444^445^446^447^^443^449^return new Node ( Token.HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P7_Replace_Invocation]^return new Node ( Token.HOOK, transformTokenType ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^444^445^446^447^^443^449^return new Node ( Token.HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P8_Replace_Mix]^return new Node ( Token.HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode .getTestExpression (  )   ) ,^444^445^446^447^^443^449^return new Node ( Token.HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P7_Replace_Invocation]^transformTokenType ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ;^446^447^448^^^443^449^transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P14_Delete_Statement]^^446^447^448^449^^443^449^transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P7_Replace_Invocation]^transformTokenType ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ;^447^448^^^^443^449^transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P14_Delete_Statement]^^447^448^449^^^443^449^transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P7_Replace_Invocation]^transformTokenType ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P7_Replace_Invocation]^transform ( exprNode .getTestExpression (  )   )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P14_Delete_Statement]^^448^449^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^exprNode.getOperatorPosition (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( exprNode.getFalseExpression (  )  )  ) ;^448^^^^^443^449^transform ( exprNode.getFalseExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processConditionalExpression [RETURN_TYPE] Node   ConditionalExpression exprNode [VARIABLES] boolean  ConditionalExpression  exprNode  
[P2_Replace_Operator]^if  ( statementNode.getLabel (  )  == null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P8_Replace_Mix]^if  ( statementNode.getLabel (  )  != this )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P9_Replace_Statement]^if  ( initializerNode.getInitializer (  )  != null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P9_Replace_Statement]^if  ( statementNode.getBreakLabel (  )  != null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P9_Replace_Statement]^if  ( statementNode.getElsePart (  )  != null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P9_Replace_Statement]^if  ( statementNode.getReturnValue (  )  != null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P9_Replace_Statement]^if  ( caseNode.getStatements (  )  != null )  {^454^^^^^452^458^if  ( statementNode.getLabel (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P15_Unwrap_Block]^node.addChildToBack(transform(statementNode.getLabel()));^454^455^456^^^452^458^if  ( statementNode.getLabel (  )  != null )  { node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P16_Remove_Block]^^454^455^456^^^452^458^if  ( statementNode.getLabel (  )  != null )  { node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P13_Insert_Block]^if  (  ( statementNode.getReturnValue (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^454^^^^^452^458^[Delete]^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P13_Insert_Block]^if  ( finallyBlock != null )  {     node.addChildToBack ( transform ( finallyBlock )  ) ; }^454^^^^^452^458^[Delete]^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P13_Insert_Block]^if  (  ( initializerNode.getInitializer (  )  )  != null )  {     node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;     node.setLineno ( node.getLineno (  )  ) ; }^454^^^^^452^458^[Delete]^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P13_Insert_Block]^if  (  ( statementNode.getBreakLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^454^^^^^452^458^[Delete]^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P13_Insert_Block]^if  (  ( statementNode.getElsePart (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^454^^^^^452^458^[Delete]^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( statementNode.getLabel (  )  )  ) ;^455^^^^^452^458^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P14_Delete_Statement]^^455^456^^^^452^458^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P13_Insert_Block]^if  (  ( statementNode.getLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^455^^^^^452^458^[Delete]^[CLASS] TransformDispatcher  [METHOD] processContinueStatement [RETURN_TYPE] Node   ContinueStatement statementNode [VARIABLES] boolean  Node  node  ContinueStatement  statementNode  
[P5_Replace_Variable]^return new Node ( Token. transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^462^463^464^465^^461^466^return new Node ( Token.DO, transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P7_Replace_Invocation]^return new Node ( Token.DO, transformTokenType ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^462^463^464^465^^461^466^return new Node ( Token.DO, transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P7_Replace_Invocation]^return new Node ( Token.DO, transform ( loopNode.getBody (  )  ) , transform ( loopNode .getBody (  )   )  ) ;^462^463^464^465^^461^466^return new Node ( Token.DO, transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P7_Replace_Invocation]^transformTokenType ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^464^465^^^^461^466^transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P14_Delete_Statement]^^464^465^466^^^461^466^transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P7_Replace_Invocation]^transform ( loopNode .getLineno (  )   ) , transform ( loopNode.getCondition (  )  )  ) ;^464^465^^^^461^466^transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P7_Replace_Invocation]^transformTokenType ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P14_Delete_Statement]^^465^466^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( loopNode.getCondition (  )  )  ) ;^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P12_Insert_Condition]^if  ( clauseNode.getCatchCondition (  )  != null )  { transform ( loopNode.getCondition (  )  )  ) ; }^465^^^^^461^466^transform ( loopNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processDoLoop [RETURN_TYPE] Node   DoLoop loopNode [VARIABLES] boolean  DoLoop  loopNode  
[P5_Replace_Variable]^return new Node ( Token. transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^470^471^472^473^^469^474^return new Node ( Token.GETELEM, transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P7_Replace_Invocation]^return new Node ( Token.GETELEM, transformTokenType ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^470^471^472^473^^469^474^return new Node ( Token.GETELEM, transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P7_Replace_Invocation]^return new Node ( Token.GETELEM, transform ( getNode .getElement (  )   ) , transform ( getNode.getElement (  )  )  ) ;^470^471^472^473^^469^474^return new Node ( Token.GETELEM, transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P7_Replace_Invocation]^return new Node ( Token.GETELEM, transform ( getNode.getTarget (  )  ) , transform ( getNode .getTarget (  )   )  ) ;^470^471^472^473^^469^474^return new Node ( Token.GETELEM, transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P7_Replace_Invocation]^transformTokenType ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^472^473^^^^469^474^transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P7_Replace_Invocation]^transform ( getNode .getElement (  )   ) , transform ( getNode.getElement (  )  )  ) ;^472^473^^^^469^474^transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P14_Delete_Statement]^^472^473^474^^^469^474^transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P7_Replace_Invocation]^transformTokenType ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P14_Delete_Statement]^^473^474^^^^469^474^transform ( getNode.getElement (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( getNode.getElement (  )  )  ) ;^473^^^^^469^474^transform ( getNode.getElement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processElementGet [RETURN_TYPE] Node   ElementGet getNode [VARIABLES] boolean  ElementGet  getNode  
[P7_Replace_Invocation]^Node node = new Node ( position2charno ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenType ( statementNode .setType (  )   )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P14_Delete_Statement]^^484^485^486^487^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ; node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ; return node; }^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^484^^^^^483^487^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( statementNode.getExpression (  )  )  ) ;^485^^^^^483^487^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P14_Delete_Statement]^^485^486^487^^^483^487^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ; return node; }^[CLASS] TransformDispatcher  [METHOD] processExpressionStatement [RETURN_TYPE] Node   ExpressionStatement statementNode [VARIABLES] boolean  ExpressionStatement  statementNode  Node  node  
[P4_Replace_Constructor]^return return  Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratednew Node ( HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getFalseExpression (  )  )  )   ) ,^491^492^493^494^^490^496^return new Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P5_Replace_Variable]^return new Node ( Token. transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^491^492^493^494^^490^496^return new Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P7_Replace_Invocation]^return new Node ( Token.FOR, transformTokenType ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^491^492^493^494^^490^496^return new Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P7_Replace_Invocation]^return new Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode .getIterator (  )   ) ,^491^492^493^494^^490^496^return new Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P8_Replace_Mix]^return new Node ( Token.FOR, transform ( loopNode .getIteratedObject (  )   ) , transform ( loopNode.getIteratedObject (  )  ) ,^491^492^493^494^^490^496^return new Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P7_Replace_Invocation]^transformTokenType ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^493^494^495^^^490^496^transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P7_Replace_Invocation]^transform ( loopNode .getIteratedObject (  )   ) , transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^493^494^495^^^490^496^transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P14_Delete_Statement]^^493^494^495^496^^490^496^transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P7_Replace_Invocation]^transformTokenType ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^494^495^^^^490^496^transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P14_Delete_Statement]^^494^495^496^^^490^496^transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P7_Replace_Invocation]^transformTokenType ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P14_Delete_Statement]^^495^496^^^^490^496^transform ( loopNode.getBody (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^495^^^^^490^496^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForInLoop [RETURN_TYPE] Node   ForInLoop loopNode [VARIABLES] ForInLoop  loopNode  boolean  
[P5_Replace_Variable]^Node node = new Node ( Token. transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^500^501^502^503^^499^507^Node node = new Node ( Token.FOR, transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P7_Replace_Invocation]^Node node = new Node ( Token.FOR, transformTokenType ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^500^501^502^503^^499^507^Node node = new Node ( Token.FOR, transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P7_Replace_Invocation]^Node node = new Node ( Token.FOR, transform ( loopNode.getInitializer (  )  ) , transform ( loopNode .getBody (  )   ) ,^500^501^502^503^^499^507^Node node = new Node ( Token.FOR, transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P7_Replace_Invocation]^transformTokenType ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;^502^503^504^^^499^507^transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P14_Delete_Statement]^^502^503^504^505^506^499^507^transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ; node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ; return node; }^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P7_Replace_Invocation]^transform ( loopNode .getCondition (  )   ) , transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;^502^503^504^^^499^507^transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P7_Replace_Invocation]^transformTokenType ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;^503^504^^^^499^507^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P7_Replace_Invocation]^transform ( loopNode .getBody (  )   ) , transform ( loopNode.getIncrement (  )  )  ) ;^503^504^^^^499^507^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P14_Delete_Statement]^^503^504^505^506^507^499^507^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ; node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ; return node; }^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P7_Replace_Invocation]^transformTokenType ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P7_Replace_Invocation]^transform ( loopNode .getInitializer (  )   )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P14_Delete_Statement]^^504^505^506^507^^499^507^transform ( loopNode.getIncrement (  )  )  ) ; node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ; return node; }^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( loopNode.getIncrement (  )  )  ) ;^504^^^^^499^507^transform ( loopNode.getIncrement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P14_Delete_Statement]^^505^506^507^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ; return node; }^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getIncrement (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIteratedObject (  )  ) , transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P8_Replace_Mix]^node.addChildToBack ( transform ( loopNode .getLineno (  )   )  ) ;^505^^^^^499^507^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processForLoop [RETURN_TYPE] Node   ForLoop loopNode [VARIABLES] boolean  ForLoop  loopNode  Node  node  
[P7_Replace_Invocation]^Node node = new Node ( position2charno ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;^511^512^^^^510^521^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenTypeTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;^511^512^^^^510^521^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P14_Delete_Statement]^^511^512^513^514^515^510^521^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ; for  ( AstNode child : callNode.getArguments (  )  )  { node.addChildToBack ( transform ( child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenType ( callNode .setType (  )   ) , transform ( callNode.getTarget (  )  )  ) ;^511^512^^^^510^521^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P7_Replace_Invocation]^transformTokenType ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P14_Delete_Statement]^^512^513^514^515^^510^521^transform ( callNode.getTarget (  )  )  ) ; for  ( AstNode child : callNode.getArguments (  )  )  { node.addChildToBack ( transform ( child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( callNode.getTarget (  )  )  ) ;^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P12_Insert_Condition]^if  ( caseNode.isDefault (  )  )  { transform ( callNode.getTarget (  )  )  ) ; }^512^^^^^510^521^transform ( callNode.getTarget (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P7_Replace_Invocation]^for  ( AstNode child : callNode .getTarget (  )   )  {^513^^^^^510^521^for  ( AstNode child : callNode.getArguments (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P14_Delete_Statement]^^513^514^515^^^510^521^for  ( AstNode child : callNode.getArguments (  )  )  { node.addChildToBack ( transform ( child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P8_Replace_Mix]^node .addChildToBack (  )  ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P14_Delete_Statement]^^514^515^^^^510^521^node.addChildToBack ( transform ( child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( child )  ) ;^514^^^^^510^521^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P1_Replace_Type]^short  leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^517^^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P2_Replace_Operator]^int leftParamPos = callNode.getAbsolutePosition (  >  )  + callNode.getLp (  ) ;^517^^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P7_Replace_Invocation]^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode .getType (  )  ;^517^^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^517^^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P14_Delete_Statement]^^517^518^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ; node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^517^^^^^510^521^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P8_Replace_Mix]^node .getLineno (  )  ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P14_Delete_Statement]^^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;node.setLineno ( callNode.getLineno (  )  ) ;^518^^^^^510^521^node.setLineno ( callNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P7_Replace_Invocation]^node.setCharno ( transformTokenType ( leftParamPos )  ) ;^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P14_Delete_Statement]^^519^520^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ; return node;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^lp.setCharno ( position2charno ( lparenCharno )  ) ;node.setCharno ( position2charno ( leftParamPos )  ) ;^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^newName.setCharno ( position2charno ( lpColumn )  ) ;node.setCharno ( position2charno ( leftParamPos )  ) ;^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P11_Insert_Donor_Statement]^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;node.setCharno ( position2charno ( leftParamPos )  ) ;^519^^^^^510^521^node.setCharno ( position2charno ( leftParamPos )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionCall [RETURN_TYPE] Node   FunctionCall callNode [VARIABLES] boolean  Node  node  FunctionCall  callNode  AstNode  child  int  leftParamPos  
[P7_Replace_Invocation]^Name name = functionNode .getSourceName (  )  ;^525^^^^^510^540^Name name = functionNode.getFunctionName (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Name fnName = functionNode.getFunctionName (  ) ;Name name = functionNode.getFunctionName (  ) ;^525^^^^^510^540^Name name = functionNode.getFunctionName (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^525^^^^^510^540^Name name = functionNode.getFunctionName (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;Name name = functionNode.getFunctionName (  ) ;^525^^^^^510^540^Name name = functionNode.getFunctionName (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;Name name = functionNode.getFunctionName (  ) ;^525^^^^^510^540^Name name = functionNode.getFunctionName (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P3_Replace_Literal]^Boolean isUnnamedFunction = true;^526^^^^^511^541^Boolean isUnnamedFunction = false;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^boolean lineSet = false;Boolean isUnnamedFunction = false;^526^^^^^511^541^Boolean isUnnamedFunction = false;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P12_Insert_Condition]^if  ( isUnnamedFunction )  { Boolean isUnnamedFunction = false; }^526^^^^^511^541^Boolean isUnnamedFunction = false;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P2_Replace_Operator]^if  ( name != null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^if  ( fnName == null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P8_Replace_Mix]^if  ( name == this )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P9_Replace_Statement]^if  ( prev != null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P9_Replace_Statement]^if  ( lineSet == false )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P9_Replace_Statement]^if  ( directives == null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P9_Replace_Statement]^if  ( directives != null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P9_Replace_Statement]^if  ( fnName != null )  {^527^^^^^512^542^if  ( name == null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P15_Unwrap_Block]^name = new com.google.javascript.jscomp.mozilla.rhino.ast.Name(); name.setIdentifier(""); isUnnamedFunction = true;^527^528^529^530^531^512^542^if  ( name == null )  { name = new Name (  ) ; name.setIdentifier ( "" ) ; isUnnamedFunction = true; }^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P16_Remove_Block]^^527^528^529^530^531^512^542^if  ( name == null )  { name = new Name (  ) ; name.setIdentifier ( "" ) ; isUnnamedFunction = true; }^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P8_Replace_Mix]^name  = null ;^528^^^^^513^543^name = new Name (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node = new Node ( Token.DEFAULT ) ;name = new Name (  ) ;^528^^^^^513^543^name = new Name (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P3_Replace_Literal]^isUnnamedFunction = false;^530^^^^^515^545^isUnnamedFunction = true;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P12_Insert_Condition]^if  ( isUnnamedFunction )  { isUnnamedFunction = true; }^530^^^^^515^545^isUnnamedFunction = true;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P8_Replace_Mix]^name .getIdentifier (  )  ;^529^^^^^514^544^name.setIdentifier ( "" ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^529^530^531^^^514^544^name.setIdentifier ( "" ) ; isUnnamedFunction = true; }^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P8_Replace_Mix]^name  =  name ;^528^^^^^513^543^name = new Name (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^Node node = new com.google.javascript.rhino.FunctionNode ( fnName.getIdentifier (  )  ) ;^532^533^^^^517^547^Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^Node node = new com.google.javascript.rhino.FunctionNode ( name.setIdentifier (  )  ) ;^532^533^^^^517^547^Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^name.setIdentifier (  )  ) ;^533^^^^^518^548^name.getIdentifier (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^node.putProp ( Node.SOURCENAME_PROP.getSourceName (  )  ) ;^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^node.putProp ( Node.SOURCENAME_PROP, functionNode .getFunctionName (  )   ) ;^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^534^^^^^519^549^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^Node newName = transform ( fnName ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^Node newName = transformTokenType ( name ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;Node newName = transform ( name ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Node ret = transform ( n ) ;Node newName = transform ( name ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;Node newName = transform ( name ) ;^535^^^^^520^550^Node newName = transform ( name ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P1_Replace_Type]^short  lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P2_Replace_Operator]^int lpColumn = functionNode.getAbsolutePosition (  >=  )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode .getType (  )  ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P8_Replace_Mix]^int lpColumn = functionNode .getLineno (  )   + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^newName .getLineno (  )  ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^newName.setLineno ( functionNode .getType (  )   ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^newName.setCharno ( position2charno ( lpColumn )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Name fnName = functionNode.getFunctionName (  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Name name = functionNode.getFunctionName (  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;newName.setLineno ( functionNode.getLineno (  )  ) ;^539^^^^^524^554^newName.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^544^545^^^^529^559^functionNode.getLp (  ) ; newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^functionNode.getAbsolutePosition (  ) ;functionNode.getLp (  ) ;^544^^^^^529^559^functionNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;functionNode.getLp (  ) ;^544^^^^^529^559^functionNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^newName.setCharno ( position2charno ( lparenCharno )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^newName.setCharno ( transformTokenType ( lpColumn )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P8_Replace_Mix]^newName.setCharno ( transformTokenType ( lparenCharno )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^lp.setCharno ( position2charno ( lparenCharno )  ) ;newName.setCharno ( position2charno ( lpColumn )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.setCharno ( position2charno ( leftParamPos )  ) ;newName.setCharno ( position2charno ( lpColumn )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;newName.setCharno ( position2charno ( lpColumn )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;newName.setCharno ( position2charno ( lpColumn )  ) ;^545^^^^^530^560^newName.setCharno ( position2charno ( lpColumn )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P2_Replace_Operator]^int lpColumn = functionNode.getAbsolutePosition (  ==  )  + functionNode.getLp (  ) ;^543^544^^^^528^558^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^functionNode .getType (  )  ;^544^^^^^529^559^functionNode.getLp (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^node.addChildToBack ( lp ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^548^549^^^^533^563^node.addChildToBack ( newName ) ; Node lp = new Node ( Token.LP ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( newName ) ;^548^^^^^533^563^node.addChildToBack ( newName ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^Node lp = new Node ( Token.4 ) ;^549^^^^^534^564^Node lp = new Node ( Token.LP ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P8_Replace_Mix]^Name fnName = functionNode .getSourceName (  )  ;^556^^^^^541^571^Name fnName = functionNode.getFunctionName (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Name name = functionNode.getFunctionName (  ) ;Name fnName = functionNode.getFunctionName (  ) ;^556^^^^^541^571^Name fnName = functionNode.getFunctionName (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^556^^^^^541^571^Name fnName = functionNode.getFunctionName (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;Name fnName = functionNode.getFunctionName (  ) ;^556^^^^^541^571^Name fnName = functionNode.getFunctionName (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;Name fnName = functionNode.getFunctionName (  ) ;^556^^^^^541^571^Name fnName = functionNode.getFunctionName (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P2_Replace_Operator]^if  ( fnName == null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^if  ( name != null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P8_Replace_Mix]^if  ( fnName != true )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P9_Replace_Statement]^if  ( name == null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P9_Replace_Statement]^if  ( prev != null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P9_Replace_Statement]^if  ( directives == null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P9_Replace_Statement]^if  ( directives != null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P9_Replace_Statement]^if  ( finallyBlock != null )  {^557^^^^^542^572^if  ( fnName != null )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P15_Unwrap_Block]^lp.setLineno(fnName.getLineno());^557^558^559^560^561^542^572^if  ( fnName != null )  { lp.setLineno ( fnName.getLineno (  )  ) ; } else { lp.setLineno ( functionNode.getLineno (  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P16_Remove_Block]^^557^558^559^560^561^542^572^if  ( fnName != null )  { lp.setLineno ( fnName.getLineno (  )  ) ; } else { lp.setLineno ( functionNode.getLineno (  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^lp .getLineno (  )  ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^lp.setLineno ( functionNode .getType (  )   ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Name fnName = functionNode.getFunctionName (  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Name name = functionNode.getFunctionName (  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^functionNode.getLp (  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^lp.setLineno ( name.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^lp.setLineno ( fnName.setIdentifier (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;lp.setLineno ( fnName.getLineno (  )  ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^lp.setLineno ( fnName .getType (  )   ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P8_Replace_Mix]^lp.setLineno ( name .getType (  )   ) ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^lp .getLineno (  )  ;^558^^^^^543^573^lp.setLineno ( fnName.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^lp .getLineno (  )  ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Name fnName = functionNode.getFunctionName (  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Name name = functionNode.getFunctionName (  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^functionNode.getLp (  ) ;lp.setLineno ( functionNode.getLineno (  )  ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P8_Replace_Mix]^lp.setLineno ( functionNode .getType (  )   ) ;^560^^^^^545^575^lp.setLineno ( functionNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P1_Replace_Type]^short  lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^562^563^^^^547^577^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P2_Replace_Operator]^int lparenCharno = functionNode.getLp (  ==  )  + functionNode.getAbsolutePosition (  ) ;^562^563^^^^547^577^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^562^563^^^^547^577^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^562^563^^^^547^577^int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^functionNode .getLineno (  )  ;^563^^^^^548^578^functionNode.getAbsolutePosition (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^563^^^^^548^578^functionNode.getAbsolutePosition (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^position2charno ( catchVar.getAbsolutePosition (  )  ) ;functionNode.getAbsolutePosition (  ) ;^563^^^^^548^578^functionNode.getAbsolutePosition (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^functionNode.getLp (  ) ;functionNode.getAbsolutePosition (  ) ;^563^^^^^548^578^functionNode.getAbsolutePosition (  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^lp.setCharno ( position2charno ( nodearenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^lp.setCharno ( position2charno ( lparenCharnoarenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^lp.setCharno ( position2charno ( lp )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^lp .setCharno ( lparenCharno )  ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^lp.setCharno ( transformTokenType ( lparenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.setCharno ( position2charno ( leftParamPos )  ) ;lp.setCharno ( position2charno ( lparenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^newName.setCharno ( position2charno ( lpColumn )  ) ;lp.setCharno ( position2charno ( lparenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;lp.setCharno ( position2charno ( lparenCharno )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^lp.setCharno ( position2charno ( lpColumn )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P8_Replace_Mix]^lp.setCharno ( transformTokenType ( lpColumn )  ) ;^565^^^^^550^580^lp.setCharno ( position2charno ( lparenCharno )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P8_Replace_Mix]^for  ( AstNode param : functionNode .getSourceName (  )   )  {^566^^^^^551^581^for  ( AstNode param : functionNode.getParams (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^566^567^568^^^551^581^for  ( AstNode param : functionNode.getParams (  )  )  { lp.addChildToBack ( transform ( param )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^lp .addChildToBack (  )  ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^lp.addChildToBack ( transformTokenType ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^567^568^^^^552^582^lp.addChildToBack ( transform ( param )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;lp.addChildToBack ( transform ( param )  ) ;^567^^^^^552^582^lp.addChildToBack ( transform ( param )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^node.addChildToBack ( newName ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^node .addChildToBack (  )  ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( lp ) ;^569^^^^^554^584^node.addChildToBack ( lp ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^Node bodyNode = transformTokenType ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^Node bodyNode = transform ( functionNode .getLineno (  )   ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^571^572^573^574^575^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ; parseDirectives ( bodyNode ) ; node.addChildToBack ( bodyNode ) ; return node; }^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Node n = Node.newString ( literalNode.getValue (  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;Node bodyNode = transform ( functionNode.getBody (  )  ) ;^571^^^^^556^586^Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^parseDirectives ( node ) ;^572^^^^^557^587^parseDirectives ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^isDirective ( bodyNode ) ;^572^^^^^557^587^parseDirectives ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^572^573^^^^557^587^parseDirectives ( bodyNode ) ; node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^parseDirectives ( node ) ;parseDirectives ( bodyNode ) ;^572^^^^^557^587^parseDirectives ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.setDirectives ( directives ) ;parseDirectives ( bodyNode ) ;^572^^^^^557^587^parseDirectives ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^node.addChildToBack ( newName ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P14_Delete_Statement]^^573^574^^^^558^588^node.addChildToBack ( bodyNode ) ; return node;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( bodyNode ) ;^573^^^^^558^588^node.addChildToBack ( bodyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P5_Replace_Variable]^return newName;^574^^^^^559^589^return node;^[CLASS] TransformDispatcher  [METHOD] processFunctionNode [RETURN_TYPE] Node   FunctionNode functionNode [VARIABLES] boolean  Node  bodyNode  lp  newName  node  FunctionNode  functionNode  Boolean  isUnnamedFunction  int  lpColumn  lparenCharno  AstNode  param  Name  fnName  name  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( statementNode.getCondition (  )  )  ) ;^580^^^^^578^586^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P8_Replace_Mix]^node .addChildToBack (  )   ) ;^580^^^^^578^586^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P14_Delete_Statement]^^580^581^582^583^584^578^586^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ; node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ; if  ( statementNode.getElsePart (  )  != null )  { node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P7_Replace_Invocation]^node.addChildToBack ( transform ( statementNode .getBody (  )   )  ) ;^580^^^^^578^586^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( statementNode.getThenPart (  )  )  ) ;^581^^^^^578^586^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P14_Delete_Statement]^^581^582^583^584^^578^586^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ; if  ( statementNode.getElsePart (  )  != null )  { node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P8_Replace_Mix]^node.addChildToBack ( transform ( statementNode .getElsePart (  )   )  ) ;^581^^^^^578^586^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P2_Replace_Operator]^if  ( statementNode.getElsePart (  )  == null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P7_Replace_Invocation]^if  ( statementNode .getThenPart (  )   != null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P8_Replace_Mix]^if  ( statementNode.getElsePart (  )  != false )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P9_Replace_Statement]^if  ( initializerNode.getInitializer (  )  != null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P9_Replace_Statement]^if  ( statementNode.getLabel (  )  != null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P9_Replace_Statement]^if  ( statementNode.getBreakLabel (  )  != null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P9_Replace_Statement]^if  ( statementNode.getReturnValue (  )  != null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P9_Replace_Statement]^if  ( caseNode.getStatements (  )  != null )  {^582^^^^^578^586^if  ( statementNode.getElsePart (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P15_Unwrap_Block]^node.addChildToBack(transform(statementNode.getElsePart()));^582^583^584^^^578^586^if  ( statementNode.getElsePart (  )  != null )  { node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P16_Remove_Block]^^582^583^584^^^578^586^if  ( statementNode.getElsePart (  )  != null )  { node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P13_Insert_Block]^if  (  ( statementNode.getReturnValue (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^582^^^^^578^586^[Delete]^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P13_Insert_Block]^if  (  ( statementNode.getLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^582^^^^^578^586^[Delete]^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P13_Insert_Block]^if  ( finallyBlock != null )  {     node.addChildToBack ( transform ( finallyBlock )  ) ; }^582^^^^^578^586^[Delete]^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P13_Insert_Block]^if  (  ( initializerNode.getInitializer (  )  )  != null )  {     node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;     node.setLineno ( node.getLineno (  )  ) ; }^582^^^^^578^586^[Delete]^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P13_Insert_Block]^if  (  ( statementNode.getBreakLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^582^^^^^578^586^[Delete]^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^583^^^^^578^586^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( statementNode.getElsePart (  )  )  ) ;^583^^^^^578^586^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P7_Replace_Invocation]^node.addChildToBack ( transform ( statementNode .getThenPart (  )   )  ) ;^583^^^^^578^586^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P14_Delete_Statement]^^583^584^^^^578^586^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P13_Insert_Block]^if  (  ( statementNode.getElsePart (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^583^^^^^578^586^[Delete]^[CLASS] TransformDispatcher  [METHOD] processIfStatement [RETURN_TYPE] Node   IfStatement statementNode [VARIABLES] IfStatement  statementNode  boolean  Node  node  
[P7_Replace_Invocation]^Node n =  new Node ( position2charno ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^590^591^592^593^^589^603^Node n =  new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P7_Replace_Invocation]^Node n =  new Node ( transformTokenType ( exprNode .setType (  )   ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^590^591^592^593^^589^603^Node n =  new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P7_Replace_Invocation]^Node n =  new Node ( transformTokenTypeTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^590^591^592^593^^589^603^Node n =  new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P7_Replace_Invocation]^Node n =  new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode .getLineno (  )   ) , transform ( exprNode.getRight (  )  )  ) ;^590^591^592^593^^589^603^Node n =  new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P7_Replace_Invocation]^position2charno ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^591^592^593^^^589^603^transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P7_Replace_Invocation]^transformTokenType ( exprNode .setType (  )   ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^591^592^593^^^589^603^transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P7_Replace_Invocation]^transformTokenType ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^592^593^^^^589^603^transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P7_Replace_Invocation]^transform ( exprNode .getLineno (  )   ) , transform ( exprNode.getRight (  )  )  ) ;^592^593^^^^589^603^transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P7_Replace_Invocation]^transformTokenType ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( exprNode.getRight (  )  )  ) ;^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P12_Insert_Condition]^if  ( exprNode.isPostfix (  )  )  { transform ( exprNode.getRight (  )  )  ) ; }^593^^^^^589^603^transform ( exprNode.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P14_Delete_Statement]^^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;n.setLineno ( exprNode.getLineno (  )  ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P7_Replace_Invocation]^n.setLineno ( exprNode .getType (  )   ) ;^596^^^^^589^603^n.setLineno ( exprNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P2_Replace_Operator]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )   &&  exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P7_Replace_Invocation]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode .getAbsolutePosition (  )   )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P14_Delete_Statement]^^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P2_Replace_Operator]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )   !=  exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P7_Replace_Invocation]^n.setCharno ( position2charno ( exprNode .getLineno (  )   + exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P7_Replace_Invocation]^exprNode .getAbsolutePosition (  )   )  ) ;^601^^^^^589^603^exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P14_Delete_Statement]^^601^^^^^589^603^exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;exprNode.getOperatorPosition (  )  )  ) ;^601^^^^^589^603^exprNode.getOperatorPosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processInfixExpression [RETURN_TYPE] Node   InfixExpression exprNode [VARIABLES] boolean  Node  n  InfixExpression  exprNode  
[P7_Replace_Invocation]^return new Node ( position2charno ( literalNode.getType (  )  )  ) ;^607^^^^^606^608^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processKeywordLiteral [RETURN_TYPE] Node   KeywordLiteral literalNode [VARIABLES] boolean  KeywordLiteral  literalNode  
[P7_Replace_Invocation]^return new Node ( transformTokenType ( literalNode .setType (  )   )  ) ;^607^^^^^606^608^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processKeywordLiteral [RETURN_TYPE] Node   KeywordLiteral literalNode [VARIABLES] boolean  KeywordLiteral  literalNode  
[P14_Delete_Statement]^^607^608^^^^606^608^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processKeywordLiteral [RETURN_TYPE] Node   KeywordLiteral literalNode [VARIABLES] boolean  KeywordLiteral  literalNode  
[P7_Replace_Invocation]^return Node.setCharno ( Token.NAME, labelNode.getName (  )  ) ;^612^^^^^611^613^return Node.newString ( Token.NAME, labelNode.getName (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabel [RETURN_TYPE] Node   Label labelNode [VARIABLES] boolean  Label  labelNode  
[P8_Replace_Mix]^return Node .newNumber (  )  ;^612^^^^^611^613^return Node.newString ( Token.NAME, labelNode.getName (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabel [RETURN_TYPE] Node   Label labelNode [VARIABLES] boolean  Label  labelNode  
[P14_Delete_Statement]^^612^^^^^611^613^return Node.newString ( Token.NAME, labelNode.getName (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabel [RETURN_TYPE] Node   Label labelNode [VARIABLES] boolean  Label  labelNode  
[P11_Insert_Donor_Statement]^Node cur = node;Node prev = null;^618^^^^^616^630^Node prev = null;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P5_Replace_Variable]^Node cur = prev;^619^^^^^616^630^Node cur = node;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^Node prev = null;Node cur = node;^619^^^^^616^630^Node cur = node;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^Node node;Node cur = node;^619^^^^^616^630^Node cur = node;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P2_Replace_Operator]^if  ( prev == null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P5_Replace_Variable]^if  ( node != null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P8_Replace_Mix]^if  ( prev != false )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P9_Replace_Statement]^if  ( name == null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P9_Replace_Statement]^if  ( directives == null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P9_Replace_Statement]^if  ( directives != null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P9_Replace_Statement]^if  ( fnName != null )  {^621^^^^^616^630^if  ( prev != null )  {^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P15_Unwrap_Block]^prev.addChildToBack(cur);^621^622^623^^^616^630^if  ( prev != null )  { prev.addChildToBack ( cur ) ; }^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P16_Remove_Block]^^621^622^623^^^616^630^if  ( prev != null )  { prev.addChildToBack ( cur ) ; }^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P13_Insert_Block]^if  ( finallyBlock != null )  {     node.addChildToBack ( transform ( finallyBlock )  ) ; }^621^^^^^616^630^[Delete]^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P13_Insert_Block]^if  ( directives != null )  {     node.setDirectives ( directives ) ; }^621^^^^^616^630^[Delete]^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P5_Replace_Variable]^prev.addChildToBack ( node ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P14_Delete_Statement]^^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;prev.addChildToBack ( cur ) ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P5_Replace_Variable]^prev = prev;^625^^^^^616^630^prev = cur;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P8_Replace_Mix]^prev =  node;^625^^^^^616^630^prev = cur;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P8_Replace_Mix]^cur  =  cur ;^626^^^^^616^630^cur = new Node ( Token.LABEL ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node = new Node ( Token.DEFAULT ) ;cur = new Node ( Token.LABEL ) ;^626^^^^^616^630^cur = new Node ( Token.LABEL ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P14_Delete_Statement]^^620^621^622^623^^616^630^for  ( Label label : statementNode.getLabels (  )  )  { if  ( prev != null )  { prev.addChildToBack ( cur ) ; }^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P7_Replace_Invocation]^prev .addChildToBack (  )  ;^622^^^^^616^630^prev.addChildToBack ( cur ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P7_Replace_Invocation]^cur.addChildToBack ( transformTokenType ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P14_Delete_Statement]^^624^625^626^627^^616^630^cur.addChildToBack ( transform ( label )  ) ; prev = cur; cur = new Node ( Token.LABEL ) ; }^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;cur.addChildToBack ( transform ( label )  ) ;^624^^^^^616^630^cur.addChildToBack ( transform ( label )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P7_Replace_Invocation]^prev.addChildToBack ( transformTokenType ( statementNode.getStatement (  )  )  ) ;^628^^^^^616^630^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P14_Delete_Statement]^^628^629^630^^^616^630^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ; return node; }^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P5_Replace_Variable]^return prev;^629^^^^^616^630^return node;^[CLASS] TransformDispatcher  [METHOD] processLabeledStatement [RETURN_TYPE] Node   LabeledStatement statementNode [VARIABLES] LabeledStatement  statementNode  boolean  Node  cur  node  prev  Label  label  
[P7_Replace_Invocation]^return Node.setCharno ( Token.NAME, nameNode.getIdentifier (  )  ) ;^634^^^^^633^635^return Node.newString ( Token.NAME, nameNode.getIdentifier (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processName [RETURN_TYPE] Node   Name nameNode [VARIABLES] boolean  Name  nameNode  
[P7_Replace_Invocation]^return Node.newString ( Token.NAME, nameNode.setIdentifier (  )  ) ;^634^^^^^633^635^return Node.newString ( Token.NAME, nameNode.getIdentifier (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processName [RETURN_TYPE] Node   Name nameNode [VARIABLES] boolean  Name  nameNode  
[P14_Delete_Statement]^^634^635^^^^633^635^return Node.newString ( Token.NAME, nameNode.getIdentifier (  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processName [RETURN_TYPE] Node   Name nameNode [VARIABLES] boolean  Name  nameNode  
[P7_Replace_Invocation]^return processFunctionNode ( exprNode ) ;^639^^^^^638^640^return processFunctionCall ( exprNode ) ;^[CLASS] TransformDispatcher  [METHOD] processNewExpression [RETURN_TYPE] Node   NewExpression exprNode [VARIABLES] boolean  NewExpression  exprNode  
[P14_Delete_Statement]^^639^^^^^638^640^return processFunctionCall ( exprNode ) ;^[CLASS] TransformDispatcher  [METHOD] processNewExpression [RETURN_TYPE] Node   NewExpression exprNode [VARIABLES] boolean  NewExpression  exprNode  
[P7_Replace_Invocation]^Node newNode = Node.setCharno ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] boolean  Node  newNode  NumberLiteral  literalNode  
[P7_Replace_Invocation]^Node newNode = Node .newString (  )  ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] boolean  Node  newNode  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^Node n = Node.newString ( literalNode.getValue (  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] boolean  Node  newNode  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] boolean  Node  newNode  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] boolean  Node  newNode  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] boolean  Node  newNode  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] boolean  Node  newNode  NumberLiteral  literalNode  
[P14_Delete_Statement]^^644^645^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ; return newNode;^[CLASS] TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] boolean  Node  newNode  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] boolean  Node  newNode  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] boolean  Node  newNode  NumberLiteral  literalNode  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] boolean  Node  newNode  NumberLiteral  literalNode  
[P14_Delete_Statement]^^644^^^^^643^646^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processNumberLiteral [RETURN_TYPE] Node   NumberLiteral literalNode [VARIABLES] boolean  Node  newNode  NumberLiteral  literalNode  
[P8_Replace_Mix]^if  ( literalNode .getElements (  )   )  {^650^^^^^649^660^if  ( literalNode.isDestructuring (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P9_Replace_Statement]^if  ( caseNode.isDefault (  )  )  {^650^^^^^649^660^if  ( literalNode.isDestructuring (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P15_Unwrap_Block]^reportDestructuringAssign(literalNode);^650^651^652^^^649^660^if  ( literalNode.isDestructuring (  )  )  { reportDestructuringAssign ( literalNode ) ; }^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P16_Remove_Block]^^650^651^652^^^649^660^if  ( literalNode.isDestructuring (  )  )  { reportDestructuringAssign ( literalNode ) ; }^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P7_Replace_Invocation]^transformAsString ( literalNode ) ;^651^^^^^649^660^reportDestructuringAssign ( literalNode ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P14_Delete_Statement]^^651^^^^^649^660^reportDestructuringAssign ( literalNode ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P8_Replace_Mix]^for  ( ObjectProperty el : literalNode .isDestructuring (  )   )  {^655^^^^^649^660^for  ( ObjectProperty el : literalNode.getElements (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P14_Delete_Statement]^^655^656^657^658^^649^660^for  ( ObjectProperty el : literalNode.getElements (  )  )  { node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ; node.addChildToBack ( transform ( el.getRight (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^656^^^^^649^660^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P7_Replace_Invocation]^node.addChildToBack ( processAstRoot ( el.getLeft (  )  )  ) ;^656^^^^^649^660^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P14_Delete_Statement]^^656^657^658^^^649^660^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ; node.addChildToBack ( transform ( el.getRight (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P7_Replace_Invocation]^node.addChildToBack ( transformAsString ( el .getLineno (  )   )  ) ;^656^^^^^649^660^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P14_Delete_Statement]^^657^658^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^657^^^^^649^660^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectLiteral [RETURN_TYPE] Node   ObjectLiteral literalNode [VARIABLES] ObjectProperty  el  ObjectLiteral  literalNode  boolean  Node  node  
[P7_Replace_Invocation]^return processNewExpression ( propertyNode ) ;^664^^^^^663^665^return processInfixExpression ( propertyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectProperty [RETURN_TYPE] Node   ObjectProperty propertyNode [VARIABLES] ObjectProperty  propertyNode  boolean  
[P14_Delete_Statement]^^664^^^^^663^665^return processInfixExpression ( propertyNode ) ;^[CLASS] TransformDispatcher  [METHOD] processObjectProperty [RETURN_TYPE] Node   ObjectProperty propertyNode [VARIABLES] ObjectProperty  propertyNode  boolean  
[P7_Replace_Invocation]^Node node = transformTokenType ( exprNode.getExpression (  )  ) ;^669^^^^^668^672^Node node = transform ( exprNode.getExpression (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processParenthesizedExpression [RETURN_TYPE] Node   ParenthesizedExpression exprNode [VARIABLES] ParenthesizedExpression  exprNode  boolean  Node  node  
[P7_Replace_Invocation]^Node node = transform ( exprNode .getType (  )   ) ;^669^^^^^668^672^Node node = transform ( exprNode.getExpression (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processParenthesizedExpression [RETURN_TYPE] Node   ParenthesizedExpression exprNode [VARIABLES] ParenthesizedExpression  exprNode  boolean  Node  node  
[P14_Delete_Statement]^^669^670^671^672^^668^672^Node node = transform ( exprNode.getExpression (  )  ) ; node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ; return node; }^[CLASS] TransformDispatcher  [METHOD] processParenthesizedExpression [RETURN_TYPE] Node   ParenthesizedExpression exprNode [VARIABLES] ParenthesizedExpression  exprNode  boolean  Node  node  
[P7_Replace_Invocation]^node.putBooleanProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;^670^^^^^668^672^node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;^[CLASS] TransformDispatcher  [METHOD] processParenthesizedExpression [RETURN_TYPE] Node   ParenthesizedExpression exprNode [VARIABLES] ParenthesizedExpression  exprNode  boolean  Node  node  
[P14_Delete_Statement]^^670^671^^^^668^672^node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ; return node;^[CLASS] TransformDispatcher  [METHOD] processParenthesizedExpression [RETURN_TYPE] Node   ParenthesizedExpression exprNode [VARIABLES] ParenthesizedExpression  exprNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;^670^^^^^668^672^node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;^[CLASS] TransformDispatcher  [METHOD] processParenthesizedExpression [RETURN_TYPE] Node   ParenthesizedExpression exprNode [VARIABLES] ParenthesizedExpression  exprNode  boolean  Node  node  
[P11_Insert_Donor_Statement]^node.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;^670^^^^^668^672^node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;^[CLASS] TransformDispatcher  [METHOD] processParenthesizedExpression [RETURN_TYPE] Node   ParenthesizedExpression exprNode [VARIABLES] ParenthesizedExpression  exprNode  boolean  Node  node  
[P5_Replace_Variable]^return new Node ( Token. transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^676^677^678^679^^675^680^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P7_Replace_Invocation]^return new Node ( Token.GETPROP, transformTokenType ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^676^677^678^679^^675^680^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P7_Replace_Invocation]^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , processAstRoot ( getNode.getProperty (  )  )  ) ;^676^677^678^679^^675^680^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P7_Replace_Invocation]^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode .getTarget (  )   )  ) ;^676^677^678^679^^675^680^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P7_Replace_Invocation]^transformTokenType ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^678^679^^^^675^680^transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P8_Replace_Mix]^transform ( getNode .getElement (  )   ) , transformAsString ( getNode.getProperty (  )  )  ) ;^678^679^^^^675^680^transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P14_Delete_Statement]^^678^679^680^^^675^680^transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P7_Replace_Invocation]^processAstRoot ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P14_Delete_Statement]^^679^680^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P11_Insert_Donor_Statement]^transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transformAsString ( getNode.getProperty (  )  )  ) ;^679^^^^^675^680^transformAsString ( getNode.getProperty (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processPropertyGet [RETURN_TYPE] Node   PropertyGet getNode [VARIABLES] boolean  PropertyGet  getNode  
[P7_Replace_Invocation]^Node literalStringNode = Node.setCharno ( literalNode.getValue (  )  ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P7_Replace_Invocation]^Node literalStringNode = Node .newNumber (  )  ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^Node n = Node.newString ( literalNode.getValue (  )  ) ;Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^Node flagsNode = Node.newString ( flags ) ;Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P14_Delete_Statement]^^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^684^^^^^683^696^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P7_Replace_Invocation]^literalStringNode .getLineno (  )  ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P7_Replace_Invocation]^literalStringNode.setLineno ( literalNode .getType (  )   ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P14_Delete_Statement]^^686^687^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ; Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^String flags = literalNode.getFlags (  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^Node n = Node.newString ( literalNode.getValue (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P14_Delete_Statement]^^686^^^^^683^696^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P5_Replace_Variable]^Node node = new Node ( Token.REGEXP, node ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P5_Replace_Variable]^Node node = new Node ( Token.REGEXP ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P5_Replace_Variable]^Node node = new Node ( Token. literalStringNode ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P5_Replace_Variable]^Node node = new Node ( Token.REGEXP, flagsNode ) ;^687^^^^^683^696^Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P1_Replace_Type]^char flags = literalNode.getFlags (  ) ;^688^^^^^683^696^String flags = literalNode.getFlags (  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P7_Replace_Invocation]^String flags = literalNode .getValue (  )  ;^688^^^^^683^696^String flags = literalNode.getFlags (  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P14_Delete_Statement]^^688^^^^^683^696^String flags = literalNode.getFlags (  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;String flags = literalNode.getFlags (  ) ;^688^^^^^683^696^String flags = literalNode.getFlags (  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P2_Replace_Operator]^if  ( flags != null || !flags.isEmpty (  )  )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P2_Replace_Operator]^if  ( flags == null && !flags.isEmpty (  )  )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P6_Replace_Expression]^if  ( flags != null ) {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P6_Replace_Expression]^if  (  !flags.isEmpty (  )  )  {^689^^^^^683^696^if  ( flags != null && !flags.isEmpty (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node flagsNode = com.google.javascript.rhino.Node.newString(flags); flagsNode.setLineno(literalNode.getLineno()); node.addChildToBack(flagsNode);^689^690^^692^693^683^696^if  ( flags != null && !flags.isEmpty (  )  )  { Node flagsNode = Node.newString ( flags ) ; flagsNode.setLineno ( literalNode.getLineno (  )  ) ; node.addChildToBack ( flagsNode ) ; }^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P16_Remove_Block]^^689^690^^692^693^683^696^if  ( flags != null && !flags.isEmpty (  )  )  { Node flagsNode = Node.newString ( flags ) ; flagsNode.setLineno ( literalNode.getLineno (  )  ) ; node.addChildToBack ( flagsNode ) ; }^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P7_Replace_Invocation]^Node flagsNode = Node.putProp ( flags ) ;^690^^^^^683^696^Node flagsNode = Node.newString ( flags ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P7_Replace_Invocation]^Node flagsNode = Node .newNumber (  )  ;^690^^^^^683^696^Node flagsNode = Node.newString ( flags ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;Node flagsNode = Node.newString ( flags ) ;^690^^^^^683^696^Node flagsNode = Node.newString ( flags ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P14_Delete_Statement]^^690^^^^^683^696^Node flagsNode = Node.newString ( flags ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P8_Replace_Mix]^flagsNode .getLineno (  )  ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P14_Delete_Statement]^^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^Node n = Node.newString ( literalNode.getValue (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P7_Replace_Invocation]^flagsNode.setLineno ( literalNode .getType (  )   ) ;^692^^^^^683^696^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P5_Replace_Variable]^node.addChildToBack ( literalStringNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P7_Replace_Invocation]^node .addChildToBack (  )  ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P14_Delete_Statement]^^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( flagsNode ) ;^693^^^^^683^696^node.addChildToBack ( flagsNode ) ;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P5_Replace_Variable]^return literalStringNode;^695^^^^^683^696^return node;^[CLASS] TransformDispatcher  [METHOD] processRegExpLiteral [RETURN_TYPE] Node   RegExpLiteral literalNode [VARIABLES] boolean  Node  flagsNode  literalStringNode  node  RegExpLiteral  literalNode  String  flags  
[P2_Replace_Operator]^if  ( statementNode.getReturnValue (  )  == null )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P8_Replace_Mix]^if  ( statementNode.getReturnValue (  )  != true )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P9_Replace_Statement]^if  ( initializerNode.getInitializer (  )  != null )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P9_Replace_Statement]^if  ( statementNode.getLabel (  )  != null )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P9_Replace_Statement]^if  ( statementNode.getBreakLabel (  )  != null )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P9_Replace_Statement]^if  ( statementNode.getElsePart (  )  != null )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P9_Replace_Statement]^if  ( caseNode.getStatements (  )  != null )  {^701^^^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P15_Unwrap_Block]^node.addChildToBack(transform(statementNode.getReturnValue()));^701^702^703^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  { node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P16_Remove_Block]^^701^702^703^^^699^705^if  ( statementNode.getReturnValue (  )  != null )  { node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P13_Insert_Block]^if  (  ( statementNode.getLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^701^^^^^699^705^[Delete]^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P13_Insert_Block]^if  ( finallyBlock != null )  {     node.addChildToBack ( transform ( finallyBlock )  ) ; }^701^^^^^699^705^[Delete]^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P13_Insert_Block]^if  (  ( initializerNode.getInitializer (  )  )  != null )  {     node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;     node.setLineno ( node.getLineno (  )  ) ; }^701^^^^^699^705^[Delete]^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P13_Insert_Block]^if  (  ( statementNode.getBreakLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^701^^^^^699^705^[Delete]^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P13_Insert_Block]^if  (  ( statementNode.getElsePart (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^701^^^^^699^705^[Delete]^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( statementNode.getReturnValue (  )  )  ) ;^702^^^^^699^705^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P14_Delete_Statement]^^702^703^^^^699^705^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P12_Insert_Condition]^if  ( statementNode.getReturnValue (  )  != null )  { node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^702^^^^^699^705^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P13_Insert_Block]^if  (  ( statementNode.getReturnValue (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^702^^^^^699^705^[Delete]^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^702^^^^^699^705^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processReturnStatement [RETURN_TYPE] Node   ReturnStatement statementNode [VARIABLES] boolean  Node  node  ReturnStatement  statementNode  
[P7_Replace_Invocation]^return parseDirectives ( scopeNode ) ;^709^^^^^708^710^return processGeneric ( scopeNode ) ;^[CLASS] TransformDispatcher  [METHOD] processScope [RETURN_TYPE] Node   Scope scopeNode [VARIABLES] boolean  Scope  scopeNode  
[P14_Delete_Statement]^^709^^^^^708^710^return processGeneric ( scopeNode ) ;^[CLASS] TransformDispatcher  [METHOD] processScope [RETURN_TYPE] Node   Scope scopeNode [VARIABLES] boolean  Scope  scopeNode  
[P7_Replace_Invocation]^Node n = Node.setCharno ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] boolean  StringLiteral  literalNode  Node  n  
[P7_Replace_Invocation]^Node n = Node.newString ( literalNode .getFlags (  )   ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] boolean  StringLiteral  literalNode  Node  n  
[P11_Insert_Donor_Statement]^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] boolean  StringLiteral  literalNode  Node  n  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] boolean  StringLiteral  literalNode  Node  n  
[P11_Insert_Donor_Statement]^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] boolean  StringLiteral  literalNode  Node  n  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] boolean  StringLiteral  literalNode  Node  n  
[P14_Delete_Statement]^^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] boolean  StringLiteral  literalNode  Node  n  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] boolean  StringLiteral  literalNode  Node  n  
[P11_Insert_Donor_Statement]^return Node.newString ( Token.NAME, labelNode.getName (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] boolean  StringLiteral  literalNode  Node  n  
[P11_Insert_Donor_Statement]^return Node.newString ( Token.NAME, nameNode.getIdentifier (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] boolean  StringLiteral  literalNode  Node  n  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] boolean  StringLiteral  literalNode  Node  n  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;Node n = Node.newString ( literalNode.getValue (  )  ) ;^714^^^^^713^716^Node n = Node.newString ( literalNode.getValue (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processStringLiteral [RETURN_TYPE] Node   StringLiteral literalNode [VARIABLES] boolean  StringLiteral  literalNode  Node  n  
[P11_Insert_Donor_Statement]^Node cur = node;Node node;^720^^^^^719^738^Node node;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P7_Replace_Invocation]^if  ( caseNode .getAbsolutePosition (  )   )  {^721^^^^^719^738^if  ( caseNode.isDefault (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P9_Replace_Statement]^if  ( literalNode.isDestructuring (  )  )  {^721^^^^^719^738^if  ( caseNode.isDefault (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P9_Replace_Statement]^if  ( exprNode.isPostfix (  )  )  {^721^^^^^719^738^if  ( caseNode.isDefault (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P15_Unwrap_Block]^node = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.DEFAULT);^721^722^723^724^725^719^738^if  ( caseNode.isDefault (  )  )  { node = new Node ( Token.DEFAULT ) ; } else { AstNode expr = caseNode.getExpression (  ) ; node = new Node ( Token.CASE, transform ( expr )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P16_Remove_Block]^^721^722^723^724^725^719^738^if  ( caseNode.isDefault (  )  )  { node = new Node ( Token.DEFAULT ) ; } else { AstNode expr = caseNode.getExpression (  ) ; node = new Node ( Token.CASE, transform ( expr )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P5_Replace_Variable]^node = new Node ( Token.CASE, transform ( child )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P5_Replace_Variable]^node = new Node ( Token. transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P7_Replace_Invocation]^node = new Node ( Token.CASE, transformTokenType ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node = new Node ( Token.DEFAULT ) ;node = new Node ( Token.CASE, transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P8_Replace_Mix]^AstNode expr = caseNode .getType (  )  ;^724^^^^^719^738^AstNode expr = caseNode.getExpression (  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;AstNode expr = caseNode.getExpression (  ) ;^724^^^^^719^738^AstNode expr = caseNode.getExpression (  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^AstNode catchVar = clauseNode.getVarName (  ) ;AstNode expr = caseNode.getExpression (  ) ;^724^^^^^719^738^AstNode expr = caseNode.getExpression (  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P14_Delete_Statement]^^724^725^^^^719^738^AstNode expr = caseNode.getExpression (  ) ; node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;AstNode expr = caseNode.getExpression (  ) ;^724^^^^^719^738^AstNode expr = caseNode.getExpression (  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P8_Replace_Mix]^node = new Node ( Token.CASE, transformTokenType ( child )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P14_Delete_Statement]^^725^726^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node = new Node ( Token.CASE, transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^Node newName = transform ( name ) ;node = new Node ( Token.CASE, transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;node = new Node ( Token.CASE, transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;node = new Node ( Token.CASE, transform ( expr )  ) ;^725^^^^^719^738^node = new Node ( Token.CASE, transform ( expr )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P8_Replace_Mix]^node ;^722^^^^^719^738^node = new Node ( Token.DEFAULT ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^name = new Name (  ) ;node = new Node ( Token.DEFAULT ) ;^722^^^^^719^738^node = new Node ( Token.DEFAULT ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^cur = new Node ( Token.LABEL ) ;node = new Node ( Token.DEFAULT ) ;^722^^^^^719^738^node = new Node ( Token.DEFAULT ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;node = new Node ( Token.DEFAULT ) ;^722^^^^^719^738^node = new Node ( Token.DEFAULT ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P8_Replace_Mix]^node = new Node ( Token.0 ) ;^722^^^^^719^738^node = new Node ( Token.DEFAULT ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P8_Replace_Mix]^node  = null ;^722^^^^^719^738^node = new Node ( Token.DEFAULT ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P3_Replace_Literal]^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, false ) ;^728^^^^^719^738^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P14_Delete_Statement]^^728^^^^^719^738^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^728^^^^^719^738^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^ret.putBooleanProp ( Node.QUOTED_PROP, true ) ;block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^728^^^^^719^738^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P7_Replace_Invocation]^block .getLineno (  )  ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P7_Replace_Invocation]^block.setLineno ( caseNode .getType (  )   ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P14_Delete_Statement]^^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;block.setLineno ( caseNode.getLineno (  )  ) ;^729^^^^^719^738^block.setLineno ( caseNode.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P7_Replace_Invocation]^block .setCharno ( this )   ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P7_Replace_Invocation]^block.setCharno ( transformTokenType ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P14_Delete_Statement]^^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^position2charno ( catchVar.getAbsolutePosition (  )  ) ;block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^lp.setCharno ( position2charno ( lparenCharno )  ) ;block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.setCharno ( position2charno ( leftParamPos )  ) ;block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^newName.setCharno ( position2charno ( lpColumn )  ) ;block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P7_Replace_Invocation]^block.setCharno ( position2charno ( caseNode .getLineno (  )   )  ) ;^730^^^^^719^738^block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P2_Replace_Operator]^if  ( caseNode.getStatements (  )  == null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P7_Replace_Invocation]^if  ( caseNode .getLineno (  )   != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P8_Replace_Mix]^if  ( caseNode .getLineno (  )   != this )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P9_Replace_Statement]^if  ( initializerNode.getInitializer (  )  != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P9_Replace_Statement]^if  ( clauseNode.getCatchCondition (  )  != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P9_Replace_Statement]^if  ( statementNode.getLabel (  )  != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P9_Replace_Statement]^if  ( statementNode.getBreakLabel (  )  != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P9_Replace_Statement]^if  ( statementNode.getElsePart (  )  != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P9_Replace_Statement]^if  ( statementNode.getReturnValue (  )  != null )  {^731^^^^^719^738^if  ( caseNode.getStatements (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P15_Unwrap_Block]^for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : caseNode.getStatements()) {    block.addChildToBack(transform(child));};^731^732^733^734^^719^738^if  ( caseNode.getStatements (  )  != null )  { for  ( AstNode child : caseNode.getStatements (  )  )  { block.addChildToBack ( transform ( child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P16_Remove_Block]^^731^732^733^734^^719^738^if  ( caseNode.getStatements (  )  != null )  { for  ( AstNode child : caseNode.getStatements (  )  )  { block.addChildToBack ( transform ( child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P14_Delete_Statement]^^732^733^734^^^719^738^for  ( AstNode child : caseNode.getStatements (  )  )  { block.addChildToBack ( transform ( child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P5_Replace_Variable]^block.addChildToBack ( transform ( expr )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P7_Replace_Invocation]^block.addChildToBack ( transformTokenType ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P8_Replace_Mix]^block.addChildToBack ( transformTokenType ( expr )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P14_Delete_Statement]^^733^734^^^^719^738^block.addChildToBack ( transform ( child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;block.addChildToBack ( transform ( child )  ) ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P7_Replace_Invocation]^block .addChildToBack (  )  ;^733^^^^^719^738^block.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P8_Replace_Mix]^node .addChildToBack (  )  ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P14_Delete_Statement]^^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( block ) ;^736^^^^^719^738^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P8_Replace_Mix]^return block;^737^^^^^719^738^return node;^[CLASS] TransformDispatcher  [METHOD] processSwitchCase [RETURN_TYPE] Node   SwitchCase caseNode [VARIABLES] SwitchCase  caseNode  boolean  Node  block  node  AstNode  child  expr  
[P5_Replace_Variable]^Node node = new Node ( Token. transform ( statementNode.getExpression (  )  )  ) ;^742^743^^^^741^748^Node node = new Node ( Token.SWITCH, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P7_Replace_Invocation]^Node node = new Node ( Token.SWITCH, transformTokenType ( statementNode.getExpression (  )  )  ) ;^742^743^^^^741^748^Node node = new Node ( Token.SWITCH, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P8_Replace_Mix]^Node node = new Node ( Token.SWITCH, transform ( statementNode .getType (  )   )  ) ;^742^743^^^^741^748^Node node = new Node ( Token.SWITCH, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P7_Replace_Invocation]^transformTokenType ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P7_Replace_Invocation]^transform ( statementNode .getType (  )   )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P14_Delete_Statement]^^743^744^745^746^^741^748^transform ( statementNode.getExpression (  )  )  ) ; for  ( AstNode child : statementNode.getCases (  )  )  { node.addChildToBack ( transform ( child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^AstNode expr = caseNode.getExpression (  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P12_Insert_Condition]^if  ( statementNode.getLabel (  )  != null )  { transform ( statementNode.getExpression (  )  )  ) ; }^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P12_Insert_Condition]^if  ( statementNode.getElsePart (  )  != null )  { transform ( statementNode.getExpression (  )  )  ) ; }^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P12_Insert_Condition]^if  ( statementNode.getReturnValue (  )  != null )  { transform ( statementNode.getExpression (  )  )  ) ; }^743^^^^^741^748^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P14_Delete_Statement]^^744^745^746^^^741^748^for  ( AstNode child : statementNode.getCases (  )  )  { node.addChildToBack ( transform ( child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P7_Replace_Invocation]^node .addChildToBack (  )  ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P14_Delete_Statement]^^745^746^^^^741^748^node.addChildToBack ( transform ( child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( child )  ) ;^745^^^^^741^748^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processSwitchStatement [RETURN_TYPE] Node   SwitchStatement statementNode [VARIABLES] SwitchStatement  statementNode  boolean  Node  node  AstNode  child  
[P5_Replace_Variable]^return new Node ( Token. transform ( statementNode.getExpression (  )  )  ) ;^752^753^^^^751^754^return new Node ( Token.THROW, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P7_Replace_Invocation]^return new Node ( Token.THROW, transformTokenType ( statementNode.getExpression (  )  )  ) ;^752^753^^^^751^754^return new Node ( Token.THROW, transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P7_Replace_Invocation]^transformTokenType ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P7_Replace_Invocation]^transform ( statementNode .getType (  )   )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P14_Delete_Statement]^^753^754^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^AstNode expr = caseNode.getExpression (  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( statementNode.getExpression (  )  )  ) ;^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P12_Insert_Condition]^if  ( statementNode.getLabel (  )  != null )  { transform ( statementNode.getExpression (  )  )  ) ; }^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P12_Insert_Condition]^if  ( statementNode.getElsePart (  )  != null )  { transform ( statementNode.getExpression (  )  )  ) ; }^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P12_Insert_Condition]^if  ( statementNode.getReturnValue (  )  != null )  { transform ( statementNode.getExpression (  )  )  ) ; }^753^^^^^751^754^transform ( statementNode.getExpression (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processThrowStatement [RETURN_TYPE] Node   ThrowStatement statementNode [VARIABLES] boolean  ThrowStatement  statementNode  
[P5_Replace_Variable]^Node node = new Node ( Token. transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P7_Replace_Invocation]^Node node = new Node ( Token.TRY, transformTokenType ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P7_Replace_Invocation]^Node node = new Node ( Token.TRY, transform ( statementNode .getFinallyBlock (  )   )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Node node = transform ( initializerNode.getTarget (  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^758^^^^^757^786^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P8_Replace_Mix]^Node block = new Node ( Token.null ) ;^759^^^^^757^786^Node block = new Node ( Token.BLOCK ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P3_Replace_Literal]^boolean lineSet = true;^760^^^^^757^786^boolean lineSet = false;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^Boolean isUnnamedFunction = false;boolean lineSet = false;^760^^^^^757^786^boolean lineSet = false;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P12_Insert_Condition]^if  ( lineSet == false )  { boolean lineSet = false; }^760^^^^^757^786^boolean lineSet = false;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P2_Replace_Operator]^if  ( lineSet != false )  {^765^^^^^757^786^if  ( lineSet == false )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P3_Replace_Literal]^if  ( lineSet == true )  {^765^^^^^757^786^if  ( lineSet == false )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P9_Replace_Statement]^if  ( name == null )  {^765^^^^^757^786^if  ( lineSet == false )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P15_Unwrap_Block]^block.setLineno(cc.getLineno()); lineSet = true;^765^766^767^768^^757^786^if  ( lineSet == false )  { block.setLineno ( cc.getLineno (  )  ) ; lineSet = true; }^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P16_Remove_Block]^^765^766^767^768^^757^786^if  ( lineSet == false )  { block.setLineno ( cc.getLineno (  )  ) ; lineSet = true; }^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P3_Replace_Literal]^lineSet = false;^767^^^^^757^786^lineSet = true;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P8_Replace_Mix]^block .getLineno (  )  ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P14_Delete_Statement]^^766^767^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ; lineSet = true;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;block.setLineno ( cc.getLineno (  )  ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P8_Replace_Mix]^block.setLineno ( cc .getType (  )   ) ;^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P14_Delete_Statement]^^766^^^^^757^786^block.setLineno ( cc.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P7_Replace_Invocation]^for  ( CatchClause cc : statementNode .getTryBlock (  )   )  {^762^^^^^757^786^for  ( CatchClause cc : statementNode.getCatchClauses (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P7_Replace_Invocation]^block.addChildToBack ( transformTokenType ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P14_Delete_Statement]^^769^770^^^^757^786^block.addChildToBack ( transform ( cc )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;block.addChildToBack ( transform ( cc )  ) ;^769^^^^^757^786^block.addChildToBack ( transform ( cc )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P7_Replace_Invocation]^node .addChildToBack (  )  ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P14_Delete_Statement]^^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( cur ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( block ) ;^771^^^^^757^786^node.addChildToBack ( block ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^AstNode catchVar = clauseNode.getVarName (  ) ;AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;^773^^^^^757^786^AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P14_Delete_Statement]^^773^^^^^757^786^AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P2_Replace_Operator]^if  ( finallyBlock == null )  {^774^^^^^757^786^if  ( finallyBlock != null )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P8_Replace_Mix]^if  ( finallyBlock != false )  {^774^^^^^757^786^if  ( finallyBlock != null )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P9_Replace_Statement]^if  ( fnName != null )  {^774^^^^^757^786^if  ( finallyBlock != null )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P15_Unwrap_Block]^node.addChildToBack(transform(finallyBlock));^774^775^776^^^757^786^if  ( finallyBlock != null )  { node.addChildToBack ( transform ( finallyBlock )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P16_Remove_Block]^^774^775^776^^^757^786^if  ( finallyBlock != null )  { node.addChildToBack ( transform ( finallyBlock )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P13_Insert_Block]^if  (  ( statementNode.getReturnValue (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^774^^^^^757^786^[Delete]^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P13_Insert_Block]^if  (  ( statementNode.getLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^774^^^^^757^786^[Delete]^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P13_Insert_Block]^if  ( prev != null )  {     prev.addChildToBack ( cur ) ; }^774^^^^^757^786^[Delete]^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P13_Insert_Block]^if  (  ( statementNode.getBreakLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^774^^^^^757^786^[Delete]^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P13_Insert_Block]^if  (  ( statementNode.getElsePart (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^774^^^^^757^786^[Delete]^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P7_Replace_Invocation]^node .addChildToBack (  )  ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P14_Delete_Statement]^^775^776^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( finallyBlock )  ) ;^775^^^^^757^786^node.addChildToBack ( transform ( finallyBlock )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P13_Insert_Block]^if  ( finallyBlock != null )  {     node.addChildToBack ( transform ( finallyBlock )  ) ; }^775^^^^^757^786^[Delete]^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P2_Replace_Operator]^if  (  ( lineSet == false )  ||  ( finallyBlock != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P2_Replace_Operator]^if  (  ( lineSet != false )  &&  ( finallyBlock != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P2_Replace_Operator]^if  (  ( lineSet == false )  &&  ( finallyBlock == null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P3_Replace_Literal]^if  (  ( lineSet == true )  &&  ( finallyBlock != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P5_Replace_Variable]^if  (  ( finallyBlock == false )  &&  ( lineSet != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P6_Replace_Expression]^if  (  ( lineSet == false )  ) {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P6_Replace_Expression]^if  (   ( finallyBlock != null )  )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P6_Replace_Expression]^if  ( lineSet == false )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P6_Replace_Expression]^if  ( finallyBlock != null )  {^781^^^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P15_Unwrap_Block]^block.setLineno(finallyBlock.getLineno());^781^782^783^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  { block.setLineno ( finallyBlock.getLineno (  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P16_Remove_Block]^^781^782^783^^^757^786^if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  { block.setLineno ( finallyBlock.getLineno (  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P7_Replace_Invocation]^block.setLineno ( finallyBlock .getType (  )   ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P8_Replace_Mix]^block .getLineno (  )  ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P14_Delete_Statement]^^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;block.setLineno ( finallyBlock.getLineno (  )  ) ;^782^^^^^757^786^block.setLineno ( finallyBlock.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P5_Replace_Variable]^return block;^785^^^^^757^786^return node;^[CLASS] TransformDispatcher  [METHOD] processTryStatement [RETURN_TYPE] Node   TryStatement statementNode [VARIABLES] boolean  lineSet  TryStatement  statementNode  Node  block  node  CatchClause  cc  AstNode  finallyBlock  
[P7_Replace_Invocation]^Node node = new Node ( position2charno ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^790^791^^^^789^796^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenTypeTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^790^791^^^^789^796^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode .getType (  )   )  ) ;^790^791^^^^789^796^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P7_Replace_Invocation]^Node node = new Node ( transformTokenType ( exprNode .setType (  )   ) , transform ( exprNode.getOperand (  )  )  ) ;^790^791^^^^789^796^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P14_Delete_Statement]^^790^791^792^793^794^789^796^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ; if  ( exprNode.isPostfix (  )  )  { node.putBooleanProp ( Node.INCRDECR_PROP, true ) ; }^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P7_Replace_Invocation]^transformTokenType ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P7_Replace_Invocation]^transform ( exprNode .getType (  )   )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P14_Delete_Statement]^^791^792^793^794^^789^796^transform ( exprNode.getOperand (  )  )  ) ; if  ( exprNode.isPostfix (  )  )  { node.putBooleanProp ( Node.INCRDECR_PROP, true ) ; }^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getBody (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( exprNode.getOperand (  )  )  ) ;^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P12_Insert_Condition]^if  ( exprNode.isPostfix (  )  )  { transform ( exprNode.getOperand (  )  )  ) ; }^791^^^^^789^796^transform ( exprNode.getOperand (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P7_Replace_Invocation]^if  ( exprNode .getType (  )   )  {^792^^^^^789^796^if  ( exprNode.isPostfix (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P9_Replace_Statement]^if  ( caseNode.isDefault (  )  )  {^792^^^^^789^796^if  ( exprNode.isPostfix (  )  )  {^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P15_Unwrap_Block]^node.putBooleanProp(Node.INCRDECR_PROP, true);^792^793^794^^^789^796^if  ( exprNode.isPostfix (  )  )  { node.putBooleanProp ( Node.INCRDECR_PROP, true ) ; }^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P16_Remove_Block]^^792^793^794^^^789^796^if  ( exprNode.isPostfix (  )  )  { node.putBooleanProp ( Node.INCRDECR_PROP, true ) ; }^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P3_Replace_Literal]^node.putBooleanProp ( Node.INCRDECR_PROP, false ) ;^793^^^^^789^796^node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P14_Delete_Statement]^^793^^^^^789^796^node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P13_Insert_Block]^if  ( exprNode.isPostfix (  )  )  {     node.putBooleanProp ( Node.INCRDECR_PROP, true ) ; }^793^^^^^789^796^[Delete]^[CLASS] TransformDispatcher  [METHOD] processUnaryExpression [RETURN_TYPE] Node   UnaryExpression exprNode [VARIABLES] boolean  Node  node  UnaryExpression  exprNode  
[P14_Delete_Statement]^^801^802^803^^^799^805^for  ( VariableInitializer child : declarationNode.getVariables (  )  )  { node.addChildToBack ( transform ( child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P14_Delete_Statement]^^802^803^^^^799^805^node.addChildToBack ( transform ( child )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( cc )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( block ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^lp.addChildToBack ( transform ( param )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( finallyBlock )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( c ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( lp ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( flagsNode ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform (  ( AstNode ) child )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( el.getRight (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( catchCondition ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node = new Node ( Token.CASE, transform ( expr )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^cur.addChildToBack ( transform ( label )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( newName ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( bodyNode ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^Node c = transform ( child ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P11_Insert_Donor_Statement]^block.addChildToBack ( transform ( child )  ) ;node.addChildToBack ( transform ( child )  ) ;^802^^^^^799^805^node.addChildToBack ( transform ( child )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableDeclaration [RETURN_TYPE] Node   VariableDeclaration declarationNode [VARIABLES] boolean  Node  node  VariableDeclaration  declarationNode  VariableInitializer  child  
[P7_Replace_Invocation]^Node node = transformTokenType ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P14_Delete_Statement]^^809^810^811^812^813^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ; if  ( initializerNode.getInitializer (  )  != null )  { node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ; node.setLineno ( node.getLineno (  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^Node n = Node.newString ( literalNode.getValue (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;Node node = transform ( initializerNode.getTarget (  )  ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P7_Replace_Invocation]^Node node = transform ( initializerNode .getElement (  )   ) ;^809^^^^^808^815^Node node = transform ( initializerNode.getTarget (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P2_Replace_Operator]^if  ( initializerNode.getInitializer (  )  == null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P8_Replace_Mix]^if  ( initializerNode.getInitializer (  )  != this )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P9_Replace_Statement]^if  ( statementNode.getLabel (  )  != null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P9_Replace_Statement]^if  ( statementNode.getBreakLabel (  )  != null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P9_Replace_Statement]^if  ( statementNode.getElsePart (  )  != null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P9_Replace_Statement]^if  ( statementNode.getReturnValue (  )  != null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P9_Replace_Statement]^if  ( caseNode.getStatements (  )  != null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P15_Unwrap_Block]^node.addChildToBack(transform(initializerNode.getInitializer())); node.setLineno(node.getLineno());^810^811^812^813^^808^815^if  ( initializerNode.getInitializer (  )  != null )  { node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ; node.setLineno ( node.getLineno (  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P16_Remove_Block]^^810^811^812^813^^808^815^if  ( initializerNode.getInitializer (  )  != null )  { node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ; node.setLineno ( node.getLineno (  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P13_Insert_Block]^if  (  ( statementNode.getReturnValue (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^810^^^^^808^815^[Delete]^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P13_Insert_Block]^if  (  ( statementNode.getLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^810^^^^^808^815^[Delete]^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P13_Insert_Block]^if  (  ( statementNode.getBreakLabel (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^810^^^^^808^815^[Delete]^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P13_Insert_Block]^if  (  ( statementNode.getElsePart (  )  )  != null )  {     node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^810^^^^^808^815^[Delete]^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P7_Replace_Invocation]^node.addChildToBack ( transformTokenType ( initializerNode.getInitializer (  )  )  ) ;^811^^^^^808^815^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P14_Delete_Statement]^^811^812^813^^^808^815^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ; node.setLineno ( node.getLineno (  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P12_Insert_Condition]^if  ( initializerNode.getInitializer (  )  != null )  { node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ; }^811^^^^^808^815^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P7_Replace_Invocation]^node .getLineno (  )  ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P7_Replace_Invocation]^node.setLineno ( node.setCharno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P7_Replace_Invocation]^node.setLineno ( node .getType (  )   ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P14_Delete_Statement]^^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^node.setLineno ( callNode.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^block.setLineno ( cc.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^node.getLineno (  ) , "", 0 ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^newName.setLineno ( functionNode.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^block.setLineno ( finallyBlock.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^catchCondition.setLineno ( catchVar.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^n.setLineno ( exprNode.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^block.setLineno ( caseNode.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^lp.setLineno ( fnName.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^flagsNode.setLineno ( literalNode.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P11_Insert_Donor_Statement]^lp.setLineno ( functionNode.getLineno (  )  ) ;node.setLineno ( node.getLineno (  )  ) ;^812^^^^^808^815^node.setLineno ( node.getLineno (  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P7_Replace_Invocation]^if  ( initializerNode .getCondition (  )   != null )  {^810^^^^^808^815^if  ( initializerNode.getInitializer (  )  != null )  {^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P7_Replace_Invocation]^node .addChildToBack (  )   ) ;^811^^^^^808^815^node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processVariableInitializer [RETURN_TYPE] Node   VariableInitializer initializerNode [VARIABLES] boolean  Node  node  VariableInitializer  initializerNode  
[P5_Replace_Variable]^return new Node ( Token. transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^819^820^821^822^^818^823^return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P7_Replace_Invocation]^return new Node ( Token.WHILE, transformTokenType ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^819^820^821^822^^818^823^return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P7_Replace_Invocation]^return new Node ( Token.WHILE, transform ( loopNode .getBody (  )   ) , transform ( loopNode.getBody (  )  )  ) ;^819^820^821^822^^818^823^return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P7_Replace_Invocation]^return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode .getLineno (  )   )  ) ;^819^820^821^822^^818^823^return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P7_Replace_Invocation]^transformTokenType ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^821^822^^^^818^823^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P8_Replace_Mix]^transform ( loopNode .getBody (  )   ) , transform ( loopNode.getBody (  )  )  ) ;^821^822^^^^818^823^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P14_Delete_Statement]^^821^822^823^^^818^823^transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P7_Replace_Invocation]^transformTokenType ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P7_Replace_Invocation]^transform ( loopNode .getLineno (  )   )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P14_Delete_Statement]^^822^823^^^^818^823^transform ( loopNode.getBody (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getFalseExpression (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( callNode.getTarget (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P11_Insert_Donor_Statement]^Node node = transform ( exprNode.getExpression (  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getCondition (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P11_Insert_Donor_Statement]^transformAsString ( getNode.getProperty (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P11_Insert_Donor_Statement]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getOperand (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( loopNode.getIncrement (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getStatement (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( getNode.getElement (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P11_Insert_Donor_Statement]^Node bodyNode = transform ( functionNode.getBody (  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( exprNode.getRight (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P11_Insert_Donor_Statement]^transform ( statementNode.getExpression (  )  )  ) ;transform ( loopNode.getBody (  )  )  ) ;^822^^^^^818^823^transform ( loopNode.getBody (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWhileLoop [RETURN_TYPE] Node   WhileLoop loopNode [VARIABLES] boolean  WhileLoop  loopNode  
[P5_Replace_Variable]^return new Node ( Token. transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^827^828^829^830^^826^831^return new Node ( Token.WITH, transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] boolean  WithStatement  statementNode  
[P7_Replace_Invocation]^return new Node ( Token.WITH, transformTokenType ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^827^828^829^830^^826^831^return new Node ( Token.WITH, transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] boolean  WithStatement  statementNode  
[P7_Replace_Invocation]^return new Node ( Token.WITH, transform ( statementNode.getExpression (  )  ) , transform ( statementNode .getLabels (  )   )  ) ;^827^828^829^830^^826^831^return new Node ( Token.WITH, transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] boolean  WithStatement  statementNode  
[P7_Replace_Invocation]^transformTokenType ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^829^830^^^^826^831^transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] boolean  WithStatement  statementNode  
[P14_Delete_Statement]^^829^830^831^^^826^831^transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] boolean  WithStatement  statementNode  
[P7_Replace_Invocation]^transformTokenType ( statementNode.getStatement (  )  )  ) ;^830^^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] boolean  WithStatement  statementNode  
[P8_Replace_Mix]^transform ( statementNode .getLabels (  )   )  ) ;^830^^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] boolean  WithStatement  statementNode  
[P14_Delete_Statement]^^830^831^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ; }^[CLASS] TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] boolean  WithStatement  statementNode  
[P12_Insert_Condition]^if  ( statementNode.getLabel (  )  != null )  { transform ( statementNode.getStatement (  )  )  ) ; }^830^^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] boolean  WithStatement  statementNode  
[P12_Insert_Condition]^if  ( statementNode.getBreakLabel (  )  != null )  { transform ( statementNode.getStatement (  )  )  ) ; }^830^^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] boolean  WithStatement  statementNode  
[P12_Insert_Condition]^if  ( statementNode.getElsePart (  )  != null )  { transform ( statementNode.getStatement (  )  )  ) ; }^830^^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] boolean  WithStatement  statementNode  
[P12_Insert_Condition]^if  ( statementNode.getReturnValue (  )  != null )  { transform ( statementNode.getStatement (  )  )  ) ; }^830^^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] boolean  WithStatement  statementNode  
[P12_Insert_Condition]^if  ( caseNode.getStatements (  )  != null )  { transform ( statementNode.getStatement (  )  )  ) ; }^830^^^^^826^831^transform ( statementNode.getStatement (  )  )  ) ;^[CLASS] TransformDispatcher  [METHOD] processWithStatement [RETURN_TYPE] Node   WithStatement statementNode [VARIABLES] boolean  WithStatement  statementNode  
[P2_Replace_Operator]^errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  ==  )  ) ,^835^836^837^838^^834^842^errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^errorReporter.error ( "Unsupported syntax:nsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^835^836^837^838^^834^842^errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node .setType (  )   ) ,^835^836^837^838^^834^842^errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^[CLASS] TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node .setType (  )   ) , sourceName, node.getLineno (  ) , "", 0 ) ;^837^838^839^840^^834^842^com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) , sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^node .setType (  )   ) , sourceName, node.getLineno (  ) , "", 0 ) ;^838^839^840^^^834^842^node.getType (  )  ) , sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^838^839^840^^^834^842^node.getType (  )  ) , sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] boolean  AstNode  node  
[P8_Replace_Mix]^node .getType (  )  , "", 0 ) ;^840^^^^^834^842^node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^840^841^^^^834^842^node.getLineno (  ) , "", 0 ) ; return new Node ( Token.EMPTY ) ;^[CLASS] TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] boolean  AstNode  node  
[P11_Insert_Donor_Statement]^name.setIdentifier ( "" ) ;node.getLineno (  ) , "", 0 ) ;^840^^^^^834^842^node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] boolean  AstNode  node  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;node.getLineno (  ) , "", 0 ) ;^840^^^^^834^842^node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] boolean  AstNode  node  
[P11_Insert_Donor_Statement]^name.getIdentifier (  )  ) ;node.getLineno (  ) , "", 0 ) ;^840^^^^^834^842^node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] boolean  AstNode  node  
[P5_Replace_Variable]^return new Node ( Token.null ) ;^841^^^^^834^842^return new Node ( Token.EMPTY ) ;^[CLASS] TransformDispatcher  [METHOD] processIllegalToken [RETURN_TYPE] Node   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^errorReporter.error ( "destructuring assignment forbiddenstructurin", sourceName, node.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
[P3_Replace_Literal]^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", -8 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
[P5_Replace_Variable]^errorReporter.error ( "destructuring assignment forbidden", null, node.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
[P5_Replace_Variable]^errorReporter.error ( "destructuring assignment forbidden", sourceName.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
[P5_Replace_Variable]^errorReporter.error ( "destructuring assignment forbidden",  node.getLineno (  ) , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^errorReporter.error ( "destructuring assignment forbidden", sourceName, node .getType (  )  , "", 0 ) ;^845^846^847^848^^844^849^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
[P7_Replace_Invocation]^node .getType (  )  , "", 0 ) ;^848^^^^^844^849^node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
[P14_Delete_Statement]^^848^^^^^844^849^node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
[P11_Insert_Donor_Statement]^name.setIdentifier ( "" ) ;node.getLineno (  ) , "", 0 ) ;^848^^^^^844^849^node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
[P11_Insert_Donor_Statement]^node.setLineno ( node.getLineno (  )  ) ;node.getLineno (  ) , "", 0 ) ;^848^^^^^844^849^node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
[P11_Insert_Donor_Statement]^name.getIdentifier (  )  ) ;node.getLineno (  ) , "", 0 ) ;^848^^^^^844^849^node.getLineno (  ) , "", 0 ) ;^[CLASS] TransformDispatcher  [METHOD] reportDestructuringAssign [RETURN_TYPE] void   AstNode node [VARIABLES] boolean  AstNode  node  
