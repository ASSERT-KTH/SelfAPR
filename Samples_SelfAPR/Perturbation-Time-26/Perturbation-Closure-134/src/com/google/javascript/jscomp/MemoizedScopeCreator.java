[P8_Replace_Mix]^private  Map<Node, Scope> scopes = Maps.newHashMap (  ) ;^39^^^^^34^44^private final Map<Node, Scope> scopes = Maps.newHashMap (  ) ;^[CLASS] MemoizedScopeCreator   [VARIABLES] 
[P8_Replace_Mix]^this.delegate =  null;^46^^^^^45^47^this.delegate = delegate;^[CLASS] MemoizedScopeCreator  [METHOD] <init> [RETURN_TYPE] ScopeCreator)   ScopeCreator delegate [VARIABLES] ScopeCreator  delegate  Map  scopes  boolean  
[P5_Replace_Variable]^Scope scope = n.get ( scopes ) ;^51^^^^^50^59^Scope scope = scopes.get ( n ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P8_Replace_Mix]^Scope scope = scopes .put ( n , scope )  ;^51^^^^^50^59^Scope scope = scopes.get ( n ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P14_Delete_Statement]^^51^^^^^50^59^Scope scope = scopes.get ( n ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P2_Replace_Operator]^if  ( scope != null )  {^52^^^^^50^59^if  ( scope == null )  {^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P5_Replace_Variable]^if  ( parent == null )  {^52^^^^^50^59^if  ( scope == null )  {^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P6_Replace_Expression]^if  ( parent == scope.getParent (  ) )  {^52^^^^^50^59^if  ( scope == null )  {^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P8_Replace_Mix]^if  ( scope == false )  {^52^^^^^50^59^if  ( scope == null )  {^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P15_Unwrap_Block]^scope = delegate.createScope(n, parent); scopes.put(n, scope);^52^53^54^55^56^50^59^if  ( scope == null )  { scope = delegate.createScope ( n, parent ) ; scopes.put ( n, scope ) ; } else { Preconditions.checkState ( parent == scope.getParent (  )  ) ; }^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P16_Remove_Block]^^52^53^54^55^56^50^59^if  ( scope == null )  { scope = delegate.createScope ( n, parent ) ; scopes.put ( n, scope ) ; } else { Preconditions.checkState ( parent == scope.getParent (  )  ) ; }^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P2_Replace_Operator]^Preconditions.checkState ( parent < scope.getParent (  )  ) ;^56^^^^^50^59^Preconditions.checkState ( parent == scope.getParent (  )  ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P5_Replace_Variable]^Preconditions.checkState ( scope == parent.getParent (  )  ) ;^56^^^^^50^59^Preconditions.checkState ( parent == scope.getParent (  )  ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P14_Delete_Statement]^^56^^^^^50^59^Preconditions.checkState ( parent == scope.getParent (  )  ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P5_Replace_Variable]^Preconditions.checkState ( parent == parent.getParent (  )  ) ;^56^^^^^50^59^Preconditions.checkState ( parent == scope.getParent (  )  ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P5_Replace_Variable]^scope = delegate.createScope ( n, scope ) ;^53^^^^^50^59^scope = delegate.createScope ( n, parent ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P5_Replace_Variable]^scope = delegate.createScope (  parent ) ;^53^^^^^50^59^scope = delegate.createScope ( n, parent ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P5_Replace_Variable]^scope = delegate.createScope ( n ) ;^53^^^^^50^59^scope = delegate.createScope ( n, parent ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P5_Replace_Variable]^scope = n.createScope ( delegate, parent ) ;^53^^^^^50^59^scope = delegate.createScope ( n, parent ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P5_Replace_Variable]^scope = parent.createScope ( n, delegate ) ;^53^^^^^50^59^scope = delegate.createScope ( n, parent ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P8_Replace_Mix]^scope =  delegate.createScope ( null, parenullt ) ;^53^^^^^50^59^scope = delegate.createScope ( n, parent ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P7_Replace_Invocation]^scope = delegate .MemoizedScopeCreator ( delegate )  ;^53^^^^^50^59^scope = delegate.createScope ( n, parent ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P14_Delete_Statement]^^53^54^^^^50^59^scope = delegate.createScope ( n, parent ) ; scopes.put ( n, scope ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P5_Replace_Variable]^scopes.put ( n, parent ) ;^54^^^^^50^59^scopes.put ( n, scope ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P5_Replace_Variable]^scopes.put (  scope ) ;^54^^^^^50^59^scopes.put ( n, scope ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P5_Replace_Variable]^scopes.put ( n ) ;^54^^^^^50^59^scopes.put ( n, scope ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P5_Replace_Variable]^scopes.put ( scope, n ) ;^54^^^^^50^59^scopes.put ( n, scope ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P7_Replace_Invocation]^scopes .get ( n )  ;^54^^^^^50^59^scopes.put ( n, scope ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P14_Delete_Statement]^^54^^^^^50^59^scopes.put ( n, scope ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P5_Replace_Variable]^scope = delegate.createScope ( parent, n ) ;^53^^^^^50^59^scope = delegate.createScope ( n, parent ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P2_Replace_Operator]^Preconditions.checkState ( parent != scope.getParent (  )  ) ;^56^^^^^50^59^Preconditions.checkState ( parent == scope.getParent (  )  ) ;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
[P5_Replace_Variable]^return parent;^58^^^^^50^59^return scope;^[CLASS] MemoizedScopeCreator  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] ScopeCreator  delegate  boolean  Scope  parent  scope  Map  scopes  Node  n  
