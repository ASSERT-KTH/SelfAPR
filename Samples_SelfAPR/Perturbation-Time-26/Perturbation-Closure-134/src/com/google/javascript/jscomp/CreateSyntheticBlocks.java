[P3_Replace_Literal]^static final DiagnosticType UNMATCHED_START_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_START_MARKERHE", "Unmatched {0}" ) ;^33^34^^^^33^34^static final DiagnosticType UNMATCHED_START_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_START_MARKER", "Unmatched {0}" ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType UNMATCHED_START_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_START_MARKER", "Unmanmatched {0}" ) ;^33^34^^^^33^34^static final DiagnosticType UNMATCHED_START_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_START_MARKER", "Unmatched {0}" ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback   [VARIABLES] 
[P8_Replace_Mix]^final DiagnosticType UNMATCHED_START_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_START_MARKER", "Unmatched {0}" ) ;^33^34^^^^33^34^static final DiagnosticType UNMATCHED_START_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_START_MARKER", "Unmatched {0}" ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType UNMATCHED_END_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_END_MARKERJSC_UNMATCHED_END_MA", "Unmatched {1} - {0} not in the same block" ) ;^36^37^^^^36^37^static final DiagnosticType UNMATCHED_END_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_END_MARKER", "Unmatched {1} - {0} not in the same block" ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType UNMATCHED_END_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_END_MARKER", "t in the nmatched {1} - {0} not in the same block" ) ;^36^37^^^^36^37^static final DiagnosticType UNMATCHED_END_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_END_MARKER", "Unmatched {1} - {0} not in the same block" ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType UNMATCHED_END_MARKER ;^36^37^^^^36^37^static final DiagnosticType UNMATCHED_END_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_END_MARKER", "Unmatched {1} - {0} not in the same block" ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback   [VARIABLES] 
[P1_Replace_Type]^final char sourceName;^41^^^^^36^46^final String sourceName;^[CLASS] CreateSyntheticBlocks StartMarker Callback   [VARIABLES] 
[P8_Replace_Mix]^Node ancestorBlock;^52^^^^^47^57^final Node ancestorBlock;^[CLASS] CreateSyntheticBlocks StartMarker Callback   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^63^^^^^58^68^private final AbstractCompiler compiler;^[CLASS] CreateSyntheticBlocks StartMarker Callback   [VARIABLES] 
[P1_Replace_Type]^private final char startMarkerName;^66^^^^^61^71^private final String startMarkerName;^[CLASS] CreateSyntheticBlocks StartMarker Callback   [VARIABLES] 
[P1_Replace_Type]^private final char endMarkerName;^69^^^^^64^74^private final String endMarkerName;^[CLASS] CreateSyntheticBlocks StartMarker Callback   [VARIABLES] 
[P5_Replace_Variable]^this.sourceName = startMarkerName;^56^^^^^54^60^this.sourceName = sourceName;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P11_Insert_Donor_Statement]^this.endMarkerName = endMarkerName;this.sourceName = sourceName;^56^^^^^54^60^this.sourceName = sourceName;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P11_Insert_Donor_Statement]^this.startMarkerName = startMarkerName;this.sourceName = sourceName;^56^^^^^54^60^this.sourceName = sourceName;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P5_Replace_Variable]^node = node;^57^^^^^54^60^node = n;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P8_Replace_Mix]^node =  ancestorBlockChild;^57^^^^^54^60^node = n;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P5_Replace_Variable]^this.ancestorBlockChild = node;^58^^^^^54^60^this.ancestorBlockChild = ancestorBlockChild;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P8_Replace_Mix]^this.ancestorBlockChild =  null;^58^^^^^54^60^this.ancestorBlockChild = ancestorBlockChild;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P11_Insert_Donor_Statement]^ancestorBlockChild = ancestor;this.ancestorBlockChild = ancestorBlockChild;^58^^^^^54^60^this.ancestorBlockChild = ancestorBlockChild;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P11_Insert_Donor_Statement]^ancestorBlock = ancestor;this.ancestorBlockChild = ancestorBlockChild;^58^^^^^54^60^this.ancestorBlockChild = ancestorBlockChild;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P11_Insert_Donor_Statement]^endMarkerAncestorBlockChild = ancestor;this.ancestorBlockChild = ancestorBlockChild;^58^^^^^54^60^this.ancestorBlockChild = ancestorBlockChild;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P11_Insert_Donor_Statement]^this.ancestorBlock = ancestorBlock;this.ancestorBlockChild = ancestorBlockChild;^58^^^^^54^60^this.ancestorBlockChild = ancestorBlockChild;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P5_Replace_Variable]^this.ancestorBlock = node;^59^^^^^54^60^this.ancestorBlock = ancestorBlock;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P11_Insert_Donor_Statement]^ancestorBlockChild = ancestor;this.ancestorBlock = ancestorBlock;^59^^^^^54^60^this.ancestorBlock = ancestorBlock;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P11_Insert_Donor_Statement]^ancestorBlock = ancestor;this.ancestorBlock = ancestorBlock;^59^^^^^54^60^this.ancestorBlock = ancestorBlock;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P11_Insert_Donor_Statement]^endMarkerAncestorBlockChild = ancestor;this.ancestorBlock = ancestorBlock;^59^^^^^54^60^this.ancestorBlock = ancestorBlock;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P11_Insert_Donor_Statement]^this.ancestorBlockChild = ancestorBlockChild;this.ancestorBlock = ancestorBlock;^59^^^^^54^60^this.ancestorBlock = ancestorBlock;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P8_Replace_Mix]^this.compiler =  null;^78^^^^^76^82^this.compiler = compiler;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String startMarkerName String endMarkerName [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P5_Replace_Variable]^this.startMarkerName = sourceName;^79^^^^^76^82^this.startMarkerName = startMarkerName;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String startMarkerName String endMarkerName [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P11_Insert_Donor_Statement]^this.sourceName = sourceName;this.startMarkerName = startMarkerName;^79^^^^^76^82^this.startMarkerName = startMarkerName;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String startMarkerName String endMarkerName [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P11_Insert_Donor_Statement]^this.endMarkerName = endMarkerName;this.startMarkerName = startMarkerName;^79^^^^^76^82^this.startMarkerName = startMarkerName;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String startMarkerName String endMarkerName [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P5_Replace_Variable]^this.endMarkerName = startMarkerName;^80^^^^^76^82^this.endMarkerName = endMarkerName;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String startMarkerName String endMarkerName [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P11_Insert_Donor_Statement]^this.sourceName = sourceName;this.endMarkerName = endMarkerName;^80^^^^^76^82^this.endMarkerName = endMarkerName;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String startMarkerName String endMarkerName [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P11_Insert_Donor_Statement]^this.startMarkerName = startMarkerName;this.endMarkerName = endMarkerName;^80^^^^^76^82^this.endMarkerName = endMarkerName;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String startMarkerName String endMarkerName [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P8_Replace_Mix]^startMarkerStack ;^81^^^^^76^82^startMarkerStack = new ArrayDeque<StartMarker> (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] <init> [RETURN_TYPE] String)   AbstractCompiler compiler String startMarkerName String endMarkerName [VARIABLES] AbstractCompiler  compiler  String  endMarkerName  sourceName  startMarkerName  boolean  Deque  startMarkerStack  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  n  node  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, node, new Callback (  )  ) ;^86^^^^^85^92^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new Callback (  )  ) ;^86^^^^^85^92^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new Callback (  )  ) ;^86^^^^^85^92^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new Callback (  )  ) ;^86^^^^^85^92^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P14_Delete_Statement]^^86^^^^^85^92^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarkerName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarker.sourceName, root, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_END_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, sourceName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarker.sourceName.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make (  startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarker.sourceName,  UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node,  startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarkerName.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarker )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( UNMATCHED_START_MARKER, startMarker.node, startMarker.sourceName, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarker.node.sourceName, startMarker, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarkerName, startMarker.node, UNMATCHED_START_MARKER, startMarker.sourceName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P14_Delete_Statement]^^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarker.sourceName, n, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarker.node, startMarker.sourceName, UNMATCHED_START_MARKER, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P5_Replace_Variable]^compiler.report ( JSError.make ( UNMATCHED_START_MARKER.sourceName, startMarker.node, startMarker, startMarkerName )  ) ;^89^90^^^^85^92^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestorBlock  ancestorBlockChild  externs  n  node  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.NAME && parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P2_Replace_Operator]^if  ( n.getType (  )  < Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( node.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( n.getType (  )  != Token.NAME || externs.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( parent.getType (  )  != Token.NAME || n.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  ( n.getType (  )  != Token.NAME ) {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  (  parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  ( n.getType (  )  != NAME )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  ( parent.getType (  )  != CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^if  ( n.setIsSyntheticBlock (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^if  ( n .getString (  )   != Token.NAME || parent^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^if  ( n.setIsSyntheticBlock (  )  != Token.NAME || root.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P15_Unwrap_Block]^return ;^97^98^99^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  { return; }^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P16_Remove_Block]^^97^98^99^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  { return; }^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P13_Insert_Block]^if  (  ( type ==  ( SCRIPT )  )  ||  ( type ==  ( BLOCK )  )  )  {     ancestorBlock = ancestor;     break; }^97^^^^^82^112^[Delete]^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( externs.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^if  ( n.setIsSyntheticBlock (  )  != Token.NAME || externs.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( startMarkerName.equals ( parent.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( sourceName.equals ( n.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  ( type == SCRIPT )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  ( type == BLOCK )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^if  ( startMarkerName.equals ( n.setIsSyntheticBlock (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^if  ( startMarkerName.equals ( removedNode.setIsSyntheticBlock (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P9_Replace_Statement]^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P2_Replace_Operator]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P2_Replace_Operator]^if  ( type != Token.SCRIPT || type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  ( type == Token.SCRIPT ) {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  (  type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  ( type == SCRIPT )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  ( type == BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P15_Unwrap_Block]^ancestorBlock = ancestor; break;^108^109^110^111^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  { ancestorBlock = ancestor; break; }^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P16_Remove_Block]^^108^109^110^111^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  { ancestorBlock = ancestor; break; }^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P13_Insert_Block]^if  (  (  ( n.getType (  )  )  !=  ( NAME )  )  ||  (  ( parent.getType (  )  )  !=  ( CALL )  )  )  {     return ; }^108^^^^^93^123^[Delete]^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^ancestorBlock =  root;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^ancestorBlockChild = ancestor;ancestorBlock = ancestor;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^endMarkerAncestorBlockChild = ancestor;ancestorBlock = ancestor;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^this.ancestorBlock = ancestorBlock;ancestorBlock = ancestor;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^this.ancestorBlockChild = ancestorBlockChild;ancestorBlock = ancestor;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^ancestorBlock = removedNode;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^ancestorBlock =  null;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^ancestorBlockChild = removedNode;^112^^^^^97^127^ancestorBlockChild = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^ancestorBlockChild =  null;^112^^^^^97^127^ancestorBlockChild = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^ancestorBlock = ancestor;ancestorBlockChild = ancestor;^112^^^^^97^127^ancestorBlockChild = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^endMarkerAncestorBlockChild = ancestor;ancestorBlockChild = ancestor;^112^^^^^97^127^ancestorBlockChild = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^this.ancestorBlock = ancestorBlock;ancestorBlockChild = ancestor;^112^^^^^97^127^ancestorBlockChild = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^this.ancestorBlockChild = ancestorBlockChild;ancestorBlockChild = ancestor;^112^^^^^97^127^ancestorBlockChild = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P4_Replace_Constructor]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) ,  ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P4_Replace_Constructor]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n,  ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P4_Replace_Constructor]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , nChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, node, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, rootChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( ancestorBlock.getSourceName (  ) , n, tChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( ancestorBlockChildew StartMarker ( t.getSourceName (  ) , n, n, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChildChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^startMarkerStack.push ( new StartMarker ( t .traverse ( compiler , removedNode , 3 )  , n, ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, removedNodeChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^Node ancestorBlockChild = root;^104^^^^^89^119^Node ancestorBlockChild = n;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^Node endMarkerAncestorBlockChild = n;Node ancestorBlockChild = n;^104^^^^^89^119^Node ancestorBlockChild = n;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^Node ancestorBlock = null;Node ancestorBlockChild = n;^104^^^^^89^119^Node ancestorBlockChild = n;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^Node endMarkerAncestorBlockChild = n;Node ancestorBlock = null;^105^^^^^90^120^Node ancestorBlock = null;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^Node removedNode = null;Node ancestorBlock = null;^105^^^^^90^120^Node ancestorBlock = null;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^Node ancestorBlockChild = n;Node ancestorBlock = null;^105^^^^^90^120^Node ancestorBlock = null;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P1_Replace_Type]^short  type = ancestor.getType (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^int type = removedNode.getType (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^int type = ancestor.setIsSyntheticBlock (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^int type = parent.setIsSyntheticBlock (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^for  ( Node ancestor : externs.getAncestors (  )  )  {^106^^^^^91^121^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^for  ( Node ancestor : n.setIsSyntheticBlock (  )  )  {^106^^^^^91^121^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^for  ( Node ancestor : n .getType (  )   )  {^106^^^^^91^121^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P14_Delete_Statement]^^106^107^108^109^110^91^121^for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.SCRIPT || type == Token.BLOCK )  { ancestorBlock = ancestor; break; }^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^int type = root.getType (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^int type = ancestor .getString (  )  ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P14_Delete_Statement]^^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( rootew StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( ancestorBlockChild.getSourceName (  ) , n, t, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( ancestorBlockew StartMarker ( t.getSourceName (  ) , n, nChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlock, ancestorBlockChild )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^startMarkerStack .pop (  )   ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^startMarkerStack.push ( removedNodeew StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P14_Delete_Statement]^^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P2_Replace_Operator]^if  ( type >= Token.SCRIPT || type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^if  ( type == Token.2 || type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^ancestorBlock = n;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^ancestorBlock =  node;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^ancestorBlockChild = parent;^112^^^^^97^127^ancestorBlockChild = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, root, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, parentChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^Node ancestorBlockChild = removedNode;^104^^^^^89^119^Node ancestorBlockChild = n;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^Node ancestorBlockChild = parent;^104^^^^^89^119^Node ancestorBlockChild = n;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^int type = n.getType (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^int type = n.setIsSyntheticBlock (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( n.equals ( startMarkerName.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P13_Insert_Block]^if  ( ! ( endMarkerName.equals ( n.getString (  )  )  )  )  {     return ; }^101^^^^^86^116^[Delete]^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( startMarkerName.equals ( node.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^if  ( startMarkerName.equals ( externs.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^for  ( Node ancestor : node.getAncestors (  )  )  {^106^^^^^91^121^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^for  ( Node ancestor : root.setIsSyntheticBlock (  )  )  {^106^^^^^91^121^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( parentew StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( !endMarkerName.equals ( node.getString (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^if  ( !endMarkerName.equals ( n.setIsSyntheticBlock (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^if  ( !endMarkerName.equals ( n .getType (  )   )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P9_Replace_Statement]^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P15_Unwrap_Block]^return ;^119^120^121^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  { return; }^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P16_Remove_Block]^^119^120^121^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  { return; }^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( !endMarkerName.equals ( removedNode.getString (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^if  ( !endMarkerName.equals ( removedNode.setIsSyntheticBlock (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P13_Insert_Block]^if  ( ! ( endMarkerName.equals ( n.getString (  )  )  )  )  {     return ; }^119^^^^^104^134^[Delete]^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( !endMarkerName.equals ( externs.getString (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^if  ( !endMarkerName.equals ( root.getString (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, n, com.google.javascript.jscomp.CreateSyntheticBlocks.UNMATCHED_END_MARKER, startMarkerName, endMarkerName)); return ;^123^124^125^126^127^108^138^if  ( startMarkerStack.isEmpty (  )  )  { compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ; return; }^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P16_Remove_Block]^^123^124^125^126^127^108^138^if  ( startMarkerStack.isEmpty (  )  )  { compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ; return; }^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_START_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, sourceName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER,  endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, UNMATCHED_END_MARKER, n, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, startMarkerName, UNMATCHED_END_MARKER, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, endMarkerName, startMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, endMarkerName, startMarkerName, UNMATCHED_END_MARKER )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, startMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P14_Delete_Statement]^^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P13_Insert_Block]^if  ( ancestor !=  ( startMarker.ancestorBlock )  )  {     compiler.report ( make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;     return ; }^124^^^^^109^139^[Delete]^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P13_Insert_Block]^if  ( startMarkerStack.isEmpty (  )  )  {     compiler.report ( make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;     return ; }^124^^^^^109^139^[Delete]^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, root, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, sourceName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarkerName, n, UNMATCHED_END_MARKER, t, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, endMarkerName, UNMATCHED_END_MARKER, startMarkerName, n )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( UNMATCHED_END_MARKER, n, t, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, externs, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, startMarkerName, UNMATCHED_END_MARKER, n, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )  ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( endMarkerName, n, UNMATCHED_END_MARKER, startMarkerName, t )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^StartMarker startMarker = startMarkerStack .push ( 1 )  ;^129^^^^^114^144^StartMarker startMarker = startMarkerStack.pop (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P14_Delete_Statement]^^129^^^^^114^144^StartMarker startMarker = startMarkerStack.pop (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^Node endMarkerAncestorBlockChild = root;^131^^^^^116^146^Node endMarkerAncestorBlockChild = n;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^Node ancestorBlockChild = n;Node endMarkerAncestorBlockChild = n;^131^^^^^116^146^Node endMarkerAncestorBlockChild = n;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^Node ancestorBlock = null;Node endMarkerAncestorBlockChild = n;^131^^^^^116^146^Node endMarkerAncestorBlockChild = n;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P2_Replace_Operator]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P2_Replace_Operator]^if  ( type >= Token.SCRIPT || type == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P2_Replace_Operator]^if  ( type != Token.SCRIPT || type == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( typeype == Token.SCRIPT || t == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  ( type == Token.SCRIPT ) {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  (  type == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  ( type == SCRIPT )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  ( type == BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P6_Replace_Expression]^if  ( ancestor != startMarker.ancestorBlock )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P13_Insert_Block]^if  ( ancestor !=  ( startMarker.ancestorBlock )  )  {     compiler.report ( make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;     return ; }^134^^^^^119^149^[Delete]^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P13_Insert_Block]^if  ( startMarkerStack.isEmpty (  )  )  {     compiler.report ( make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;     return ; }^134^^^^^119^149^[Delete]^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P2_Replace_Operator]^if  ( ancestor >= startMarker.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( root != startMarker.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( ancestor != n )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, n, com.google.javascript.jscomp.CreateSyntheticBlocks.UNMATCHED_END_MARKER, startMarkerName, endMarkerName)); return ;^135^136^137^138^139^120^150^if  ( ancestor != startMarker.ancestorBlock )  {  compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ; return; }^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P16_Remove_Block]^^135^136^137^138^139^120^150^if  ( ancestor != startMarker.ancestorBlock )  {  compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ; return; }^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P13_Insert_Block]^if  (  ( type ==  ( SCRIPT )  )  ||  ( type ==  ( BLOCK )  )  )  {     if  ( ancestor !=  ( startMarker.ancestorBlock )  )  {         compiler.report ( make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;         return ;     }     break; }^135^^^^^120^150^[Delete]^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P13_Insert_Block]^if  ( startMarkerStack.isEmpty (  )  )  {     compiler.report ( make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;     return ; }^135^^^^^120^150^[Delete]^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_START_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, sourceName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, startMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER,  endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, UNMATCHED_END_MARKER, n, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, startMarkerName, UNMATCHED_END_MARKER, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, endMarkerName, startMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( sourceName , externs , UNMATCHED_END_MARKER , endMarkerName )   ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^compiler.report ( JSError .make ( sourceName , parent , UNMATCHED_END_MARKER , sourceName )   ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P14_Delete_Statement]^^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ;compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, externs, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( UNMATCHED_END_MARKER, n, t, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, startMarkerName, UNMATCHED_END_MARKER, n, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( endMarkerName, n, UNMATCHED_END_MARKER, startMarkerName, t )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, endMarkerName, UNMATCHED_END_MARKER, startMarkerName, n )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, endMarkerName, startMarkerName, UNMATCHED_END_MARKER )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, sourceName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P2_Replace_Operator]^if  ( ancestor <= startMarker.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( ancestor != parent )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^if  ( ancestor != startMarker )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^if  ( node != startMarker.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, root, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, node, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^endMarkerAncestorBlockChild = root;^143^^^^^128^158^endMarkerAncestorBlockChild = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^endMarkerAncestorBlockChild =  node;^143^^^^^128^158^endMarkerAncestorBlockChild = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^ancestorBlockChild = ancestor;endMarkerAncestorBlockChild = ancestor;^143^^^^^128^158^endMarkerAncestorBlockChild = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^ancestorBlock = ancestor;endMarkerAncestorBlockChild = ancestor;^143^^^^^128^158^endMarkerAncestorBlockChild = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^this.ancestorBlock = ancestorBlock;endMarkerAncestorBlockChild = ancestor;^143^^^^^128^158^endMarkerAncestorBlockChild = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^this.ancestorBlockChild = ancestorBlockChild;endMarkerAncestorBlockChild = ancestor;^143^^^^^128^158^endMarkerAncestorBlockChild = ancestor;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P1_Replace_Type]^short  type = ancestor.getType (  ) ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^int type = removedNode.getType (  ) ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^int type = ancestor.setIsSyntheticBlock (  ) ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^int type = node.getType (  ) ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^for  ( Node ancestor : node.getAncestors (  )  )  {^132^^^^^117^147^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^for  ( Node ancestor : n.setIsSyntheticBlock (  )  )  {^132^^^^^117^147^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^for  ( Node ancestor : root.setIsSyntheticBlock (  )  )  {^132^^^^^117^147^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^int type = n.getType (  ) ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P14_Delete_Statement]^^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )  ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^compiler.report ( JSError .make ( endMarkerName , ancestor , UNMATCHED_START_MARKER , endMarkerName )   ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^Node block = new Node ( Token.3 ) ;^146^^^^^131^161^Node block = new Node ( Token.BLOCK ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P3_Replace_Literal]^block.setIsSyntheticBlock ( false ) ;^147^^^^^132^162^block.setIsSyntheticBlock ( true ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^block.addChildAfter ( true ) ;^147^^^^^132^162^block.setIsSyntheticBlock ( true ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^block .getString (  )  ;^147^^^^^132^162^block.setIsSyntheticBlock ( true ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P14_Delete_Statement]^^147^^^^^132^162^block.setIsSyntheticBlock ( true ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( removedNode, startMarker.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( block, nChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( block, node ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( block.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter (  startMarker.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( blockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( block ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlock.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( startMarker.ancestorBlockChild, block ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( block, startMarkerChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlock ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^startMarker.ancestorBlock .removeChildAfter ( n )  ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^startMarker.ancestorBlock.addChildAfter ( root, startMarker.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P14_Delete_Statement]^^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P11_Insert_Donor_Statement]^Node ancestorBlock = null;Node removedNode = null;^150^^^^^135^165^Node removedNode = null;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^removedNode = startMarker.ancestorBlock.removeChildAfter ( node ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^removedNode = externs.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^removedNode = startMarker.ancestorBlock.ancestorBlock.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^removedNode = block.removeChildAfter ( startMarker.ancestorBlock ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^removedNode = startMarker.ancestorBlock.addChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^removedNode =  null.ancestorBlock.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^removedNode = startMarker.ancestorBlock.removeChildAfter ( n ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^removedNode = block.ancestorBlock.removeChildAfter ( startMarker ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^removedNode = startMarker.ancestorBlock .addChildAfter ( ancestorBlockChild , node )  ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^removedNode = parent.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P14_Delete_Statement]^^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P5_Replace_Variable]^block.addChildToBack ( root ) ;^154^^^^^139^169^block.addChildToBack ( removedNode ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^block.addChildAfter ( removedNode ) ;^154^^^^^139^169^block.addChildToBack ( removedNode ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P14_Delete_Statement]^^154^^^^^139^169^block.addChildToBack ( removedNode ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P7_Replace_Invocation]^compiler.report (  ) ;^157^^^^^142^172^compiler.reportCodeChange (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P14_Delete_Statement]^^157^^^^^142^172^compiler.reportCodeChange (  ) ;^[CLASS] CreateSyntheticBlocks StartMarker Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P1_Replace_Type]^final char sourceName;^41^^^^^36^46^final String sourceName;^[CLASS] StartMarker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^Node ancestorBlock;^52^^^^^47^57^final Node ancestorBlock;^[CLASS] StartMarker  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  StartMarker  startMarker  String  endMarkerName  sourceName  startMarkerName  Deque  startMarkerStack  int  type  
[P8_Replace_Mix]^this.sourceName =  null;^56^^^^^54^60^this.sourceName = sourceName;^[CLASS] StartMarker  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] Node  ancestorBlock  ancestorBlockChild  n  node  String  sourceName  boolean  
[P5_Replace_Variable]^node = node;^57^^^^^54^60^node = n;^[CLASS] StartMarker  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] Node  ancestorBlock  ancestorBlockChild  n  node  String  sourceName  boolean  
[P8_Replace_Mix]^node =  null;^57^^^^^54^60^node = n;^[CLASS] StartMarker  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] Node  ancestorBlock  ancestorBlockChild  n  node  String  sourceName  boolean  
[P5_Replace_Variable]^this.ancestorBlockChild = node;^58^^^^^54^60^this.ancestorBlockChild = ancestorBlockChild;^[CLASS] StartMarker  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] Node  ancestorBlock  ancestorBlockChild  n  node  String  sourceName  boolean  
[P11_Insert_Donor_Statement]^this.ancestorBlock = ancestorBlock;this.ancestorBlockChild = ancestorBlockChild;^58^^^^^54^60^this.ancestorBlockChild = ancestorBlockChild;^[CLASS] StartMarker  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] Node  ancestorBlock  ancestorBlockChild  n  node  String  sourceName  boolean  
[P5_Replace_Variable]^this.ancestorBlock = node;^59^^^^^54^60^this.ancestorBlock = ancestorBlock;^[CLASS] StartMarker  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] Node  ancestorBlock  ancestorBlockChild  n  node  String  sourceName  boolean  
[P8_Replace_Mix]^this.ancestorBlock =  null;^59^^^^^54^60^this.ancestorBlock = ancestorBlock;^[CLASS] StartMarker  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] Node  ancestorBlock  ancestorBlockChild  n  node  String  sourceName  boolean  
[P11_Insert_Donor_Statement]^this.ancestorBlockChild = ancestorBlockChild;this.ancestorBlock = ancestorBlock;^59^^^^^54^60^this.ancestorBlock = ancestorBlock;^[CLASS] StartMarker  [METHOD] <init> [RETURN_TYPE] Node)   String sourceName Node n Node ancestorBlockChild Node ancestorBlock [VARIABLES] Node  ancestorBlock  ancestorBlockChild  n  node  String  sourceName  boolean  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.NAME && parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P2_Replace_Operator]^if  ( n.getType (  )  < Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^if  ( endMarkerAncestorBlockChild.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^if  ( n.getType (  )  != Token.NAME || removedNode.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^if  ( parent.getType (  )  != Token.NAME || n.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  ( n.getType (  )  != Token.NAME ) {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  (  parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  ( n.getType (  )  != NAME )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  ( parent.getType (  )  != CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^if  ( n.setIsSyntheticBlock (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P15_Unwrap_Block]^return ;^97^98^99^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P16_Remove_Block]^^97^98^99^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P13_Insert_Block]^if  (  ( type ==  ( SCRIPT )  )  ||  ( type ==  ( BLOCK )  )  )  {     ancestorBlock = ancestor;     break; }^97^^^^^82^112^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^if  ( parent.setIsSyntheticBlock (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^if  ( n.getType (  )  != Token.NAME || n.getType (  )  != Token.CALL )  {^97^^^^^82^112^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^if  ( startMarkerName.equals ( removedNode.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  ( type == SCRIPT )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  ( type == BLOCK )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^if  ( startMarkerName.equals ( n.setIsSyntheticBlock (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P9_Replace_Statement]^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P2_Replace_Operator]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P2_Replace_Operator]^if  ( type != Token.SCRIPT || type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P2_Replace_Operator]^if  ( type >= Token.SCRIPT || type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  ( type == Token.SCRIPT ) {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  (  type == Token.BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  ( type == SCRIPT )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  ( type == BLOCK )  {^108^^^^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P15_Unwrap_Block]^ancestorBlock = ancestor; break;^108^109^110^111^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  { ancestorBlock = ancestor; break; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P16_Remove_Block]^^108^109^110^111^^93^123^if  ( type == Token.SCRIPT || type == Token.BLOCK )  { ancestorBlock = ancestor; break; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P13_Insert_Block]^if  (  (  ( n.getType (  )  )  !=  ( NAME )  )  ||  (  ( parent.getType (  )  )  !=  ( CALL )  )  )  {     return ; }^108^^^^^93^123^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^ancestorBlock =  removedNode;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P11_Insert_Donor_Statement]^ancestorBlockChild = ancestor;ancestorBlock = ancestor;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P11_Insert_Donor_Statement]^endMarkerAncestorBlockChild = ancestor;ancestorBlock = ancestor;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^ancestorBlock = parent;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^ancestorBlockChild = removedNode;^112^^^^^97^127^ancestorBlockChild = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P11_Insert_Donor_Statement]^ancestorBlock = ancestor;ancestorBlockChild = ancestor;^112^^^^^97^127^ancestorBlockChild = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P11_Insert_Donor_Statement]^endMarkerAncestorBlockChild = ancestor;ancestorBlockChild = ancestor;^112^^^^^97^127^ancestorBlockChild = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P4_Replace_Constructor]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) ,  ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P4_Replace_Constructor]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n,  ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P4_Replace_Constructor]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , nChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( removedNodeew StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, removedNode, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, removedNodeChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( ancestorBlockChild.getSourceName (  ) , n, t, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( ancestorBlockChildew StartMarker ( t.getSourceName (  ) , n, n, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChildChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^startMarkerStack.push ( parentew StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^Node ancestorBlockChild = removedNode;^104^^^^^89^119^Node ancestorBlockChild = n;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P11_Insert_Donor_Statement]^Node endMarkerAncestorBlockChild = n;Node ancestorBlockChild = n;^104^^^^^89^119^Node ancestorBlockChild = n;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P11_Insert_Donor_Statement]^Node ancestorBlock = null;Node ancestorBlockChild = n;^104^^^^^89^119^Node ancestorBlockChild = n;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P11_Insert_Donor_Statement]^Node endMarkerAncestorBlockChild = n;Node ancestorBlock = null;^105^^^^^90^120^Node ancestorBlock = null;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P11_Insert_Donor_Statement]^Node removedNode = null;Node ancestorBlock = null;^105^^^^^90^120^Node ancestorBlock = null;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P11_Insert_Donor_Statement]^Node ancestorBlockChild = n;Node ancestorBlock = null;^105^^^^^90^120^Node ancestorBlock = null;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P1_Replace_Type]^short  type = ancestor.getType (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^int type = removedNode.getType (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^int type = ancestor.setIsSyntheticBlock (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^int type = ancestor .getString (  )  ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^int type = n.getType (  ) ;^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^for  ( Node ancestor : removedNode.getAncestors (  )  )  {^106^^^^^91^121^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^for  ( Node ancestor : n.setIsSyntheticBlock (  )  )  {^106^^^^^91^121^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^for  ( Node ancestor : n .getType (  )   )  {^106^^^^^91^121^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^for  ( Node ancestor : removedNode.setIsSyntheticBlock (  )  )  {^106^^^^^91^121^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P14_Delete_Statement]^^106^107^108^109^110^91^121^for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.SCRIPT || type == Token.BLOCK )  { ancestorBlock = ancestor; break; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P14_Delete_Statement]^^107^^^^^92^122^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( endMarkerAncestorBlockChildew StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( ancestorBlock.getSourceName (  ) , n, tChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( ancestorBlockew StartMarker ( t.getSourceName (  ) , n, nChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlock, ancestorBlockChild )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P14_Delete_Statement]^^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^ancestorBlock =  null;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^ancestorBlock = n;^109^^^^^94^124^ancestorBlock = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, parentChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarkerStack.push ( tew StartMarker ( n.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^115^116^^^^100^130^startMarkerStack.push ( new StartMarker ( t.getSourceName (  ) , n, ancestorBlockChild, ancestorBlock )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^Node ancestorBlockChild = parent;^104^^^^^89^119^Node ancestorBlockChild = n;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^if  ( startMarkerName.equals ( parent.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^if  ( n.equals ( startMarkerName.getString (  )  )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P13_Insert_Block]^if  ( ! ( endMarkerName.equals ( n.getString (  )  )  )  )  {     return ; }^101^^^^^86^116^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^if  ( startMarkerName.equals ( n .getType (  )   )  )  {^101^^^^^86^116^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^for  ( Node ancestor : endMarkerAncestorBlockChild.getAncestors (  )  )  {^106^^^^^91^121^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^for  ( Node ancestor : parent .getType (  )   )  {^106^^^^^91^121^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^if  ( !endMarkerName.equals ( endMarkerAncestorBlockChild.getString (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^if  ( !endMarkerName.equals ( n.setIsSyntheticBlock (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^if  ( !endMarkerName.equals ( n .getType (  )   )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^if  ( !endMarkerName.equals ( removedNode.getString (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P9_Replace_Statement]^if  ( startMarkerName.equals ( n.getString (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P15_Unwrap_Block]^return ;^119^120^121^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P16_Remove_Block]^^119^120^121^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P13_Insert_Block]^if  ( ! ( endMarkerName.equals ( n.getString (  )  )  )  )  {     return ; }^119^^^^^104^134^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^if  ( !endMarkerName.equals ( parent.getString (  )  )  )  {^119^^^^^104^134^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, n, com.google.javascript.jscomp.CreateSyntheticBlocks.UNMATCHED_END_MARKER, startMarkerName, endMarkerName)); return ;^123^124^125^126^127^108^138^if  ( startMarkerStack.isEmpty (  )  )  { compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P16_Remove_Block]^^123^124^125^126^127^108^138^if  ( startMarkerStack.isEmpty (  )  )  { compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, removedNode, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER,  endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, startMarkerName, UNMATCHED_END_MARKER, n, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( UNMATCHED_END_MARKER, n, t, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, startMarkerName, UNMATCHED_END_MARKER, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, endMarkerName, startMarkerName, UNMATCHED_END_MARKER )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P14_Delete_Statement]^^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P13_Insert_Block]^if  ( ancestor !=  ( startMarker.ancestorBlock )  )  {     compiler.report ( make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;     return ; }^124^^^^^109^139^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P13_Insert_Block]^if  ( startMarkerStack.isEmpty (  )  )  {     compiler.report ( make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;     return ; }^124^^^^^109^139^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, UNMATCHED_END_MARKER, n, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, endMarkerName, startMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( endMarkerName, n, UNMATCHED_END_MARKER, startMarkerName, t )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, this, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, null )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, endMarkerName, UNMATCHED_END_MARKER, startMarkerName, n )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarkerName, n, UNMATCHED_END_MARKER, t, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, endMarkerAncestorBlockChild, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^124^125^^^^109^139^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^StartMarker startMarker = 0.pop (  ) ;^129^^^^^114^144^StartMarker startMarker = startMarkerStack.pop (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^StartMarker startMarker = startMarkerStack .push ( this )  ;^129^^^^^114^144^StartMarker startMarker = startMarkerStack.pop (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P14_Delete_Statement]^^129^^^^^114^144^StartMarker startMarker = startMarkerStack.pop (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^Node endMarkerAncestorBlockChild = removedNode;^131^^^^^116^146^Node endMarkerAncestorBlockChild = n;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P11_Insert_Donor_Statement]^Node ancestorBlockChild = n;Node endMarkerAncestorBlockChild = n;^131^^^^^116^146^Node endMarkerAncestorBlockChild = n;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P11_Insert_Donor_Statement]^Node ancestorBlock = null;Node endMarkerAncestorBlockChild = n;^131^^^^^116^146^Node endMarkerAncestorBlockChild = n;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P2_Replace_Operator]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P2_Replace_Operator]^if  ( type != Token.SCRIPT || type == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P2_Replace_Operator]^if  ( type < Token.SCRIPT || type == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  ( type == Token.SCRIPT ) {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  (  type == Token.BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  ( type == SCRIPT )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  ( type == BLOCK )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P6_Replace_Expression]^if  ( ancestor != startMarker.ancestorBlock )  {^134^^^^^119^149^if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P13_Insert_Block]^if  ( ancestor !=  ( startMarker.ancestorBlock )  )  {     compiler.report ( make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;     return ; }^134^^^^^119^149^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P13_Insert_Block]^if  ( startMarkerStack.isEmpty (  )  )  {     compiler.report ( make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;     return ; }^134^^^^^119^149^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P2_Replace_Operator]^if  ( ancestor == startMarker.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^if  ( removedNode != startMarker.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^if  ( ancestor != n )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^if  ( startMarker.ancestorBlock != ancestor )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, n, com.google.javascript.jscomp.CreateSyntheticBlocks.UNMATCHED_END_MARKER, startMarkerName, endMarkerName)); return ;^135^136^137^138^139^120^150^if  ( ancestor != startMarker.ancestorBlock )  {  compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P16_Remove_Block]^^135^136^137^138^139^120^150^if  ( ancestor != startMarker.ancestorBlock )  {  compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P13_Insert_Block]^if  (  ( type ==  ( SCRIPT )  )  ||  ( type ==  ( BLOCK )  )  )  {     if  ( ancestor !=  ( startMarker.ancestorBlock )  )  {         compiler.report ( make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;         return ;     }     break; }^135^^^^^120^150^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P13_Insert_Block]^if  ( startMarkerStack.isEmpty (  )  )  {     compiler.report ( make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;     return ; }^135^^^^^120^150^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, endMarkerAncestorBlockChild, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER,  endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( startMarkerName, n, UNMATCHED_END_MARKER, t, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, endMarkerName, startMarkerName, UNMATCHED_END_MARKER )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, startMarkerName, UNMATCHED_END_MARKER, n, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, endMarkerName, startMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )  ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P14_Delete_Statement]^^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, UNMATCHED_END_MARKER, n, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( UNMATCHED_END_MARKER, n, t, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, removedNode, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( endMarkerName, n, UNMATCHED_END_MARKER, startMarkerName, t )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, endMarkerName, UNMATCHED_END_MARKER, startMarkerName, n )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P2_Replace_Operator]^if  ( ancestor <= startMarker.ancestorBlock )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^if  ( ancestor != parent )  {^135^^^^^120^150^if  ( ancestor != startMarker.ancestorBlock )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, null, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, startMarkerName, UNMATCHED_END_MARKER, endMarkerName )  ) ;^137^138^^^^122^152^compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^endMarkerAncestorBlockChild =  parent;^143^^^^^128^158^endMarkerAncestorBlockChild = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P11_Insert_Donor_Statement]^ancestorBlockChild = ancestor;endMarkerAncestorBlockChild = ancestor;^143^^^^^128^158^endMarkerAncestorBlockChild = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P11_Insert_Donor_Statement]^ancestorBlock = ancestor;endMarkerAncestorBlockChild = ancestor;^143^^^^^128^158^endMarkerAncestorBlockChild = ancestor;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P1_Replace_Type]^short  type = ancestor.getType (  ) ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^int type = n.getType (  ) ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^int type = ancestor.setIsSyntheticBlock (  ) ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^int type = ancestor .getString (  )  ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^int type = n.setIsSyntheticBlock (  ) ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^for  ( Node ancestor : parent.getAncestors (  )  )  {^132^^^^^117^147^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^for  ( Node ancestor : n.setIsSyntheticBlock (  )  )  {^132^^^^^117^147^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^for  ( Node ancestor : removedNode.getAncestors (  )  )  {^132^^^^^117^147^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^int type = removedNode.getType (  ) ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^int type = parent.getType (  ) ;^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P14_Delete_Statement]^^133^^^^^118^148^int type = ancestor.getType (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^Node block = new Node ( Token.4 ) ;^146^^^^^131^161^Node block = new Node ( Token.BLOCK ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P3_Replace_Literal]^block.setIsSyntheticBlock ( false ) ;^147^^^^^132^162^block.setIsSyntheticBlock ( true ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^block .getString (  )  ;^147^^^^^132^162^block.setIsSyntheticBlock ( true ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P14_Delete_Statement]^^147^^^^^132^162^block.setIsSyntheticBlock ( true ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( removedNode, startMarker.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( block, removedNode ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( block.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter (  startMarker.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( blockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( block ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild.ancestorBlockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( startMarker.ancestorBlock, blockChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChildChild ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlock ) ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^startMarker.ancestorBlock .removeChildAfter ( ancestorBlockChild )  ;^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P14_Delete_Statement]^^148^149^^^^133^163^startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P11_Insert_Donor_Statement]^Node ancestorBlock = null;Node removedNode = null;^150^^^^^135^165^Node removedNode = null;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^removedNode = startMarker.ancestorBlock.removeChildAfter ( n ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^removedNode = parent.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^removedNode = block.ancestorBlock.removeChildAfter ( startMarker ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^removedNode = startMarker.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^removedNode = startMarker.ancestorBlock .addChildAfter ( ancestorBlockChild , n )  ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P8_Replace_Mix]^removedNode =  null.ancestorBlock.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^removedNode = startMarker.ancestorBlock.removeChildAfter ( removedNode ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^removedNode = n.removeChildAfter ( block ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^removedNode = block.removeChildAfter ( startMarker.ancestorBlock ) ;^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P14_Delete_Statement]^^153^^^^^138^168^removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P5_Replace_Variable]^block.addChildToBack ( n ) ;^154^^^^^139^169^block.addChildToBack ( removedNode ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P14_Delete_Statement]^^154^^^^^139^169^block.addChildToBack ( removedNode ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P7_Replace_Invocation]^compiler.report (  ) ;^157^^^^^142^172^compiler.reportCodeChange (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
[P14_Delete_Statement]^^157^^^^^142^172^compiler.reportCodeChange (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  StartMarker  startMarker  int  type  
