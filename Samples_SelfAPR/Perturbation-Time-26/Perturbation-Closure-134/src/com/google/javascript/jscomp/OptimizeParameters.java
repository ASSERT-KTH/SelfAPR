[P8_Replace_Mix]^private  Node arg;^245^^^^^240^250^private final Node arg;^[CLASS] OptimizeParameters Parameter   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^50^^^^^49^52^this.compiler = compiler;^[CLASS] OptimizeParameters Parameter  [METHOD] <init> [RETURN_TYPE] NameReferenceGraph)   AbstractCompiler compiler NameReferenceGraph nameGraph [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  
[P8_Replace_Mix]^this.nameGraph =  null;^51^^^^^49^52^this.nameGraph = nameGraph;^[CLASS] OptimizeParameters Parameter  [METHOD] <init> [RETURN_TYPE] NameReferenceGraph)   AbstractCompiler compiler NameReferenceGraph nameGraph [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  
[P14_Delete_Statement]^^55^^^^^54^56^this ( compiler, null ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  
[P8_Replace_Mix]^this.shouldRemove =  null;^249^^^^^248^251^this.shouldRemove = shouldRemove;^[CLASS] OptimizeParameters Parameter  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node arg boolean shouldRemove [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  
[P11_Insert_Donor_Statement]^shouldRemove = value;this.shouldRemove = shouldRemove;^249^^^^^248^251^this.shouldRemove = shouldRemove;^[CLASS] OptimizeParameters Parameter  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node arg boolean shouldRemove [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  
[P8_Replace_Mix]^this.arg =  null;^250^^^^^248^251^this.arg = arg;^[CLASS] OptimizeParameters Parameter  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node arg boolean shouldRemove [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  
[P2_Replace_Operator]^if  ( nameGraph != null )  {^60^^^^^59^76^if  ( nameGraph == null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^if  ( nameGraph == false )  {^60^^^^^59^76^if  ( nameGraph == null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P9_Replace_Statement]^if  ( paramName != null )  {^60^^^^^59^76^if  ( nameGraph == null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P9_Replace_Statement]^if  ( formalArgPtr != null )  {^60^^^^^59^76^if  ( nameGraph == null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NameReferenceGraphConstruction c = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler); c.process(externs, root); nameGraph = c.getNameReferenceGraph();^60^61^62^63^64^59^76^if  ( nameGraph == null )  { NameReferenceGraphConstruction c = new NameReferenceGraphConstruction ( compiler ) ; c.process ( externs, root ) ; nameGraph = c.getNameReferenceGraph (  ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P16_Remove_Block]^^60^61^62^63^64^59^76^if  ( nameGraph == null )  { NameReferenceGraphConstruction c = new NameReferenceGraphConstruction ( compiler ) ; c.process ( externs, root ) ; nameGraph = c.getNameReferenceGraph (  ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^nameGraph = c .process ( root , externs )  ;^64^^^^^59^76^nameGraph = c.getNameReferenceGraph (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^nameGraph =  null.getNameReferennulleGraph (  ) ;^64^^^^^59^76^nameGraph = c.getNameReferenceGraph (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P13_Insert_Block]^if  (  ( nameGraph )  == null )  {     NameReferenceGraphConstruction c = new NameReferenceGraphConstruction ( compiler ) ;     c.process ( externs, root ) ;     nameGraph = c.getNameReferenceGraph (  ) ; }^61^^^^^59^76^[Delete]^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^c.process ( arg, root ) ;^63^^^^^59^76^c.process ( externs, root ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^c.process ( externs, arg ) ;^63^^^^^59^76^c.process ( externs, root ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^c.process (  root ) ;^63^^^^^59^76^c.process ( externs, root ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^c.process ( externs ) ;^63^^^^^59^76^c.process ( externs, root ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^c.process ( root, externs ) ;^63^^^^^59^76^c.process ( externs, root ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^63^64^^^^59^76^c.process ( externs, root ) ; nameGraph = c.getNameReferenceGraph (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^64^^^^^59^76^nameGraph = c.getNameReferenceGraph (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^c.process ( root, root ) ;^63^^^^^59^76^c.process ( externs, root ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^c.process ( externs, externs ) ;^63^^^^^59^76^c.process ( externs, root ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^63^^^^^59^76^c.process ( externs, root ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^if  ( name .getDeclarations (  )   )  {^70^^^^^59^76^if  ( name.canChangeSignature (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P15_Unwrap_Block]^java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge<com.google.javascript.jscomp.NameReferenceGraph.Name, com.google.javascript.jscomp.NameReferenceGraph.Reference>> edges = node.getInEdges(); tryEliminateConstantArgs(name, edges); tryEliminateOptionalArgs(name, edges);^70^71^72^73^74^59^76^if  ( name.canChangeSignature (  )  )  { List<DiGraphEdge<Name, Reference>> edges = node.getInEdges (  ) ; tryEliminateConstantArgs ( name, edges ) ; tryEliminateOptionalArgs ( name, edges ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P16_Remove_Block]^^70^71^72^73^74^59^76^if  ( name.canChangeSignature (  )  )  { List<DiGraphEdge<Name, Reference>> edges = node.getInEdges (  ) ; tryEliminateConstantArgs ( name, edges ) ; tryEliminateOptionalArgs ( name, edges ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P13_Insert_Block]^if  ( name.canChangeSignature (  )  )  {     Name, Reference>> edges = node.getInEdges (  ) ;     tryEliminateConstantArgs ( name, edges ) ;     tryEliminateOptionalArgs ( name, edges ) ; }^71^^^^^59^76^[Delete]^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^71^^^^^59^76^List<DiGraphEdge<Name, Reference>> edges = node.getInEdges (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^tryEliminateConstantArgs (  edges ) ;^72^^^^^59^76^tryEliminateConstantArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^tryEliminateConstantArgs ( name ) ;^72^^^^^59^76^tryEliminateConstantArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^tryEliminateConstantArgs ( edges, name ) ;^72^^^^^59^76^tryEliminateConstantArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^tryEliminateOptionalArgs ( name, edges ) ;^72^^^^^59^76^tryEliminateConstantArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^72^^^^^59^76^tryEliminateConstantArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^tryEliminateOptionalArgs ( name, edges ) ;tryEliminateConstantArgs ( name, edges ) ;^72^^^^^59^76^tryEliminateConstantArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^eliminateCallParamAt ( call, index ) ;tryEliminateConstantArgs ( name, edges ) ;^72^^^^^59^76^tryEliminateConstantArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^tryEliminateOptionalArgs (  edges ) ;^73^^^^^59^76^tryEliminateOptionalArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^tryEliminateOptionalArgs ( name ) ;^73^^^^^59^76^tryEliminateOptionalArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^tryEliminateOptionalArgs ( edges, name ) ;^73^^^^^59^76^tryEliminateOptionalArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^tryEliminateConstantArgs ( name, edges ) ;^73^^^^^59^76^tryEliminateOptionalArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^73^^^^^59^76^tryEliminateOptionalArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^tryEliminateConstantArgs ( name, edges ) ;tryEliminateOptionalArgs ( name, edges ) ;^73^^^^^59^76^tryEliminateOptionalArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^eliminateCallParamAt ( call, index ) ;tryEliminateOptionalArgs ( name, edges ) ;^73^^^^^59^76^tryEliminateOptionalArgs ( name, edges ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^Name name = node .getInEdges (  )  ;^69^^^^^59^76^Name name = node.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^Reference ref = refEdge.getValue (  ) ;Name name = node.getValue (  ) ;^69^^^^^59^76^Name name = node.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^Node function = definition.getRValue (  ) ;Name name = node.getValue (  ) ;^69^^^^^59^76^Name name = node.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^List<DiGraphEdge<Name, Reference>> edges = node .getValue (  )  ;^71^^^^^59^76^List<DiGraphEdge<Name, Reference>> edges = node.getInEdges (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^68^69^^^^59^76^nameGraph.getDirectedGraphNodes (  )  )  { Name name = node.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^69^^^^^59^76^Name name = node.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  DiGraphNode  node  boolean  shouldRemove  Node  arg  externs  root  NameReferenceGraphConstruction  c  List  edges  NameReferenceGraph  nameGraph  Name  name  
[P1_Replace_Type]^long  maxArgs = -1;^88^^^^^83^105^int maxArgs = -1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P3_Replace_Literal]^int maxArgs = -10;^88^^^^^83^105^int maxArgs = -1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P6_Replace_Expression]^if  ( numArgs > maxArgs )  {^94^^^^^83^105^if  ( isCallSite ( ref )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P7_Replace_Invocation]^if  ( isCallOrNew ( ref )  )  {^94^^^^^83^105^if  ( isCallSite ( ref )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P15_Unwrap_Block]^int numArgs = (call.getChildCount()) - 1; if (numArgs > maxArgs) {    maxArgs = numArgs;};^94^95^96^97^98^83^105^if  ( isCallSite ( ref )  )  { int numArgs = call.getChildCount (  )  - 1; if  ( numArgs > maxArgs )  { maxArgs = numArgs; }^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P16_Remove_Block]^^94^95^96^97^98^83^105^if  ( isCallSite ( ref )  )  { int numArgs = call.getChildCount (  )  - 1; if  ( numArgs > maxArgs )  { maxArgs = numArgs; }^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P2_Replace_Operator]^if  ( numArgs == maxArgs )  {^96^^^^^83^105^if  ( numArgs > maxArgs )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P5_Replace_Variable]^if  ( maxArgs > numArgs )  {^96^^^^^83^105^if  ( numArgs > maxArgs )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P15_Unwrap_Block]^maxArgs = numArgs;^96^97^98^^^83^105^if  ( numArgs > maxArgs )  { maxArgs = numArgs; }^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P16_Remove_Block]^^96^97^98^^^83^105^if  ( numArgs > maxArgs )  { maxArgs = numArgs; }^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P5_Replace_Variable]^maxArgs = maxArgs;^97^^^^^83^105^maxArgs = numArgs;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P8_Replace_Mix]^maxArgs =  null;^97^^^^^83^105^maxArgs = numArgs;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P1_Replace_Type]^short  numArgs = call.getChildCount (  )  - 1;^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P2_Replace_Operator]^int numArgs = call.getChildCount (  )   >  1;^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P3_Replace_Literal]^int numArgs = call.getChildCount (  )  - numArgs;^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P5_Replace_Variable]^int numArgs = root.getChildCount (  )  - 1;^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P7_Replace_Invocation]^int numArgs = call.removeChild (  )  - 1;^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P8_Replace_Mix]^int numArgs = root .addChildToFront ( externs )   - 1;^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P7_Replace_Invocation]^int numArgs = call .addChildToFront ( call )   - 1;^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P14_Delete_Statement]^^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P2_Replace_Operator]^if  ( numArgs >= maxArgs )  {^96^^^^^83^105^if  ( numArgs > maxArgs )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P11_Insert_Donor_Statement]^Name name = node.getValue (  ) ;Reference ref = refEdge.getValue (  ) ;^91^^^^^83^105^Reference ref = refEdge.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P11_Insert_Donor_Statement]^Node function = definition.getRValue (  ) ;Reference ref = refEdge.getValue (  ) ;^91^^^^^83^105^Reference ref = refEdge.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P2_Replace_Operator]^int numArgs = call.getChildCount (  )   ^  1;^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P3_Replace_Literal]^int numArgs = call.getChildCount (  )  - ;^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P14_Delete_Statement]^^91^^^^^83^105^Reference ref = refEdge.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P8_Replace_Mix]^int numArgs = root.removeChild (  )  - 1;^95^^^^^83^105^int numArgs = call.getChildCount (  )  - 1;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P8_Replace_Mix]^for  ( Definition definition : name .canChangeSignature (  )   )  {^102^^^^^83^105^for  ( Definition definition : name.getDeclarations (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P14_Delete_Statement]^^102^103^104^^^83^105^for  ( Definition definition : name.getDeclarations (  )  )  { eliminateParamsAfter ( definition.getRValue (  ) , maxArgs ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P5_Replace_Variable]^eliminateParamsAfter ( definition.getRValue (  ) , numArgs ) ;^103^^^^^83^105^eliminateParamsAfter ( definition.getRValue (  ) , maxArgs ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P5_Replace_Variable]^eliminateParamsAfter ( definition.getRValue (  )  ) ;^103^^^^^83^105^eliminateParamsAfter ( definition.getRValue (  ) , maxArgs ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P5_Replace_Variable]^eliminateParamsAfter ( maxArgs.getRValue (  ) , definition ) ;^103^^^^^83^105^eliminateParamsAfter ( definition.getRValue (  ) , maxArgs ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P7_Replace_Invocation]^eliminateCallParamAt ( definition.getRValue (  ) , maxArgs ) ;^103^^^^^83^105^eliminateParamsAfter ( definition.getRValue (  ) , maxArgs ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P14_Delete_Statement]^^103^^^^^83^105^eliminateParamsAfter ( definition.getRValue (  ) , maxArgs ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateOptionalArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  externs  root  Definition  definition  List  edges  NameReferenceGraph  nameGraph  int  maxArgs  numArgs  Name  name  
[P14_Delete_Statement]^^124^^^^^109^139^List<Parameter> parameters = Lists.newArrayList (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P3_Replace_Literal]^boolean firstCall = false;^125^^^^^110^140^boolean firstCall = true;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^if  ( isCallOrNew ( ref )  )  {^132^^^^^117^147^if  ( isCallSite ( ref )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P13_Insert_Block]^if  ( firstCall )  {     buildParameterList ( parameters, cur ) ;     firstCall = false; }else {     findConstantParameters ( parameters, cur ) ; }^132^^^^^117^147^[Delete]^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^if  ( shouldRemove )  {^134^^^^^119^149^if  ( firstCall )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P13_Insert_Block]^if  ( isCallSite ( ref )  )  {     Node cur = call.getFirstChild (  ) ;     if  ( firstCall )  {         buildParameterList ( parameters, cur ) ;         firstCall = false;     }else {         findConstantParameters ( parameters, cur ) ;     } }^134^^^^^119^149^[Delete]^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^findConstantParameters (  cur ) ;^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^findConstantParameters ( parameters ) ;^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^findConstantParameters ( cur, parameters ) ;^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^buildParameterList ( parameters, cur ) ;^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^findConstantParameters ( parameters, function ) ;^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^buildParameterList ( parameters, cur ) ;findConstantParameters ( parameters, cur ) ;^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P3_Replace_Literal]^firstCall = true;^138^^^^^123^153^firstCall = false;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^buildParameterList ( parameters, root ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^buildParameterList (  cur ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^buildParameterList ( parameters ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^buildParameterList ( cur, parameters ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^findConstantParameters ( parameters, cur ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^137^138^^^^122^152^buildParameterList ( parameters, cur ) ; firstCall = false;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^findConstantParameters ( parameters, cur ) ;buildParameterList ( parameters, cur ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^optimizeCallSite ( parameters, call ) ;buildParameterList ( parameters, cur ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^Node cur = call.removeChild (  ) ;^133^^^^^118^148^Node cur = call.getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^Node cur = root.getFirstChild (  ) ;^133^^^^^118^148^Node cur = call.getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^Node block = function.getLastChild (  ) ;Node cur = call.getFirstChild (  ) ;^133^^^^^118^148^Node cur = call.getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^Node cur = call .getLastChild (  )  ;^133^^^^^118^148^Node cur = call.getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^133^^^^^118^148^Node cur = call.getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^findConstantParameters ( parameters, root ) ;^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^findConstantParameters (  cur ) ;^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^findConstantParameters ( parameters ) ;^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^findConstantParameters ( cur, parameters ) ;^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^buildParameterList ( parameters, cur ) ;^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^findConstantParameters ( parameters, function ) ;^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^buildParameterList ( parameters, cur ) ;findConstantParameters ( parameters, cur ) ;^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^findConstantParameters ( parameters, root ) ;^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^buildParameterList ( parameters, root ) ;^140^^^^^134^141^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^buildParameterList ( parameters, function ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^findConstantParameters ( parameters, function ) ;^137^^^^^122^152^buildParameterList ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^Reference ref = refEdge .getInEdges (  )  ;^129^^^^^114^144^Reference ref = refEdge.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^Name name = node.getValue (  ) ;Reference ref = refEdge.getValue (  ) ;^129^^^^^114^144^Reference ref = refEdge.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^Node function = definition.getRValue (  ) ;Reference ref = refEdge.getValue (  ) ;^129^^^^^114^144^Reference ref = refEdge.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^Node cur = root.removeChild (  ) ;^133^^^^^118^148^Node cur = call.getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^129^^^^^114^144^Reference ref = refEdge.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^Node cur = function.getFirstChild (  ) ;^133^^^^^118^148^Node cur = call.getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^buildParameterList ( parameters, root ) ;^140^^^^^125^155^findConstantParameters ( parameters, cur ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^if  ( isCallOrNew ( ref )  )  {^150^^^^^135^165^if  ( isCallSite ( ref )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P15_Unwrap_Block]^optimizeCallSite(parameters, call);^150^151^152^^^135^165^if  ( isCallSite ( ref )  )  { optimizeCallSite ( parameters, call ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P16_Remove_Block]^^150^151^152^^^135^165^if  ( isCallSite ( ref )  )  { optimizeCallSite ( parameters, call ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^optimizeCallSite ( 0, call ) ;^151^^^^^136^166^optimizeCallSite ( parameters, call ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^optimizeCallSite (  call ) ;^151^^^^^136^166^optimizeCallSite ( parameters, call ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^optimizeCallSite ( parameters ) ;^151^^^^^136^166^optimizeCallSite ( parameters, call ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^optimizeCallSite ( call, parameters ) ;^151^^^^^136^166^optimizeCallSite ( parameters, call ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^optimizeFunctionDefinition ( parameters, call ) ;^151^^^^^136^166^optimizeCallSite ( parameters, call ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^151^^^^^136^166^optimizeCallSite ( parameters, call ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P13_Insert_Block]^if  ( isCallSite ( ref )  )  {     optimizeCallSite ( parameters, call ) ; }^151^^^^^136^166^[Delete]^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^Reference ref = refEdge .getInEdges (  )  ;^147^^^^^132^162^Reference ref = refEdge.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^Name name = node.getValue (  ) ;Reference ref = refEdge.getValue (  ) ;^147^^^^^132^162^Reference ref = refEdge.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^Node function = definition.getRValue (  ) ;Reference ref = refEdge.getValue (  ) ;^147^^^^^132^162^Reference ref = refEdge.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^147^^^^^132^162^Reference ref = refEdge.getValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^optimizeCallSite ( parameters, root ) ;^151^^^^^136^166^optimizeCallSite ( parameters, call ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^optimizeFunctionDefinition ( parameters, root ) ;^151^^^^^136^166^optimizeCallSite ( parameters, call ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^if  ( NodeUtil.isFunction ( externs )  )  {^159^^^^^144^174^if  ( NodeUtil.isFunction ( function )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isCall ( function )  )  {^159^^^^^144^174^if  ( NodeUtil.isFunction ( function )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^if  ( NodeUtil.isFunction ( root )  )  {^159^^^^^144^174^if  ( NodeUtil.isFunction ( function )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P15_Unwrap_Block]^optimizeFunctionDefinition(parameters, function);^159^160^161^^^144^174^if  ( NodeUtil.isFunction ( function )  )  { optimizeFunctionDefinition ( parameters, function ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P16_Remove_Block]^^159^160^161^^^144^174^if  ( NodeUtil.isFunction ( function )  )  { optimizeFunctionDefinition ( parameters, function ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^optimizeFunctionDefinition ( parameters, root ) ;^160^^^^^145^175^optimizeFunctionDefinition ( parameters, function ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^optimizeFunctionDefinition (  function ) ;^160^^^^^145^175^optimizeFunctionDefinition ( parameters, function ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^optimizeFunctionDefinition ( parameters ) ;^160^^^^^145^175^optimizeFunctionDefinition ( parameters, function ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P5_Replace_Variable]^optimizeFunctionDefinition ( function, parameters ) ;^160^^^^^145^175^optimizeFunctionDefinition ( parameters, function ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^optimizeCallSite ( parameters, function ) ;^160^^^^^145^175^optimizeFunctionDefinition ( parameters, function ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^160^^^^^145^175^optimizeFunctionDefinition ( parameters, function ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^Reference ref = refEdge.getValue (  ) ;Node function = definition.getRValue (  ) ;^158^^^^^143^173^Node function = definition.getRValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^Name name = node.getValue (  ) ;Node function = definition.getRValue (  ) ;^158^^^^^143^173^Node function = definition.getRValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P11_Insert_Donor_Statement]^Node block = function.getLastChild (  ) ;Node function = definition.getRValue (  ) ;^158^^^^^143^173^Node function = definition.getRValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^for  ( Definition definition : name .canChangeSignature (  )   )  {^157^^^^^142^172^for  ( Definition definition : name.getDeclarations (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^157^158^159^160^161^142^172^for  ( Definition definition : name.getDeclarations (  )  )  { Node function = definition.getRValue (  ) ; if  ( NodeUtil.isFunction ( function )  )  { optimizeFunctionDefinition ( parameters, function ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P14_Delete_Statement]^^158^^^^^143^173^Node function = definition.getRValue (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isCall ( cur )   )  {^159^^^^^144^174^if  ( NodeUtil.isFunction ( function )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^if  ( NodeUtil.isCall ( root )  )  {^159^^^^^144^174^if  ( NodeUtil.isFunction ( function )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P8_Replace_Mix]^optimizeCallSite ( null, function ) ;^160^^^^^145^175^optimizeFunctionDefinition ( parameters, function ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] tryEliminateConstantArgs [RETURN_TYPE] void   Name name Reference>> edges [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  DiGraphEdge  refEdge  Reference  ref  Node  arg  call  cur  externs  function  root  Definition  definition  List  edges  parameters  NameReferenceGraph  nameGraph  Name  name  
[P2_Replace_Operator]^if  ( index == parameters.size (  )  )  {^167^^^^^165^176^if  ( index >= parameters.size (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P3_Replace_Literal]^if  ( index >= parameters.size() + 3  )  {^167^^^^^165^176^if  ( index >= parameters.size (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^if  ( index >= parameters.add (  )  )  {^167^^^^^165^176^if  ( index >= parameters.size (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P13_Insert_Block]^if  ( parameters.get ( index ) .shouldRemove (  )  )  {     Node value = parameters.get ( index ) .getArg (  ) ;     if  ( ! ( nodesAreEqual ( cur, value )  )  )  {         parameters.get ( index ) .setShouldRemove ( false ) ;     } }^167^^^^^165^176^[Delete]^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^} else if  ( index.get ( parameters ) .shouldRemove (  )  ) {^169^^^^^165^176^} else if  ( parameters.get ( index ) .shouldRemove (  )  ) {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P6_Replace_Expression]^} else {^169^^^^^165^176^} else if  ( parameters.get ( index ) .shouldRemove (  )  ) {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^} else if  ( parameters.get ( index ) .Parameter (  )  ) {^169^^^^^165^176^} else if  ( parameters.get ( index ) .shouldRemove (  )  ) {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^} else if  ( parameters.get ( index )  .setShouldRemove ( firstCall )   ) {^169^^^^^165^176^} else if  ( parameters.get ( index ) .shouldRemove (  )  ) {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node value = parameters.get(index).getArg(); if (!(nodesAreEqual(cur, value))) {    parameters.get(index).setShouldRemove(false);};^169^170^171^172^173^165^176^} else if  ( parameters.get ( index ) .shouldRemove (  )  ) { Node value = parameters.get ( index ) .getArg (  ) ; if  ( !nodesAreEqual ( cur, value )  )  { parameters.get ( index ) .setShouldRemove ( false ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P16_Remove_Block]^^169^170^171^172^173^165^176^} else if  ( parameters.get ( index ) .shouldRemove (  )  ) { Node value = parameters.get ( index ) .getArg (  ) ; if  ( !nodesAreEqual ( cur, value )  )  { parameters.get ( index ) .setShouldRemove ( false ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P13_Insert_Block]^if  ( index >=  ( parameters.size (  )  )  )  {     parameters.add ( new Parameter ( cur, false )  ) ; }else     if  ( parameters.get ( index ) .shouldRemove (  )  )  {         Node value = parameters.get ( index ) .getArg (  ) ;         if  ( ! ( nodesAreEqual ( cur, value )  )  )  {             parameters.get ( index ) .setShouldRemove ( false ) ;         }     }^169^^^^^165^176^[Delete]^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P13_Insert_Block]^if  ( parameters.get ( index ) .shouldRemove (  )  )  {     Node paramName = eliminateFunctionParamAt ( function, index ) ;     if  ( paramName != null )  {         addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;     } }^169^^^^^165^176^[Delete]^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^if  ( !nodesAreEqual ( function, value )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^if  ( !nodesAreEqual ( cur, root )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^if  ( !nodesAreEqual (  value )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^if  ( !nodesAreEqual ( cur )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^if  ( !nodesAreEqual ( value, cur )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^if  ( !process ( cur, value )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^if  ( !process ( root, value )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P15_Unwrap_Block]^parameters.get(index).setShouldRemove(false);^171^172^173^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  { parameters.get ( index ) .setShouldRemove ( false ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P16_Remove_Block]^^171^172^173^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  { parameters.get ( index ) .setShouldRemove ( false ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P3_Replace_Literal]^parameters.get ( index ) .setShouldRemove ( true ) ;^172^^^^^165^176^parameters.get ( index ) .setShouldRemove ( false ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^parameters.get ( index )  .shouldRemove (  )  ;^172^^^^^165^176^parameters.get ( index ) .setShouldRemove ( false ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P14_Delete_Statement]^^172^^^^^165^176^parameters.get ( index ) .setShouldRemove ( false ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P13_Insert_Block]^if  ( ! ( nodesAreEqual ( cur, value )  )  )  {     parameters.get ( index ) .setShouldRemove ( false ) ; }^172^^^^^165^176^[Delete]^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^Node value = index.get ( parameters ) .getArg (  ) ;^170^^^^^165^176^Node value = parameters.get ( index ) .getArg (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^Node value = parameters.get ( index ) .Parameter (  ) ;^170^^^^^165^176^Node value = parameters.get ( index ) .getArg (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^Node value = parameters.get ( index )  .Parameter ( function , shouldRemove )  ;^170^^^^^165^176^Node value = parameters.get ( index ) .getArg (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P14_Delete_Statement]^^170^^^^^165^176^Node value = parameters.get ( index ) .getArg (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^if  ( !process ( cur, root )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^if  ( !nodesAreEqual ( root, value )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^if  ( !nodesAreEqual ( cur, externs )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^Node value = parameters.get ( index )  .Parameter ( cur , firstCall )  ;^170^^^^^165^176^Node value = parameters.get ( index ) .getArg (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^Node value = null.get ( index ) .getArg (  ) ;^170^^^^^165^176^Node value = parameters.get ( index ) .getArg (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^if  ( !nodesAreEqual ( cur, function )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P3_Replace_Literal]^parameters.add ( new Parameter ( cur, true )  ) ;^168^^^^^165^176^parameters.add ( new Parameter ( cur, false )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^parameters.add ( new Parameter ( root, false )  ) ;^168^^^^^165^176^parameters.add ( new Parameter ( cur, false )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^parameters.add ( new Parameter ( value, false )  ) ;^168^^^^^165^176^parameters.add ( new Parameter ( cur, false )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P4_Replace_Constructor]^parameters.add ( new Parameter (  false )  ) ;^168^^^^^165^176^parameters.add ( new Parameter ( cur, false )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^parameters.add ( new Parameter ( function, false )  ) ;^168^^^^^165^176^parameters.add ( new Parameter ( cur, false )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P14_Delete_Statement]^^168^^^^^165^176^parameters.add ( new Parameter ( cur, false )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^if  ( !process ( cur, externs )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P1_Replace_Type]^for  (  short  index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P2_Replace_Operator]^for  ( int index = 0;  ( cur = cur.getNext (  )  )  == null; index++ )  {^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P3_Replace_Literal]^for  ( int index = -9;  ( cur = cur.getNext (  )  )  != null; index++ )  {^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^for  ( int index = 0;  ( function = cur.getNext (  )  )  != null; index++ )  {^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^for  ( int cur = 0;  ( index = cur.getNext (  )  )  != null; index++ )  {^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^for  ( int index = 0;  ( cur = cur.removeChild (  )  )  != null; index++ )  {^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^for  ( int index = 0;  ( cur = cur .getType (  )   )  != null; index++ )  {^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P2_Replace_Operator]^if  ( index > parameters.size (  )  )  {^167^^^^^165^176^if  ( index >= parameters.size (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P3_Replace_Literal]^if  ( index >= parameters.size() + 9  )  {^167^^^^^165^176^if  ( index >= parameters.size (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^if  ( parameters >= index.size (  )  )  {^167^^^^^165^176^if  ( index >= parameters.size (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^} else if  ( null.get ( index ) .shouldRemove (  )  ) {^169^^^^^165^176^} else if  ( parameters.get ( index ) .shouldRemove (  )  ) {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^}  if  ( parameters.get ( index ) .Parameter (  )  ) {^169^^^^^165^176^} else if  ( parameters.get ( index ) .shouldRemove (  )  ) {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^if  ( !process ( function, value )  )  {^171^^^^^165^176^if  ( !nodesAreEqual ( cur, value )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^Node value = 0.get ( index ) .getArg (  ) ;^170^^^^^165^176^Node value = parameters.get ( index ) .getArg (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^Node value = parameters.get ( index )  .Parameter ( root , shouldRemove )  ;^170^^^^^165^176^Node value = parameters.get ( index ) .getArg (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^Node value = parameters.get ( index )  .Parameter ( value , shouldRemove )  ;^170^^^^^165^176^Node value = parameters.get ( index ) .getArg (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^Node value = 3.get ( index ) .getArg (  ) ;^170^^^^^165^176^Node value = parameters.get ( index ) .getArg (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^Node value = parameters.get ( index )  .Parameter ( call , firstCall )  ;^170^^^^^165^176^Node value = parameters.get ( index ) .getArg (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P3_Replace_Literal]^if  ( index >= parameters.size() + 8  )  {^167^^^^^165^176^if  ( index >= parameters.size (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^if  ( index >= null.add (  )  )  {^167^^^^^165^176^if  ( index >= parameters.size (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^for  ( int index = 0;  ( value = cur.getNext (  )  )  != null; index++ )  {^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^for  ( int index =  0;  ( value^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P3_Replace_Literal]^for  ( int index = 8;  ( cur = cur.getNext (  )  )  != null; index++ )  {^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^for  ( int index = 0;  ( root = cur.getNext (  )  )  != null; index++ )  {^166^^^^^165^176^for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P3_Replace_Literal]^if  ( index >= parameters.size() + 1  )  {^167^^^^^165^176^if  ( index >= parameters.size (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] findConstantParameters [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  root  value  
[P2_Replace_Operator]^while  (  ( cur = cur.getNext (  )  )  == null )  {^179^^^^^178^182^while  (  ( cur = cur.getNext (  )  )  != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^while  (  ( value = cur.getNext (  )  )  != null )  {^179^^^^^178^182^while  (  ( cur = cur.getNext (  )  )  != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^while  (  ( cur = cur.removeChild (  )  )  != null )  {^179^^^^^178^182^while  (  ( cur = cur.getNext (  )  )  != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^parameters.add ( new Parameter ( root, NodeUtil.isLiteralValue ( cur )  )  ) ;^180^^^^^178^182^parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^parameters.add ( new Parameter ( cur, NodeUtil.isImmutableValue ( cur )  )  ) ;^180^^^^^178^182^parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^parameters.add ( new Parameter ( value, NodeUtil.isImmutableValue ( cur )  )  ) ;^180^^^^^178^182^parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P4_Replace_Constructor]^parameters.add ( new Parameter (  NodeUtil.isLiteralValue ( cur )  )  ) ;^180^^^^^178^182^parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^parameters.add ( new Parameter ( value, NodeUtil.isLiteralValue ( cur )  )  ) ;^180^^^^^178^182^parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^parameters.add ( new Parameter ( function, NodeUtil.isLiteralValue ( cur )  )  ) ;^180^^^^^178^182^parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P14_Delete_Statement]^^180^^^^^178^182^parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P11_Insert_Donor_Statement]^while  (  ( cur = cur.getNext (  )  )  != null )  { parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^180^^^^^178^182^parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^while  (  ( cur =  root.getNext (  )  )  !^179^^^^^178^182^while  (  ( cur = cur.getNext (  )  )  != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^parameters.add ( new Parameter ( cur, NodeUtil .isImmutableValue ( call )   )  ) ;^180^^^^^178^182^parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P7_Replace_Invocation]^while  (  ( cur = cur .getType (  )   )  != null )  {^179^^^^^178^182^while  (  ( cur = cur.getNext (  )  )  != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P8_Replace_Mix]^while  (  ( root = cur.getNext (  )  )  != null )  {^179^^^^^178^182^while  (  ( cur = cur.getNext (  )  )  != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P14_Delete_Statement]^^179^180^^^^178^182^while  (  ( cur = cur.getNext (  )  )  != null )  { parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] buildParameterList [RETURN_TYPE] void   Parameter> parameters Node cur [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  root  value  
[P5_Replace_Variable]^if  ( index.get ( parameters ) .shouldRemove (  )  )  {^187^^^^^184^195^if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^if  ( parameters.get ( index ) .Parameter (  )  )  {^187^^^^^184^195^if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^if  ( parameters.get ( index )  .setShouldRemove ( shouldRemove )   )  {^187^^^^^184^195^if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node paramName = eliminateFunctionParamAt(function, index); if (paramName != null) {    addVariableToFunction(function, paramName, parameters.get(index).getArg());};^187^188^189^190^191^184^195^if  ( parameters.get ( index ) .shouldRemove (  )  )  { Node paramName = eliminateFunctionParamAt ( function, index ) ; if  ( paramName != null )  { addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P16_Remove_Block]^^187^188^189^190^191^184^195^if  ( parameters.get ( index ) .shouldRemove (  )  )  { Node paramName = eliminateFunctionParamAt ( function, index ) ; if  ( paramName != null )  { addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P13_Insert_Block]^if  ( parameters.get ( index ) .shouldRemove (  )  )  {     Node value = parameters.get ( index ) .getArg (  ) ;     if  ( ! ( nodesAreEqual ( cur, value )  )  )  {         parameters.get ( index ) .setShouldRemove ( false ) ;     } }^187^^^^^184^195^[Delete]^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P2_Replace_Operator]^if  ( paramName == null )  {^189^^^^^184^195^if  ( paramName != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^if  ( root != null )  {^189^^^^^184^195^if  ( paramName != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^if  ( paramName != false )  {^189^^^^^184^195^if  ( paramName != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P9_Replace_Statement]^if  ( nameGraph == null )  {^189^^^^^184^195^if  ( paramName != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P9_Replace_Statement]^if  ( formalArgPtr != null )  {^189^^^^^184^195^if  ( paramName != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P15_Unwrap_Block]^addVariableToFunction(function, paramName, parameters.get(index).getArg());^189^190^191^192^^184^195^if  ( paramName != null )  { addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P16_Remove_Block]^^189^190^191^192^^184^195^if  ( paramName != null )  { addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction ( root, paramName, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction ( function, value, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction ( function, paramName, 0.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction (  paramName, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction ( function,  parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction ( function, paramName.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction ( index, paramName, parameters.get ( function ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction ( function, index, parameters.get ( paramName ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction ( function, paramName, index.get ( parameters ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^addVariableToFunction ( function, paramName, parameters.get ( index ) .Parameter (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^addVariableToFunction ( paramName, paramName, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P14_Delete_Statement]^^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P11_Insert_Donor_Statement]^Node value = parameters.get ( index ) .getArg (  ) ;addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P13_Insert_Block]^if  ( paramName != null )  {     addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ; }^190^^^^^184^195^[Delete]^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^parameters.get ( index ) .Parameter (  )  ) ;^191^^^^^184^195^parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P14_Delete_Statement]^^191^^^^^184^195^parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P11_Insert_Donor_Statement]^Node value = parameters.get ( index ) .getArg (  ) ;parameters.get ( index ) .getArg (  )  ) ;^191^^^^^184^195^parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P11_Insert_Donor_Statement]^parameters.get ( index ) .setShouldRemove ( false ) ;parameters.get ( index ) .getArg (  )  ) ;^191^^^^^184^195^parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^Node paramName = eliminateFunctionParamAt ( value, index ) ;^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^Node paramName = eliminateFunctionParamAt (  index ) ;^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^Node paramName = eliminateFunctionParamAt ( function ) ;^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^Node paramName = eliminateFunctionParamAt ( index, function ) ;^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^Node paramName = eliminateCallParamAt ( function, index ) ;^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^Node paramName = eliminateCallParamAt ( value, index ) ;^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^Node paramName = eliminateFunctionParamAt ( root, index ) ;^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P14_Delete_Statement]^^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction ( value, paramName, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction ( function, parameters, paramName.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction ( parameters, paramName, function.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^addVariableToFunction ( function, paramName, parameters.get ( index )  .Parameter ( externs , firstCall )   ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^if  ( paramName != this )  {^189^^^^^184^195^if  ( paramName != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction ( function, root, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction ( function, paramName, 4.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^addVariableToFunction ( paramName, function, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^addVariableToFunction ( function, paramName, parameters.get ( index )  .Parameter ( call , shouldRemove )   ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^addVariableToFunction ( function, value, parameters.get ( index ) .Parameter (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P1_Replace_Type]^for  (  short  index = parameters.size (  )  - 1; index >= 0; index-- )  {^186^^^^^184^195^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P2_Replace_Operator]^for  ( int index = parameters.size (  )   !=  1; index >= 0; index-- )  {^186^^^^^184^195^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P2_Replace_Operator]^for  ( int index = parameters.size (  )  - 1; index > 0; index-- )  {^186^^^^^184^195^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P3_Replace_Literal]^for  ( int index = parameters.size (  )  ; index >= 0; index-- )  {^186^^^^^184^195^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P3_Replace_Literal]^for  ( int index = parameters.size (  )  - 1; index >= ; index-- )  {^186^^^^^184^195^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P3_Replace_Literal]^for  ( int index = parameters.size() + 6  - 1; index >= 0; index-- )  {^186^^^^^184^195^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^for  ( int index = this.size (  )  - 1; index >= 0; index-- )  {^186^^^^^184^195^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^for  ( int index = parameters.add (  )  - 1; index >= 0; index-- )  {^186^^^^^184^195^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^if  ( function != null )  {^189^^^^^184^195^if  ( paramName != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^parameters.get ( index )  .Parameter ( paramName , shouldRemove )   ) ;^191^^^^^184^195^parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^parameters.get ( index )  .Parameter ( function , firstCall )   ) ;^191^^^^^184^195^parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^Node paramName = eliminateFunctionParamAt ( paramName, index ) ;^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^addVariableToFunction ( function, paramName, null.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^parameters.get ( index )  .Parameter ( externs , firstCall )   ) ;^191^^^^^184^195^parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^Node paramName = eliminateCallParamAt ( paramName, index ) ;^188^^^^^184^195^Node paramName = eliminateFunctionParamAt ( function, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P3_Replace_Literal]^for  ( int index = parameters.size() - 0  - 1; index >= 0; index-- )  {^186^^^^^184^195^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^if  ( null.get ( index ) .shouldRemove (  )  )  {^187^^^^^184^195^if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^parameters.get ( index )  .Parameter ( arg , shouldRemove )   ) ;^191^^^^^184^195^parameters.get ( index ) .getArg (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeFunctionDefinition [RETURN_TYPE] void   Parameter> parameters Node function [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^if  ( index.get ( parameters ) .shouldRemove (  )  )  {^199^^^^^197^203^if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^if  ( parameters.get ( index ) .Parameter (  )  )  {^199^^^^^197^203^if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P15_Unwrap_Block]^eliminateCallParamAt(call, index);^199^200^201^^^197^203^if  ( parameters.get ( index ) .shouldRemove (  )  )  { eliminateCallParamAt ( call, index ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P16_Remove_Block]^^199^200^201^^^197^203^if  ( parameters.get ( index ) .shouldRemove (  )  )  { eliminateCallParamAt ( call, index ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^eliminateCallParamAt ( paramName, index ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^eliminateCallParamAt (  index ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^eliminateCallParamAt ( call ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^eliminateCallParamAt ( index, call ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^eliminateFunctionParamAt ( call, index ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^eliminateFunctionParamAt ( root, index ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P14_Delete_Statement]^^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P11_Insert_Donor_Statement]^tryEliminateOptionalArgs ( name, edges ) ;eliminateCallParamAt ( call, index ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P11_Insert_Donor_Statement]^tryEliminateConstantArgs ( name, edges ) ;eliminateCallParamAt ( call, index ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P11_Insert_Donor_Statement]^Node paramName = eliminateFunctionParamAt ( function, index ) ;eliminateCallParamAt ( call, index ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P1_Replace_Type]^for  (  long  index = parameters.size (  )  - 1; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P2_Replace_Operator]^for  ( int index = parameters.size (  )   >  1; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P2_Replace_Operator]^for  ( int index = parameters.size (  )  - 1; index == 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P3_Replace_Literal]^for  ( int index = parameters.size (  )  - index; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P3_Replace_Literal]^for  ( int index = parameters.size (  )  - 1; index >= 9; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P3_Replace_Literal]^for  ( int index = parameters.size() + 4  - 1; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^for  ( int index = null.size (  )  - 1; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^for  ( int parameters = index.size (  )  - 1; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^for  ( int index = parameters.add (  )  - 1; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^for  ( int index = null.add (  )  - 1; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^if  ( parameters.get ( index )  .setShouldRemove ( firstCall )   )  {^199^^^^^197^203^if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^if  ( parameters.get ( index )  .setShouldRemove ( shouldRemove )   )  {^199^^^^^197^203^if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^eliminateCallParamAt ( value, index ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^eliminateCallParamAt ( root, index ) ;^200^^^^^197^203^eliminateCallParamAt ( call, index ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P1_Replace_Type]^for  (  short  index = parameters.size (  )  - 1; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P2_Replace_Operator]^for  ( int index = parameters.size (  )   !=  1; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P3_Replace_Literal]^for  ( int index = parameters.size (  )  ; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P3_Replace_Literal]^for  ( int index = parameters.size() - 1  - 1; index >= 0; index-- )  {^198^^^^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P14_Delete_Statement]^^198^199^200^201^^197^203^for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  { if  ( parameters.get ( index ) .shouldRemove (  )  )  { eliminateCallParamAt ( call, index ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] optimizeCallSite [RETURN_TYPE] void   Parameter> parameters Node call [VARIABLES] AbstractCompiler  compiler  List  parameters  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  int  index  Node  arg  call  cur  externs  function  paramName  root  value  
[P2_Replace_Operator]^return isCallOrNew ( call )  || call.getFirstChild (  )  == ref.site;^214^^^^^209^215^return isCallOrNew ( call )  && call.getFirstChild (  )  == ref.site;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallSite [RETURN_TYPE] boolean   Reference ref [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Reference  ref  Node  arg  call  cur  externs  function  paramName  root  value  
[P2_Replace_Operator]^return isCallOrNew ( call )  && call.getFirstChild (  )  <= ref.site;^214^^^^^209^215^return isCallOrNew ( call )  && call.getFirstChild (  )  == ref.site;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallSite [RETURN_TYPE] boolean   Reference ref [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Reference  ref  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^return isCallSite ( call )  && call.getFirstChild (  )  == ref.site;^214^^^^^209^215^return isCallOrNew ( call )  && call.getFirstChild (  )  == ref.site;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallSite [RETURN_TYPE] boolean   Reference ref [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Reference  ref  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^return isCallOrNew ( call )  && call.removeChild (  )  == ref.site;^214^^^^^209^215^return isCallOrNew ( call )  && call.getFirstChild (  )  == ref.site;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallSite [RETURN_TYPE] boolean   Reference ref [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Reference  ref  Node  arg  call  cur  externs  function  paramName  root  value  
[P7_Replace_Invocation]^return isCallOrNew ( call )  && call .getLastChild (  )   == ref.site;^214^^^^^209^215^return isCallOrNew ( call )  && call.getFirstChild (  )  == ref.site;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallSite [RETURN_TYPE] boolean   Reference ref [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Reference  ref  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^return isCallOrNew ( paramName )  && call.getFirstChild (  )  == ref.site;^214^^^^^209^215^return isCallOrNew ( call )  && call.getFirstChild (  )  == ref.site;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallSite [RETURN_TYPE] boolean   Reference ref [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Reference  ref  Node  arg  call  cur  externs  function  paramName  root  value  
[P14_Delete_Statement]^^214^^^^^209^215^return isCallOrNew ( call )  && call.getFirstChild (  )  == ref.site;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallSite [RETURN_TYPE] boolean   Reference ref [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Reference  ref  Node  arg  call  cur  externs  function  paramName  root  value  
[P5_Replace_Variable]^return isCallOrNew ( root )  && call.getFirstChild (  )  == ref.site;^214^^^^^209^215^return isCallOrNew ( call )  && call.getFirstChild (  )  == ref.site;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallSite [RETURN_TYPE] boolean   Reference ref [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Reference  ref  Node  arg  call  cur  externs  function  paramName  root  value  
[P8_Replace_Mix]^return isCallOrNew ( value )  && call.getFirstChild (  )  == ref.site;^214^^^^^209^215^return isCallOrNew ( call )  && call.getFirstChild (  )  == ref.site;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallSite [RETURN_TYPE] boolean   Reference ref [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Reference  ref  Node  arg  call  cur  externs  function  paramName  root  value  
[P2_Replace_Operator]^return NodeUtil.isCall ( node )  && NodeUtil.isNew ( node ) ;^225^^^^^224^226^return NodeUtil.isCall ( node )  || NodeUtil.isNew ( node ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallOrNew [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  node  paramName  root  value  
[P5_Replace_Variable]^return NodeUtil.isCall ( paramName )  || NodeUtil.isNew ( node ) ;^225^^^^^224^226^return NodeUtil.isCall ( node )  || NodeUtil.isNew ( node ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallOrNew [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  node  paramName  root  value  
[P7_Replace_Invocation]^return NodeUtil.isNew ( node )  || NodeUtil.isNew ( node ) ;^225^^^^^224^226^return NodeUtil.isCall ( node )  || NodeUtil.isNew ( node ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallOrNew [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  node  paramName  root  value  
[P7_Replace_Invocation]^return NodeUtil.isCall ( node )  || NodeUtil.isCall ( node ) ;^225^^^^^224^226^return NodeUtil.isCall ( node )  || NodeUtil.isNew ( node ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallOrNew [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  node  paramName  root  value  
[P8_Replace_Mix]^return NodeUtil.isNew ( function )  || NodeUtil.isNew ( node ) ;^225^^^^^224^226^return NodeUtil.isCall ( node )  || NodeUtil.isNew ( node ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallOrNew [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  node  paramName  root  value  
[P5_Replace_Variable]^return NodeUtil.isCall ( value )  || NodeUtil.isNew ( node ) ;^225^^^^^224^226^return NodeUtil.isCall ( node )  || NodeUtil.isNew ( node ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallOrNew [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  node  paramName  root  value  
[P8_Replace_Mix]^return NodeUtil.isCall ( function )  || NodeUtil.isNew ( node ) ;^225^^^^^224^226^return NodeUtil.isCall ( node )  || NodeUtil.isNew ( node ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallOrNew [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  node  paramName  root  value  
[P14_Delete_Statement]^^225^^^^^224^226^return NodeUtil.isCall ( node )  || NodeUtil.isNew ( node ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallOrNew [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  node  paramName  root  value  
[P8_Replace_Mix]^return NodeUtil.isCall ( root )  || NodeUtil.isCall ( node ) ;^225^^^^^224^226^return NodeUtil.isCall ( node )  || NodeUtil.isNew ( node ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] isCallOrNew [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  node  paramName  root  value  
[P2_Replace_Operator]^return NodeUtil.isImmutableValue ( n1 )  || NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P5_Replace_Variable]^return NodeUtil.isImmutableValue ( paramName )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P5_Replace_Variable]^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( paramName )  && n1.checkTreeEqualsSilent ( n2 ) ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P5_Replace_Variable]^return NodeUtil.isImmutableValue ( n2 )  && NodeUtil.isImmutableValue ( n1 )  && n1.checkTreeEqualsSilent ( n2 ) ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P7_Replace_Invocation]^return NodeUtil.isLiteralValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P7_Replace_Invocation]^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1 .getQualifiedName (  )  ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P5_Replace_Variable]^return NodeUtil.isImmutableValue ( value )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P7_Replace_Invocation]^return NodeUtil .isLiteralValue ( paramName )   && NodeUtil^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P8_Replace_Mix]^return NodeUtil .isLiteralValue ( n2 )   && NodeUtil^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P14_Delete_Statement]^^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P5_Replace_Variable]^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( value )  && n1.checkTreeEqualsSilent ( n2 ) ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P8_Replace_Mix]^return NodeUtil.isLiteralValue ( n1 )  && NodeUtil.isImmutableValue ( root )  && n1.checkTreeEqualsSilent ( n2 ) ;^236^237^^^^235^238^return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P5_Replace_Variable]^n1.checkTreeEqualsSilent ( node ) ;^237^^^^^235^238^n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P8_Replace_Mix]^n1.checkTreeEqualsSilent ( paramName ) ;^237^^^^^235^238^n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P14_Delete_Statement]^^237^^^^^235^238^n1.checkTreeEqualsSilent ( n2 ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] nodesAreEqual [RETURN_TYPE] boolean   Node n1 Node n2 [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P5_Replace_Variable]^return node;^254^^^^^253^255^return arg;^[CLASS] OptimizeParameters Parameter  [METHOD] getArg [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P8_Replace_Mix]^return root;^254^^^^^253^255^return arg;^[CLASS] OptimizeParameters Parameter  [METHOD] getArg [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P5_Replace_Variable]^return firstCall;^258^^^^^257^259^return shouldRemove;^[CLASS] OptimizeParameters Parameter  [METHOD] shouldRemove [RETURN_TYPE] boolean   [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P5_Replace_Variable]^shouldRemove = shouldRemove;^262^^^^^261^263^shouldRemove = value;^[CLASS] OptimizeParameters Parameter  [METHOD] setShouldRemove [RETURN_TYPE] void   boolean value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P8_Replace_Mix]^shouldRemove =  firstCall;^262^^^^^261^263^shouldRemove = value;^[CLASS] OptimizeParameters Parameter  [METHOD] setShouldRemove [RETURN_TYPE] void   boolean value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P11_Insert_Donor_Statement]^paramRemoved = true;shouldRemove = value;^262^^^^^261^263^shouldRemove = value;^[CLASS] OptimizeParameters Parameter  [METHOD] setShouldRemove [RETURN_TYPE] void   boolean value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P11_Insert_Donor_Statement]^this.shouldRemove = shouldRemove;shouldRemove = value;^262^^^^^261^263^shouldRemove = value;^[CLASS] OptimizeParameters Parameter  [METHOD] setShouldRemove [RETURN_TYPE] void   boolean value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  call  cur  externs  function  n1  n2  node  paramName  root  value  
[P3_Replace_Literal]^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , " ode must be a function." ) ;^273^274^^^^272^284^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isFunction ( root ) , "Node must be a function." ) ;^273^274^^^^272^284^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isCall ( function ) , "Node must be a function." ) ;^273^274^^^^272^284^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P8_Replace_Mix]^Preconditions.checkArgument ( NodeUtil.isFunction ( varName ) , "Node must be a function." ) ;^273^274^^^^272^284^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P14_Delete_Statement]^^273^274^^^^272^284^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^273^274^^^^272^284^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call." ) ;Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^273^274^^^^272^284^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P5_Replace_Variable]^Node block = node.getLastChild (  ) ;^276^^^^^272^284^Node block = function.getLastChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P7_Replace_Invocation]^Node block = function.removeChild (  ) ;^276^^^^^272^284^Node block = function.getLastChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P7_Replace_Invocation]^Node block = function .getFirstChild (  )  ;^276^^^^^272^284^Node block = function.getLastChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P8_Replace_Mix]^Node block = node.removeChild (  ) ;^276^^^^^272^284^Node block = function.getLastChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P11_Insert_Donor_Statement]^Node cur = call.getFirstChild (  ) ;Node block = function.getLastChild (  ) ;^276^^^^^272^284^Node block = function.getLastChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P11_Insert_Donor_Statement]^Node function = definition.getRValue (  ) ;Node block = function.getLastChild (  ) ;^276^^^^^272^284^Node block = function.getLastChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P8_Replace_Mix]^Node block = varName .getFirstChild (  )  ;^276^^^^^272^284^Node block = function.getLastChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P14_Delete_Statement]^^276^^^^^272^284^Node block = function.getLastChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P2_Replace_Operator]^Preconditions.checkArgument ( block.getType (  )  != Token.BLOCK, "Node must be a block." ) ;^277^278^^^^272^284^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P3_Replace_Literal]^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block.N" ) ;^277^278^^^^272^284^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P5_Replace_Variable]^Preconditions.checkArgument ( block.getType (  )  == Token. "Node must be a block." ) ;^277^278^^^^272^284^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P7_Replace_Invocation]^Preconditions.checkArgument ( block.removeChild (  )  == Token.BLOCK, "Node must be a block." ) ;^277^278^^^^272^284^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P7_Replace_Invocation]^Preconditions.checkArgument ( block .getNext (  )   == Token.BLOCK, "Node must be a block." ) ;^277^278^^^^272^284^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P8_Replace_Mix]^Preconditions.checkArgument ( newVar.removeChild (  )  == Token.BLOCK, "Node must be a block." ) ;^277^278^^^^272^284^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P14_Delete_Statement]^^277^278^^^^272^284^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^277^278^^^^272^284^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call." ) ;Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^277^278^^^^272^284^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P5_Replace_Variable]^Preconditions.checkArgument ( paramName.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^277^278^^^^272^284^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P8_Replace_Mix]^Preconditions.checkArgument ( value.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^277^278^^^^272^284^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P5_Replace_Variable]^Node newVar = NodeUtil.newVarNode ( node.getQualifiedName (  ) , value.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P5_Replace_Variable]^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) .cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P5_Replace_Variable]^Node newVar = NodeUtil.newVarNode ( value.getQualifiedName (  ) , varName.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P7_Replace_Invocation]^Node newVar = NodeUtil.newVarNode ( varName.removeChild (  ) , value.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P7_Replace_Invocation]^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.removeChild (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P8_Replace_Mix]^Node newVar = NodeUtil.newVarNode ( varName.removeChild (  ) , varName.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P5_Replace_Variable]^Node newVar = NodeUtil.newVarNode ( paramName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P5_Replace_Variable]^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , n2.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P7_Replace_Invocation]^Node newVar = NodeUtil .isLiteralValue ( n1 )   ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P7_Replace_Invocation]^Node newVar = NodeUtil.newVarNode ( varName .getChildCount (  )  , value.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P7_Replace_Invocation]^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value .checkTreeEqualsSilent ( call )   ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P8_Replace_Mix]^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , newVar.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P14_Delete_Statement]^^280^281^282^283^284^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ; block.addChildToFront ( newVar ) ; compiler.reportCodeChange (  ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P5_Replace_Variable]^Node newVar = NodeUtil.newVarNode ( newVar.getQualifiedName (  ) , value.cloneTree (  )  ) ;^280^281^^^^272^284^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P7_Replace_Invocation]^value.removeChild (  )  ) ;^281^^^^^272^284^value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P7_Replace_Invocation]^value .checkTreeEqualsSilent ( externs )   ) ;^281^^^^^272^284^value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P14_Delete_Statement]^^281^^^^^272^284^value.cloneTree (  )  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P5_Replace_Variable]^block.addChildToFront ( node ) ;^282^^^^^272^284^block.addChildToFront ( newVar ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P14_Delete_Statement]^^282^283^^^^272^284^block.addChildToFront ( newVar ) ; compiler.reportCodeChange (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P14_Delete_Statement]^^283^^^^^272^284^compiler.reportCodeChange (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] addVariableToFunction [RETURN_TYPE] void   Node function Node varName Node value [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  shouldRemove  value  NameReferenceGraph  nameGraph  Node  arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName  
[P3_Replace_Literal]^boolean paramRemoved = true;^292^^^^^290^311^boolean paramRemoved = false;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node formalArgPtr = varName.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node formalArgPtr = function.removeChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node formalArgPtr = function .getLastChild (  )  .getNext (  )^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node formalArgPtr = function.getFirstChild (  ) .addChildrenToFront (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^Node formalArgPtr = paramName.removeChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node formalArgPtr = next.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^Node formalArgPtr = newVar.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^294^295^296^297^298^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ; while  ( argIndex != 0 && formalArgPtr != null )  { formalArgPtr = formalArgPtr.getNext (  ) ; argIndex--; }^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^call.getFirstChild (  ) .getNext (  ) , argIndex ) ;Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node formalArgPtr = function.getFirstChild (  )  .getType (  )  .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^Node formalArgPtr = value .getLastChild (  )  .getNext (  )^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node formalArgPtr = paramName.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P2_Replace_Operator]^while  ( argIndex != 0 || formalArgPtr != null )  {^295^^^^^290^311^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P2_Replace_Operator]^while  ( argIndex == 0 && formalArgPtr != null )  {^295^^^^^290^311^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P2_Replace_Operator]^while  ( argIndex != 0 && formalArgPtr == null )  {^295^^^^^290^311^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^while  ( argIndex != 0 && value != null )  {^295^^^^^290^311^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^while  ( formalArgPtr != 0 && argIndex != null )  {^295^^^^^290^311^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^while  ( argIndex != 0 && next != null )  {^295^^^^^290^311^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^formalArgPtr = newVar.getNext (  ) ;^296^^^^^290^311^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^formalArgPtr = formalArgPtr.removeChild (  ) ;^296^^^^^290^311^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^formalArgPtr = formalArgPtr .getType (  )  ;^296^^^^^290^311^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^formalArgPtr =  varName.getNext (  ) ;^296^^^^^290^311^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^formalArgPtr = next.getNext (  ) ;^296^^^^^290^311^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^296^297^298^^^290^311^formalArgPtr = formalArgPtr.getNext (  ) ; argIndex--; }^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Node next = formalArgPtr.getNext (  ) ;formalArgPtr = formalArgPtr.getNext (  ) ;^296^^^^^290^311^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^formalArgPtr = paramName.getNext (  ) ;^296^^^^^290^311^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P2_Replace_Operator]^while  ( formalArgPtr == null )  {^300^^^^^290^311^while  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^while  ( varName != null )  {^300^^^^^290^311^while  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P3_Replace_Literal]^paramRemoved = false;^306^^^^^290^311^paramRemoved = true;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^shouldRemove = value;paramRemoved = true;^306^^^^^290^311^paramRemoved = true;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^formalArgPtr = newVar;^307^^^^^290^311^formalArgPtr = next;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^formalArgPtr =  node;^307^^^^^290^311^formalArgPtr = next;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P12_Insert_Condition]^if  ( formalArgPtr != null )  { formalArgPtr = next; }^307^^^^^290^311^formalArgPtr = next;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR, paramName ) ;^303^^^^^290^311^Node var = new Node ( Token.VAR, formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR ) ;^303^^^^^290^311^Node var = new Node ( Token.VAR, formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node var = new Node ( Token. formalArgPtr ) ;^303^^^^^290^311^Node var = new Node ( Token.VAR, formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^Node var = new Node ( Token.VAR, varName ) ;^303^^^^^290^311^Node var = new Node ( Token.VAR, formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node next = paramName.getNext (  ) ;^301^^^^^290^311^Node next = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node next = formalArgPtr.removeChild (  ) ;^301^^^^^290^311^Node next = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node next = formalArgPtr .getType (  )  ;^301^^^^^290^311^Node next = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR, newVar ) ;^303^^^^^290^311^Node var = new Node ( Token.VAR, formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node next = next.getNext (  ) ;^301^^^^^290^311^Node next = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^Node next = varName.removeChild (  ) ;^301^^^^^290^311^Node next = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^function.getFirstChild (  ) .getNext (  ) .removeChild ( node ) ;^302^^^^^290^311^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^function.getFirstChild (  ) .addChildrenToFront (  ) .removeChild ( formalArgPtr ) ;^302^^^^^290^311^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^function.removeChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^302^^^^^290^311^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^function .getLastChild (  )  .getNext (  ) .removeChild ( formalArgPtr ) ;^302^^^^^290^311^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^function.getFirstChild (  ) .getNext (  ) .removeChild ( varName ) ;^302^^^^^290^311^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^302^^^^^290^311^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^function.getLastChild (  ) .addChildrenToFront ( var ) ;function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^302^^^^^290^311^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^call.getFirstChild (  ) .getNext (  ) , argIndex ) ;function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^302^^^^^290^311^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^302^^^^^290^311^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^function.getLastChild (  ) .addChildrenToFront ( paramName ) ;^304^^^^^290^311^function.getLastChild (  ) .addChildrenToFront ( var ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^function.removeChild (  ) .addChildrenToFront ( var ) ;^304^^^^^290^311^function.getLastChild (  ) .addChildrenToFront ( var ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^function.getLastChild (  ) .addChildrenToFront ( next ) ;^304^^^^^290^311^function.getLastChild (  ) .addChildrenToFront ( var ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^304^305^^^^290^311^function.getLastChild (  ) .addChildrenToFront ( var ) ; compiler.reportCodeChange (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;function.getLastChild (  ) .addChildrenToFront ( var ) ;^304^^^^^290^311^function.getLastChild (  ) .addChildrenToFront ( var ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^function .getFirstChild (  )  .addChildrenToFront ( var ) ;^304^^^^^290^311^function.getLastChild (  ) .addChildrenToFront ( var ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^304^^^^^290^311^function.getLastChild (  ) .addChildrenToFront ( var ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^305^^^^^290^311^compiler.reportCodeChange (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^formalArgPtr = varName;^307^^^^^290^311^formalArgPtr = next;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node var = new Node ( Token.VAR, node ) ;^303^^^^^290^311^Node var = new Node ( Token.VAR, formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^Node var = new Node ( Token.VAR, root ) ;^303^^^^^290^311^Node var = new Node ( Token.VAR, formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node next = newVar.getNext (  ) ;^301^^^^^290^311^Node next = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^Node next = varName.getNext (  ) ;^301^^^^^290^311^Node next = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^Node var = new Node ( Token.VAR, next ) ;^303^^^^^290^311^Node var = new Node ( Token.VAR, formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^function.getFirstChild (  ) .getNext (  ) .removeChild ( root ) ;^302^^^^^290^311^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^function.getFirstChild (  ) .getNext (  )  .getFirstChild (  )  ;^302^^^^^290^311^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^function.getFirstChild (  )  .getType (  )  .removeChild ( next ) ;^302^^^^^290^311^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^function.getLastChild (  ) .addChildrenToFront ( newVar ) ;^304^^^^^290^311^function.getLastChild (  ) .addChildrenToFront ( var ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^305^306^^^^290^311^compiler.reportCodeChange (  ) ; paramRemoved = true;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^return value;^310^^^^^290^311^return paramRemoved;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateParamsAfter [RETURN_TYPE] boolean   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node formalArgPtr = next;^321^^^^^320^327^Node formalArgPtr = firstArg;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^Node formalArgPtr = value;^321^^^^^320^327^Node formalArgPtr = firstArg;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P12_Insert_Condition]^if  ( formalArgPtr != null )  { Node formalArgPtr = firstArg; }^321^^^^^320^327^Node formalArgPtr = firstArg;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P2_Replace_Operator]^while  ( argIndex != 0 || formalArgPtr != null )  {^322^^^^^320^327^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P2_Replace_Operator]^while  ( argIndex == 0 && formalArgPtr != null )  {^322^^^^^320^327^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P2_Replace_Operator]^while  ( argIndex != 0 && formalArgPtr == null )  {^322^^^^^320^327^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P3_Replace_Literal]^while  ( argIndex != argIndex && formalArgPtr != null )  {^322^^^^^320^327^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^while  ( argIndex != 0 && next != null )  {^322^^^^^320^327^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^while  ( formalArgPtr != 0 && argIndex != null )  {^322^^^^^320^327^while  ( argIndex != 0 && formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^formalArgPtr = newVar.getNext (  ) ;^323^^^^^320^327^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^formalArgPtr = formalArgPtr.removeChild (  ) ;^323^^^^^320^327^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^formalArgPtr = formalArgPtr .getType (  )  ;^323^^^^^320^327^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^formalArgPtr = root.getNext (  ) ;^323^^^^^320^327^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^323^324^325^^^320^327^formalArgPtr = formalArgPtr.getNext (  ) ; argIndex--; }^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Node next = formalArgPtr.getNext (  ) ;formalArgPtr = formalArgPtr.getNext (  ) ;^323^^^^^320^327^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^formalArgPtr = node.getNext (  ) ;^323^^^^^320^327^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^formalArgPtr = value.getNext (  ) ;^323^^^^^320^327^formalArgPtr = formalArgPtr.getNext (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^return varName;^326^^^^^320^327^return formalArgPtr;^[CLASS] OptimizeParameters Parameter  [METHOD] getArgumentAtIndex [RETURN_TYPE] Node   Node firstArg int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P3_Replace_Literal]^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , " muode must be a function." ) ;^336^337^^^^335^346^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isFunction ( newVar ) , "Node must be a function." ) ;^336^337^^^^335^346^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isCall ( function ) , "Node must be a function." ) ;^336^337^^^^335^346^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil .isCall ( var )  , "Node must be a function." ) ;^336^337^^^^335^346^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^336^337^^^^335^346^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^336^337^^^^335^346^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call." ) ;Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^336^337^^^^335^346^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isFunction ( next ) , "Node must be a function." ) ;^336^337^^^^335^346^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node formalArgPtr = getArgumentAtIndex ( root.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  )  ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node formalArgPtr = getArgumentAtIndex ( argIndex.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , function ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node formalArgPtr = eliminateParamsAfter ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node formalArgPtr = getArgumentAtIndex ( function.removeChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .addChildrenToFront (  ) .getFirstChild (  ) , argIndex ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  )  .getType (  )  .getFirstChild (  ) , argIndex ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^Node formalArgPtr = getArgumentAtIndex ( value.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node formalArgPtr = getArgumentAtIndex ( node.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node formalArgPtr = getArgumentAtIndex ( function .getLastChild (  )  .getNext (  )^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^339^340^^342^343^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ; if  ( formalArgPtr != null )  { function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^339^340^^^^335^346^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^function.removeChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^340^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^function.getFirstChild (  ) .addChildrenToFront (  ) .getFirstChild (  ) , argIndex ) ;^340^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^function.getFirstChild (  )  .getType (  )  .getFirstChild (  ) , argIndex ) ;^340^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^function .getLastChild (  )  .getNext (  )^340^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^340^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^340^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^call.getFirstChild (  ) .getNext (  ) , argIndex ) ;function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^340^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^340^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^340^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P2_Replace_Operator]^if  ( formalArgPtr == null )  {^342^^^^^335^346^if  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^if  ( next != null )  {^342^^^^^335^346^if  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^if  ( paramName != true )  {^342^^^^^335^346^if  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P9_Replace_Statement]^if  ( paramName != null )  {^342^^^^^335^346^if  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P9_Replace_Statement]^if  ( nameGraph == null )  {^342^^^^^335^346^if  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P15_Unwrap_Block]^function.getFirstChild().getNext().removeChild(formalArgPtr);^342^343^344^^^335^346^if  ( formalArgPtr != null )  { function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P16_Remove_Block]^^342^343^344^^^335^346^if  ( formalArgPtr != null )  { function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^function.getFirstChild (  ) .getNext (  ) .removeChild ( node ) ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^function.getFirstChild (  ) .getNext (  )  .getFirstChild (  )  ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^function.getFirstChild (  ) .addChildrenToFront (  ) .removeChild ( formalArgPtr ) ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^function.removeChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^function .getLastChild (  )  .getNext (  ) .removeChild ( formalArgPtr ) ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^function.getFirstChild (  ) .addChildrenToFront (  ) .removeChild ( next ) ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^343^344^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^function.getLastChild (  ) .addChildrenToFront ( var ) ;function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^call.getFirstChild (  ) .getNext (  ) , argIndex ) ;function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P13_Insert_Block]^if  ( formalArgPtr != null )  {     function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ; }^343^^^^^335^346^[Delete]^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^function.getFirstChild (  )  .getType (  )  .removeChild ( formalArgPtr ) ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^function.getFirstChild (  ) .getNext (  ) .removeChild ( paramName ) ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^function.getFirstChild (  ) .getNext (  ) .removeChild ( next ) ;^343^^^^^335^346^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^return newVar;^345^^^^^335^346^return formalArgPtr;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^return varName;^345^^^^^335^346^return formalArgPtr;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateFunctionParamAt [RETURN_TYPE] Node   Node function int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P3_Replace_Literal]^Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call.b" ) ;^355^^^^^354^365^Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Preconditions.checkArgument ( isCallSite ( call ) , "Node must be a call." ) ;^355^^^^^354^365^Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^355^^^^^354^365^Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call." ) ;^355^^^^^354^365^Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call." ) ;^355^^^^^354^365^Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Preconditions.checkArgument ( isCallOrNew ( node ) , "Node must be a call." ) ;^355^^^^^354^365^Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call." ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node formalArgPtr = getArgumentAtIndex ( node.getFirstChild (  ) .getNext (  ) , argIndex ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  )  ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node formalArgPtr = getArgumentAtIndex ( argIndex.getFirstChild (  ) .getNext (  ) , call ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node formalArgPtr = eliminateParamsAfter ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .addChildrenToFront (  ) , argIndex ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node formalArgPtr = getArgumentAtIndex ( call.removeChild (  ) .getNext (  ) , argIndex ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^Node formalArgPtr = getArgumentAtIndex ( next.getFirstChild (  ) .getNext (  ) , argIndex ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^Node formalArgPtr = getArgumentAtIndex ( value.getFirstChild (  ) .getNext (  ) , argIndex ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  )  .getType (  )  , argIndex ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^Node formalArgPtr = getArgumentAtIndex ( newVar.getFirstChild (  ) .getNext (  ) , argIndex ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^call.getFirstChild (  ) .getNext (  ) , argIndex ) ;Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^357^358^^^^354^365^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^call.getFirstChild (  ) .addChildrenToFront (  ) , argIndex ) ;^358^^^^^354^365^call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^call.removeChild (  ) .getNext (  ) , argIndex ) ;^358^^^^^354^365^call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^358^^^^^354^365^call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^358^^^^^354^365^call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^358^^^^^354^365^call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^358^^^^^354^365^call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P11_Insert_Donor_Statement]^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^358^^^^^354^365^call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P2_Replace_Operator]^if  ( formalArgPtr == null )  {^360^^^^^354^365^if  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^if  ( next != null )  {^360^^^^^354^365^if  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^if  ( formalArgPtr != true )  {^360^^^^^354^365^if  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P9_Replace_Statement]^if  ( paramName != null )  {^360^^^^^354^365^if  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P9_Replace_Statement]^if  ( nameGraph == null )  {^360^^^^^354^365^if  ( formalArgPtr != null )  {^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P15_Unwrap_Block]^call.removeChild(formalArgPtr); compiler.reportCodeChange();^360^361^362^363^^354^365^if  ( formalArgPtr != null )  { call.removeChild ( formalArgPtr ) ; compiler.reportCodeChange (  ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P16_Remove_Block]^^360^361^362^363^^354^365^if  ( formalArgPtr != null )  { call.removeChild ( formalArgPtr ) ; compiler.reportCodeChange (  ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^call.removeChild ( next ) ;^361^^^^^354^365^call.removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P7_Replace_Invocation]^call .getFirstChild (  )  ;^361^^^^^354^365^call.removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^call.removeChild ( var ) ;^361^^^^^354^365^call.removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^361^362^363^^^354^365^call.removeChild ( formalArgPtr ) ; compiler.reportCodeChange (  ) ; }^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P14_Delete_Statement]^^362^^^^^354^365^compiler.reportCodeChange (  ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^call.removeChild ( paramName ) ;^361^^^^^354^365^call.removeChild ( formalArgPtr ) ;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P5_Replace_Variable]^return next;^364^^^^^354^365^return formalArgPtr;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^return paramName;^364^^^^^354^365^return formalArgPtr;^[CLASS] OptimizeParameters Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^private  Node arg;^245^^^^^240^250^private final Node arg;^[CLASS] Parameter  [METHOD] eliminateCallParamAt [RETURN_TYPE] Node   Node call int argIndex [VARIABLES] AbstractCompiler  compiler  boolean  firstCall  paramRemoved  shouldRemove  value  NameReferenceGraph  nameGraph  int  argIndex  Node  arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName  
[P8_Replace_Mix]^this.shouldRemove =  null;^249^^^^^248^251^this.shouldRemove = shouldRemove;^[CLASS] Parameter  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node arg boolean shouldRemove [VARIABLES] boolean  shouldRemove  Node  arg  
[P11_Insert_Donor_Statement]^shouldRemove = value;this.shouldRemove = shouldRemove;^249^^^^^248^251^this.shouldRemove = shouldRemove;^[CLASS] Parameter  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node arg boolean shouldRemove [VARIABLES] boolean  shouldRemove  Node  arg  
[P8_Replace_Mix]^this.arg =  null;^250^^^^^248^251^this.arg = arg;^[CLASS] Parameter  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node arg boolean shouldRemove [VARIABLES] boolean  shouldRemove  Node  arg  
[P5_Replace_Variable]^shouldRemove = shouldRemove;^262^^^^^261^263^shouldRemove = value;^[CLASS] Parameter  [METHOD] setShouldRemove [RETURN_TYPE] void   boolean value [VARIABLES] boolean  shouldRemove  value  Node  arg  
[P8_Replace_Mix]^shouldRemove =  null;^262^^^^^261^263^shouldRemove = value;^[CLASS] Parameter  [METHOD] setShouldRemove [RETURN_TYPE] void   boolean value [VARIABLES] boolean  shouldRemove  value  Node  arg  
[P11_Insert_Donor_Statement]^this.shouldRemove = shouldRemove;shouldRemove = value;^262^^^^^261^263^shouldRemove = value;^[CLASS] Parameter  [METHOD] setShouldRemove [RETURN_TYPE] void   boolean value [VARIABLES] boolean  shouldRemove  value  Node  arg  
