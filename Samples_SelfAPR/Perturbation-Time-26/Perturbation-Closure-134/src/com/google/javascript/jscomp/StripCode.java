[P8_Replace_Mix]^private  Set<String> stripTypes;^50^^^^^45^55^private final Set<String> stripTypes;^[CLASS] StripCode Strip   [VARIABLES] 
[P8_Replace_Mix]^private  Set<String> stripNameSuffixes;^51^^^^^46^56^private final Set<String> stripNameSuffixes;^[CLASS] StripCode Strip   [VARIABLES] 
[P8_Replace_Mix]^private  Set<String> stripTypePrefixes;^52^^^^^47^57^private final Set<String> stripTypePrefixes;^[CLASS] StripCode Strip   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType STRIP_TYPE_INHERIT_ERROR = DiagnosticType.error ( "JSC_STRIP_TYPE_INHESC_STRIP_TYPE_INHERIT_ERROR", "Non-strip type {0} cannot inherit from strip type {1}" ) ;^56^57^58^^^56^58^static final DiagnosticType STRIP_TYPE_INHERIT_ERROR = DiagnosticType.error ( "JSC_STRIP_TYPE_INHERIT_ERROR", "Non-strip type {0} cannot inherit from strip type {1}" ) ;^[CLASS] StripCode Strip   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType STRIP_TYPE_INHERIT_ERROR = DiagnosticType.error ( "JSC_STRIP_TYPE_INHERIT_ERROR", "cannot inherit from st" ) ;^56^57^58^^^56^58^static final DiagnosticType STRIP_TYPE_INHERIT_ERROR = DiagnosticType.error ( "JSC_STRIP_TYPE_INHERIT_ERROR", "Non-strip type {0} cannot inherit from strip type {1}" ) ;^[CLASS] StripCode Strip   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType STRIP_TYPE_INHERIT_ERROR ;^56^57^58^^^56^58^static final DiagnosticType STRIP_TYPE_INHERIT_ERROR = DiagnosticType.error ( "JSC_STRIP_TYPE_INHERIT_ERROR", "Non-strip type {0} cannot inherit from strip type {1}" ) ;^[CLASS] StripCode Strip   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^71^^^^^65^77^this.compiler = compiler;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P8_Replace_Mix]^this.stripTypes =  null;^72^^^^^65^77^this.stripTypes = stripTypes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^this.stripNamePrefixes = stripNamePrefixes;this.stripTypes = stripTypes;^72^^^^^65^77^this.stripTypes = stripTypes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^this.stripTypePrefixes = stripTypePrefixes;this.stripTypes = stripTypes;^72^^^^^65^77^this.stripTypes = stripTypes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^this.stripNameSuffixes = stripNameSuffixes;this.stripTypes = stripTypes;^72^^^^^65^77^this.stripTypes = stripTypes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P8_Replace_Mix]^this.stripNameSuffixes =  null;^73^^^^^65^77^this.stripNameSuffixes = stripNameSuffixes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^this.stripTypes = stripTypes;this.stripNameSuffixes = stripNameSuffixes;^73^^^^^65^77^this.stripNameSuffixes = stripNameSuffixes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^this.stripNamePrefixes = stripNamePrefixes;this.stripNameSuffixes = stripNameSuffixes;^73^^^^^65^77^this.stripNameSuffixes = stripNameSuffixes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^this.stripTypePrefixes = stripTypePrefixes;this.stripNameSuffixes = stripNameSuffixes;^73^^^^^65^77^this.stripNameSuffixes = stripNameSuffixes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P8_Replace_Mix]^this.stripTypePrefixes =  null;^74^^^^^65^77^this.stripTypePrefixes = stripTypePrefixes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^this.stripTypes = stripTypes;this.stripTypePrefixes = stripTypePrefixes;^74^^^^^65^77^this.stripTypePrefixes = stripTypePrefixes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^this.stripNamePrefixes = stripNamePrefixes;this.stripTypePrefixes = stripTypePrefixes;^74^^^^^65^77^this.stripTypePrefixes = stripTypePrefixes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^this.stripNameSuffixes = stripNameSuffixes;this.stripTypePrefixes = stripTypePrefixes;^74^^^^^65^77^this.stripTypePrefixes = stripTypePrefixes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P8_Replace_Mix]^this.stripNamePrefixes =  null;^75^^^^^65^77^this.stripNamePrefixes = stripNamePrefixes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^this.stripTypes = stripTypes;this.stripNamePrefixes = stripNamePrefixes;^75^^^^^65^77^this.stripNamePrefixes = stripNamePrefixes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^this.stripTypePrefixes = stripTypePrefixes;this.stripNamePrefixes = stripNamePrefixes;^75^^^^^65^77^this.stripNamePrefixes = stripNamePrefixes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^this.stripNameSuffixes = stripNameSuffixes;this.stripNamePrefixes = stripNamePrefixes;^75^^^^^65^77^this.stripNamePrefixes = stripNamePrefixes;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P8_Replace_Mix]^this.varsToRemove  = null ;^76^^^^^65^77^this.varsToRemove = Sets.newHashSet (  ) ;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P14_Delete_Statement]^^76^^^^^65^77^this.varsToRemove = Sets.newHashSet (  ) ;^[CLASS] StripCode Strip  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new Strip (  )  ) ;^83^^^^^82^84^NodeTraversal.traverse ( compiler, root, new Strip (  )  ) ;^[CLASS] StripCode Strip  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new Strip (  )  ) ;^83^^^^^82^84^NodeTraversal.traverse ( compiler, root, new Strip (  )  ) ;^[CLASS] StripCode Strip  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new Strip (  )  ) ;^83^^^^^82^84^NodeTraversal.traverse ( compiler, root, new Strip (  )  ) ;^[CLASS] StripCode Strip  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  externs  root  
[P8_Replace_Mix]^NodeTraversal.traverse ( compiler, externs, new Strip (  )  ) ;^83^^^^^82^84^NodeTraversal.traverse ( compiler, root, new Strip (  )  ) ;^[CLASS] StripCode Strip  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  externs  root  
[P14_Delete_Statement]^^83^^^^^82^84^NodeTraversal.traverse ( compiler, root, new Strip (  )  ) ;^[CLASS] StripCode Strip  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  externs  root  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^97^^^^^82^112^switch  ( n.getType (  )  )  {^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P7_Replace_Invocation]^switch  ( n.removeChild (  )  )  {^97^^^^^82^112^switch  ( n.getType (  )  )  {^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P14_Delete_Statement]^^97^98^99^^^82^112^switch  ( n.getType (  )  )  { case Token.VAR: removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^removeVarDeclarationsByNameOrRvalue (  n, parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^removeVarDeclarationsByNameOrRvalue ( t,  parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^removeVarDeclarationsByNameOrRvalue ( t, n ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^removeVarDeclarationsByNameOrRvalue ( n, t, parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^removeVarDeclarationsByNameOrRvalue ( t, parent, n ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P7_Replace_Invocation]^isMethodCallThatTriggersRemoval ( t, n, parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P14_Delete_Statement]^^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveReferenceToRemovedVariable (  n, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveReferenceToRemovedVariable ( t,  parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveReferenceToRemovedVariable ( t, n ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveReferenceToRemovedVariable ( parent, n, t ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveReferenceToRemovedVariable ( t, parent, n ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P7_Replace_Invocation]^maybeRemoveCall ( t, n, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P14_Delete_Statement]^^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeEliminateExpressionByName ( t, n, parent ) ;maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeRemoveCall ( t, n, parent ) ;maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P12_Insert_Condition]^if  ( isReferenceToRemovedVar ( t, n )  )  { maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ; break; }^103^104^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ; break;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateAssignmentByLvalueName (  n, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateAssignmentByLvalueName ( t,  parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateAssignmentByLvalueName ( t, n ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateAssignmentByLvalueName ( parent, n, t ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateAssignmentByLvalueName ( n, t, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateAssignmentByLvalueName ( t, parent, n ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P7_Replace_Invocation]^maybeEliminateExpressionByName ( t, n, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P8_Replace_Mix]^maybeEliminateAssignmentByLvalueName ( t, n, n ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P14_Delete_Statement]^^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeEliminateExpressionByName ( t, n, parent ) ;maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeRemoveCall ( t, n, parent ) ;maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveCall ( t, parent, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveCall ( t, n, n ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveCall (  n, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveCall ( t,  parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveCall ( t, n ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveCall ( parent, n, t ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveCall ( n, t, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P7_Replace_Invocation]^visit ( t, n, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P8_Replace_Mix]^visit ( t, n, n ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P14_Delete_Statement]^^122^123^^^^107^137^maybeRemoveCall ( t, n, parent ) ; break;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeEliminateExpressionByName ( t, n, parent ) ;maybeRemoveCall ( t, n, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;maybeRemoveCall ( t, n, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;maybeRemoveCall ( t, n, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;maybeRemoveCall ( t, n, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^eliminateKeysWithStripNamesFromObjLit ( t, parent ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^eliminateKeysWithStripNamesFromObjLit (  n ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^eliminateKeysWithStripNamesFromObjLit ( t ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^eliminateKeysWithStripNamesFromObjLit ( n, t ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P7_Replace_Invocation]^isReferenceToRemovedVar ( t, n ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P8_Replace_Mix]^isReferenceToRemovedVar ( t, parent ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P14_Delete_Statement]^^126^127^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ; break;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateExpressionByName (  n, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateExpressionByName ( t,  parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateExpressionByName ( t, n ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateExpressionByName ( parent, n, t ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateExpressionByName ( t, parent, n ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P7_Replace_Invocation]^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P14_Delete_Statement]^^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;maybeEliminateExpressionByName ( t, n, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;maybeEliminateExpressionByName ( t, n, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeRemoveCall ( t, n, parent ) ;maybeEliminateExpressionByName ( t, n, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] StripCode Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P2_Replace_Operator]^if  ( isStripName ( name )  && isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( parent.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^if  ( isStripName ( parentame )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^if  ( isStripName ( nameNodeame )  || isCallWhoseReturnValueShouldBeStripped ( n.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P6_Replace_Expression]^if  ( isStripName ( name )  ) {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P6_Replace_Expression]^if  (  isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^if  ( qualifiedNameBeginsWithStripType ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^if  ( isStripName ( name )  || qualifiedNameBeginsWithStripType ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.removeChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Scope scope = t.getScope (  ) ;^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Scope scope = t.getScope (  ) ;^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Scope scope = t.getScope (  ) ;^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Scope scope = t.getScope (  ) ;^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Scope scope = t.getScope (  ) ;^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^Scope scope = t .report ( nameNode , STRIP_TYPE_INHERIT_ERROR )  ;^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^varsToRemove.add ( name.getVar ( scope )  ) ;^153^^^^^144^163^varsToRemove.add ( scope.getVar ( name )  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^153^^^^^144^163^varsToRemove.add ( scope.getVar ( name )  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^Scope.Var var = scope.getVar ( name ) ;varsToRemove.add ( scope.getVar ( name )  ) ;^153^^^^^144^163^varsToRemove.add ( scope.getVar ( name )  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^n.removeChild ( parentameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^n.removeChild ( parent ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^n.removeChild ( nameNodeameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^n.removeChild ( n ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^n.replaceChild ( nameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^n .removeChild ( nameNode )  ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^154^155^^^^144^163^n.removeChild ( nameNode ) ; compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^n.removeChild ( key ) ;n.removeChild ( nameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;n.removeChild ( nameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;n.removeChild ( nameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^parent.removeChild ( rvalue ) ;n.removeChild ( nameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^155^^^^^144^163^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^155^^^^^144^163^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P2_Replace_Operator]^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode == null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^for  ( Node parent = n.getFirstChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^for  ( Node nameNode = n.removeChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode .getLastChild (  )   )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^152^153^^^^144^163^Scope scope = t.getScope (  ) ; varsToRemove.add ( scope.getVar ( name )  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^153^154^^^^144^163^varsToRemove.add ( scope.getVar ( name )  ) ; n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P1_Replace_Type]^char name = nameNode.getchar (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^String name = parent.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^String name = nameNode.removeChild (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^int type = ancestor.getType (  ) ;String name = nameNode.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^String lcName = name.toLowerCase (  ) ;String name = nameNode.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = nameNode.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;String name = nameNode.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String name = nameNode.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^Scope scope = t .report ( n , STRIP_TYPE_INHERIT_ERROR )  ;^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^isStripName ( propNode.getString (  )  ) ;String name = nameNode.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^qualifiedNameBeginsWithStripType ( nameNode.getFirstChild (  )  )  )  {^150^^^^^144^163^isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^isCallWhoseReturnValueShouldBeStripped ( nameNode.removeChild (  )  )  )  {^150^^^^^144^163^isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^150^151^152^^^144^163^isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {  Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^isCallWhoseReturnValueShouldBeStripped ( parent.getFirstChild (  )  )  )  {^150^^^^^144^163^isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^Scope scope = t .report ( parent , STRIP_TYPE_INHERIT_ERROR )  ;^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P8_Replace_Mix]^n.replaceChild ( parentameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^nameNode = parent.getNext (  )  )  {^147^^^^^144^163^nameNode = nameNode.getNext (  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^nameNode = nameNode.removeChild (  )  )  {^147^^^^^144^163^nameNode = nameNode.getNext (  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^for  ( Node parentameNode = n.getFirstChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P8_Replace_Mix]^for  ( Node nameNode = n .getLastChild (  )  ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^nameNode = nameNode .getParent (  )   )  {^147^^^^^144^163^nameNode = nameNode.getNext (  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P8_Replace_Mix]^nameNode = parent.removeChild (  )  )  {^147^^^^^144^163^nameNode = nameNode.getNext (  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^147^148^^^^144^163^nameNode = nameNode.getNext (  )  )  { String name = nameNode.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^isCallWhoseReturnValueShouldBeStripped ( nameNode .getLastChild (  )   )  )  {^150^^^^^144^163^isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^if  ( !n.hasChildrenameNode (  )  )  {^158^^^^^144^163^if  ( !n.hasChildren (  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^if  ( !n.removeChild (  )  )  {^158^^^^^144^163^if  ( !n.hasChildren (  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P15_Unwrap_Block]^replaceWithEmpty(n, parent); compiler.reportCodeChange();^158^159^160^161^162^144^163^if  ( !n.hasChildren (  )  )  {  replaceWithEmpty ( n, parent ) ; compiler.reportCodeChange (  ) ; }^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P16_Remove_Block]^^158^159^160^161^162^144^163^if  ( !n.hasChildren (  )  )  {  replaceWithEmpty ( n, parent ) ; compiler.reportCodeChange (  ) ; }^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P13_Insert_Block]^if  ( isReferenceToRemovedVar ( t, n )  )  {     replaceWithNull ( n, parent ) ;     compiler.reportCodeChange (  ) ; }^158^^^^^144^163^[Delete]^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^replaceWithEmpty ( nameNode, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^replaceWithEmpty (  parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^replaceWithEmpty ( n ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^replaceWithEmpty ( parent, n ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^replaceWithNull ( n, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P8_Replace_Mix]^replaceWithNull ( n, nameNode ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^160^161^^^^144^163^replaceWithEmpty ( n, parent ) ; compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithEmpty ( n, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithEmpty ( n, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithEmpty ( n, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( n, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^161^^^^^144^163^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^161^^^^^144^163^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^if  ( !n.hasChildreparent (  )  )  {^158^^^^^144^163^if  ( !n.hasChildren (  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^if  ( !n .getLastChild (  )   )  {^158^^^^^144^163^if  ( !n.hasChildren (  )  )  {^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^replaceWithEmpty ( n, nameNode ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  nameNode  parent  String  name  
[P3_Replace_Literal]^while  ( false )  {^195^^^^^180^210^while  ( true )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( ancParent )   )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( rvalue )  )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node ancParent = ancestor.getParent(); replaceWithEmpty(ancestor, ancParent); break;^196^197^198^199^200^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {  Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ; break; }^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P16_Remove_Block]^^196^197^198^199^200^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {  Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ; break; }^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P13_Insert_Block]^if  ( isExpressionNode ( parent )  )  {     Node gramps = parent.getParent (  ) ;     replaceWithEmpty ( parent, gramps ) ; }else {     replaceWithEmpty ( n, parent ) ; }^196^^^^^181^211^[Delete]^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node ancParent = ancestor.removeChild (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node ancParent = ancestor .getNext (  )  ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node ancParent = rvalue.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^int type = ancestor.getType (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node ancParent = n.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node ancParent = n .getNext (  )  ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^198^199^^^^183^213^Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( rvalue, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( ancestor, parent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty (  ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( ancestor ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( ancParent, ancestor ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^replaceWithNull ( ancestor, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( ancestorChild, ancestor ) ;replaceWithEmpty ( ancestor, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithEmpty ( ancestor, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithEmpty ( ancestor, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithEmpty ( ancestor, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( ancestor, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( type != Token.GETPROP || type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( type <= Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( type == Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( type > Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( type != Token.GETPROP ) {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  (  type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( (type != GETPROP && type != GETELEM) )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( type != GETPROP )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( type != GETELEM )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( type != CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P15_Unwrap_Block]^replaceWithNull(ancestorChild, ancestor); break;^203^204^205^206^207^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P16_Remove_Block]^^203^204^205^206^207^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( rvalue, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( rvalueChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull (  ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChild ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( ancestor, ancestorChild ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChildChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^replaceWithEmpty ( ancestorChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^206^207^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ; break;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^ancestorChild =  parent;^209^^^^^194^224^ancestorChild = ancestor;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^ancestor = rvalue.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^ancestor = ancestor.removeChild (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^ancestor = ancestor .getNext (  )  ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node ancParent = rvalue.removeChild (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P1_Replace_Type]^short  type = ancestor.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^int type = rvalue.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^int type = ancestor.removeChild (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^int type = ancestor .getString (  )  ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;int type = ancestor.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;int type = ancestor.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( n )  )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node ancParent = parent.removeChild (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( parent, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithEmpty ( ancestor, rvalue ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^int type = n.removeChild (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;int type = ancestor.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( rvalue, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( parentChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull (  ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChild ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( ancestor, ancestorChild ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChildChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^replaceWithEmpty ( ancestorChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithEmpty ( rvalue, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^206^207^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ; break;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^ancestor = parent.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^ancestor = n.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^int type = ancestor.getType (  ) ;ancestor = ancestor.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;ancestor = ancestor.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;ancestor = ancestor.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;ancestor = ancestor.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( parent.getFirstChild (  )  == n || isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( parent.getFirstChild (  )  >= n && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( rvalue.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( parent.getFirstChild (  )  == rvalue && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar (  n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( n.getFirstChild (  )  == parent && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  )  == n ) {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  (  isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( (type != GETPROP) && (type != GETELEM) && type != CALL )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( (type != GETPROP && type != GETELEM) )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( type != GETPROP )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( type != GETELEM )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( type != CALL )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( parent.removeChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( parent .getLastChild (  )   == n && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( parent.getFirstChild (  )  == n && actsOnStripType ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( parent.getFirstChild (  )  == parent ) {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^199^200^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ; break;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( type >= Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( parent, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( parentChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^ancestorChild = n;^209^^^^^194^224^ancestorChild = ancestor;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^ancestorChild =  null;^209^^^^^194^224^ancestorChild = ancestor;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node ancParent = parent.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^int type = parent.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^int type = n.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( rvalueChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^ancestor = rvalue.removeChild (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( rvalue )   )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithNull ( rvalue, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( type != Token.null && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithEmpty ( parentChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^ancestorChild =  rvalue;^209^^^^^194^224^ancestorChild = ancestor;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node ancestor = n.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node ancestor = parent.removeChild (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node ancestor = rvalue.removeChild (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestorChild = parent;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node ancestorChild = rvalue;^194^^^^^179^209^Node ancestorChild = parent;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node ancestorChild = n;^194^^^^^179^209^Node ancestorChild = parent;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node ancestorChild = parent;^194^^^^^179^209^Node ancestorChild = parent;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestorChild = n;Node ancestorChild = parent;^194^^^^^179^209^Node ancestorChild = parent;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent;Node ancestorChild = parent;^194^^^^^179^209^Node ancestorChild = parent;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P1_Replace_Type]^long  type = ancestor.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node ancestor = rvalue.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node ancestor = parent .getNext (  )  ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node ancestor = n.removeChild (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( greatGramps )   )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^212^^^^^197^227^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^212^^^^^197^227^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node ancParent = n.removeChild (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar ( t, parent )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar (  n )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar ( t )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( actsOnStripType ( t, n )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( isReferenceToRemovedVar ( t, rvalue )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( parent.getFirstChild (  )  <= n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( rvalue.getFirstChild (  )  == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( parent.getFirstChild (  )  == rvalue )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( parent.removeChild (  )  == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( parent .getLastChild (  )   == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P9_Replace_Statement]^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( rvalue, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( n, rvalue ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull (  parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( n ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( parent, n ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^replaceWithEmpty ( n, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithEmpty ( n, rvalue ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( ancestorChild, ancestor ) ;replaceWithNull ( n, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( n, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithNull ( n, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithNull ( n, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^maybeRemoveCall ( t, n, parent ) ;replaceWithNull ( n, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithNull ( n, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^246^^^^^229^247^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^246^^^^^229^247^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( rvalue )  )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( greatGramps )   )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node rvalue = n.removeChild (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node rvalue = greatGramps.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node function = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node expression = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node rvalue = rvalue.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^238^239^^^^231^242^Node rvalue = n.getNext (  ) ; parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^parent.removeChild ( n ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^parent.replaceChild ( rvalue ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^parent .removeChild ( parent )  ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^parent.replaceChild ( greatGramps ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^239^240^^^^231^242^parent.removeChild ( rvalue ) ; gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( key ) ;parent.removeChild ( rvalue ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;parent.removeChild ( rvalue ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( nameNode ) ;parent.removeChild ( rvalue ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;parent.removeChild ( rvalue ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, rvalue ) ;parent.removeChild ( rvalue ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( n, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent, parent ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild (  rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( rvalue, parent ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;gramps.replaceChild ( parent, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;gramps.replaceChild ( parent, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^parent.removeChild ( rvalue ) ;gramps.replaceChild ( parent, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^241^^^^^231^242^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^241^^^^^231^242^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node greatGramps = parent.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node greatGramps = gramps.removeChild (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node greatGramps = rvalue.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node greatGramps = gramps.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node greatGramps = gramps.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node greatGramps = gramps.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node greatGramps = gramps.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node greatGramps = gramps.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node greatGramps = gramps.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( gramps, parent ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty (  greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( gramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( greatGramps, gramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^replaceWithNull ( gramps, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithEmpty ( gramps, rvalue ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithEmpty ( gramps, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithEmpty ( gramps, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithEmpty ( gramps, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( gramps, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^235^^^^^220^250^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^235^^^^^220^250^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node gramps = rvalue.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node gramps = parent.removeChild (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node greatGramps = gramps .getNext (  )  ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node rvalue = greatGramps.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node rvalue = n.removeChild (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node function = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node expression = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node gramps = parent .getNext (  )  ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node gramps = greatGramps.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node greatGramps = n.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( parent, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithNull ( gramps, rvalue ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^234^235^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ; compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node rvalue = parent.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node rvalue = n .getParent (  )  ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node rvalue = rvalue.removeChild (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^238^239^^^^223^253^Node rvalue = n.getNext (  ) ; parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^parent.removeChild ( n ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^parent.replaceChild ( rvalue ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^parent .removeChild ( gramps )  ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^parent.removeChild ( greatGramps ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( key ) ;parent.removeChild ( rvalue ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;parent.removeChild ( rvalue ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( nameNode ) ;parent.removeChild ( rvalue ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;parent.removeChild ( rvalue ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, rvalue ) ;parent.removeChild ( rvalue ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( greatGramps, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent, n ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild (  rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^gramps.replaceChild ( parent, parent ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;gramps.replaceChild ( parent, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;gramps.replaceChild ( parent, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^parent.removeChild ( rvalue ) ;gramps.replaceChild ( parent, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^241^^^^^226^256^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^241^^^^^226^256^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( ancParent )   )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node rvalue = parent.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node rvalue = parent.removeChild (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node rvalue = n .getParent (  )  ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( rvalue, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^240^241^^^^231^242^gramps.replaceChild ( parent, rvalue ) ; compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node greatGramps = rvalue.removeChild (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^233^234^^^^218^248^Node greatGramps = gramps.getParent (  ) ; replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( rvalue, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node gramps = rvalue.removeChild (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node rvalue = parent.removeChild (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( greatGramps.getFirstChild (  )  == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( n )  )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^parent.replaceChild ( n ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^239^240^^^^224^254^parent.removeChild ( rvalue ) ; gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( rvalue, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent, greatGramps ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( rvalue, parent ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^gramps .removeChild ( n )  ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^240^241^^^^225^255^gramps.replaceChild ( parent, rvalue ) ; compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( rvalue, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( n, rvalue ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull (  parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( n ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( parent, n ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^replaceWithEmpty ( n, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^245^246^^^^230^260^replaceWithNull ( n, parent ) ; compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( ancestorChild, ancestor ) ;replaceWithNull ( n, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( n, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithNull ( n, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithNull ( n, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^maybeRemoveCall ( t, n, parent ) ;replaceWithNull ( n, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithNull ( n, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^246^^^^^231^261^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^246^^^^^231^261^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( parent.getFirstChild (  )  != n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( n.getFirstChild (  )  == parent )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( n.removeChild (  )  == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( n, greatGramps ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( rvalue )   )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node rvalue = parent .getParent (  )  ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^parent.removeChild ( greatGramps ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^gramps .removeChild ( n )  ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node rvalue = rvalue.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^gramps .removeChild ( greatGramps )  ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^gramps.replaceChild ( n, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( ancestorChild )   )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node rvalue = rvalue .getParent (  )  ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^parent .removeChild ( ancestorChild )  ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent, n ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar ( t, rvalue )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar (  n )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar ( t )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar ( n, t )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( actsOnStripType ( t, n )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P15_Unwrap_Block]^replaceWithNull(n, parent); compiler.reportCodeChange();^252^253^254^255^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  { replaceWithNull ( n, parent ) ; compiler.reportCodeChange (  ) ; }^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P16_Remove_Block]^^252^253^254^255^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  { replaceWithNull ( n, parent ) ; compiler.reportCodeChange (  ) ; }^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P13_Insert_Block]^if  ( ! ( n.hasChildren (  )  )  )  {     replaceWithEmpty ( n, parent ) ;     compiler.reportCodeChange (  ) ; }^252^^^^^237^267^[Delete]^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( greatGramps, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( n, rvalue ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull (  parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( n ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( parent, n ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^replaceWithEmpty ( n, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithNull ( rvalue, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^253^254^^^^238^268^replaceWithNull ( n, parent ) ; compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( ancestorChild, ancestor ) ;replaceWithNull ( n, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( n, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithNull ( n, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithNull ( n, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^maybeRemoveCall ( t, n, parent ) ;replaceWithNull ( n, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithNull ( n, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^254^^^^^239^269^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^254^^^^^239^269^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node gramps = n.removeChild (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node greatGramps = parent.removeChild (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^switch  ( rvalue.getType (  )  )  {^174^^^^^159^189^switch  ( parent.getType (  )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^switch  ( parent.removeChild (  )  )  {^174^^^^^159^189^switch  ( parent.getType (  )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^switch  ( parent .getString (  )   )  {^174^^^^^159^189^switch  ( parent.getType (  )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^switch  ( greatGramps.getType (  )  )  {^174^^^^^159^189^switch  ( parent.getType (  )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( parent.getFirstChild (  )  == greatGramps && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( parent.getFirstChild (  )  == t && isReferenceToRemovedVar ( n, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^int type = parent.removeChild (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithEmpty ( rvalueChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar ( n, t )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( isReferenceToRemovedVar ( t, greatGramps )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( n.getFirstChild (  )  == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node gramps = n.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( greatGramps, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( actsOnStripType ( t, rvalue )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node lvalue = parent.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^Node lvalue = n.removeChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P8_Replace_Mix]^Node lvalue = parent.removeChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node function = n.getFirstChild (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node expression = n.getFirstChild (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P8_Replace_Mix]^Node lvalue = parent .getLastChild (  )  ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P14_Delete_Statement]^^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P2_Replace_Operator]^if  ( nameEndsWithFieldNameToStrip ( lvalue )  && qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^if  ( nameEndsWithFieldNameToStrip ( parent )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^if  ( parentameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^if  ( lvalueameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P6_Replace_Expression]^if  ( nameEndsWithFieldNameToStrip ( lvalue )  ) {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P6_Replace_Expression]^if  (  qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^if  ( qualifiedNameBeginsWithStripType ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || nameEndsWithFieldNameToStrip ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P8_Replace_Mix]^if  ( parentameEndsWithFieldNameToStrip ( lvalue )  || nameEndsWithFieldNameToStrip ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P9_Replace_Statement]^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P13_Insert_Block]^if  (  ( nameEndsWithFieldNameToStrip ( expression )  )  ||  ( qualifiedNameBeginsWithStripType ( expression )  )  )  {     if  ( isExpressionNode ( parent )  )  {         Node gramps = parent.getParent (  ) ;         replaceWithEmpty ( parent, gramps ) ;     }else {         replaceWithEmpty ( n, parent ) ;     }     compiler.reportCodeChange (  ) ; }^275^^^^^269^285^[Delete]^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P13_Insert_Block]^if  ( isExpressionNode ( parent )  )  {     Node gramps = parent.getParent (  ) ;     replaceWithEmpty ( parent, gramps ) ; }else {     replaceWithEmpty ( n, parent ) ; }^275^^^^^269^285^[Delete]^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( n )  )  {^277^^^^^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( lvalue )   )  {^277^^^^^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^277^^^^^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^277^^^^^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node gramps = parent.getParent(); replaceWithEmpty(parent, gramps);^277^278^279^280^281^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  { Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ; } else { replaceWithEmpty ( n, parent ) ; }^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P16_Remove_Block]^^277^278^279^280^281^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  { Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ; } else { replaceWithEmpty ( n, parent ) ; }^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P13_Insert_Block]^if  (  ( nameEndsWithFieldNameToStrip ( lvalue )  )  ||  ( qualifiedNameBeginsWithStripType ( lvalue )  )  )  {     if  ( isExpressionNode ( parent )  )  {         Node gramps = parent.getParent (  ) ;         replaceWithEmpty ( parent, gramps ) ;     }else {         replaceWithEmpty ( n, parent ) ;     }     compiler.reportCodeChange (  ) ; }^277^^^^^269^285^[Delete]^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P13_Insert_Block]^if  (  ( nameEndsWithFieldNameToStrip ( expression )  )  ||  ( qualifiedNameBeginsWithStripType ( expression )  )  )  {     if  ( isExpressionNode ( parent )  )  {         Node gramps = parent.getParent (  ) ;         replaceWithEmpty ( parent, gramps ) ;     }else {         replaceWithEmpty ( n, parent ) ;     }     compiler.reportCodeChange (  ) ; }^277^^^^^269^285^[Delete]^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P13_Insert_Block]^if  ( isExpressionNode ( ancestor )  )  {     Node ancParent = ancestor.getParent (  ) ;     replaceWithEmpty ( ancestor, ancParent ) ;     break; }^277^^^^^269^285^[Delete]^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( lvalue, parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( n, lvalue ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty (  parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( n ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( parent, n ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^replaceWithNull ( n, parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P8_Replace_Mix]^replaceWithNull ( n, lvalue ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P14_Delete_Statement]^^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithEmpty ( n, parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithEmpty ( n, parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithEmpty ( n, parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( n, parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^Node gramps = n.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^Node gramps = parent.removeChild (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P14_Delete_Statement]^^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( parent, n ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty (  gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( parent ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( gramps, parent ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^replaceWithNull ( parent, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P14_Delete_Statement]^^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithEmpty ( parent, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithEmpty ( parent, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithEmpty ( parent, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( parent, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P8_Replace_Mix]^Node gramps = n.removeChild (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( n )   )  {^277^^^^^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( n, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^283^^^^^269^285^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P14_Delete_Statement]^^283^^^^^269^285^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^Node gramps = parent .getNext (  )  ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^qualifiedNameBeginsWithStripType ( parent )  )  {^276^^^^^269^285^qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^nameEndsWithFieldNameToStrip ( lvalue )  )  {^276^^^^^269^285^qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P8_Replace_Mix]^nameEndsWithFieldNameToStrip ( parent )  )  {^276^^^^^269^285^qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P8_Replace_Mix]^Node gramps = n .getNext (  )  ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P8_Replace_Mix]^replaceWithNull ( parent, n ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^Node expression = parent.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^Node expression = n.removeChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^Node expression = n .getLastChild (  )  ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node expression = n.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node function = n.getFirstChild (  ) ;Node expression = n.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node expression = n.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node expression = n.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node expression = n.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node expression = n.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P14_Delete_Statement]^^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P2_Replace_Operator]^if  ( nameEndsWithFieldNameToStrip ( expression )  && qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^if  ( nameEndsWithFieldNameToStrip ( parent )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^if  ( parentameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^if  ( expressionameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P6_Replace_Expression]^if  ( nameEndsWithFieldNameToStrip ( expression )  ) {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P6_Replace_Expression]^if  (  qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^if  ( qualifiedNameBeginsWithStripType ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^if  ( nameEndsWithFieldNameToStrip ( expression )  || nameEndsWithFieldNameToStrip ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P9_Replace_Statement]^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P13_Insert_Block]^if  (  ( nameEndsWithFieldNameToStrip ( lvalue )  )  ||  ( qualifiedNameBeginsWithStripType ( lvalue )  )  )  {     if  ( isExpressionNode ( parent )  )  {         Node gramps = parent.getParent (  ) ;         replaceWithEmpty ( parent, gramps ) ;     }else {         replaceWithEmpty ( n, parent ) ;     }     compiler.reportCodeChange (  ) ; }^304^^^^^299^314^[Delete]^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P13_Insert_Block]^if  ( isExpressionNode ( parent )  )  {     Node gramps = parent.getParent (  ) ;     replaceWithEmpty ( parent, gramps ) ; }else {     replaceWithEmpty ( n, parent ) ; }^304^^^^^299^314^[Delete]^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( n )  )  {^306^^^^^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^306^^^^^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^306^^^^^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node gramps = parent.getParent(); replaceWithEmpty(parent, gramps);^306^307^308^309^310^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  { Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ; } else { replaceWithEmpty ( n, parent ) ; }^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P16_Remove_Block]^^306^307^308^309^310^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  { Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ; } else { replaceWithEmpty ( n, parent ) ; }^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P13_Insert_Block]^if  (  ( nameEndsWithFieldNameToStrip ( lvalue )  )  ||  ( qualifiedNameBeginsWithStripType ( lvalue )  )  )  {     if  ( isExpressionNode ( parent )  )  {         Node gramps = parent.getParent (  ) ;         replaceWithEmpty ( parent, gramps ) ;     }else {         replaceWithEmpty ( n, parent ) ;     }     compiler.reportCodeChange (  ) ; }^306^^^^^299^314^[Delete]^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P13_Insert_Block]^if  (  ( nameEndsWithFieldNameToStrip ( expression )  )  ||  ( qualifiedNameBeginsWithStripType ( expression )  )  )  {     if  ( isExpressionNode ( parent )  )  {         Node gramps = parent.getParent (  ) ;         replaceWithEmpty ( parent, gramps ) ;     }else {         replaceWithEmpty ( n, parent ) ;     }     compiler.reportCodeChange (  ) ; }^306^^^^^299^314^[Delete]^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P13_Insert_Block]^if  ( isExpressionNode ( ancestor )  )  {     Node ancParent = ancestor.getParent (  ) ;     replaceWithEmpty ( ancestor, ancParent ) ;     break; }^306^^^^^299^314^[Delete]^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( gramps, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty (  parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( n ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( parent, n ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^replaceWithNull ( n, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P8_Replace_Mix]^replaceWithNull ( n, gramps ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P14_Delete_Statement]^^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithEmpty ( n, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithEmpty ( n, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithEmpty ( n, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( n, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^Node gramps = n.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^Node gramps = parent.removeChild (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^Node gramps = parent .getNext (  )  ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P14_Delete_Statement]^^307^308^^^^299^314^Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( n, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( parent, n ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty (  gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( parent ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( gramps, parent ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^replaceWithNull ( parent, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P8_Replace_Mix]^replaceWithNull ( n, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P14_Delete_Statement]^^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithEmpty ( parent, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithEmpty ( parent, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithEmpty ( parent, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( parent, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( gramps )   )  {^306^^^^^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P14_Delete_Statement]^^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( n, gramps ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^312^^^^^299^314^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P14_Delete_Statement]^^312^^^^^299^314^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P8_Replace_Mix]^if  ( NodeUtil .removeChild ( parent )   )  {^306^^^^^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P8_Replace_Mix]^replaceWithNull ( gramps, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P8_Replace_Mix]^Node gramps = n.removeChild (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^nameEndsWithFieldNameToStrip ( expression )  )  {^305^^^^^299^314^qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P8_Replace_Mix]^qualifiedNameBeginsWithStripType ( parent )  )  {^305^^^^^299^314^qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P8_Replace_Mix]^Node gramps = n .getNext (  )  ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  expression  gramps  n  parent  
[P3_Replace_Literal]^while  ( false )  {^336^^^^^321^351^while  ( true )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( ancestor.getFirstChild (  )  <= ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( parent.getFirstChild (  )  != ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( ancestor.getFirstChild (  )  != parent )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( ancestorChild.getFirstChild (  )  != ancestor )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^if  ( ancestor.removeChild (  )  != ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P9_Replace_Statement]^if  ( parent.getFirstChild (  )  == n )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P15_Unwrap_Block]^replaceWithNull(ancestorChild, ancestor); break;^337^338^339^340^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P16_Remove_Block]^^337^338^339^340^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( parent, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( parentChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull (  ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChild ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestor, ancestorChild ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChildChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^replaceWithEmpty ( ancestorChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^replaceWithEmpty ( parentChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^338^339^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ; break;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^341^^^^^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^if  ( NodeUtil .removeChild ( ancParent )   )  {^341^^^^^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^341^^^^^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node ancParent = ancestor.getParent(); replaceWithEmpty(ancestor, ancParent); break;^341^342^343^344^345^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {  Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ; break; }^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P16_Remove_Block]^^341^342^343^344^345^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {  Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ; break; }^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P13_Insert_Block]^if  ( isExpressionNode ( parent )  )  {     Node gramps = parent.getParent (  ) ;     replaceWithEmpty ( parent, gramps ) ; }else {     replaceWithEmpty ( n, parent ) ; }^341^^^^^326^356^[Delete]^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^Node ancParent = parent.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^Node ancParent = ancestor.removeChild (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^Node ancParent = ancestor .getNext (  )  ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^Node ancParent = parent.removeChild (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^int type = ancestor.getType (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^Node ancParent = n.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithEmpty ( parent, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithEmpty ( ancestor, parent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithEmpty (  ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithEmpty ( ancestor ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithEmpty ( ancParent, ancestor ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^replaceWithNull ( ancestor, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^344^345^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ; break;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( ancestorChild, ancestor ) ;replaceWithEmpty ( ancestor, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithEmpty ( ancestor, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithEmpty ( ancestor, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithEmpty ( ancestor, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( ancestor, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( type != Token.GETPROP || type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( type <= Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( type == Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( type >= Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( ancestorLevel != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( type != Token.GETPROP ) {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  (  type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( (type != GETPROP && type != GETELEM) )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( type != GETPROP )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( type != GETELEM )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( type != CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P15_Unwrap_Block]^replaceWithNull(ancestorChild, ancestor); break;^348^349^350^351^352^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P16_Remove_Block]^^348^349^350^351^352^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( parent, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( parentChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull (  ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChild ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestor, ancestorChild ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChildChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^replaceWithEmpty ( ancestorChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^351^352^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ; break;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^ancestorChild = parent;^354^^^^^339^369^ancestorChild = ancestor;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^ancestor = parent.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^ancestor = ancestor.removeChild (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P1_Replace_Type]^long  type = ancestor.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^int type = parent.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^int type = ancestor.removeChild (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;int type = ancestor.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;int type = ancestor.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^if  ( n.getFirstChild (  )  != ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( n )  )  {^341^^^^^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^int type = n.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^int type = parent .getString (  )  ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;int type = ancestor.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( parent, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( parentChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull (  ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChild ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestor, ancestorChild ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChildChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^replaceWithEmpty ( ancestorChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^ancestor = parent.removeChild (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^int type = ancestor.getType (  ) ;ancestor = ancestor.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;ancestor = ancestor.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;ancestor = ancestor.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;ancestor = ancestor.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval ( t, parent, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval ( t, n, n )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval (  n, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval ( t,  parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval ( t, n )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval ( parent, n, t )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( (type != GETPROP) && (type != GETELEM) && type != CALL )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( (type != GETPROP && type != GETELEM) )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( type != GETPROP )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( type != GETELEM )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( type != CALL )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^if  ( maybeRemoveCall ( t, n, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( ancestor.getFirstChild (  )  == ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^if  ( ancestor .getLastChild (  )   != ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^if  ( ancestor .getLastChild (  )   != parent )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^replaceWithNull ( parent, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.this )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^if  ( ancestorLevel != Token.GETPROP ) {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^ancestorChild = n;^354^^^^^339^369^ancestorChild = ancestor;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^ancestor = n.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^ancestor = ancestor .getNext (  )  ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^ancestor =  null.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^if  ( n.removeChild (  )  != ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^int type = ancestor .getString (  )  ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^replaceWithEmpty ( parent, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( type > Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^Node ancestor = n;^333^^^^^318^348^Node ancestor = parent;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node ancestor = parent;^333^^^^^318^348^Node ancestor = parent;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestorChild = n;Node ancestor = parent;^333^^^^^318^348^Node ancestor = parent;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestorChild = parent;Node ancestor = parent;^333^^^^^318^348^Node ancestor = parent;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^Node ancestorChild = parent;^334^^^^^319^349^Node ancestorChild = n;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^int ancestorLevel = 1;Node ancestorChild = n;^334^^^^^319^349^Node ancestorChild = n;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestorChild = parent;Node ancestorChild = n;^334^^^^^319^349^Node ancestorChild = n;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent;Node ancestorChild = n;^334^^^^^319^349^Node ancestorChild = n;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P1_Replace_Type]^short  ancestorLevel = 1;^335^^^^^320^350^int ancestorLevel = 1;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P3_Replace_Literal]^int ancestorLevel = ;^335^^^^^320^350^int ancestorLevel = 1;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestorChild = n;int ancestorLevel = 1;^335^^^^^320^350^int ancestorLevel = 1;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P1_Replace_Type]^short  type = ancestor.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^int type = parent.removeChild (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^351^352^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ; break;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^357^^^^^342^372^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^357^^^^^342^372^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( ancestor.getFirstChild (  )  >= ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^343^344^^^^328^358^Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P3_Replace_Literal]^int ancestorLevel = type;^335^^^^^320^350^int ancestorLevel = 1;^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval ( t, parent, n )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^if  ( isMethodCallThatTriggersRemoval ( t, ancestorChild, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] StripCode Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^Node key = value.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^Node key = n.removeChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^Node key = n .getLastChild (  )  ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node key = n.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node function = n.getFirstChild (  ) ;Node key = n.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node expression = n.getFirstChild (  ) ;Node key = n.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node key = n.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node key = n.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node key = n.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P14_Delete_Statement]^^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P2_Replace_Operator]^while  ( key == null )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P5_Replace_Variable]^while  ( key != nextull )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P8_Replace_Mix]^while  ( next != null )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P2_Replace_Operator]^if  ( key.getType (  )  == Token.STRING || isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P2_Replace_Operator]^if  ( key.getType (  )  >= Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P5_Replace_Variable]^if  ( next.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P5_Replace_Variable]^if  ( key.getType (  )  == Token.0 && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P6_Replace_Expression]^if  ( key.getType (  )  == Token.STRING ) {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P6_Replace_Expression]^if  (  isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P6_Replace_Expression]^if  ( key.getType (  )  == STRING )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^if  ( key.removeChild (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^if  ( key .getString (  )   == Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^if  ( key.getType (  )  == Token.STRING && qualifiedNameBeginsWithStripType ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^if  ( key.getType (  )  == Token.STRING && isStripName ( key.removeChild (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^if  ( key.getType (  )  == Token.STRING && isStripName ( key .getParent (  )   )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P5_Replace_Variable]^key = value.getNext (  ) .getNext (  ) ;^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^key = key.getClassesDefinedByCall (  ) .getNext (  ) ;^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^key = key.removeChild (  ) .getNext (  ) ;^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^key = key .getParent (  )^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P14_Delete_Statement]^^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;key = key.getNext (  ) .getNext (  ) ;^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P5_Replace_Variable]^key = value;^381^^^^^368^387^key = next;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P5_Replace_Variable]^Node value = next.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^Node value = key.removeChild (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P8_Replace_Mix]^Node value = next.removeChild (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P5_Replace_Variable]^Node next = n.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^Node next = value.removeChild (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^Node next = value .getParent (  )  ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node next = value.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node next = value.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node next = value.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node next = value.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node next = value.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node next = value.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P5_Replace_Variable]^Node value = value.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P14_Delete_Statement]^^377^378^^^^368^387^Node value = key.getNext (  ) ; Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P5_Replace_Variable]^Node next = next.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P8_Replace_Mix]^Node next = next.removeChild (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P14_Delete_Statement]^^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^key = key.getNext (  ) .getNext (  ) ;Node next = value.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P5_Replace_Variable]^n.removeChild ( value ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^n.replaceChild ( key ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^n .removeChild ( n )  ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P14_Delete_Statement]^^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;n.removeChild ( key ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^n.removeChild ( nameNode ) ;n.removeChild ( key ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;n.removeChild ( key ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^parent.removeChild ( rvalue ) ;n.removeChild ( key ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^n.replaceChild ( value ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^n .removeChild ( n )  ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P8_Replace_Mix]^n.removeChild ( next ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P14_Delete_Statement]^^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^n.removeChild ( key ) ;n.removeChild ( value ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;n.removeChild ( value ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^n.removeChild ( nameNode ) ;n.removeChild ( value ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, rvalue ) ;n.removeChild ( value ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^parent.removeChild ( rvalue ) ;n.removeChild ( value ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^382^^^^^368^387^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P14_Delete_Statement]^^382^^^^^368^387^compiler.reportCodeChange (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P8_Replace_Mix]^key =  null.getNext (  ) .getNext (  ) ;^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P8_Replace_Mix]^if  ( value.removeChild (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^qualifiedNameBeginsWithStripType ( key.getString (  )  )  )  {^376^^^^^368^387^isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^isStripName ( key.removeChild (  )  )  )  {^376^^^^^368^387^isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P8_Replace_Mix]^isStripName ( value.getString (  )  )  )  {^376^^^^^368^387^isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P14_Delete_Statement]^^376^377^^^^368^387^isStripName ( key.getString (  )  )  )  { Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P8_Replace_Mix]^Node value = value .getParent (  )  ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P14_Delete_Statement]^^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P14_Delete_Statement]^^378^379^^^^368^387^Node next = value.getNext (  ) ; n.removeChild ( key ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^n .removeChild ( key )  ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P14_Delete_Statement]^^379^380^^^^368^387^n.removeChild ( key ) ; n.removeChild ( value ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P2_Replace_Operator]^if  ( key.getType (  )  <= Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P8_Replace_Mix]^key = value.removeChild (  ) .getNext (  ) ;^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P8_Replace_Mix]^key =  null;^381^^^^^368^387^key = next;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^Node value = key .getParent (  )  ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P8_Replace_Mix]^n.replaceChild ( value ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^n .removeChild ( key )  ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P8_Replace_Mix]^n.replaceChild ( next ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P5_Replace_Variable]^if  ( value.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P7_Replace_Invocation]^isStripName ( key .getParent (  )   )  )  {^376^^^^^368^387^isStripName ( key.getString (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P14_Delete_Statement]^^380^381^^^^368^387^n.removeChild ( value ) ; key = next;^[CLASS] StripCode Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  key  n  next  value  
[P2_Replace_Operator]^return n != null || n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P2_Replace_Operator]^return n == null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P2_Replace_Operator]^return n != null && n.getType (  )  != Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P2_Replace_Operator]^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  && nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P7_Replace_Invocation]^return n != null && n.removeChild (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P7_Replace_Invocation]^return n != null && n .getString (  )   == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P7_Replace_Invocation]^return n != null && n.getType (  )  == Token.CALL && n.removeChild (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P7_Replace_Invocation]^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P7_Replace_Invocation]^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.removeChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P7_Replace_Invocation]^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P7_Replace_Invocation]^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n .getLastChild (  )   )  || nameEndsWithFieldNameToStrip ( n^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P14_Delete_Statement]^^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P7_Replace_Invocation]^&&  ( nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^404^405^^^^402^406^&&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P7_Replace_Invocation]^&&  ( qualifiedNameBeginsWithStripType ( n.removeChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^404^405^^^^402^406^&&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P14_Delete_Statement]^^404^405^406^^^402^406^&&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ; }^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P7_Replace_Invocation]^&&  ( qualifiedNameBeginsWithStripType ( n .getLastChild (  )   )  || nameEndsWithFieldNameToStrip ( n^404^405^^^^402^406^&&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P7_Replace_Invocation]^qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  ) ;^405^^^^^402^406^nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P7_Replace_Invocation]^nameEndsWithFieldNameToStrip ( n.removeChild (  )  )  ) ;^405^^^^^402^406^nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P7_Replace_Invocation]^nameEndsWithFieldNameToStrip ( n .getLastChild (  )   )  ) ;^405^^^^^402^406^nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P14_Delete_Statement]^^405^^^^^402^406^nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] StripCode Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P1_Replace_Type]^char name = n.getQualifiedName (  ) ;^418^^^^^417^420^String name = n.getQualifiedName (  ) ;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P7_Replace_Invocation]^String name = n.removeChild (  ) ;^418^^^^^417^420^String name = n.getQualifiedName (  ) ;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P8_Replace_Mix]^String name = n .getParent (  )  ;^418^^^^^417^420^String name = n.getQualifiedName (  ) ;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P11_Insert_Donor_Statement]^String lcName = name.toLowerCase (  ) ;String name = n.getQualifiedName (  ) ;^418^^^^^417^420^String name = n.getQualifiedName (  ) ;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = n.getQualifiedName (  ) ;^418^^^^^417^420^String name = n.getQualifiedName (  ) ;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = n.getQualifiedName (  ) ;^418^^^^^417^420^String name = n.getQualifiedName (  ) ;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P14_Delete_Statement]^^418^419^420^^^417^420^String name = n.getQualifiedName (  ) ; return qualifiedNameBeginsWithStripType ( name ) ; }^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P12_Insert_Condition]^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  { String name = n.getQualifiedName (  ) ; return qualifiedNameBeginsWithStripType ( name ) ; }^418^419^^^^417^420^String name = n.getQualifiedName (  ) ; return qualifiedNameBeginsWithStripType ( name ) ;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P12_Insert_Condition]^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  { return qualifiedNameBeginsWithStripType ( name ) ; }^419^^^^^417^420^return qualifiedNameBeginsWithStripType ( name ) ;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P12_Insert_Condition]^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  { return qualifiedNameBeginsWithStripType ( name ) ; }^419^^^^^417^420^return qualifiedNameBeginsWithStripType ( name ) ;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P14_Delete_Statement]^^419^420^^^^417^420^return qualifiedNameBeginsWithStripType ( name ) ; }^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  
[P2_Replace_Operator]^if  ( name == null )  {^432^^^^^431^445^if  ( name != null )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P6_Replace_Expression]^if  ( name.equals(type) || name.startsWith((type + ".")) )  {^432^^^^^431^445^if  ( name != null )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P6_Replace_Expression]^if  ( type + "." )  {^432^^^^^431^445^if  ( name != null )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P8_Replace_Mix]^if  ( name != true )  {^432^^^^^431^445^if  ( name != null )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P9_Replace_Statement]^if  ( classes != null )  {^432^^^^^431^445^if  ( name != null )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P15_Unwrap_Block]^for (java.lang.String type : stripTypes) {    if ((name.equals(type)) || (name.startsWith((type + ".")))) {        return true;    }}; for (java.lang.String type : stripTypePrefixes) {    if (name.startsWith(type)) {        return true;    }};^432^433^434^435^436^431^445^if  ( name != null )  { for  ( String type : stripTypes )  { if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P16_Remove_Block]^^432^433^434^435^436^431^445^if  ( name != null )  { for  ( String type : stripTypes )  { if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P2_Replace_Operator]^if  ( name.equals ( type )  && name.startsWith ( type + "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P2_Replace_Operator]^if  ( name.equals ( type )  || name.startsWith ( type  |  "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^if  ( name.equals ( type )  || name.startsWith ( type + "" )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^if  ( type.equals ( name )  || name.startsWith ( type + "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P6_Replace_Expression]^if  ( name.equals ( type )  ) {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P6_Replace_Expression]^if  (  name.startsWith ( type + "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P6_Replace_Expression]^if  ( type + "." )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P15_Unwrap_Block]^return true;^434^435^436^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P16_Remove_Block]^^434^435^436^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^434^^^^^431^445^[Delete]^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  ( name.startsWith ( type )  )  {     return true; }^434^^^^^431^445^[Delete]^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^434^^^^^431^445^[Delete]^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^return false;^435^^^^^431^445^return true;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^if  ( type.startsWith ( name )  )  {^439^^^^^431^445^if  ( name.startsWith ( type )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P8_Replace_Mix]^if  ( name .endsWith ( type )   )  {^439^^^^^431^445^if  ( name.startsWith ( type )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P15_Unwrap_Block]^return true;^439^440^441^^^431^445^if  ( name.startsWith ( type )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P16_Remove_Block]^^439^440^441^^^431^445^if  ( name.startsWith ( type )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^439^^^^^431^445^[Delete]^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  (  ( name.equals ( type )  )  ||  ( name.startsWith (  ( type + "." )  )  )  )  {     return true; }^439^^^^^431^445^[Delete]^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^439^^^^^431^445^[Delete]^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^return false;^440^^^^^431^445^return true;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P1_Replace_Type]^for  ( char type : stripTypes )  {^433^^^^^431^445^for  ( String type : stripTypes )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P1_Replace_Type]^for  ( char type : stripTypePrefixes )  {^438^^^^^431^445^for  ( String type : stripTypePrefixes )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P8_Replace_Mix]^if  ( name .toLowerCase (  )   || name.startsWith ( type + "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P8_Replace_Mix]^if  ( name .endsWith ( name )   )  {^439^^^^^431^445^if  ( name.startsWith ( type )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P2_Replace_Operator]^if  ( name.equals ( type )  || name.startsWith ( type   instanceof   "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P2_Replace_Operator]^if  ( name.equals ( type )  || name.startsWith ( type  <=  "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P7_Replace_Invocation]^if  ( name.equals ( type )  || name .endsWith ( type )   )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P8_Replace_Mix]^if  ( name.equals ( type )  || name .endsWith ( name )   )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^return true;^444^^^^^431^445^return false;^[CLASS] StripCode Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  name  type  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P1_Replace_Type]^char name = n.getchar (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P7_Replace_Invocation]^String name = n.removeChild (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^String lcName = name.toLowerCase (  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P7_Replace_Invocation]^String name = n .getParent (  )  ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P14_Delete_Statement]^^456^457^^^^455^460^String name = n.getString (  ) ; Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^isStripName ( propNode.getString (  )  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P7_Replace_Invocation]^Scope scope = t .report ( n , STRIP_TYPE_INHERIT_ERROR )  ;^457^^^^^455^460^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Scope scope = t.getScope (  ) ;^457^^^^^455^460^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Scope scope = t.getScope (  ) ;^457^^^^^455^460^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Scope scope = t.getScope (  ) ;^457^^^^^455^460^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Scope scope = t.getScope (  ) ;^457^^^^^455^460^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Scope scope = t.getScope (  ) ;^457^^^^^455^460^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P14_Delete_Statement]^^457^^^^^455^460^Scope scope = t.getScope (  ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P5_Replace_Variable]^Scope.Var var = name.getVar ( scope ) ;^458^^^^^455^460^Scope.Var var = scope.getVar ( name ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P14_Delete_Statement]^^458^459^^^^455^460^Scope.Var var = scope.getVar ( name ) ; return varsToRemove.contains ( var ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^varsToRemove.add ( scope.getVar ( name )  ) ;Scope.Var var = scope.getVar ( name ) ;^458^^^^^455^460^Scope.Var var = scope.getVar ( name ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P5_Replace_Variable]^return varsToRemovesToRemove.contains ( var ) ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P5_Replace_Variable]^return var.contains ( varsToRemove ) ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P8_Replace_Mix]^return varsToRemove .add (  )  ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P14_Delete_Statement]^^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] StripCode Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Var  var  Node  n  String  name  
[P5_Replace_Variable]^Node function = parent.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^Node function = n.removeChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node function = n.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node expression = n.getFirstChild (  ) ;Node function = n.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node function = n.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node function = n.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node function = n.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node function = n.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^Node function = gramps.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P14_Delete_Statement]^^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( function == null && function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( function != null || function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( function == null || function.getType (  )  == Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^if  ( parent == null || function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( function == null ) {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  (  function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( function.getType (  )  != GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^if  ( function == null || function.removeChild (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^if  ( function == null || function .getString (  )   != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P9_Replace_Statement]^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P13_Insert_Block]^if  (  ( gramps != null )  &&  (  ( gramps.getType (  )  )  ==  ( VAR )  )  )  {     return false; }^484^^^^^469^499^[Delete]^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P3_Replace_Literal]^return true;^489^^^^^474^504^return false;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^if  ( parent == null || function.removeChild (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( parent != null || parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( parent == null && parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( parent != null && parent.getType (  )  != Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^if  ( n != null && parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( parent != null ) {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  (  parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( parent.getType (  )  == NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps != null && gramps.getType() == VAR )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps != null )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == VAR )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^if  ( parent != null && parent.removeChild (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^if  ( parent != null && parent .getString (  )   == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^if  ( parent != true && parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P9_Replace_Statement]^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P9_Replace_Statement]^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P13_Insert_Block]^if  (  ( n != null )  &&  (  ( n.getType (  )  )  ==  ( GETPROP )  )  )  {     Node propNode = n.getLastChild (  ) ;     return  (  ( propNode != null )  &&  (  ( propNode.getType (  )  )  ==  ( STRING )  )  )  &&  ( isStripName ( propNode.getString (  )  )  ) ; }^492^^^^^477^507^[Delete]^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( gramps != null || gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( gramps == null && gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( gramps != null && gramps.getType (  )  != Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^if  ( parent != null && gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps != null ) {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  (  gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^if  ( gramps != null && gramps.removeChild (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^if  ( parent != this && gramps.removeChild (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P9_Replace_Statement]^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P9_Replace_Statement]^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P13_Insert_Block]^if  (  ( function == null )  ||  (  ( function.getType (  )  )  !=  ( GETPROP )  )  )  {     return false; }^494^^^^^479^509^[Delete]^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P3_Replace_Literal]^return true;^500^^^^^485^515^return false;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^Node gramps = n.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^Node gramps = parent.removeChild (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^Node gramps = parent .getNext (  )  ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^Node gramps = n.removeChild (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P14_Delete_Statement]^^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^if  ( gramps != null && gramps .getString (  )   == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^if  ( gramps != null && parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^Node callee = parent.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^Node callee = function.removeChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^Node callee = function .getLastChild (  )  ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node callee = function.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node function = n.getFirstChild (  ) ;Node callee = function.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node expression = n.getFirstChild (  ) ;Node callee = function.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node callee = function.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node callee = function.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node callee = function.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node callee = function.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^Node callee = n.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P14_Delete_Statement]^^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^return nameEndsWithFieldNameToStrip ( callee )  && nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return nameEndsWithFieldNameToStrip ( parent )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( parent )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return parentameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType (  n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return calleeameEndsWithFieldNameToStrip ( n )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return nameEndsWithFieldNameToStrip ( function )  || nameEndsWithFieldNameToStrip ( callee )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( t )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( function, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^return qualifiedNameBeginsWithStripType ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || nameEndsWithFieldNameToStrip ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || isReferenceToRemovedVar ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^return qualifiedNameBeginsWithStripType ( callee )  && nameEndsWithFieldNameToStrip ( function )  && qualifiedNameBeginsWithStripType ( callee )  && actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^return qualifiedNameBeginsWithStripType ( parent )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^nameEndsWithFieldNameToStrip ( parent )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^506^507^508^^^491^521^nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^qualifiedNameBeginsWithStripType ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^506^507^508^^^491^521^nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^nameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^506^507^508^^^491^521^nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P14_Delete_Statement]^^506^507^508^^^491^521^nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^qualifiedNameBeginsWithStripType ( parent )  || actsOnStripType ( t, n ) ;^507^508^^^^492^522^qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^nameEndsWithFieldNameToStrip ( callee )  || actsOnStripType ( t, n ) ;^507^508^^^^492^522^qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P14_Delete_Statement]^^507^508^509^^^492^522^qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ; }^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^actsOnStripType ( t, gramps ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^actsOnStripType (  n ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^actsOnStripType ( t ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^actsOnStripType ( n, t ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^isReferenceToRemovedVar ( t, n ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^isReferenceToRemovedVar ( t, parent ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P14_Delete_Statement]^^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] StripCode Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( n != null || n.getType (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P2_Replace_Operator]^if  ( n == null && n.getType (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P2_Replace_Operator]^if  ( n != null && n.getType (  )  != Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P6_Replace_Expression]^if  ( n != null ) {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P6_Replace_Expression]^if  (  n.getType (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P6_Replace_Expression]^if  ( n.getType (  )  == GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P6_Replace_Expression]^if  ( (propNode != null) && (propNode.getType() == STRING) && isStripName(propNode.getString()) )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P6_Replace_Expression]^if  ( (propNode != null && propNode.getType() == STRING) )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P6_Replace_Expression]^if  ( propNode != null )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P6_Replace_Expression]^if  ( propNode.getType (  )  == STRING )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P7_Replace_Invocation]^if  ( n != null && n.removeChild (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P7_Replace_Invocation]^if  ( n != null && n .getString (  )   == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P9_Replace_Statement]^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P9_Replace_Statement]^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P9_Replace_Statement]^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node propNode = n.getLastChild(); return ((propNode != null) && ((propNode.getType()) == (com.google.javascript.rhino.Token.STRING))) && (isStripName(propNode.getString()));^520^521^522^523^524^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  { Node propNode = n.getLastChild (  ) ; return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ; }^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P16_Remove_Block]^^520^521^522^523^524^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  { Node propNode = n.getLastChild (  ) ; return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ; }^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P13_Insert_Block]^if  (  ( parent != null )  &&  (  ( parent.getType (  )  )  ==  ( NAME )  )  )  {     Node gramps = parent.getParent (  ) ;     if  (  ( gramps != null )  &&  (  ( gramps.getType (  )  )  ==  ( VAR )  )  )  {         return false;     } }^520^^^^^519^526^[Delete]^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P2_Replace_Operator]^return propNode != null || propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P2_Replace_Operator]^return propNode == null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P2_Replace_Operator]^return propNode != null && propNode.getType (  )  != Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P5_Replace_Variable]^return n != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P7_Replace_Invocation]^return propNode != null && propNode.removeChild (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P7_Replace_Invocation]^return propNode != null && propNode.getType (  )  == Token.STRING && qualifiedNameBeginsWithStripType ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P7_Replace_Invocation]^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.removeChild (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P8_Replace_Mix]^return true ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P7_Replace_Invocation]^Node propNode = n.removeChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P11_Insert_Donor_Statement]^Node function = n.getFirstChild (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P11_Insert_Donor_Statement]^Node expression = n.getFirstChild (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P5_Replace_Variable]^Node propNode = propNode.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P14_Delete_Statement]^^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P8_Replace_Mix]^return n != null && propNode.removeChild (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P14_Delete_Statement]^^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P7_Replace_Invocation]^qualifiedNameBeginsWithStripType ( propNode.getString (  )  ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P7_Replace_Invocation]^isStripName ( propNode.removeChild (  )  ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P14_Delete_Statement]^^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;isStripName ( propNode.getString (  )  ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;isStripName ( propNode.getString (  )  ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P5_Replace_Variable]^isStripName ( n.getString (  )  ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P7_Replace_Invocation]^return propNode != null && propNode .getString (  )   == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P5_Replace_Variable]^if  ( propNode != null && n.getType (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P8_Replace_Mix]^if  ( propNode != null && n .getString (  )   == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P7_Replace_Invocation]^Node propNode = n .getFirstChild (  )  ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P7_Replace_Invocation]^isStripName ( propNode .getParent (  )   ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P8_Replace_Mix]^isStripName ( n.removeChild (  )  ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P3_Replace_Literal]^return true;^525^^^^^519^526^return false;^[CLASS] StripCode Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  propNode  
[P5_Replace_Variable]^SubclassRelationship classes = callNode.getCodingConvention (  ) .getClassesDefinedByCall ( compiler ) ;^539^540^^^^538^557^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P7_Replace_Invocation]^SubclassRelationship classes = compiler.getCodingConvention (  )  .getNext (  )  ;^539^540^^^^538^557^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P7_Replace_Invocation]^SubclassRelationship classes = compiler.reportCodeChange (  ) .getClassesDefinedByCall ( callNode ) ;^539^540^^^^538^557^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P7_Replace_Invocation]^compiler.reportCodeChange (  ) .getClassesDefinedByCall ( callNode ) ;^540^^^^^538^557^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P14_Delete_Statement]^^540^^^^^538^557^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P2_Replace_Operator]^if  ( classes == null )  {^541^^^^^538^557^if  ( classes != null )  {^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P8_Replace_Mix]^if  ( classes != this )  {^541^^^^^538^557^if  ( classes != null )  {^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P9_Replace_Statement]^if  ( name != null )  {^541^^^^^538^557^if  ( classes != null )  {^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P15_Unwrap_Block]^if (qualifiedNameBeginsWithStripType(classes.subclassName)) {    return true;}; if (qualifiedNameBeginsWithStripType(classes.superclassName)) {    t.report(callNode, com.google.javascript.jscomp.StripCode.STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName);};^541^542^^544^545^538^557^if  ( classes != null )  {  if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P16_Remove_Block]^^541^542^^544^545^538^557^if  ( classes != null )  {  if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P13_Insert_Block]^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {     t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ; }^541^^^^^538^557^[Delete]^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P7_Replace_Invocation]^if  ( nameEndsWithFieldNameToStrip ( classes.subclassName )  )  {^544^^^^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P9_Replace_Statement]^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {^544^^^^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P15_Unwrap_Block]^return true;^544^545^546^^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P16_Remove_Block]^^544^545^546^^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P13_Insert_Block]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^544^^^^^538^557^[Delete]^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P13_Insert_Block]^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^544^^^^^538^557^[Delete]^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P3_Replace_Literal]^return false;^545^^^^^538^557^return true;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P7_Replace_Invocation]^if  ( nameEndsWithFieldNameToStrip ( classes.superclassName )  )  {^550^^^^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P9_Replace_Statement]^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {^550^^^^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P15_Unwrap_Block]^t.report(callNode, com.google.javascript.jscomp.StripCode.STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName);^550^551^552^553^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  { t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ; }^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P16_Remove_Block]^^550^551^552^553^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  { t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ; }^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P13_Insert_Block]^if  ( classes != null )  {     if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {         return true;     }     if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {         t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;     } }^550^^^^^538^557^[Delete]^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P5_Replace_Variable]^t.report (  STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^551^552^^^^538^557^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P5_Replace_Variable]^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR.subclassName, classes.superclassName ) ;^551^552^^^^538^557^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P5_Replace_Variable]^t.report ( callNode,  classes.subclassName, classes.superclassName ) ;^551^552^^^^538^557^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P5_Replace_Variable]^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR,  classes.superclassName ) ;^551^552^^^^538^557^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P5_Replace_Variable]^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName ) ;^551^552^^^^538^557^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P14_Delete_Statement]^^551^552^^^^538^557^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P13_Insert_Block]^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {     t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ; }^551^^^^^538^557^[Delete]^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P13_Insert_Block]^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {     return true; }^544^^^^^538^557^[Delete]^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P13_Insert_Block]^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {     return true; }^550^^^^^538^557^[Delete]^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P3_Replace_Literal]^return true;^556^^^^^538^557^return false;^[CLASS] StripCode Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  NodeTraversal  t  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  callNode  SubclassRelationship  classes  
[P2_Replace_Operator]^if  ( stripNameSuffixes.contains ( name )  && stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^if  ( stripNameSuffixes.contains ( stripName )  || stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^if  ( name.contains ( stripNameSuffixes )  || stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^if  ( stripNamePrefixes.contains ( name )  || stripNameSuffixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^if  ( stripNameSuffixes.contains ( stripNamePrefixes )  || name.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P6_Replace_Expression]^if  ( stripNameSuffixes.contains ( name )  ) {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P6_Replace_Expression]^if  (  stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P7_Replace_Invocation]^if  ( stripNameSuffixes .add (  )   || stripNamePrefixes^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P8_Replace_Mix]^if  ( stripNameSuffixes.contains ( stripName )  ) {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P15_Unwrap_Block]^return true;^567^568^569^570^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P16_Remove_Block]^^567^568^569^570^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^567^^^^^566^590^[Delete]^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^return false;^569^^^^^566^590^return true;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^stripNamePrefixes.contains ( stripName )  )  {^568^^^^^566^590^stripNamePrefixes.contains ( name )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P14_Delete_Statement]^^568^569^^^^566^590^stripNamePrefixes.contains ( name )  )  { return true;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P2_Replace_Operator]^if  (  ( name.length (  )  == 0 )  && Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P2_Replace_Operator]^if  (  ( name.length (  )  != 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^if  (  ( name.length (  )  == -2 )  || Character.isUpperCase ( name.charAt ( -2 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^if  (  ( name.length (  )  == -5 )  || Character.isUpperCase ( name.charAt ( -5 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^if  (  ( name.length() + 4  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^if  (  ( stripName.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P6_Replace_Expression]^if  (  ( name.length (  )  == 0 )  ) {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P6_Replace_Expression]^if  (  Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P6_Replace_Expression]^if  ( name.length (  )  == 0 )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P7_Replace_Invocation]^if  (  ( name.charAt (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P7_Replace_Invocation]^if  (  ( name .endsWith ( lcName )   == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P15_Unwrap_Block]^return false;^572^573^574^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  { return false; }^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P16_Remove_Block]^^572^573^574^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  { return false; }^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^return true;^573^^^^^566^590^return false;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^if  (  ( name.length() + 3  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P7_Replace_Invocation]^if  (  ( name .endsWith ( name )   == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^if  (  ( name.length (  )  == 3 )  || Character.isUpperCase ( name.charAt ( 3 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^if  (  ( name.length() + 5  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P7_Replace_Invocation]^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name .startsWith ( stripName )   )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^if  (  ( name.length (  )  == 2 )  || Character.isUpperCase ( name.charAt ( 2 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^if  (  ( name.length() + 2  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P1_Replace_Type]^char lcName = name.toLowerCase (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^String lcName = stripName.toLowerCase (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P7_Replace_Invocation]^String lcName = name.charAt (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String lcName = name.toLowerCase (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String lcName = name.toLowerCase (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String lcName = name.toLowerCase (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P12_Insert_Condition]^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  { String lcName = name.toLowerCase (  ) ; }^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P14_Delete_Statement]^^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^if  ( name.startsWith ( stripName.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^if  ( lcName.startsWith ( name.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^if  ( stripName.startsWith ( lcName.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P7_Replace_Invocation]^if  ( lcName.startsWith ( stripName.charAt (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P9_Replace_Statement]^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P15_Unwrap_Block]^return true;^578^579^580^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P16_Remove_Block]^^578^579^580^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  (  ( stripNameSuffixes.contains ( name )  )  ||  ( stripNamePrefixes.contains ( name )  )  )  {     return true; }^578^^^^^566^590^[Delete]^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  (  ( name.equals ( type )  )  ||  ( name.startsWith (  ( type + "." )  )  )  )  {     return true; }^578^^^^^566^590^[Delete]^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {     return true; }^578^^^^^566^590^[Delete]^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  ( name.startsWith ( type )  )  {     return true; }^578^^^^^566^590^[Delete]^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^578^^^^^566^590^[Delete]^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^return false;^579^^^^^566^590^return true;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P1_Replace_Type]^for  ( char stripName : stripNamePrefixes )  {^577^^^^^566^590^for  ( String stripName : stripNamePrefixes )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P8_Replace_Mix]^if  ( lcName .endsWith ( name )   )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^578^^^^^566^590^[Delete]^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P8_Replace_Mix]^if  ( lcName.startsWith ( name.charAt (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^if  ( name.endsWith ( stripName.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^if  ( lcName.endsWith ( name.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P5_Replace_Variable]^if  ( stripName.endsWith ( lcName.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P7_Replace_Invocation]^if  ( lcName.endsWith ( stripName.charAt (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P9_Replace_Statement]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P15_Unwrap_Block]^return true;^584^585^586^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P16_Remove_Block]^^584^585^586^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^584^^^^^566^590^[Delete]^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  (  ( name.equals ( type )  )  ||  ( name.startsWith (  ( type + "." )  )  )  )  {     return true; }^584^^^^^566^590^[Delete]^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {     return true; }^584^^^^^566^590^[Delete]^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  ( name.startsWith ( type )  )  {     return true; }^584^^^^^566^590^[Delete]^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^return false;^585^^^^^566^590^return true;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P1_Replace_Type]^for  ( char stripName : stripNameSuffixes )  {^583^^^^^566^590^for  ( String stripName : stripNameSuffixes )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P7_Replace_Invocation]^if  ( lcName .startsWith ( stripName )   )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P13_Insert_Block]^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^584^^^^^566^590^[Delete]^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P3_Replace_Literal]^return true;^589^^^^^566^590^return false;^[CLASS] StripCode Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  String  lcName  name  stripName  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  
[P4_Replace_Constructor]^parent.replaceChild (  new Node ( Token.NULL )  ) ;^600^^^^^599^601^parent.replaceChild ( n, new Node ( Token.NULL )  ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithNull [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P8_Replace_Mix]^parent.replaceChild ( n, new Node ( Token.2 )  ) ;^600^^^^^599^601^parent.replaceChild ( n, new Node ( Token.NULL )  ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithNull [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P14_Delete_Statement]^^600^^^^^599^601^parent.replaceChild ( n, new Node ( Token.NULL )  ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithNull [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^NodeUtil.removeChild (  n ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^NodeUtil.removeChild ( parent ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^NodeUtil.removeChild ( n, parent ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P14_Delete_Statement]^^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^n.removeChild ( key ) ;NodeUtil.removeChild ( parent, n ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^n.removeChild ( nameNode ) ;NodeUtil.removeChild ( parent, n ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;NodeUtil.removeChild ( parent, n ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, rvalue ) ;NodeUtil.removeChild ( parent, n ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P11_Insert_Donor_Statement]^parent.removeChild ( rvalue ) ;NodeUtil.removeChild ( parent, n ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P12_Insert_Condition]^if  ( NodeUtil.isExpressionNode ( parent )  )  { NodeUtil.removeChild ( parent, n ) ; }^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] StripCode Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  boolean  DiagnosticType  STRIP_TYPE_INHERIT_ERROR  Node  n  parent  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^97^^^^^82^112^switch  ( n.getType (  )  )  {^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^switch  ( n.removeChild (  )  )  {^97^^^^^82^112^switch  ( n.getType (  )  )  {^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^97^^^^^82^112^switch  ( n.getType (  )  )  {^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^switch  ( parent.removeChild (  )  )  {^97^^^^^82^112^switch  ( n.getType (  )  )  {^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^97^98^99^^^82^112^switch  ( n.getType (  )  )  { case Token.VAR: removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^removeVarDeclarationsByNameOrRvalue ( t, n, n ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^removeVarDeclarationsByNameOrRvalue (  n, parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^removeVarDeclarationsByNameOrRvalue ( t,  parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^removeVarDeclarationsByNameOrRvalue ( t, n ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^removeVarDeclarationsByNameOrRvalue ( n, t, parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^removeVarDeclarationsByNameOrRvalue ( t, parent, n ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^removeVarDeclarationsByNameOrRvalue ( parent, n, t ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^isMethodCallThatTriggersRemoval ( t, n, parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^removeVarDeclarationsByNameOrRvalue ( t, parent, parent ) ;^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^99^^^^^84^114^removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveReferenceToRemovedVariable ( t, n, n ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveReferenceToRemovedVariable (  n, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveReferenceToRemovedVariable ( t,  parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveReferenceToRemovedVariable ( t, n ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveReferenceToRemovedVariable ( parent, n, t ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveReferenceToRemovedVariable ( t, parent, n ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^maybeRemoveCall ( t, n, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^103^104^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ; break;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeEliminateExpressionByName ( t, n, parent ) ;maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeRemoveCall ( t, n, parent ) ;maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^103^^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P12_Insert_Condition]^if  ( isReferenceToRemovedVar ( t, n )  )  { maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ; break; }^103^104^^^^88^118^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ; break;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateAssignmentByLvalueName ( t, n, n ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateAssignmentByLvalueName (  n, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateAssignmentByLvalueName ( t,  parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateAssignmentByLvalueName ( t, n ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateAssignmentByLvalueName ( n, t, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateAssignmentByLvalueName ( t, parent, n ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateAssignmentByLvalueName ( parent, n, t ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^maybeEliminateExpressionByName ( t, n, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeEliminateExpressionByName ( t, n, parent ) ;maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeRemoveCall ( t, n, parent ) ;maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^118^^^^^103^133^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveCall ( t, parent, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveCall (  n, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveCall ( t,  parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveCall ( t, n ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveCall ( parent, n, t ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveCall ( n, t, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeRemoveCall ( t, parent, n ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^visit ( t, n, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^122^123^^^^107^137^maybeRemoveCall ( t, n, parent ) ; break;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeEliminateExpressionByName ( t, n, parent ) ;maybeRemoveCall ( t, n, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;maybeRemoveCall ( t, n, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;maybeRemoveCall ( t, n, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;maybeRemoveCall ( t, n, parent ) ;^122^^^^^107^137^maybeRemoveCall ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^eliminateKeysWithStripNamesFromObjLit ( t, parent ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^eliminateKeysWithStripNamesFromObjLit (  n ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^eliminateKeysWithStripNamesFromObjLit ( t ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^eliminateKeysWithStripNamesFromObjLit ( n, t ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^isReferenceToRemovedVar ( t, n ) ;^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^126^^^^^111^141^eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateExpressionByName (  n, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateExpressionByName ( t,  parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateExpressionByName ( t, n ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateExpressionByName ( parent, n, t ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeEliminateExpressionByName ( t, parent, n ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^maybeEliminateExpressionByName ( t, n, n ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;maybeEliminateExpressionByName ( t, n, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;maybeEliminateExpressionByName ( t, n, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^maybeRemoveCall ( t, n, parent ) ;maybeEliminateExpressionByName ( t, n, parent ) ;^130^^^^^115^145^maybeEliminateExpressionByName ( t, n, parent ) ;^[CLASS] Strip  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^if  ( isStripName ( name )  && isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( parent.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^if  ( isStripName ( parentame )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^if  ( isStripName ( nameNode )  || isCallWhoseReturnValueShouldBeStripped ( name.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^if  ( isStripName ( nameNodeame )  || isCallWhoseReturnValueShouldBeStripped ( n.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^if  ( isStripName ( nameame )  || isCallWhoseReturnValueShouldBeStripped ( nNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P6_Replace_Expression]^if  ( isStripName ( name )  ) {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P6_Replace_Expression]^if  (  isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^if  ( qualifiedNameBeginsWithStripType ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^if  ( isStripName ( name )  || qualifiedNameBeginsWithStripType ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.removeChild (  )  )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode .getLastChild (  )   )  )  {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P8_Replace_Mix]^if  ( isStripName ( parentame )  ) {^149^150^^^^144^163^if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Scope scope = t.getScope (  ) ;^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Scope scope = t.getScope (  ) ;^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Scope scope = t.getScope (  ) ;^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Scope scope = t.getScope (  ) ;^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Scope scope = t.getScope (  ) ;^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^152^153^^^^144^163^Scope scope = t.getScope (  ) ; varsToRemove.add ( scope.getVar ( name )  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^varsToRemove.add ( name.getVar ( scope )  ) ;^153^^^^^144^163^varsToRemove.add ( scope.getVar ( name )  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^153^^^^^144^163^varsToRemove.add ( scope.getVar ( name )  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^Scope.Var var = scope.getVar ( name ) ;varsToRemove.add ( scope.getVar ( name )  ) ;^153^^^^^144^163^varsToRemove.add ( scope.getVar ( name )  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^153^154^^^^144^163^varsToRemove.add ( scope.getVar ( name )  ) ; n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^n.removeChild ( parentameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^n.removeChild ( parent ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^n.removeChild ( nameNodeameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^n.removeChild ( n ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^n.replaceChild ( nameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^n.removeChild ( key ) ;n.removeChild ( nameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;n.removeChild ( nameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;n.removeChild ( nameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^parent.removeChild ( rvalue ) ;n.removeChild ( nameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^155^^^^^144^163^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^155^^^^^144^163^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P2_Replace_Operator]^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode == null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^for  ( Node parentameNode = n.getFirstChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^for  ( Node parent = n.getFirstChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^for  ( Node n = nameNode.getFirstChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^for  ( Node nameNode = n.removeChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^for  ( Node nameNode = n .getLastChild (  )  ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P8_Replace_Mix]^for  ( Node parent = n.removeChild (  ) ; nameNode != null;^146^^^^^144^163^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P8_Replace_Mix]^varsToRemove .contains ( null )  ;^153^^^^^144^163^varsToRemove.add ( scope.getVar ( name )  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^154^155^^^^144^163^n.removeChild ( nameNode ) ; compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P1_Replace_Type]^char name = nameNode.getchar (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^String name = parent.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^String name = nameNode.removeChild (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^String name = nameNode .getParent (  )  ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^int type = ancestor.getType (  ) ;String name = nameNode.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^String lcName = name.toLowerCase (  ) ;String name = nameNode.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = nameNode.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;String name = nameNode.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String name = nameNode.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^isStripName ( propNode.getString (  )  ) ;String name = nameNode.getString (  ) ;^148^^^^^144^163^String name = nameNode.getString (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^isCallWhoseReturnValueShouldBeStripped ( parent.getFirstChild (  )  )  )  {^150^^^^^144^163^isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^qualifiedNameBeginsWithStripType ( nameNode.getFirstChild (  )  )  )  {^150^^^^^144^163^isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^isCallWhoseReturnValueShouldBeStripped ( nameNode.removeChild (  )  )  )  {^150^^^^^144^163^isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^isCallWhoseReturnValueShouldBeStripped ( nameNode .getLastChild (  )   )  )  {^150^^^^^144^163^isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^150^151^152^^^144^163^isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {  Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P8_Replace_Mix]^n.replaceChild ( parentameNode ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^nameNode = parent.getNext (  )  )  {^147^^^^^144^163^nameNode = nameNode.getNext (  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^nameNode = nameNode.removeChild (  )  )  {^147^^^^^144^163^nameNode = nameNode.getNext (  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^147^148^^^^144^163^nameNode = nameNode.getNext (  )  )  { String name = nameNode.getString (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P8_Replace_Mix]^isCallWhoseReturnValueShouldBeStripped ( parent.removeChild (  )  )  )  {^150^^^^^144^163^isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^152^^^^^144^163^Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P8_Replace_Mix]^n.replaceChild ( parent ) ;^154^^^^^144^163^n.removeChild ( nameNode ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^if  ( !n.hasChildrenameNode (  )  )  {^158^^^^^144^163^if  ( !n.hasChildren (  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^if  ( !n.removeChild (  )  )  {^158^^^^^144^163^if  ( !n.hasChildren (  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P15_Unwrap_Block]^replaceWithEmpty(n, parent); compiler.reportCodeChange();^158^159^160^161^162^144^163^if  ( !n.hasChildren (  )  )  {  replaceWithEmpty ( n, parent ) ; compiler.reportCodeChange (  ) ; }^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P16_Remove_Block]^^158^159^160^161^162^144^163^if  ( !n.hasChildren (  )  )  {  replaceWithEmpty ( n, parent ) ; compiler.reportCodeChange (  ) ; }^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P13_Insert_Block]^if  ( isReferenceToRemovedVar ( t, n )  )  {     replaceWithNull ( n, parent ) ;     compiler.reportCodeChange (  ) ; }^158^^^^^144^163^[Delete]^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^replaceWithEmpty ( nameNode, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^replaceWithEmpty ( n, nameNode ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^replaceWithEmpty (  parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^replaceWithEmpty ( n ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^replaceWithEmpty ( parent, n ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^replaceWithNull ( n, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P8_Replace_Mix]^replaceWithNull ( nameNode, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^160^161^^^^144^163^replaceWithEmpty ( n, parent ) ; compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithEmpty ( n, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithEmpty ( n, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithEmpty ( n, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( n, parent ) ;^160^^^^^144^163^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^161^^^^^144^163^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P14_Delete_Statement]^^161^^^^^144^163^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P5_Replace_Variable]^if  ( !n.hasChildreparent (  )  )  {^158^^^^^144^163^if  ( !n.hasChildren (  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P7_Replace_Invocation]^if  ( !n .getLastChild (  )   )  {^158^^^^^144^163^if  ( !n.hasChildren (  )  )  {^[CLASS] Strip  [METHOD] removeVarDeclarationsByNameOrRvalue [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Node  n  nameNode  parent  String  name  
[P3_Replace_Literal]^while  ( false )  {^195^^^^^180^210^while  ( true )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( rvalue )  )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node ancParent = ancestor.getParent(); replaceWithEmpty(ancestor, ancParent); break;^196^197^198^199^200^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {  Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ; break; }^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P16_Remove_Block]^^196^197^198^199^200^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {  Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ; break; }^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P13_Insert_Block]^if  ( isExpressionNode ( parent )  )  {     Node gramps = parent.getParent (  ) ;     replaceWithEmpty ( parent, gramps ) ; }else {     replaceWithEmpty ( n, parent ) ; }^196^^^^^181^211^[Delete]^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node ancParent = rvalue.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node ancParent = ancestor.removeChild (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^int type = ancestor.getType (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node ancParent = parent.removeChild (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( rvalue, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( ancestor, rvalue ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty (  ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( ancestor ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( ancParent, ancestor ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^replaceWithNull ( ancestor, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithEmpty ( ancestor, parent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( ancestorChild, ancestor ) ;replaceWithEmpty ( ancestor, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithEmpty ( ancestor, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithEmpty ( ancestor, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithEmpty ( ancestor, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( ancestor, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( type != Token.GETPROP || type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( type <= Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( type == Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( type != Token.GETPROP ) {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  (  type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( (type != GETPROP && type != GETELEM) )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( type != GETPROP )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( type != GETELEM )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( type != CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( type != Token.null && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P15_Unwrap_Block]^replaceWithNull(ancestorChild, ancestor); break;^203^204^205^206^207^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P16_Remove_Block]^^203^204^205^206^207^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( rvalue, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( rvalueChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull (  ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChild ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( ancestor, ancestorChild ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChildChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^replaceWithEmpty ( ancestorChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^ancestorChild = parent;^209^^^^^194^224^ancestorChild = ancestor;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^ancestorChild =  rvalue;^209^^^^^194^224^ancestorChild = ancestor;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^ancestor = parent.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^ancestor = ancestor.removeChild (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^ancestor =  rvalue.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node ancParent = ancestor .getNext (  )  ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P1_Replace_Type]^short  type = ancestor.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^int type = rvalue.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^int type = ancestor.removeChild (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^int type = ancestor .getString (  )  ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;int type = ancestor.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;int type = ancestor.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node ancParent = n.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^int type = n.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;int type = ancestor.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( rvalue, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull (  ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChild ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( ancestor, ancestorChild ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChildChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^replaceWithEmpty ( ancestorChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithEmpty ( rvalueChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^206^207^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ; break;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^int type = ancestor.getType (  ) ;ancestor = ancestor.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;ancestor = ancestor.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;ancestor = ancestor.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;ancestor = ancestor.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( parent.getFirstChild (  )  == n || isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( parent.getFirstChild (  )  != n && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( rvalue.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar (  n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( n.getFirstChild (  )  == parent && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  )  == n ) {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  (  isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( (type != GETPROP) && (type != GETELEM) && type != CALL )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( (type != GETPROP && type != GETELEM) )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( type != GETPROP )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( type != GETELEM )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P6_Replace_Expression]^if  ( type != CALL )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( parent.removeChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( parent.getFirstChild (  )  == n && actsOnStripType ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  (  actsOnStripType ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^198^199^^^^183^213^Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^199^200^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ; break;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithEmpty ( rvalueChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^206^207^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ; break;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^ancestorChild =  null;^209^^^^^194^224^ancestorChild = ancestor;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^ancestor = ancestor .getNext (  )  ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^ancestor =  n.getParent (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node ancParent = parent.getParent (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( NodeUtil .removeChild ( ancestorChild )   )  {^196^^^^^181^211^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node ancParent = rvalue .getNext (  )  ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithEmpty ( parent, ancParent ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( rvalueChild, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithNull ( parent, ancestor ) ;^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^206^^^^^191^221^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^ancestor = rvalue.removeChild (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithNull ( ancestor, rvalue ) ;^199^^^^^184^214^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( type < Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithEmpty ( parentChild, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node ancestor = rvalue.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node ancestor = parent.removeChild (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node ancestor = parent .getNext (  )  ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestorChild = parent;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node ancestorChild = n;^194^^^^^179^209^Node ancestorChild = parent;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node ancestorChild = rvalue;^194^^^^^179^209^Node ancestorChild = parent;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node ancestorChild = parent;^194^^^^^179^209^Node ancestorChild = parent;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestorChild = n;Node ancestorChild = parent;^194^^^^^179^209^Node ancestorChild = parent;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent;Node ancestorChild = parent;^194^^^^^179^209^Node ancestorChild = parent;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^int type = parent.getType (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node ancestor = n.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node ancestor = rvalue.removeChild (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^193^194^^^^178^208^Node ancestor = parent.getParent (  ) ; Node ancestorChild = parent;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;Node ancestor = parent.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^int type = rvalue.removeChild (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^212^^^^^197^227^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^212^^^^^197^227^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node ancParent = rvalue.removeChild (  ) ;^198^^^^^183^213^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( type >= Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^203^204^205^^^188^218^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithNull ( parent, ancestor ) ;^206^^^^^203^208^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar ( t, parent )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar (  n )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar ( t )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( actsOnStripType ( t, n )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( isReferenceToRemovedVar ( t, rvalue )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( parent.getFirstChild (  )  >= n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( n.getFirstChild (  )  == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( parent.getFirstChild (  )  == rvalue )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( n.getFirstChild (  )  == parent )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( parent.removeChild (  )  == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( parent .getLastChild (  )   == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P9_Replace_Statement]^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( n, rvalue ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull (  parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( n ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( parent, n ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^replaceWithEmpty ( n, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithEmpty ( n, rvalue ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^245^246^^^^229^247^replaceWithNull ( n, parent ) ; compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( ancestorChild, ancestor ) ;replaceWithNull ( n, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( n, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithNull ( n, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithNull ( n, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^maybeRemoveCall ( t, n, parent ) ;replaceWithNull ( n, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithNull ( n, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^246^^^^^229^247^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^246^^^^^229^247^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( gramps )   )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( rvalue )  )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node rvalue = parent.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node rvalue = n.removeChild (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node function = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node expression = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node rvalue = greatGramps.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node rvalue = n .getParent (  )  ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node rvalue = rvalue.removeChild (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^238^239^^^^231^242^Node rvalue = n.getNext (  ) ; parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^parent.removeChild ( greatGramps ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^parent.replaceChild ( rvalue ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( key ) ;parent.removeChild ( rvalue ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;parent.removeChild ( rvalue ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( nameNode ) ;parent.removeChild ( rvalue ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;parent.removeChild ( rvalue ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, rvalue ) ;parent.removeChild ( rvalue ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( rvalue, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent, n ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild (  rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^gramps .removeChild ( ancestor )  ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^gramps.replaceChild ( n, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;gramps.replaceChild ( parent, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;gramps.replaceChild ( parent, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^parent.removeChild ( rvalue ) ;gramps.replaceChild ( parent, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^241^^^^^231^242^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^241^^^^^231^242^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node greatGramps = rvalue.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node greatGramps = gramps.removeChild (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node greatGramps = gramps.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node greatGramps = gramps.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node greatGramps = gramps.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node greatGramps = gramps.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node greatGramps = gramps.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node greatGramps = gramps.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node greatGramps = n.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node greatGramps = gramps .getNext (  )  ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node greatGramps = rvalue.removeChild (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^233^234^^^^218^248^Node greatGramps = gramps.getParent (  ) ; replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( rvalue, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( gramps, rvalue ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty (  greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( gramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( greatGramps, gramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^replaceWithNull ( gramps, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithEmpty ( gramps, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithEmpty ( gramps, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithEmpty ( gramps, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( gramps, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^235^^^^^220^250^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^235^^^^^220^250^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node gramps = rvalue.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node gramps = parent.removeChild (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node gramps = parent .getNext (  )  ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node gramps = n.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node greatGramps = parent.getParent (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node rvalue = parent.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node rvalue = n.removeChild (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node function = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node expression = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node rvalue = n.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithEmpty ( parent, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^234^235^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ; compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node rvalue = rvalue.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^Node rvalue = n .getParent (  )  ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^238^239^^^^223^253^Node rvalue = n.getNext (  ) ; parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^parent.removeChild ( n ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^parent.replaceChild ( rvalue ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^parent.removeChild ( greatGramps ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^239^240^^^^224^254^parent.removeChild ( rvalue ) ; gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( key ) ;parent.removeChild ( rvalue ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;parent.removeChild ( rvalue ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( nameNode ) ;parent.removeChild ( rvalue ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;parent.removeChild ( rvalue ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, rvalue ) ;parent.removeChild ( rvalue ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( rvalue, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent, greatGramps ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild (  rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( rvalue, parent ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^gramps .removeChild ( greatGramps )  ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^gramps.replaceChild ( n, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;gramps.replaceChild ( parent, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;gramps.replaceChild ( parent, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^parent.removeChild ( rvalue ) ;gramps.replaceChild ( parent, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^241^^^^^226^256^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^241^^^^^226^256^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node rvalue = rvalue.getNext (  ) ;^238^^^^^231^242^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^parent.removeChild ( n ) ;^239^^^^^231^242^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( rvalue, parent ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node rvalue = greatGramps.getNext (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( greatGramps.getFirstChild (  )  == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node gramps = n.removeChild (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithEmpty ( gramps, parent ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^parent .removeChild ( ancestorChild )  ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent, parent ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( greatGramps, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( n, rvalue ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull (  parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( n ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( parent, n ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^replaceWithEmpty ( n, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithEmpty ( n, rvalue ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( ancestorChild, ancestor ) ;replaceWithNull ( n, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( n, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithNull ( n, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithNull ( n, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^maybeRemoveCall ( t, n, parent ) ;replaceWithNull ( n, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithNull ( n, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^246^^^^^231^261^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^246^^^^^231^261^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P2_Replace_Operator]^if  ( parent.getFirstChild (  )  != n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( greatGramps, parent ) ;^245^^^^^229^247^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^240^241^^^^231^242^gramps.replaceChild ( parent, rvalue ) ; compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithNull ( rvalue, greatGramps ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node gramps = greatGramps.getParent (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( n )  )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithNull ( gramps, rvalue ) ;^234^^^^^219^249^replaceWithEmpty ( gramps, greatGramps ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node rvalue = greatGramps.removeChild (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^parent.replaceChild ( n ) ;^239^^^^^224^254^parent.removeChild ( rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^240^241^^^^225^255^gramps.replaceChild ( parent, rvalue ) ; compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent, parent ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^gramps.replaceChild ( greatGramps, rvalue ) ;^240^^^^^231^242^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar ( t, rvalue )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar (  n )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar ( t )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( actsOnStripType ( t, n )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P15_Unwrap_Block]^replaceWithNull(n, parent); compiler.reportCodeChange();^252^253^254^255^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  { replaceWithNull ( n, parent ) ; compiler.reportCodeChange (  ) ; }^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P16_Remove_Block]^^252^253^254^255^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  { replaceWithNull ( n, parent ) ; compiler.reportCodeChange (  ) ; }^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P13_Insert_Block]^if  ( ! ( n.hasChildren (  )  )  )  {     replaceWithEmpty ( n, parent ) ;     compiler.reportCodeChange (  ) ; }^252^^^^^237^267^[Delete]^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( rvalue, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( n, greatGramps ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull (  parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( n ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( parent, n ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^replaceWithEmpty ( n, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^replaceWithNull ( n, rvalue ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( ancestorChild, ancestor ) ;replaceWithNull ( n, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( n, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithNull ( n, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithNull ( n, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^maybeRemoveCall ( t, n, parent ) ;replaceWithNull ( n, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithNull ( n, parent ) ;^253^^^^^238^268^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^254^^^^^239^269^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^254^^^^^239^269^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^int type = n.removeChild (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node greatGramps = parent.removeChild (  ) ;^233^^^^^218^248^Node greatGramps = gramps.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^switch  ( n.getType (  )  )  {^174^^^^^159^189^switch  ( parent.getType (  )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^switch  ( parent.removeChild (  )  )  {^174^^^^^159^189^switch  ( parent.getType (  )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^switch  ( rvalue.getType (  )  )  {^174^^^^^159^189^switch  ( parent.getType (  )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( parent .getLastChild (  )   == n && isReferenceToRemovedVar ( t, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( parent.getFirstChild (  )  == t && isReferenceToRemovedVar ( n, n )  )  {^187^^^^^172^202^if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node ancestor = greatGramps.getParent (  ) ;^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^193^^^^^178^208^Node ancestor = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^int type = parent.removeChild (  ) ;^202^^^^^187^217^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^ancestor = n.removeChild (  ) ;^210^^^^^195^225^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar ( n, t )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( actsOnStripType ( t, greatGramps )  )  {^228^^^^^213^243^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( rvalue.getFirstChild (  )  == n )  {^229^^^^^214^244^if  ( parent.getFirstChild (  )  == n )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node gramps = rvalue.removeChild (  ) ;^230^^^^^215^245^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( n )   )  {^231^^^^^216^246^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^Node rvalue = parent.removeChild (  ) ;^238^^^^^223^253^Node rvalue = n.getNext (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^gramps.replaceChild ( greatGramps, rvalue ) ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^gramps .removeChild ( gramps )  ;^240^^^^^225^255^gramps.replaceChild ( parent, rvalue ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^replaceWithNull ( rvalue, parent ) ;^245^^^^^230^260^replaceWithNull ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar ( t, greatGramps )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^if  ( isReferenceToRemovedVar ( n, t )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P8_Replace_Mix]^if  ( actsOnStripType ( t, greatGramps )  )  {^252^^^^^237^267^if  ( isReferenceToRemovedVar ( t, n )  )  {^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P14_Delete_Statement]^^253^254^^^^238^268^replaceWithNull ( n, parent ) ; compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveReferenceToRemovedVariable [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  int  type  
[P5_Replace_Variable]^Node lvalue = parent.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^Node lvalue = n.removeChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P8_Replace_Mix]^Node lvalue = parent.removeChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node function = n.getFirstChild (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node expression = n.getFirstChild (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node lvalue = n.getFirstChild (  ) ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^Node lvalue = n .getLastChild (  )  ;^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P14_Delete_Statement]^^274^^^^^269^285^Node lvalue = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P2_Replace_Operator]^if  ( nameEndsWithFieldNameToStrip ( lvalue )  && qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^if  ( nameEndsWithFieldNameToStrip ( parent )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^if  ( parentameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^if  ( lvalueameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P6_Replace_Expression]^if  ( nameEndsWithFieldNameToStrip ( lvalue )  ) {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P6_Replace_Expression]^if  (  qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^if  ( qualifiedNameBeginsWithStripType ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || nameEndsWithFieldNameToStrip ( lvalue )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P8_Replace_Mix]^if  ( nameEndsWithFieldNameToStrip ( parent )  ) {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P9_Replace_Statement]^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^275^276^^^^269^285^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P13_Insert_Block]^if  (  ( nameEndsWithFieldNameToStrip ( expression )  )  ||  ( qualifiedNameBeginsWithStripType ( expression )  )  )  {     if  ( isExpressionNode ( parent )  )  {         Node gramps = parent.getParent (  ) ;         replaceWithEmpty ( parent, gramps ) ;     }else {         replaceWithEmpty ( n, parent ) ;     }     compiler.reportCodeChange (  ) ; }^275^^^^^269^285^[Delete]^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P13_Insert_Block]^if  ( isExpressionNode ( parent )  )  {     Node gramps = parent.getParent (  ) ;     replaceWithEmpty ( parent, gramps ) ; }else {     replaceWithEmpty ( n, parent ) ; }^275^^^^^269^285^[Delete]^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( n )  )  {^277^^^^^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^277^^^^^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^277^^^^^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node gramps = parent.getParent(); replaceWithEmpty(parent, gramps);^277^278^279^280^281^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  { Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ; } else { replaceWithEmpty ( n, parent ) ; }^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P16_Remove_Block]^^277^278^279^280^281^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  { Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ; } else { replaceWithEmpty ( n, parent ) ; }^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P13_Insert_Block]^if  (  ( nameEndsWithFieldNameToStrip ( lvalue )  )  ||  ( qualifiedNameBeginsWithStripType ( lvalue )  )  )  {     if  ( isExpressionNode ( parent )  )  {         Node gramps = parent.getParent (  ) ;         replaceWithEmpty ( parent, gramps ) ;     }else {         replaceWithEmpty ( n, parent ) ;     }     compiler.reportCodeChange (  ) ; }^277^^^^^269^285^[Delete]^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P13_Insert_Block]^if  (  ( nameEndsWithFieldNameToStrip ( expression )  )  ||  ( qualifiedNameBeginsWithStripType ( expression )  )  )  {     if  ( isExpressionNode ( parent )  )  {         Node gramps = parent.getParent (  ) ;         replaceWithEmpty ( parent, gramps ) ;     }else {         replaceWithEmpty ( n, parent ) ;     }     compiler.reportCodeChange (  ) ; }^277^^^^^269^285^[Delete]^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P13_Insert_Block]^if  ( isExpressionNode ( ancestor )  )  {     Node ancParent = ancestor.getParent (  ) ;     replaceWithEmpty ( ancestor, ancParent ) ;     break; }^277^^^^^269^285^[Delete]^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( lvalue, parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( n, lvalue ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty (  parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( n ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( parent, n ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^replaceWithNull ( n, parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P14_Delete_Statement]^^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithEmpty ( n, parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithEmpty ( n, parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithEmpty ( n, parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( n, parent ) ;^281^^^^^269^285^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^Node gramps = n.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^Node gramps = parent.removeChild (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P8_Replace_Mix]^Node gramps = n.removeChild (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P14_Delete_Statement]^^278^279^^^^269^285^Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( n, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( parent, n ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty (  gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( parent ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( gramps, parent ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^replaceWithNull ( parent, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P14_Delete_Statement]^^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithEmpty ( parent, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithEmpty ( parent, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithEmpty ( parent, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( parent, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( lvalue )   )  {^277^^^^^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^283^^^^^269^285^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P14_Delete_Statement]^^283^^^^^269^285^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( parent )   )  {^277^^^^^269^285^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^Node gramps = parent .getNext (  )  ;^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P14_Delete_Statement]^^278^^^^^269^285^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^qualifiedNameBeginsWithStripType ( parent )  )  {^276^^^^^269^285^qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P7_Replace_Invocation]^nameEndsWithFieldNameToStrip ( lvalue )  )  {^276^^^^^269^285^qualifiedNameBeginsWithStripType ( lvalue )  )  {^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P8_Replace_Mix]^replaceWithNull ( n, gramps ) ;^279^^^^^269^285^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateAssignmentByLvalueName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  lvalue  n  parent  
[P5_Replace_Variable]^Node expression = parent.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^Node expression = n.removeChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^Node expression = n .getLastChild (  )  ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node expression = n.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node function = n.getFirstChild (  ) ;Node expression = n.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node expression = n.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node expression = n.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node expression = n.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node expression = n.getFirstChild (  ) ;^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P14_Delete_Statement]^^303^^^^^299^314^Node expression = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P2_Replace_Operator]^if  ( nameEndsWithFieldNameToStrip ( expression )  && qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^if  ( parentameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^if  ( expressionameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P6_Replace_Expression]^if  ( nameEndsWithFieldNameToStrip ( expression )  ) {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P6_Replace_Expression]^if  (  qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^if  ( qualifiedNameBeginsWithStripType ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^if  ( nameEndsWithFieldNameToStrip ( expression )  || nameEndsWithFieldNameToStrip ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P8_Replace_Mix]^if  ( nameEndsWithFieldNameToStrip ( parent )  || qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P9_Replace_Statement]^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^304^305^^^^299^314^if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P13_Insert_Block]^if  (  ( nameEndsWithFieldNameToStrip ( lvalue )  )  ||  ( qualifiedNameBeginsWithStripType ( lvalue )  )  )  {     if  ( isExpressionNode ( parent )  )  {         Node gramps = parent.getParent (  ) ;         replaceWithEmpty ( parent, gramps ) ;     }else {         replaceWithEmpty ( n, parent ) ;     }     compiler.reportCodeChange (  ) ; }^304^^^^^299^314^[Delete]^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P13_Insert_Block]^if  ( isExpressionNode ( parent )  )  {     Node gramps = parent.getParent (  ) ;     replaceWithEmpty ( parent, gramps ) ; }else {     replaceWithEmpty ( n, parent ) ; }^304^^^^^299^314^[Delete]^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( n )  )  {^306^^^^^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^306^^^^^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^306^^^^^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node gramps = parent.getParent(); replaceWithEmpty(parent, gramps);^306^307^308^309^310^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  { Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ; } else { replaceWithEmpty ( n, parent ) ; }^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P16_Remove_Block]^^306^307^308^309^310^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  { Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ; } else { replaceWithEmpty ( n, parent ) ; }^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P13_Insert_Block]^if  (  ( nameEndsWithFieldNameToStrip ( lvalue )  )  ||  ( qualifiedNameBeginsWithStripType ( lvalue )  )  )  {     if  ( isExpressionNode ( parent )  )  {         Node gramps = parent.getParent (  ) ;         replaceWithEmpty ( parent, gramps ) ;     }else {         replaceWithEmpty ( n, parent ) ;     }     compiler.reportCodeChange (  ) ; }^306^^^^^299^314^[Delete]^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P13_Insert_Block]^if  (  ( nameEndsWithFieldNameToStrip ( expression )  )  ||  ( qualifiedNameBeginsWithStripType ( expression )  )  )  {     if  ( isExpressionNode ( parent )  )  {         Node gramps = parent.getParent (  ) ;         replaceWithEmpty ( parent, gramps ) ;     }else {         replaceWithEmpty ( n, parent ) ;     }     compiler.reportCodeChange (  ) ; }^306^^^^^299^314^[Delete]^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P13_Insert_Block]^if  ( isExpressionNode ( ancestor )  )  {     Node ancParent = ancestor.getParent (  ) ;     replaceWithEmpty ( ancestor, ancParent ) ;     break; }^306^^^^^299^314^[Delete]^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( gramps, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( n, gramps ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty (  parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( n ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( parent, n ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^replaceWithNull ( n, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P14_Delete_Statement]^^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithEmpty ( n, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithEmpty ( n, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithEmpty ( n, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( n, parent ) ;^310^^^^^299^314^replaceWithEmpty ( n, parent ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^Node gramps = n.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^Node gramps = parent.removeChild (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P8_Replace_Mix]^Node gramps = n.removeChild (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^Node gramps = parent .getNext (  )  ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P14_Delete_Statement]^^307^308^^^^299^314^Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( n, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( parent, n ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty (  gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( parent ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^replaceWithEmpty ( gramps, parent ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^replaceWithNull ( parent, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P14_Delete_Statement]^^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithEmpty ( parent, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithEmpty ( parent, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithEmpty ( parent, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( parent, gramps ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P14_Delete_Statement]^^307^^^^^299^314^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^312^^^^^299^314^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P14_Delete_Statement]^^312^^^^^299^314^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( n )   )  {^306^^^^^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P8_Replace_Mix]^replaceWithNull ( parent, n ) ;^308^^^^^299^314^replaceWithEmpty ( parent, gramps ) ;^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P5_Replace_Variable]^qualifiedNameBeginsWithStripType ( parent )  )  {^305^^^^^299^314^qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^nameEndsWithFieldNameToStrip ( expression )  )  {^305^^^^^299^314^qualifiedNameBeginsWithStripType ( expression )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( gramps )   )  {^306^^^^^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P8_Replace_Mix]^if  ( NodeUtil .removeChild ( expression )   )  {^306^^^^^299^314^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] Strip  [METHOD] maybeEliminateExpressionByName [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  expression  gramps  n  parent  
[P3_Replace_Literal]^while  ( false )  {^336^^^^^321^351^while  ( true )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( ancestor.getFirstChild (  )  >= ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( parent.getFirstChild (  )  != ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( ancestor.getFirstChild (  )  != parent )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( ancestorChild.getFirstChild (  )  != ancestor )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^if  ( ancestor.removeChild (  )  != ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^if  ( ancestor .getLastChild (  )   != parent )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P9_Replace_Statement]^if  ( parent.getFirstChild (  )  == n )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P15_Unwrap_Block]^replaceWithNull(ancestorChild, ancestor); break;^337^338^339^340^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P16_Remove_Block]^^337^338^339^340^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( parent, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( parentChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull (  ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChild ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestor, ancestorChild ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChildChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^replaceWithEmpty ( ancestorChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^replaceWithEmpty ( parent, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^341^^^^^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( ancestor )   )  {^341^^^^^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^341^^^^^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node ancParent = ancestor.getParent(); replaceWithEmpty(ancestor, ancParent); break;^341^342^343^344^345^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {  Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ; break; }^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P16_Remove_Block]^^341^342^343^344^345^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {  Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ; break; }^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P13_Insert_Block]^if  ( isExpressionNode ( parent )  )  {     Node gramps = parent.getParent (  ) ;     replaceWithEmpty ( parent, gramps ) ; }else {     replaceWithEmpty ( n, parent ) ; }^341^^^^^326^356^[Delete]^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^Node ancParent = ancestor.removeChild (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^Node ancParent = parent.removeChild (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^int type = ancestor.getType (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^Node ancParent = n.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;Node ancParent = ancestor.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithEmpty ( parent, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithEmpty ( ancestor, parent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithEmpty (  ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithEmpty ( ancestor ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithEmpty ( ancParent, ancestor ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^replaceWithNull ( ancestor, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^replaceWithNull ( parent, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( ancestorChild, ancestor ) ;replaceWithEmpty ( ancestor, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( gramps, greatGramps ) ;replaceWithEmpty ( ancestor, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( parent, gramps ) ;replaceWithEmpty ( ancestor, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( n, parent ) ;replaceWithEmpty ( ancestor, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithEmpty ( ancestor, ancParent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( type != Token.GETPROP || type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( type == Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( type > Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( ancestorLevel != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( type != Token.GETPROP ) {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  (  type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( (type != GETPROP && type != GETELEM) )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( type != GETPROP )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( type != GETELEM )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( type != CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P15_Unwrap_Block]^replaceWithNull(ancestorChild, ancestor); break;^348^349^350^351^352^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P16_Remove_Block]^^348^349^350^351^352^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( parent, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( parentChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull (  ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChild ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestor, ancestorChild ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChildChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^replaceWithEmpty ( ancestorChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^351^^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^ancestorChild = parent;^354^^^^^339^369^ancestorChild = ancestor;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^ancestor = ancestor.removeChild (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^ancestor =  null.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^Node ancParent = parent.getParent (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^Node ancParent = ancestor .getNext (  )  ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P1_Replace_Type]^short  type = ancestor.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^int type = parent.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^int type = ancestor.removeChild (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;int type = ancestor.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;int type = ancestor.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^if  ( n.getFirstChild (  )  != ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^338^339^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ; break;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^344^345^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ; break;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^int type = ancestor .getString (  )  ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;int type = ancestor.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( parent, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( parentChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull (  ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChild ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestor, ancestorChild ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^replaceWithNull ( ancestorChildChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^replaceWithEmpty ( ancestorChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^351^352^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ; break;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithEmpty ( ancestor, ancParent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^replaceWithNull ( n, parent ) ;replaceWithNull ( ancestorChild, ancestor ) ;^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^ancestor = n.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^ancestor = ancestor .getNext (  )  ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^ancestor = parent.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^int type = ancestor.getType (  ) ;ancestor = ancestor.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;ancestor = ancestor.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;ancestor = ancestor.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;ancestor = ancestor.getParent (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval ( t, n, n )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval (  n, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval ( t,  parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval ( t, n )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval ( t, parent, n )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( (type != GETPROP) && (type != GETELEM) && type != CALL )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( (type != GETPROP && type != GETELEM) )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( type != GETPROP )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( type != GETELEM )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P6_Replace_Expression]^if  ( type != CALL )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^if  ( maybeRemoveCall ( t, n, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( ancestor.getFirstChild (  )  == ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^if  ( parent.removeChild (  )  != ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( parent )   )  {^341^^^^^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^343^344^^^^328^358^Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( type >= Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( type != Token.GETPROP && type != Token.null && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^replaceWithEmpty ( parentChild, ancestor ) ;^338^^^^^323^353^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( n )  )  {^341^^^^^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^Node ancParent = n.removeChild (  ) ;^343^^^^^328^358^Node ancParent = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^replaceWithNull ( ancestor, parent ) ;^344^^^^^329^359^replaceWithEmpty ( ancestor, ancParent ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^351^^^^^336^366^replaceWithNull ( ancestorChild, ancestor ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P2_Replace_Operator]^if  ( ancestor.getFirstChild (  )  > ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( n )   )  {^341^^^^^326^356^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( type != Token.GETPROP && type != Token.2 && type != Token.CALL )  {^348^349^350^^^333^363^if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^351^352^^^^348^353^replaceWithNull ( ancestorChild, ancestor ) ; break;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^ancestorChild =  null;^354^^^^^339^369^ancestorChild = ancestor;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^Node ancestor = n;^333^^^^^318^348^Node ancestor = parent;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node ancestor = parent;^333^^^^^318^348^Node ancestor = parent;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestorChild = n;Node ancestor = parent;^333^^^^^318^348^Node ancestor = parent;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestorChild = parent;Node ancestor = parent;^333^^^^^318^348^Node ancestor = parent;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^Node ancestorChild = parent;^334^^^^^319^349^Node ancestorChild = n;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^int ancestorLevel = 1;Node ancestorChild = n;^334^^^^^319^349^Node ancestorChild = n;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestorChild = parent;Node ancestorChild = n;^334^^^^^319^349^Node ancestorChild = n;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestor = parent;Node ancestorChild = n;^334^^^^^319^349^Node ancestorChild = n;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P1_Replace_Type]^short  ancestorLevel = 1;^335^^^^^320^350^int ancestorLevel = 1;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P3_Replace_Literal]^int ancestorLevel = ancestorLevel;^335^^^^^320^350^int ancestorLevel = 1;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P11_Insert_Donor_Statement]^Node ancestorChild = n;int ancestorLevel = 1;^335^^^^^320^350^int ancestorLevel = 1;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^int type = n.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^357^^^^^342^372^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P14_Delete_Statement]^^357^^^^^342^372^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P3_Replace_Literal]^int ancestorLevel = -4;^335^^^^^320^350^int ancestorLevel = 1;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P1_Replace_Type]^long  type = ancestor.getType (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^int type = n.removeChild (  ) ;^347^^^^^332^362^int type = ancestor.getType (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval ( t, ancestorChild, parent )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval ( t, n, ancestorChild )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^if  ( isMethodCallThatTriggersRemoval ( parent, n, t )  )  {^328^^^^^313^343^if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P7_Replace_Invocation]^if  ( ancestor .getLastChild (  )   != ancestorChild )  {^337^^^^^322^352^if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P8_Replace_Mix]^ancestor = parent.removeChild (  ) ;^355^^^^^340^370^ancestor = ancestor.getParent (  ) ;^[CLASS] Strip  [METHOD] maybeRemoveCall [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancParent  ancestor  ancestorChild  n  parent  int  ancestorLevel  type  
[P5_Replace_Variable]^Node key = value.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^Node key = n.removeChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node key = n.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node function = n.getFirstChild (  ) ;Node key = n.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node expression = n.getFirstChild (  ) ;Node key = n.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node key = n.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node key = n.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node key = n.getFirstChild (  ) ;^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P14_Delete_Statement]^^373^^^^^368^387^Node key = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P2_Replace_Operator]^while  ( key == null )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P5_Replace_Variable]^while  ( next != null )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P5_Replace_Variable]^while  ( n != keyull )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P8_Replace_Mix]^while  ( key != nextull )  {^374^^^^^368^387^while  ( key != null )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P2_Replace_Operator]^if  ( key.getType (  )  == Token.STRING || isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P2_Replace_Operator]^if  ( key.getType (  )  != Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P5_Replace_Variable]^if  ( next.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P5_Replace_Variable]^if  ( key.getType (  )  == Token.0 && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P6_Replace_Expression]^if  ( key.getType (  )  == Token.STRING ) {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P6_Replace_Expression]^if  (  isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P6_Replace_Expression]^if  ( key.getType (  )  == STRING )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^if  ( key.removeChild (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^if  ( key .getString (  )   == Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^if  ( key.getType (  )  == Token.STRING && qualifiedNameBeginsWithStripType ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^if  ( key.getType (  )  == Token.STRING && isStripName ( key.removeChild (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P8_Replace_Mix]^if  ( next.getType (  )  == Token.STRING ) {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P5_Replace_Variable]^key = value.getNext (  ) .getNext (  ) ;^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^key = key.getClassesDefinedByCall (  ) .getNext (  ) ;^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^key = key.removeChild (  ) .getNext (  ) ;^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^key = key .getParent (  )^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P14_Delete_Statement]^^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;key = key.getNext (  ) .getNext (  ) ;^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P5_Replace_Variable]^key = value;^381^^^^^368^387^key = next;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^Node value = key.removeChild (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node value = key.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P5_Replace_Variable]^Node next = n.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^Node next = value.removeChild (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^Node next = value .getParent (  )  ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node next = value.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node next = value.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node next = value.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node next = value.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node next = value.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node next = value.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P5_Replace_Variable]^Node value = value.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P14_Delete_Statement]^^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P5_Replace_Variable]^Node next = next.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P14_Delete_Statement]^^378^379^^^^368^387^Node next = value.getNext (  ) ; n.removeChild ( key ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^key = key.getNext (  ) .getNext (  ) ;Node next = value.getNext (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P5_Replace_Variable]^n.removeChild ( value ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^n.replaceChild ( key ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P8_Replace_Mix]^n.replaceChild ( value ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P14_Delete_Statement]^^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;n.removeChild ( key ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^n.removeChild ( nameNode ) ;n.removeChild ( key ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;n.removeChild ( key ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^parent.removeChild ( rvalue ) ;n.removeChild ( key ) ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P5_Replace_Variable]^n.removeChild ( next ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^n.replaceChild ( value ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^n .removeChild ( n )  ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P14_Delete_Statement]^^380^381^^^^368^387^n.removeChild ( value ) ; key = next;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^n.removeChild ( key ) ;n.removeChild ( value ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent, n ) ;n.removeChild ( value ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^n.removeChild ( nameNode ) ;n.removeChild ( value ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, rvalue ) ;n.removeChild ( value ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P11_Insert_Donor_Statement]^parent.removeChild ( rvalue ) ;n.removeChild ( value ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) ;^382^^^^^368^387^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P14_Delete_Statement]^^382^^^^^368^387^compiler.reportCodeChange (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P5_Replace_Variable]^Node value = next.getNext (  ) ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P5_Replace_Variable]^if  ( value.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^qualifiedNameBeginsWithStripType ( key.getString (  )  )  )  {^376^^^^^368^387^isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^isStripName ( key.removeChild (  )  )  )  {^376^^^^^368^387^isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P8_Replace_Mix]^isStripName ( key .getParent (  )   )  )  {^376^^^^^368^387^isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P14_Delete_Statement]^^376^377^^^^368^387^isStripName ( key.getString (  )  )  )  { Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P5_Replace_Variable]^isStripName ( value.getString (  )  )  )  {^376^^^^^368^387^isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P14_Delete_Statement]^^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^n .removeChild ( n )  ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^n .removeChild ( key )  ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P8_Replace_Mix]^n .removeChild ( value )  ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P14_Delete_Statement]^^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P8_Replace_Mix]^key = value.removeChild (  ) .getNext (  ) ;^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P8_Replace_Mix]^key = value .getParent (  )^384^^^^^368^387^key = key.getNext (  ) .getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P2_Replace_Operator]^if  ( key.getType (  )  > Token.STRING && isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^Node value = key .getParent (  )  ;^377^^^^^368^387^Node value = key.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P14_Delete_Statement]^^377^378^^^^368^387^Node value = key.getNext (  ) ; Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P7_Replace_Invocation]^n .removeChild ( key )  ;^379^^^^^368^387^n.removeChild ( key ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P14_Delete_Statement]^^379^380^^^^368^387^n.removeChild ( key ) ; n.removeChild ( value ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P8_Replace_Mix]^n.replaceChild ( next ) ;^380^^^^^368^387^n.removeChild ( value ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P8_Replace_Mix]^Node next = n .getParent (  )  ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P8_Replace_Mix]^Node next = next.removeChild (  ) ;^378^^^^^368^387^Node next = value.getNext (  ) ;^[CLASS] Strip  [METHOD] eliminateKeysWithStripNamesFromObjLit [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] boolean  NodeTraversal  t  Node  key  n  next  value  
[P2_Replace_Operator]^return n != null || n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P2_Replace_Operator]^return n == null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P2_Replace_Operator]^return n != null && n.getType (  )  != Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P2_Replace_Operator]^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  && nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P7_Replace_Invocation]^return n != null && n.removeChild (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P7_Replace_Invocation]^return n != null && n.getType (  )  == Token.CALL && n.removeChild (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P7_Replace_Invocation]^return n != null && n.getType (  )  == Token.CALL && n .getLastChild (  )  &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P7_Replace_Invocation]^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P7_Replace_Invocation]^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.removeChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P7_Replace_Invocation]^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P8_Replace_Mix]^return n != true && n.getType (  )  == Token.CALL && n.removeChild (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P14_Delete_Statement]^^403^404^405^^^402^406^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P7_Replace_Invocation]^&&  ( nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^404^405^^^^402^406^&&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P7_Replace_Invocation]^&&  ( qualifiedNameBeginsWithStripType ( n.removeChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^404^405^^^^402^406^&&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P7_Replace_Invocation]^&&  ( qualifiedNameBeginsWithStripType ( n .getLastChild (  )   )  || nameEndsWithFieldNameToStrip ( n^404^405^^^^402^406^&&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P14_Delete_Statement]^^404^405^406^^^402^406^&&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ; }^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P7_Replace_Invocation]^qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  ) ;^405^^^^^402^406^nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P7_Replace_Invocation]^nameEndsWithFieldNameToStrip ( n.removeChild (  )  )  ) ;^405^^^^^402^406^nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P14_Delete_Statement]^^405^^^^^402^406^nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P7_Replace_Invocation]^nameEndsWithFieldNameToStrip ( n .getLastChild (  )   )  ) ;^405^^^^^402^406^nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[CLASS] Strip  [METHOD] isCallWhoseReturnValueShouldBeStripped [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P1_Replace_Type]^char name = n.getQualifiedName (  ) ;^418^^^^^417^420^String name = n.getQualifiedName (  ) ;^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  String  name  
[P7_Replace_Invocation]^String name = n.removeChild (  ) ;^418^^^^^417^420^String name = n.getQualifiedName (  ) ;^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  String  name  
[P11_Insert_Donor_Statement]^String lcName = name.toLowerCase (  ) ;String name = n.getQualifiedName (  ) ;^418^^^^^417^420^String name = n.getQualifiedName (  ) ;^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  String  name  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = n.getQualifiedName (  ) ;^418^^^^^417^420^String name = n.getQualifiedName (  ) ;^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  String  name  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = n.getQualifiedName (  ) ;^418^^^^^417^420^String name = n.getQualifiedName (  ) ;^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  String  name  
[P12_Insert_Condition]^if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  { String name = n.getQualifiedName (  ) ; return qualifiedNameBeginsWithStripType ( name ) ; }^418^419^^^^417^420^String name = n.getQualifiedName (  ) ; return qualifiedNameBeginsWithStripType ( name ) ;^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  String  name  
[P14_Delete_Statement]^^418^419^420^^^417^420^String name = n.getQualifiedName (  ) ; return qualifiedNameBeginsWithStripType ( name ) ; }^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  String  name  
[P12_Insert_Condition]^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  { return qualifiedNameBeginsWithStripType ( name ) ; }^419^^^^^417^420^return qualifiedNameBeginsWithStripType ( name ) ;^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  String  name  
[P12_Insert_Condition]^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  { return qualifiedNameBeginsWithStripType ( name ) ; }^419^^^^^417^420^return qualifiedNameBeginsWithStripType ( name ) ;^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  String  name  
[P14_Delete_Statement]^^419^420^^^^417^420^return qualifiedNameBeginsWithStripType ( name ) ; }^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  String  name  
[P2_Replace_Operator]^if  ( name == null )  {^432^^^^^431^445^if  ( name != null )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P6_Replace_Expression]^if  ( name.equals(type) || name.startsWith((type + ".")) )  {^432^^^^^431^445^if  ( name != null )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P6_Replace_Expression]^if  ( type + "." )  {^432^^^^^431^445^if  ( name != null )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P8_Replace_Mix]^if  ( name != true )  {^432^^^^^431^445^if  ( name != null )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P9_Replace_Statement]^if  ( classes != null )  {^432^^^^^431^445^if  ( name != null )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P15_Unwrap_Block]^for (java.lang.String type : stripTypes) {    if ((name.equals(type)) || (name.startsWith((type + ".")))) {        return true;    }}; for (java.lang.String type : stripTypePrefixes) {    if (name.startsWith(type)) {        return true;    }};^432^433^434^435^436^431^445^if  ( name != null )  { for  ( String type : stripTypes )  { if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  { return true; }^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P16_Remove_Block]^^432^433^434^435^436^431^445^if  ( name != null )  { for  ( String type : stripTypes )  { if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  { return true; }^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P2_Replace_Operator]^if  ( name.equals ( type )  && name.startsWith ( type + "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P2_Replace_Operator]^if  ( name.equals ( type )  || name.startsWith ( type  ^  "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P3_Replace_Literal]^if  ( name.equals ( type )  || name.startsWith ( type + "" )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P5_Replace_Variable]^if  ( type.equals ( name )  || name.startsWith ( type + "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P6_Replace_Expression]^if  ( name.equals ( type )  ) {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P6_Replace_Expression]^if  (  name.startsWith ( type + "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P6_Replace_Expression]^if  ( type + "." )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P15_Unwrap_Block]^return true;^434^435^436^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  { return true; }^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P16_Remove_Block]^^434^435^436^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  { return true; }^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P13_Insert_Block]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^434^^^^^431^445^[Delete]^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P13_Insert_Block]^if  ( name.startsWith ( type )  )  {     return true; }^434^^^^^431^445^[Delete]^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P13_Insert_Block]^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^434^^^^^431^445^[Delete]^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P3_Replace_Literal]^return false;^435^^^^^431^445^return true;^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P5_Replace_Variable]^if  ( type.startsWith ( name )  )  {^439^^^^^431^445^if  ( name.startsWith ( type )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P15_Unwrap_Block]^return true;^439^440^441^^^431^445^if  ( name.startsWith ( type )  )  { return true; }^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P16_Remove_Block]^^439^440^441^^^431^445^if  ( name.startsWith ( type )  )  { return true; }^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P13_Insert_Block]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^439^^^^^431^445^[Delete]^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P13_Insert_Block]^if  (  ( name.equals ( type )  )  ||  ( name.startsWith (  ( type + "." )  )  )  )  {     return true; }^439^^^^^431^445^[Delete]^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P13_Insert_Block]^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^439^^^^^431^445^[Delete]^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P3_Replace_Literal]^return false;^440^^^^^431^445^return true;^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P1_Replace_Type]^for  ( char type : stripTypes )  {^433^^^^^431^445^for  ( String type : stripTypes )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P1_Replace_Type]^for  ( char type : stripTypePrefixes )  {^438^^^^^431^445^for  ( String type : stripTypePrefixes )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P2_Replace_Operator]^if  ( name.equals ( type )  || name.startsWith ( type  |  "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P2_Replace_Operator]^if  ( name.equals ( type )  || name.startsWith ( type   instanceof   "." )  )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P8_Replace_Mix]^if  (  name .endsWith ( type )   )  {^434^^^^^431^445^if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P7_Replace_Invocation]^if  ( name .endsWith ( name )   )  {^439^^^^^431^445^if  ( name.startsWith ( type )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P8_Replace_Mix]^if  ( name .endsWith ( type )   )  {^439^^^^^431^445^if  ( name.startsWith ( type )  )  {^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P3_Replace_Literal]^return true;^444^^^^^431^445^return false;^[CLASS] Strip  [METHOD] qualifiedNameBeginsWithStripType [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  name  type  
[P1_Replace_Type]^char name = n.getchar (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P7_Replace_Invocation]^String name = n.removeChild (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P8_Replace_Mix]^String name = n .getParent (  )  ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^String lcName = name.toLowerCase (  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P14_Delete_Statement]^^456^457^^^^455^460^String name = n.getString (  ) ; Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^isStripName ( propNode.getString (  )  ) ;String name = n.getString (  ) ;^456^^^^^455^460^String name = n.getString (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Scope scope = t.getScope (  ) ;^457^^^^^455^460^Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Scope scope = t.getScope (  ) ;^457^^^^^455^460^Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Scope scope = t.getScope (  ) ;^457^^^^^455^460^Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Scope scope = t.getScope (  ) ;^457^^^^^455^460^Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Scope scope = t.getScope (  ) ;^457^^^^^455^460^Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P7_Replace_Invocation]^Scope scope = t .report ( n , 2 )  ;^457^^^^^455^460^Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P14_Delete_Statement]^^457^^^^^455^460^Scope scope = t.getScope (  ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P5_Replace_Variable]^Scope.Var var = name.getVar ( scope ) ;^458^^^^^455^460^Scope.Var var = scope.getVar ( name ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P14_Delete_Statement]^^458^^^^^455^460^Scope.Var var = scope.getVar ( name ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P11_Insert_Donor_Statement]^varsToRemove.add ( scope.getVar ( name )  ) ;Scope.Var var = scope.getVar ( name ) ;^458^^^^^455^460^Scope.Var var = scope.getVar ( name ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P5_Replace_Variable]^return varsToRemovesToRemove.contains ( var ) ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P5_Replace_Variable]^return var.contains ( varsToRemove ) ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P7_Replace_Invocation]^return varsToRemove .add (  )  ;^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P14_Delete_Statement]^^459^^^^^455^460^return varsToRemove.contains ( var ) ;^[CLASS] Strip  [METHOD] isReferenceToRemovedVar [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Node  n  String  name  
[P5_Replace_Variable]^Node function = parent.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^Node function = n.removeChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^Node function = n .getLastChild (  )  ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^Node function = parent .getLastChild (  )  ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node function = n.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node expression = n.getFirstChild (  ) ;Node function = n.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node function = n.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node function = n.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node function = n.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node function = n.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^Node function = gramps.getFirstChild (  ) ;^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P14_Delete_Statement]^^483^^^^^468^498^Node function = n.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( function == null && function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( function != null || function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( function == null || function.getType (  )  == Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^if  ( parent == null || function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( function == null ) {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  (  function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( function.getType (  )  != GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^if  ( function == null || function.removeChild (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^if  ( function == true || function .getString (  )   != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P9_Replace_Statement]^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P13_Insert_Block]^if  (  ( gramps != null )  &&  (  ( gramps.getType (  )  )  ==  ( VAR )  )  )  {     return false; }^484^^^^^469^499^[Delete]^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P3_Replace_Literal]^return true;^489^^^^^474^504^return false;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^if  ( n == null || function.getType (  )  != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^if  ( function == null || function .getString (  )   != Token.GETPROP )  {^484^^^^^469^499^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( parent != null || parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( parent == null && parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( parent != null && parent.getType (  )  != Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^if  ( n != null && parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( parent != null ) {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  (  parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( parent.getType (  )  == NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps != null && gramps.getType() == VAR )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps != null )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == VAR )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^if  ( parent != null && parent.removeChild (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^if  ( parent != null && parent .getString (  )   == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^if  ( n != this && parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P9_Replace_Statement]^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P9_Replace_Statement]^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P13_Insert_Block]^if  (  ( n != null )  &&  (  ( n.getType (  )  )  ==  ( GETPROP )  )  )  {     Node propNode = n.getLastChild (  ) ;     return  (  ( propNode != null )  &&  (  ( propNode.getType (  )  )  ==  ( STRING )  )  )  &&  ( isStripName ( propNode.getString (  )  )  ) ; }^492^^^^^477^507^[Delete]^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( gramps != null || gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( gramps == null && gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( gramps != null && gramps.getType (  )  != Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps != null ) {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  (  gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^if  ( gramps != null && gramps.removeChild (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P9_Replace_Statement]^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P9_Replace_Statement]^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P13_Insert_Block]^if  (  ( function == null )  ||  (  ( function.getType (  )  )  !=  ( GETPROP )  )  )  {     return false; }^494^^^^^479^509^[Delete]^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P3_Replace_Literal]^return true;^500^^^^^485^515^return false;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^Node gramps = n.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^Node gramps = parent.removeChild (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node next = value.getNext (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node ancParent = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node ancestor = parent.getParent (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node greatGramps = gramps.getParent (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P14_Delete_Statement]^^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;Node gramps = parent.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^if  ( n != null && gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^if  ( gramps != null && gramps .getString (  )   == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^if  ( parent != null && gramps.removeChild (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^if  ( gramps != true && gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^Node gramps = parent .getNext (  )  ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^Node gramps = n.removeChild (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^if  ( gramps != null && parent.getType (  )  == Token.NAME )  {^492^^^^^477^507^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^Node gramps = gramps.getParent (  ) ;^493^^^^^478^508^Node gramps = parent.getParent (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^if  ( parent != null && gramps.getType (  )  == Token.VAR )  {^494^^^^^479^509^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^Node callee = parent.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^Node callee = function.removeChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^Node callee = function .getLastChild (  )  ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node propNode = n.getLastChild (  ) ;Node callee = function.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node function = n.getFirstChild (  ) ;Node callee = function.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node expression = n.getFirstChild (  ) ;Node callee = function.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node callee = function.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node callee = function.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node callee = function.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node callee = function.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^Node callee = n.getFirstChild (  ) ;^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P14_Delete_Statement]^^504^^^^^489^519^Node callee = function.getFirstChild (  ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^return nameEndsWithFieldNameToStrip ( callee )  && nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return nameEndsWithFieldNameToStrip ( parent )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( parent )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return parentameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType (  n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return nameEndsWithFieldNameToStrip ( function )  || nameEndsWithFieldNameToStrip ( callee )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return functionameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^return tameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( n, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^return qualifiedNameBeginsWithStripType ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || nameEndsWithFieldNameToStrip ( callee )  || actsOnStripType ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || isReferenceToRemovedVar ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^return nameEndsWithFieldNameToStrip ( parent )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || isReferenceToRemovedVar ( t, n ) ;^505^506^507^508^^490^520^return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^nameEndsWithFieldNameToStrip ( n )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^506^507^508^^^491^521^nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^qualifiedNameBeginsWithStripType ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^506^507^508^^^491^521^nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^nameEndsWithFieldNameToStrip ( parent )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^506^507^508^^^491^521^nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P14_Delete_Statement]^^506^507^508^^^491^521^nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^qualifiedNameBeginsWithStripType ( n )  || actsOnStripType ( t, n ) ;^507^508^^^^492^522^qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^nameEndsWithFieldNameToStrip ( callee )  || actsOnStripType ( t, n ) ;^507^508^^^^492^522^qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^qualifiedNameBeginsWithStripType ( parent )  || actsOnStripType ( t, n ) ;^507^508^^^^492^522^qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P14_Delete_Statement]^^507^508^509^^^492^522^qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ; }^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^actsOnStripType ( t, gramps ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^actsOnStripType (  n ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^actsOnStripType ( t ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P5_Replace_Variable]^actsOnStripType ( n, t ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P7_Replace_Invocation]^isReferenceToRemovedVar ( t, n ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P8_Replace_Mix]^actsOnStripType ( t, parent ) ;^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P14_Delete_Statement]^^508^^^^^493^523^actsOnStripType ( t, n ) ;^[CLASS] Strip  [METHOD] isMethodCallThatTriggersRemoval [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  callee  function  gramps  n  parent  
[P2_Replace_Operator]^if  ( n != null || n.getType (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P2_Replace_Operator]^if  ( n == null && n.getType (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P2_Replace_Operator]^if  ( n != null && n.getType (  )  != Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P6_Replace_Expression]^if  ( n != null ) {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P6_Replace_Expression]^if  (  n.getType (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P6_Replace_Expression]^if  ( n.getType (  )  == GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P6_Replace_Expression]^if  ( (propNode != null) && (propNode.getType() == STRING) && isStripName(propNode.getString()) )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P6_Replace_Expression]^if  ( (propNode != null && propNode.getType() == STRING) )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P6_Replace_Expression]^if  ( propNode != null )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P6_Replace_Expression]^if  ( propNode.getType (  )  == STRING )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P7_Replace_Invocation]^if  ( n != null && n.removeChild (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P7_Replace_Invocation]^if  ( n != null && n .getString (  )   == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P8_Replace_Mix]^if  ( n != this ) {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P9_Replace_Statement]^if  ( parent != null && parent.getType (  )  == Token.NAME )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P9_Replace_Statement]^if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P9_Replace_Statement]^if  ( function == null || function.getType (  )  != Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node propNode = n.getLastChild(); return ((propNode != null) && ((propNode.getType()) == (com.google.javascript.rhino.Token.STRING))) && (isStripName(propNode.getString()));^520^521^522^523^524^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  { Node propNode = n.getLastChild (  ) ; return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ; }^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P16_Remove_Block]^^520^521^522^523^524^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  { Node propNode = n.getLastChild (  ) ; return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ; }^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P13_Insert_Block]^if  (  ( parent != null )  &&  (  ( parent.getType (  )  )  ==  ( NAME )  )  )  {     Node gramps = parent.getParent (  ) ;     if  (  ( gramps != null )  &&  (  ( gramps.getType (  )  )  ==  ( VAR )  )  )  {         return false;     } }^520^^^^^519^526^[Delete]^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P2_Replace_Operator]^return propNode != null || propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P2_Replace_Operator]^return propNode == null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P2_Replace_Operator]^return propNode != null && propNode.getType (  )  != Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P5_Replace_Variable]^return n != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P7_Replace_Invocation]^return propNode != null && propNode.removeChild (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P7_Replace_Invocation]^return propNode != null && propNode .getString (  )   == Token.STRING && isStripName ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P7_Replace_Invocation]^return propNode != null && propNode.getType (  )  == Token.STRING && qualifiedNameBeginsWithStripType ( propNode.getString (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P7_Replace_Invocation]^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.removeChild (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P7_Replace_Invocation]^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode .getParent (  )   ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P8_Replace_Mix]^return propNode != this && propNode.getType (  )  == Token.STRING && isStripName ( propNode.removeChild (  )  ) ;^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P7_Replace_Invocation]^Node propNode = n.removeChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P11_Insert_Donor_Statement]^Node function = n.getFirstChild (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P11_Insert_Donor_Statement]^Node expression = n.getFirstChild (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P11_Insert_Donor_Statement]^Node callee = function.getFirstChild (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P11_Insert_Donor_Statement]^Node key = n.getFirstChild (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P11_Insert_Donor_Statement]^Node rvalue = n.getNext (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P11_Insert_Donor_Statement]^Node value = key.getNext (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P11_Insert_Donor_Statement]^Node lvalue = n.getFirstChild (  ) ;Node propNode = n.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P7_Replace_Invocation]^Node propNode = n .getFirstChild (  )  ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P8_Replace_Mix]^Node propNode = propNode.getLastChild (  ) ;^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P14_Delete_Statement]^^521^^^^^519^526^Node propNode = n.getLastChild (  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P14_Delete_Statement]^^522^523^^^^519^526^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P5_Replace_Variable]^isStripName ( n.getString (  )  ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P7_Replace_Invocation]^qualifiedNameBeginsWithStripType ( propNode.getString (  )  ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P7_Replace_Invocation]^isStripName ( propNode.removeChild (  )  ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P7_Replace_Invocation]^isStripName ( propNode .getParent (  )   ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P8_Replace_Mix]^qualifiedNameBeginsWithStripType ( n.getString (  )  ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P14_Delete_Statement]^^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;isStripName ( propNode.getString (  )  ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;isStripName ( propNode.getString (  )  ) ;^523^^^^^519^526^isStripName ( propNode.getString (  )  ) ;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P5_Replace_Variable]^if  ( propNode != null && n.getType (  )  == Token.GETPROP )  {^520^^^^^519^526^if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P3_Replace_Literal]^return true;^525^^^^^519^526^return false;^[CLASS] Strip  [METHOD] nameEndsWithFieldNameToStrip [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  propNode  
[P5_Replace_Variable]^SubclassRelationship classes = 2.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^539^540^^^^538^557^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P5_Replace_Variable]^SubclassRelationship classes = callNode.getCodingConvention (  ) .getClassesDefinedByCall ( compiler ) ;^539^540^^^^538^557^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P7_Replace_Invocation]^SubclassRelationship classes = compiler.getCodingConvention (  )  .getNext (  )  ;^539^540^^^^538^557^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P7_Replace_Invocation]^SubclassRelationship classes = compiler.reportCodeChange (  ) .getClassesDefinedByCall ( callNode ) ;^539^540^^^^538^557^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P7_Replace_Invocation]^compiler.reportCodeChange (  ) .getClassesDefinedByCall ( callNode ) ;^540^^^^^538^557^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P14_Delete_Statement]^^540^^^^^538^557^compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P2_Replace_Operator]^if  ( classes == null )  {^541^^^^^538^557^if  ( classes != null )  {^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P8_Replace_Mix]^if  ( classes != false )  {^541^^^^^538^557^if  ( classes != null )  {^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P9_Replace_Statement]^if  ( name != null )  {^541^^^^^538^557^if  ( classes != null )  {^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P15_Unwrap_Block]^if (qualifiedNameBeginsWithStripType(classes.subclassName)) {    return true;}; if (qualifiedNameBeginsWithStripType(classes.superclassName)) {    t.report(callNode, com.google.javascript.jscomp.StripCode.STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName);};^541^542^^544^545^538^557^if  ( classes != null )  {  if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  { return true; }^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P16_Remove_Block]^^541^542^^544^545^538^557^if  ( classes != null )  {  if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  { return true; }^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P13_Insert_Block]^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {     t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ; }^541^^^^^538^557^[Delete]^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P7_Replace_Invocation]^if  ( nameEndsWithFieldNameToStrip ( classes.subclassName )  )  {^544^^^^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P9_Replace_Statement]^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {^544^^^^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P15_Unwrap_Block]^return true;^544^545^546^^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  { return true; }^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P16_Remove_Block]^^544^545^546^^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  { return true; }^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P13_Insert_Block]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^544^^^^^538^557^[Delete]^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P13_Insert_Block]^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^544^^^^^538^557^[Delete]^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P3_Replace_Literal]^return false;^545^^^^^538^557^return true;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P7_Replace_Invocation]^if  ( nameEndsWithFieldNameToStrip ( classes.superclassName )  )  {^550^^^^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P9_Replace_Statement]^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {^550^^^^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P15_Unwrap_Block]^t.report(callNode, com.google.javascript.jscomp.StripCode.STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName);^550^551^552^553^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  { t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ; }^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P16_Remove_Block]^^550^551^552^553^^538^557^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  { t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ; }^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P13_Insert_Block]^if  ( classes != null )  {     if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {         return true;     }     if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {         t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;     } }^550^^^^^538^557^[Delete]^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P5_Replace_Variable]^t.report (  STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^551^552^^^^538^557^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P5_Replace_Variable]^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR.subclassName, classes.superclassName ) ;^551^552^^^^538^557^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P5_Replace_Variable]^t.report ( callNode,  classes.subclassName, classes.superclassName ) ;^551^552^^^^538^557^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P5_Replace_Variable]^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR,  classes.superclassName ) ;^551^552^^^^538^557^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P5_Replace_Variable]^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName ) ;^551^552^^^^538^557^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P7_Replace_Invocation]^t .getScope (  )  ;^551^552^^^^538^557^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P14_Delete_Statement]^^551^552^^^^538^557^t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P13_Insert_Block]^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {     t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ; }^551^^^^^538^557^[Delete]^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P13_Insert_Block]^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {     return true; }^544^^^^^538^557^[Delete]^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P13_Insert_Block]^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {     return true; }^550^^^^^538^557^[Delete]^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P3_Replace_Literal]^return true;^556^^^^^538^557^return false;^[CLASS] Strip  [METHOD] actsOnStripType [RETURN_TYPE] boolean   NodeTraversal t Node callNode [VARIABLES] boolean  NodeTraversal  t  Node  callNode  SubclassRelationship  classes  
[P2_Replace_Operator]^if  ( stripNameSuffixes.contains ( name )  && stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P5_Replace_Variable]^if  ( stripNameSuffixes.contains ( stripName )  || stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P5_Replace_Variable]^if  ( name.contains ( stripNameSuffixes )  || stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P5_Replace_Variable]^if  ( stripNamePrefixes.contains ( name )  || stripNameSuffixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P6_Replace_Expression]^if  ( stripNameSuffixes.contains ( name )  ) {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P6_Replace_Expression]^if  (  stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P7_Replace_Invocation]^if  ( stripNameSuffixes .add (  )   || stripNamePrefixes^567^568^^^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P15_Unwrap_Block]^return true;^567^568^569^570^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  { return true; }^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P16_Remove_Block]^^567^568^569^570^^566^590^if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  { return true; }^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P13_Insert_Block]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^567^^^^^566^590^[Delete]^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P3_Replace_Literal]^return false;^569^^^^^566^590^return true;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P5_Replace_Variable]^stripNamePrefixes.contains ( stripName )  )  {^568^^^^^566^590^stripNamePrefixes.contains ( name )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P14_Delete_Statement]^^568^569^^^^566^590^stripNamePrefixes.contains ( name )  )  { return true;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P2_Replace_Operator]^if  (  ( name.length (  )  == 0 )  && Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P2_Replace_Operator]^if  (  ( name.length (  )  <= 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P3_Replace_Literal]^if  (  ( name.length (  )  == 6 )  || Character.isUpperCase ( name.charAt ( 6 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P3_Replace_Literal]^if  (  ( name.length (  )  == -6 )  || Character.isUpperCase ( name.charAt ( -6 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P3_Replace_Literal]^if  (  ( name.length() + 1  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P5_Replace_Variable]^if  (  ( stripName.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P6_Replace_Expression]^if  (  ( name.length (  )  == 0 )  ) {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P6_Replace_Expression]^if  (  Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P6_Replace_Expression]^if  ( name.length (  )  == 0 )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P7_Replace_Invocation]^if  (  ( name.charAt (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P7_Replace_Invocation]^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name .startsWith ( stripName )   )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P8_Replace_Mix]^if  (  ( name.length (  )  == 0  )  || Character.isUpperCase ( name.charAt ( 0  )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P15_Unwrap_Block]^return false;^572^573^574^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  { return false; }^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P16_Remove_Block]^^572^573^574^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  { return false; }^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P3_Replace_Literal]^return true;^573^^^^^566^590^return false;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P3_Replace_Literal]^if  (  ( name.length() + 8  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P3_Replace_Literal]^if  (  ( name.length (  )  == 5 )  || Character.isUpperCase ( name.charAt ( 5 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P3_Replace_Literal]^if  (  ( name.length (  )  == -5 )  || Character.isUpperCase ( name.charAt ( -5 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P3_Replace_Literal]^if  (  ( name.length() + 3  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P1_Replace_Type]^char lcName = name.toLowerCase (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P5_Replace_Variable]^String lcName = stripName.toLowerCase (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P7_Replace_Invocation]^String lcName = name.charAt (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P7_Replace_Invocation]^String lcName = name .equals ( 4 )  ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P8_Replace_Mix]^String lcName = stripName.charAt (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String lcName = name.toLowerCase (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P11_Insert_Donor_Statement]^String name = n.getQualifiedName (  ) ;String lcName = name.toLowerCase (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String lcName = name.toLowerCase (  ) ;^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P12_Insert_Condition]^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  { String lcName = name.toLowerCase (  ) ; }^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P14_Delete_Statement]^^576^^^^^566^590^String lcName = name.toLowerCase (  ) ;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P5_Replace_Variable]^if  ( name.startsWith ( stripName.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P5_Replace_Variable]^if  ( lcName.startsWith ( name.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P5_Replace_Variable]^if  ( stripName.startsWith ( lcName.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P7_Replace_Invocation]^if  ( lcName.startsWith ( stripName.charAt (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P9_Replace_Statement]^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P15_Unwrap_Block]^return true;^578^579^580^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P16_Remove_Block]^^578^579^580^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P13_Insert_Block]^if  (  ( stripNameSuffixes.contains ( name )  )  ||  ( stripNamePrefixes.contains ( name )  )  )  {     return true; }^578^^^^^566^590^[Delete]^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P13_Insert_Block]^if  (  ( name.equals ( type )  )  ||  ( name.startsWith (  ( type + "." )  )  )  )  {     return true; }^578^^^^^566^590^[Delete]^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P13_Insert_Block]^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {     return true; }^578^^^^^566^590^[Delete]^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P13_Insert_Block]^if  ( name.startsWith ( type )  )  {     return true; }^578^^^^^566^590^[Delete]^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P13_Insert_Block]^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^578^^^^^566^590^[Delete]^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P3_Replace_Literal]^return false;^579^^^^^566^590^return true;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P1_Replace_Type]^for  ( char stripName : stripNamePrefixes )  {^577^^^^^566^590^for  ( String stripName : stripNamePrefixes )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P7_Replace_Invocation]^if  ( lcName .endsWith ( stripName )   )  {^578^^^^^566^590^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P13_Insert_Block]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^578^^^^^566^590^[Delete]^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P5_Replace_Variable]^if  ( name.endsWith ( stripName.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P5_Replace_Variable]^if  ( lcName.endsWith ( name.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P5_Replace_Variable]^if  ( stripName.endsWith ( lcName.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P7_Replace_Invocation]^if  ( lcName .startsWith ( name )   )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P7_Replace_Invocation]^if  ( lcName.endsWith ( stripName.charAt (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P9_Replace_Statement]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P15_Unwrap_Block]^return true;^584^585^586^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P16_Remove_Block]^^584^585^586^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P13_Insert_Block]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^584^^^^^566^590^[Delete]^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P13_Insert_Block]^if  (  ( name.equals ( type )  )  ||  ( name.startsWith (  ( type + "." )  )  )  )  {     return true; }^584^^^^^566^590^[Delete]^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P13_Insert_Block]^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {     return true; }^584^^^^^566^590^[Delete]^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P13_Insert_Block]^if  ( name.startsWith ( type )  )  {     return true; }^584^^^^^566^590^[Delete]^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P3_Replace_Literal]^return false;^585^^^^^566^590^return true;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P1_Replace_Type]^for  ( char stripName : stripNameSuffixes )  {^583^^^^^566^590^for  ( String stripName : stripNameSuffixes )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P13_Insert_Block]^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {     return true; }^584^^^^^566^590^[Delete]^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P8_Replace_Mix]^if  ( lcName.endsWith ( name.charAt (  )  )  )  {^584^^^^^566^590^if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P3_Replace_Literal]^return true;^589^^^^^566^590^return false;^[CLASS] Strip  [METHOD] isStripName [RETURN_TYPE] boolean   String name [VARIABLES] boolean  String  lcName  name  stripName  
[P4_Replace_Constructor]^parent.replaceChild (  new Node ( Token.NULL )  ) ;^600^^^^^599^601^parent.replaceChild ( n, new Node ( Token.NULL )  ) ;^[CLASS] Strip  [METHOD] replaceWithNull [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[P8_Replace_Mix]^parent.replaceChild ( n, new Node ( Token.this )  ) ;^600^^^^^599^601^parent.replaceChild ( n, new Node ( Token.NULL )  ) ;^[CLASS] Strip  [METHOD] replaceWithNull [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[P14_Delete_Statement]^^600^^^^^599^601^parent.replaceChild ( n, new Node ( Token.NULL )  ) ;^[CLASS] Strip  [METHOD] replaceWithNull [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[P5_Replace_Variable]^NodeUtil.removeChild (  n ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[P5_Replace_Variable]^NodeUtil.removeChild ( parent ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[P5_Replace_Variable]^NodeUtil.removeChild ( n, parent ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[P14_Delete_Statement]^^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[P11_Insert_Donor_Statement]^n.removeChild ( key ) ;NodeUtil.removeChild ( parent, n ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[P11_Insert_Donor_Statement]^n.removeChild ( nameNode ) ;NodeUtil.removeChild ( parent, n ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[P11_Insert_Donor_Statement]^n.removeChild ( value ) ;NodeUtil.removeChild ( parent, n ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, rvalue ) ;NodeUtil.removeChild ( parent, n ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[P11_Insert_Donor_Statement]^parent.removeChild ( rvalue ) ;NodeUtil.removeChild ( parent, n ) ;^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
[P12_Insert_Condition]^if  ( NodeUtil.isExpressionNode ( parent )  )  { NodeUtil.removeChild ( parent, n ) ; }^611^^^^^610^612^NodeUtil.removeChild ( parent, n ) ;^[CLASS] Strip  [METHOD] replaceWithEmpty [RETURN_TYPE] void   Node n Node parent [VARIABLES] boolean  Node  n  parent  
