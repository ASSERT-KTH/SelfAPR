[P8_Replace_Mix]^private  AbstractCompiler compiler;^43^^^^^38^48^private final AbstractCompiler compiler;^[CLASS] DeadAssignmentsElimination VariableLiveness   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^47^^^^^46^48^this.compiler = compiler;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Preconditions.checkNotNull ( root ) ;^52^^^^^51^55^Preconditions.checkNotNull ( externs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[P14_Delete_Statement]^^52^53^^^^51^55^Preconditions.checkNotNull ( externs ) ; Preconditions.checkNotNull ( root ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( false, "Unknown statement" ) ;Preconditions.checkNotNull ( externs ) ;^52^^^^^51^55^Preconditions.checkNotNull ( externs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( root ) ;Preconditions.checkNotNull ( externs ) ;^52^^^^^51^55^Preconditions.checkNotNull ( externs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[P5_Replace_Variable]^Preconditions.checkNotNull ( externs ) ;^53^^^^^51^55^Preconditions.checkNotNull ( root ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[P14_Delete_Statement]^^53^54^^^^51^55^Preconditions.checkNotNull ( root ) ; NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( externs ) ;Preconditions.checkNotNull ( root ) ;^53^^^^^51^55^Preconditions.checkNotNull ( root ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^54^^^^^51^55^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^54^^^^^51^55^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^54^^^^^51^55^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[P8_Replace_Mix]^NodeTraversal.traverse ( compiler, externs, this ) ;^54^^^^^51^55^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[P14_Delete_Statement]^^54^^^^^51^55^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Node  externs  root  
[P11_Insert_Donor_Statement]^Node next = c.getNext (  ) ;Scope scope = t.getScope (  ) ;^59^^^^^58^78^Scope scope = t.getScope (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^59^^^^^58^78^Scope scope = t.getScope (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( scope.getVar (  )  )  {^63^^^^^58^78^if  ( scope.isGlobal (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P15_Unwrap_Block]^return ;^63^64^65^^^58^78^if  ( scope.isGlobal (  )  )  { return; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P16_Remove_Block]^^63^64^65^^^58^78^if  ( scope.isGlobal (  )  )  { return; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( state.getOut (  ) .isLive ( var )  )  {     return ; }^63^^^^^58^78^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( ! ( scope.isDeclared ( name, false )  )  )  {     return ; }^63^^^^^58^78^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( !NodeUtil.isForIn ( t.getScopeRoot (  ) .getLastChild (  )  )  )  {^70^71^^^^58^78^if  ( !NodeUtil.containsFunctionDeclaration ( t.getScopeRoot (  ) .getLastChild (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( !NodeUtil.containsFunctionDeclaration ( t.getScopeRoot (  ) .isLive (  )  )  )  {^70^71^^^^58^78^if  ( !NodeUtil.containsFunctionDeclaration ( t.getScopeRoot (  ) .getLastChild (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( !NodeUtil.containsFunctionDeclaration ( t .getScope (  )  .getLastChild (  )  )  )  {^70^71^^^^58^78^if  ( !NodeUtil.containsFunctionDeclaration ( t.getScopeRoot (  ) .getLastChild (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P4_Replace_Constructor]^liveness = new LiveVariablesAnalysis (  scope, compiler ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P4_Replace_Constructor]^liveness = new LiveVariablesAnalysis ( cfg,  compiler ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^liveness = new LiveVariablesAnalysis ( cfg, scope ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^liveness = new LiveVariablesAnalysis ( scope, cfg, compiler ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^liveness = new LiveVariablesAnalysis ( cfg, compiler, scope ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^liveness =  new LiveVariablesAnalysis ( null, scope, compiler ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^ControlFlowGraph<Node> cfg = t .getScopeRoot (  )  ;^73^^^^^58^78^ControlFlowGraph<Node> cfg = t.getControlFlowGraph (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^73^^^^^58^78^ControlFlowGraph<Node> cfg = t.getControlFlowGraph (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^liveness.getEscapedLocals (  ) ;^75^^^^^58^78^liveness.analyze (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^75^^^^^58^78^liveness.analyze (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveDeadAssignments (  cfg ) ;^76^^^^^58^78^tryRemoveDeadAssignments ( t, cfg ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveDeadAssignments ( t ) ;^76^^^^^58^78^tryRemoveDeadAssignments ( t, cfg ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveDeadAssignments ( cfg, t ) ;^76^^^^^58^78^tryRemoveDeadAssignments ( t, cfg ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^process ( t, cfg ) ;^76^^^^^58^78^tryRemoveDeadAssignments ( t, cfg ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^76^^^^^58^78^tryRemoveDeadAssignments ( t, cfg ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n, state ) ;tryRemoveDeadAssignments ( t, cfg ) ;^76^^^^^58^78^tryRemoveDeadAssignments ( t, cfg ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n, n, state ) ;tryRemoveDeadAssignments ( t, cfg ) ;^76^^^^^58^78^tryRemoveDeadAssignments ( t, cfg ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, c, exprRoot, state ) ;tryRemoveDeadAssignments ( t, cfg ) ;^76^^^^^58^78^tryRemoveDeadAssignments ( t, cfg ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^liveness = new LiveVariablesAnalysis ( compiler, scope, cfg ) ;^74^^^^^58^78^liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^t.getScopeRoot (  ) .isLive (  )  )  )  {^71^^^^^58^78^t.getScopeRoot (  ) .getLastChild (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^t .getScope (  )  .getLastChild (  )  )  )  {^71^^^^^58^78^t.getScopeRoot (  ) .getLastChild (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^71^72^73^^^58^78^t.getScopeRoot (  ) .getLastChild (  )  )  )  {  ControlFlowGraph<Node> cfg = t.getControlFlowGraph (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^75^76^^^^58^78^liveness.analyze (  ) ; tryRemoveDeadAssignments ( t, cfg ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  Scope  scope  NodeTraversal  t  ControlFlowGraph  cfg  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^List<DiGraphNode<Node, Branch>> nodes = cfg.isEnteringNewCfgNode (  ) ;^98^^^^^83^113^List<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^List<DiGraphNode<Node, Branch>> nodes = cfg .isEnteringNewCfgNode ( n )  ;^98^^^^^83^113^List<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^98^^^^^83^113^List<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^if  ( n != null )  {^104^^^^^89^119^if  ( n == null )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^if  ( n == true )  {^104^^^^^89^119^if  ( n == null )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P9_Replace_Statement]^if  ( rhs != null )  {^104^^^^^89^119^if  ( n == null )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P15_Unwrap_Block]^continue;^104^105^106^^^89^119^if  ( n == null )  { continue; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P16_Remove_Block]^^104^105^106^^^89^119^if  ( n == null )  { continue; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( !NodeUtil.isAssign ( n )  )  {^114^^^^^99^129^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P9_Replace_Statement]^if  ( NodeUtil.isAssign ( n )  )  {^114^^^^^99^129^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P9_Replace_Statement]^if  ( !NodeUtil.isName ( lhs )  )  {^114^^^^^99^129^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P15_Unwrap_Block]^tryRemoveAssignment(t, com.google.javascript.jscomp.NodeUtil.getConditionExpression(n), state);^114^115^116^117^^99^129^if  ( !NodeUtil.isForIn ( n )  )  { tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P16_Remove_Block]^^114^115^116^117^^99^129^if  ( !NodeUtil.isForIn ( n )  )  { tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment (  NodeUtil.getConditionExpression ( n ) , state ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n )  ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( state, NodeUtil.getConditionExpression ( n ) , t ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( n, NodeUtil.getConditionExpression ( t ) , state ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( state ) , n ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^isVariableStillLiveWithinExpression ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^tryRemoveAssignment ( t, NodeUtil.isExpressionNode ( n ) , state ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^tryRemoveAssignment ( t, NodeUtil .containsFunctionDeclaration (  )  , state ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^t, NodeUtil.getConditionExpression ( n ) , state ) ;tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n, n, state ) ;tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, c, exprRoot, state ) ;tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^115^116^^^^100^130^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( ! ( isForIn ( n )  )  )  {     tryRemoveAssignment ( t, getConditionExpression ( n ) , state ) ; }^115^^^^^100^130^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^t, NodeUtil.isExpressionNode ( n ) , state ) ;^116^^^^^101^131^t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^t, NodeUtil .containsFunctionDeclaration (  )  , state ) ;^116^^^^^101^131^t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^116^^^^^101^131^t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;t, NodeUtil.getConditionExpression ( n ) , state ) ;^116^^^^^101^131^t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( n.newNumber (  )  )  {^122^^^^^107^137^if  ( n.hasChildren (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P15_Unwrap_Block]^tryRemoveAssignment(t, n.getFirstChild(), state);^122^123^124^^^107^137^if  ( n.hasChildren (  )  )  { tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P16_Remove_Block]^^122^123^124^^^107^137^if  ( n.hasChildren (  )  )  { tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment (  n.getFirstChild (  ) , state ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t.getFirstChild (  ) , state ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, n.getFirstChild (  )  ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( state, n.getFirstChild (  ) , t ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( n, t.getFirstChild (  ) , state ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, state.getFirstChild (  ) , n ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^isVariableStillLiveWithinExpression ( t, n.getFirstChild (  ) , state ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^tryRemoveAssignment ( t, n.newNumber (  ) , state ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^tryRemoveAssignment ( t, n .getLastChild (  )  , state ) ;^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^123^^^^^108^138^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( n.hasChildren (  )  )  {     tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ; }^123^^^^^108^138^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^FlowState<LiveVariableLattice> state = cfgNode .getValue (  )  ;^101^102^^^^86^116^FlowState<LiveVariableLattice> state = cfgNode.getAnnotation (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node n = 3 .getAnnotation (  )  ;^103^^^^^88^118^Node n = cfgNode.getValue (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node n = cfgNode.getValue (  ) ;^103^^^^^88^118^Node n = cfgNode.getValue (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node next = c.getNext (  ) ;Node n = cfgNode.getValue (  ) ;^103^^^^^88^118^Node n = cfgNode.getValue (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^cfgNode .getValue (  )  ;^102^^^^^87^117^cfgNode.getAnnotation (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^102^103^^^^87^117^cfgNode.getAnnotation (  ) ; Node n = cfgNode.getValue (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^103^^^^^88^118^Node n = cfgNode.getValue (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^switch  ( n.newNumber (  )  )  {^107^^^^^92^122^switch  ( n.getType (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^switch  ( n .getParent (  )   )  {^107^^^^^92^122^switch  ( n.getType (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment (  NodeUtil.getConditionExpression ( n ) , state ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n )  ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( n, NodeUtil.getConditionExpression ( t ) , state ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( state ) , n ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^isVariableStillLiveWithinExpression ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^tryRemoveAssignment ( t, NodeUtil.isExpressionNode ( n ) , state ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^tryRemoveAssignment ( t, NodeUtil .containsFunctionDeclaration (  )  , state ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^t, NodeUtil.getConditionExpression ( n ) , state ) ;tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n, n, state ) ;tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, c, exprRoot, state ) ;tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^111^^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^111^112^^^^96^126^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ; continue;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( ! ( isName ( lhs )  )  )  {     return ; }^114^^^^^99^129^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( n .getLastChild (  )   )  {^122^^^^^107^137^if  ( n.hasChildren (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment (  n, state ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t,  state ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, n ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( n, t, state ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, state, n ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^isVariableStillLiveWithinExpression ( t, n, state ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveDeadAssignments ( t, cfg ) ;tryRemoveAssignment ( t, n, state ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;tryRemoveAssignment ( t, n, state ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n, n, state ) ;tryRemoveAssignment ( t, n, state ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;tryRemoveAssignment ( t, n, state ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, c, exprRoot, state ) ;tryRemoveAssignment ( t, n, state ) ;^129^^^^^114^144^tryRemoveAssignment ( t, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveDeadAssignments [RETURN_TYPE] void   NodeTraversal t Node> cfg [VARIABLES] AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  List  nodes  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, n, n, null ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment (  n, n, state ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t,  n, state ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, n, n ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( n, t, n, state ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, state, n, n ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveDeadAssignments ( t, cfg ) ;tryRemoveAssignment ( t, n, n, state ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;tryRemoveAssignment ( t, n, n, state ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n, state ) ;tryRemoveAssignment ( t, n, n, state ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;tryRemoveAssignment ( t, n, n, state ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;tryRemoveAssignment ( t, n, n, state ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, c, exprRoot, state ) ;tryRemoveAssignment ( t, n, n, state ) ;^135^^^^^133^136^tryRemoveAssignment ( t, n, n, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  NodeTraversal  t  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node parent = op.getParent (  ) ;^151^^^^^136^166^Node parent = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Node parent = n.newNumber (  ) ;^151^^^^^136^166^Node parent = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Node parent = n .getNext (  )  ;^151^^^^^136^166^Node parent = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node parent = n.getParent (  ) ;^151^^^^^136^166^Node parent = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node next = c.getNext (  ) ;Node parent = n.getParent (  ) ;^151^^^^^136^166^Node parent = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node parent = n.getParent (  ) ;^151^^^^^136^166^Node parent = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node parent = rhs.getParent (  ) ;^151^^^^^136^166^Node parent = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^151^^^^^136^166^Node parent = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^n = n.getParent (  ) ;Node parent = n.getParent (  ) ;^151^^^^^136^166^Node parent = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^if  ( NodeUtil.isAssignmentOp ( n )  && n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  != Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  <= Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( NodeUtil.isAssignmentOp ( n )  ) {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  (  n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( isAssignmentOp(n || n.getType() == INC) )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( n.getType (  )  == INC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( n.getType (  )  == DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( rhs != null )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( isLive(var) && isVariableStillLiveWithinExpression(n, exprRoot, var.name) )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( n.getType() == INC || n.getType() == DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( n.getType() == COMMA && n != parent.getLastChild() )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( n.getType (  )  == COMMA )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( n != parent.getLastChild (  ) )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( (parent.getType() == FOR) && isForIn(parent)) && getConditionExpression(parent) != n )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( (parent.getType() == FOR && isForIn(parent))) )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( parent.getType (  )  == FOR )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( getConditionExpression ( parent )  != n )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( c != null )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssign ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssignmentOp ( n )  || n.newNumber (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssignmentOp ( n )  || n .getParent (  )   == Token.INC || n^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( NodeUtil.isForInmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( NodeUtil .isAssign ( op )   || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( rhs )  )  {^228^^^^^213^243^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( !ControlFlowGraph .getDirectedGraphNodes (  )   )  {^228^^^^^213^243^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( parent )  )  {^228^^^^^213^243^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P9_Replace_Statement]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( sibling )  )  {^228^^^^^213^243^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P9_Replace_Statement]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( child )  )  {^228^^^^^213^243^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P15_Unwrap_Block]^tryRemoveAssignment(t, c, exprRoot, state);^228^229^230^^^213^243^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  { tryRemoveAssignment ( t, c, exprRoot, state ) ; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P16_Remove_Block]^^228^229^230^^^213^243^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  { tryRemoveAssignment ( t, c, exprRoot, state ) ; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment (  c, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t,  exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, c,  state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, c, exprRoot ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( exprRoot, c, t, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, state, exprRoot, c ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, exprRoot, c, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^tryRemoveAssignment ( t, c, parent, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveDeadAssignments ( t, cfg ) ;tryRemoveAssignment ( t, c, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;tryRemoveAssignment ( t, c, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n, state ) ;tryRemoveAssignment ( t, c, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;tryRemoveAssignment ( t, c, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n, n, state ) ;tryRemoveAssignment ( t, c, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;tryRemoveAssignment ( t, c, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^for  ( Node c = parent.getFirstChild (  ) ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^for  ( Node op = n.getFirstChild (  ) ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^for  ( Node n = c.getFirstChild (  ) ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^for  ( Node c = n.newNumber (  ) ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^if  ( ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^228^^^^^213^243^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, c, state, exprRoot ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^c =  null;^231^^^^^216^246^c = next;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node next = parent.getNext (  ) ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Node next = c.newNumber (  ) ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node next = c.getNext (  ) ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node next = c.getNext (  ) ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node parent = n.getParent (  ) ;Node next = c.getNext (  ) ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Node next = c.getNext (  ) ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node n = cfgNode.getValue (  ) ;Node next = c.getNext (  ) ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^rhs = lhs.getNext (  ) ;Node next = c.getNext (  ) ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^n = n.getParent (  ) ;Node next = c.getNext (  ) ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( ! ( isEnteringNewCfgNode ( c )  )  )  {     tryRemoveAssignment ( t, c, exprRoot, state ) ; }^228^^^^^213^243^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, parent, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, c, rhs, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( state, c, exprRoot, t ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^c =  parent;^231^^^^^216^246^c = next;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^for  ( Node c = rhs.getFirstChild (  ) ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^for  ( Node c = n .getLastChild (  )  ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node next = rhs.getNext (  ) ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Node next = c .getParent (  )  ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^226^227^228^229^230^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  { Node next = c.getNext (  ) ; if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  { tryRemoveAssignment ( t, c, exprRoot, state ) ; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^if  ( rhs == null )  {^161^^^^^146^176^if  ( rhs != null )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( parent != null )  {^161^^^^^146^176^if  ( rhs != null )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^if  ( rhs != false )  {^161^^^^^146^176^if  ( rhs != null )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P9_Replace_Statement]^if  ( n == null )  {^161^^^^^146^176^if  ( rhs != null )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P15_Unwrap_Block]^tryRemoveAssignment(t, rhs, exprRoot, state); rhs = lhs.getNext();^161^162^163^164^^146^176^if  ( rhs != null )  { tryRemoveAssignment ( t, rhs, exprRoot, state ) ; rhs = lhs.getNext (  ) ; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P16_Remove_Block]^^161^162^163^164^^146^176^if  ( rhs != null )  { tryRemoveAssignment ( t, rhs, exprRoot, state ) ; rhs = lhs.getNext (  ) ; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^rhs = parent.getNext (  ) ;^163^^^^^148^178^rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^rhs = lhs.newNumber (  ) ;^163^^^^^148^178^rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^rhs = lhs .getParent (  )  ;^163^^^^^148^178^rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^n = n.getParent (  ) ;rhs = lhs.getNext (  ) ;^163^^^^^148^178^rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, rhs, parent, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment (  rhs, exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t,  exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, rhs,  state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, rhs, exprRoot ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( state, rhs, exprRoot, t ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, state, exprRoot, rhs ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, exprRoot, rhs, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^tryRemoveAssignment ( t, parent, exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, NodeUtil.getConditionExpression ( n ) , state ) ;tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n, state ) ;tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n, n, state ) ;tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, n.getFirstChild (  ) , state ) ;tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^tryRemoveAssignment ( t, c, exprRoot, state ) ;tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^rhs = op.getNext (  ) ;^163^^^^^148^178^rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^rhs = rhs.getNext (  ) ;^163^^^^^148^178^rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^163^^^^^148^178^rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;rhs = lhs.getNext (  ) ;^163^^^^^148^178^rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node next = c.getNext (  ) ;rhs = lhs.getNext (  ) ;^163^^^^^148^178^rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^String name = lhs.getString (  ) ;rhs = lhs.getNext (  ) ;^163^^^^^148^178^rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( !NodeUtil.isName ( parent )  )  {^167^^^^^152^182^if  ( !NodeUtil.isName ( lhs )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( !NodeUtil.isLhs ( lhs )  )  {^167^^^^^152^182^if  ( !NodeUtil.isName ( lhs )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^if  ( !NodeUtil .isLhs ( op )   )  {^167^^^^^152^182^if  ( !NodeUtil.isName ( lhs )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P9_Replace_Statement]^if  ( !NodeUtil.isForIn ( n )  )  {^167^^^^^152^182^if  ( !NodeUtil.isName ( lhs )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P9_Replace_Statement]^if  ( NodeUtil.isAssign ( n )  )  {^167^^^^^152^182^if  ( !NodeUtil.isName ( lhs )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P15_Unwrap_Block]^return ;^167^168^169^^^152^182^if  ( !NodeUtil.isName ( lhs )  )  { return; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P16_Remove_Block]^^167^168^169^^^152^182^if  ( !NodeUtil.isName ( lhs )  )  { return; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( state ==  ( KILL )  )  {     return false; }^167^^^^^152^182^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( state !=  ( MAYBE_LIVE )  )  {     return state; }^167^^^^^152^182^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^if  ( !scope.isDeclared ( name, true )  )  {^171^^^^^156^186^if  ( !scope.isDeclared ( name, false )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( !scope.isDeclared (  false )  )  {^171^^^^^156^186^if  ( !scope.isDeclared ( name, false )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P15_Unwrap_Block]^return ;^171^172^173^^^156^186^if  ( !scope.isDeclared ( name, false )  )  { return; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P16_Remove_Block]^^171^172^173^^^156^186^if  ( !scope.isDeclared ( name, false )  )  { return; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( scope.isGlobal (  )  )  {     return ; }^171^^^^^156^186^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( state.getOut (  ) .isLive ( var )  )  {     return ; }^171^^^^^156^186^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( var.getEscapedLocals (  ) .contains ( liveness )  )  {^175^^^^^160^190^if  ( liveness.getEscapedLocals (  ) .contains ( var )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( liveness.getEscapedLocals (  ) .isLive ( var )  )  {^175^^^^^160^190^if  ( liveness.getEscapedLocals (  ) .contains ( var )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( liveness.analyze (  ) .contains ( var )  )  {^175^^^^^160^190^if  ( liveness.getEscapedLocals (  ) .contains ( var )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P15_Unwrap_Block]^return ;^175^176^177^^^160^190^if  ( liveness.getEscapedLocals (  ) .contains ( var )  )  { return; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P16_Remove_Block]^^175^176^177^^^160^190^if  ( liveness.getEscapedLocals (  ) .contains ( var )  )  { return; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( state.getOut (  ) .isLive ( var )  )  {     return ; }^175^^^^^160^190^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( var.getOut (  ) .isLive ( state )  )  {^178^^^^^163^193^if  ( state.getOut (  ) .isLive ( var )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( state.getOut (  ) .replaceChild ( var )  )  {^178^^^^^163^193^if  ( state.getOut (  ) .isLive ( var )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P15_Unwrap_Block]^return ;^178^179^180^^^163^193^if  ( state.getOut (  ) .isLive ( var )  )  { return; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P16_Remove_Block]^^178^179^180^^^163^193^if  ( state.getOut (  ) .isLive ( var )  )  { return; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( scope.isGlobal (  )  )  {     return ; }^178^^^^^163^193^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( ! ( scope.isDeclared ( name, false )  )  )  {     return ; }^178^^^^^163^193^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( liveness.getEscapedLocals (  ) .contains ( var )  )  {     return ; }^178^^^^^163^193^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^if  ( state.getIn (  ) .isLive ( var )  || isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot.name )  )  {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression (  exprRoot, var.name )  )  {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n,  var.name )  )  {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot )  )  {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( state.getIn (  ) .isLive ( var )  ) {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  (  isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( state.getIn (  ) .replaceChild ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( state .getOut (  )  .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( state.getIn (  ) .isLive ( var )  && tryRemoveAssignment ( n, exprRoot, var.name )  )  {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( n.getType (  )  == INC )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( n.getType (  )  == DEC )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( n.getType() == COMMA && n != parent.getLastChild() )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( n.getType (  )  == COMMA )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( n != parent.getLastChild (  ) )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( (parent.getType() == FOR) && isForIn(parent)) && getConditionExpression(parent) != n )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( (parent.getType() == FOR && isForIn(parent))) )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( parent.getType (  )  == FOR )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( getConditionExpression ( parent )  != n )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( NodeUtil.isForIn ( n )  )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^if  ( NodeUtil.isForIn ( parent )  )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P9_Replace_Statement]^if  ( !NodeUtil.isForIn ( n )  )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P9_Replace_Statement]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( NodeUtil.isAssignmentOp ( rhs )  )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == INC )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == DEC )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( n.getType() == COMMA && n != parent.getLastChild() )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == COMMA )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( n != parent.getLastChild (  ) )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( (parent.getType() == FOR) && isForIn(parent)) && getConditionExpression(parent) != n )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( (parent.getType() == FOR && isForIn(parent))) )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( parent.getType (  )  == FOR )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( getConditionExpression ( parent )  != n )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isAssign ( n )  )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( n.getType (  )  == Token.INC && n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( n.getType (  )  != Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( n.getType (  )  >= Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( n.getType (  )  < Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( rhs.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == Token.INC ) {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  (  n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == INC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( n.getType() == COMMA && n != parent.getLastChild() )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == COMMA )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( n != parent.getLastChild (  ) )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( (parent.getType() == FOR) && isForIn(parent)) && getConditionExpression(parent) != n )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( (parent.getType() == FOR && isForIn(parent))) )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( parent.getType (  )  == FOR )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( getConditionExpression ( parent )  != n )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if  ( n.newNumber (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if  ( n .getParent (  )   == Token.INC || n^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( true, "Unknown statement" ) ;^219^^^^^204^220^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "Unknown statementno" ) ;^219^^^^^204^220^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^219^^^^^204^220^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( externs ) ;Preconditions.checkState ( false, "Unknown statement" ) ;^219^^^^^204^220^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( op )  )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( n.getType (  )  == COMMA )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( n != parent.getLastChild (  ) )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( (parent.getType() == FOR) && isForIn(parent)) && getConditionExpression(parent) != n )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( (parent.getType() == FOR && isForIn(parent))) )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( parent.getType (  )  == FOR )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^if  ( getConditionExpression ( parent )  != n )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssign ( parent )  )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P9_Replace_Statement]^if  ( NodeUtil.isAssign ( n )  )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if ( n.getType (  )  == Token.COMMA || n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if ( n.getType (  )  >= Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if ( n.getType (  )  == Token.COMMA && n <= parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if ( n.getType (  )  != Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if ( n.getType (  )  == Token.COMMA && n == parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if ( n.getType (  )  == Token.COMMA && n != rhs.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if ( parent.getType (  )  == Token.COMMA && n != n.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if ( n.getType (  )  == Token.COMMA ) {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if (  n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if ( n.getType (  )  == COMMA )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if ( (parent.getType() == FOR) && isForIn(parent)) && getConditionExpression(parent) != n )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if ( (parent.getType() == FOR && isForIn(parent))) )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if ( parent.getType (  )  == FOR )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if ( getConditionExpression ( parent )  != n )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.newNumber (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n .getParent (  )   == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent.newNumber (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if ( rhs.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( isExpressionNode ( parent )  )  {     parent.replaceChild ( n, new Node ( VOID, newNumber ( 0 )  )  ) ; }else     if  (  (  ( n.getType (  )  )  ==  ( COMMA )  )  &&  ( n !=  ( parent.getLastChild (  )  )  )  )  {         parent.removeChild ( n ) ;     }else         if  (  (  (  ( parent.getType (  )  )  ==  ( FOR )  )  &&  ( ! ( isForIn ( parent )  )  )  )  &&  (  ( getConditionExpression ( parent )  )  != n )  )  {             parent.replaceChild ( n, new Node ( EMPTY )  ) ;         }else {             return ;         }^207^^^^^192^222^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  (  (  (  ( parent.getType (  )  )  ==  ( FOR )  )  &&  ( ! ( isForIn ( parent )  )  )  )  &&  (  ( getConditionExpression ( parent )  )  != n )  )  {     parent.replaceChild ( n, new Node ( EMPTY )  ) ; }else {     return ; }^207^^^^^192^222^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  == Token.FOR || !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  <= Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  == n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( rhs.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != op )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( n.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != parent )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( parent.getType (  )  == Token.FOR ) {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  (  !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( (parent.getType() == FOR && isForIn(parent))) )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( parent.getType (  )  == FOR )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else if  ( getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P6_Replace_Expression]^} else {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if  ( parent.newNumber (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if  ( parent .getParent (  )   == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isAssign ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil .isAssign ( n )   && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.isExpressionNode ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  ( op.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil .containsFunctionDeclaration (  )   != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  (  (  ( n.getType (  )  )  ==  ( COMMA )  )  &&  ( n !=  ( parent.getLastChild (  )  )  )  )  {     parent.removeChild ( n ) ; }else     if  (  (  (  ( parent.getType (  )  )  ==  ( FOR )  )  &&  ( ! ( isForIn ( parent )  )  )  )  &&  (  ( getConditionExpression ( parent )  )  != n )  )  {         parent.replaceChild ( n, new Node ( EMPTY )  ) ;     }else {         return ;     }^209^^^^^194^224^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( n, new Node ( Token.null )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P4_Replace_Constructor]^parent.replaceChild (  new Node ( Token.EMPTY )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( rhs, new Node ( Token.EMPTY )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, op ) ;parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( ! ( isName ( lhs )  )  )  {     return ; }^209^^^^^194^224^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^NodeUtil.getConditionExpression ( rhs )  != n )  {^210^^^^^195^225^NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^NodeUtil.isExpressionNode ( parent )  != n )  {^210^^^^^195^225^NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^NodeUtil.isExpressionNode ( rhs )  != n )  {^210^^^^^195^225^NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^210^211^^^^195^225^NodeUtil.getConditionExpression ( parent )  != n )  { parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( ! ( isName ( lhs )  )  )  {     return ; }^210^^^^^195^225^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P4_Replace_Constructor]^parent.replaceChild (  new Node ( Token.EMPTY )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( op, new Node ( Token.EMPTY )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, op ) ;parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.removeChild ( rhs ) ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent.replaceChild ( n ) ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.replaceChild ( rhs ) ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^n.getParent (  ) .replaceChild ( n, rhs ) ;parent.removeChild ( n ) ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^n.removeChild ( rhs ) ;parent.removeChild ( n ) ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^n.removeChild ( lhs ) ;parent.removeChild ( n ) ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, op ) ;parent.removeChild ( n ) ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( op.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != rhs )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil .isAssign ( op )   && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.isExpressionNode ( parent )  != rhs )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( op, new Node ( Token.EMPTY )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( n, new Node ( Token.this )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .getLastChild (  )  ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if ( rhs.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if ( n.getType (  )  == Token.COMMA && n != next.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.removeChild ( op ) ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( next.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil .isAssign ( lhs )   && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( n, new Node ( Token.null )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .getLastChild (  )  ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.replaceChild ( rhs, new Node ( Token.EMPTY )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 8 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent.replaceChild ( n, new Node ( Token.VOID, Node.removeChild ( 0 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( -5 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P4_Replace_Constructor]^parent.replaceChild (  new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( rhs, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( n, new Node ( Token. Node.newNumber ( 0 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .getLastChild (  )   ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.replaceChild ( op, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if ( n.getType (  )  == Token.COMMA && n > parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if ( n.getType (  )  > Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if ( n.getType (  )  == Token.COMMA && n != op.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if ( n.getType (  )  == Token.COMMA && n != rhs.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  >= Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  >= n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.this && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( n, new Node ( Token.0 )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.replaceChild ( n, new Node ( Token.this )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil .isAssign ( exprRoot )   && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^NodeUtil.getConditionExpression ( op )  != n )  {^210^^^^^195^225^NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  != Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil .containsFunctionDeclaration (  )   != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  ( parent.getType (  )  == Token.FOR ) {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( -3 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( next )  )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( ! ( isName ( lhs )  )  )  {     return ; }^205^^^^^190^220^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber (  )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.replaceChild ( rhs, new Node ( Token.VOID, Node.removeChild ( 0 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( -6 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent.replaceChild ( n, new Node ( Token.VOID, Node .getType (  )   )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if ( op.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if ( parent.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if ( n.getType (  )  == Token.COMMA && n != next.newNumber (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( op.newNumber (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( next.getType (  )  == Token.FOR && !NodeUtil.isAssign ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^NodeUtil .containsFunctionDeclaration (  )   != n )  {^210^^^^^195^225^NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( rhs )  )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if ( rhs.getType (  )  == Token.COMMA ) {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( op.getType (  )  == Token.FOR && !NodeUtil.isAssign ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( exprRoot , n )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  > Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( exprRoot , next )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if ( n.getType (  )  == Token.COMMA && n != rhs.newNumber (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil .isAssign ( rhs )   && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 5 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( -8 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 2 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if ( n.getType (  )  < Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if ( n.getType (  )  == Token.COMMA && n >= parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( n , c )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  (  !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != rhs )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^NodeUtil.getConditionExpression ( next )  != n )  {^210^^^^^195^225^NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent .replaceChild ( lhs , n )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isAssign ( parent )  && NodeUtil.getConditionExpression ( parent )  != rhs )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 6 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( parent.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( NodeUtil .isAssign ( lhs )   )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 4 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if ( op .getParent (  )   == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.replaceChild ( op ) ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^NodeUtil.isExpressionNode ( next )  != n )  {^210^^^^^195^225^NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( true, "Unknown statement" ) ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "nknown st" ) ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( op )  ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Preconditions .checkNotNull ( lhs )  ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( externs ) ;Preconditions.checkState ( false, "Unknown statement" ) ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P4_Replace_Constructor]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) ,  rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P4_Replace_Constructor]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node op = rhsew Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, parent ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node op = rhsew Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, n ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node op = lhsew Node ( NodeUtil.getOpFromAssignmentOp ( n ) , n, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , rhs, lhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Node op = new Node ( NodeUtil.isAssignmentOp ( n ) , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node op = opew Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , parent, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Node op = new Node ( NodeUtil .isAssignmentOp ( exprRoot )  , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node op = new Node ( NodeUtil.isAssignmentOp ( n ) , lhs, parent ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.removeChild ( parent ) ;^200^^^^^185^215^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^n.replaceChild ( rhs ) ;^200^^^^^185^215^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^200^^^^^185^215^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;n.removeChild ( rhs ) ;^200^^^^^185^215^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^n.removeChild ( lhs ) ;n.removeChild ( rhs ) ;^200^^^^^185^215^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, op ) ;n.removeChild ( rhs ) ;^200^^^^^185^215^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.removeChild ( parent ) ;^201^^^^^186^216^n.removeChild ( lhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^n.replaceChild ( lhs ) ;^201^^^^^186^216^n.removeChild ( lhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^n .replaceChild ( next , op )  ;^201^^^^^186^216^n.removeChild ( lhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^201^202^^^^186^216^n.removeChild ( lhs ) ; Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^n.removeChild ( rhs ) ;n.removeChild ( lhs ) ;^201^^^^^186^216^n.removeChild ( lhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;n.removeChild ( lhs ) ;^201^^^^^186^216^n.removeChild ( lhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, op ) ;n.removeChild ( lhs ) ;^201^^^^^186^216^n.removeChild ( lhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Node op = new Node ( NodeUtil .isAssignmentOp ( op )  , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node op = rhsew Node ( NodeUtil.isAssignmentOp ( n ) , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( parent, op ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( n, rhs ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild (  op ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( op, n ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^n.getParent (  ) .replaceChild ( n, rhs ) ;parent.replaceChild ( n, op ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^n.removeChild ( rhs ) ;parent.replaceChild ( n, op ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;parent.replaceChild ( n, op ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^n.removeChild ( lhs ) ;parent.replaceChild ( n, op ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( n.getType (  )  <= Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "menknown statement" ) ;^219^^^^^204^220^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil .isAssign ( c )   && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  > n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if ( n.getType (  )  == Token.COMMA && n != next .replaceChild ( c , c )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 7 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( parent , n )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  (  !NodeUtil .isAssign ( c )   && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  < n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != rhs )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 1 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.replaceChild ( n, new Node ( Token.2 )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.replaceChild ( parent, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if ( op.newNumber (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( op , op )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( next.newNumber (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( rhs.getType (  )  == Token.FOR && !NodeUtil.isAssign ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  <= n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  ( op.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( rhs.newNumber (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( op.getType (  )  == Token.FOR && !NodeUtil .isAssign ( next )   && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( parent, new Node ( Token.EMPTY )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( op , parent )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  (  !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil .isAssign ( next )   && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 3 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( -9 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if ( n.getType (  )  <= Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if (  n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  (  !NodeUtil.isAssign ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( n, new Node ( Token.0 )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( n , n )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( n, new Node ( Token.3 )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node op = parentew Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Node op = new Node ( NodeUtil .isAssignmentOp ( next )  , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( NodeUtil.isAssignmentOp ( parent )  )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( ! ( isName ( lhs )  )  )  {     return ; }^199^^^^^184^214^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.removeChild ( op ) ;^200^^^^^185^215^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^n .replaceChild ( lhs , exprRoot )  ;^200^^^^^185^215^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.removeChild ( rhs ) ;^201^^^^^186^216^n.removeChild ( lhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^n .replaceChild ( n , rhs )  ;^201^^^^^186^216^n.removeChild ( lhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^202^203^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ; parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( op, op ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.replaceChild ( rhs, op ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( op.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 9 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( n , next )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if ( n.getType (  )  == Token.COMMA && n != next .replaceChild ( rhs , op )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( next.getType (  )  == Token.FOR && !NodeUtil .isAssign ( lhs )   && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "Unknown statementow" ) ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.removeChild ( parent ) ;^197^^^^^182^212^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^n.replaceChild ( rhs ) ;^197^^^^^182^212^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^n .replaceChild ( next , parent )  ;^197^^^^^182^212^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^197^198^^^^182^212^n.removeChild ( rhs ) ; n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^parent.removeChild ( n ) ;n.removeChild ( rhs ) ;^197^^^^^182^212^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^n.removeChild ( lhs ) ;n.removeChild ( rhs ) ;^197^^^^^182^212^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^parent.replaceChild ( n, op ) ;n.removeChild ( rhs ) ;^197^^^^^182^212^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.getParent (  ) .replaceChild ( parent, rhs ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.getParent (  ) .replaceChild ( n, op ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.getParent (  ) .replaceChild (  rhs ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.getParent (  ) .replaceChild ( n ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.getParent (  ) .replaceChild ( rhs, n ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^n.newNumber (  ) .replaceChild ( n, rhs ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^n .getNext (  )  .replaceChild ( n, rhs ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.getParent (  ) .replaceChild ( rhs, rhs ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^n.getParent (  ) .replaceChild ( op, rhs ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "Unkn" ) ;^219^^^^^204^220^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Preconditions .checkNotNull ( op )  ;^219^^^^^204^220^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( NodeUtil .isAssign ( exprRoot )   )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  ( rhs.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( lhs , c )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if ( n.getType (  )  == Token.COMMA && n < parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( NodeUtil .isAssign ( next )   )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( -1 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( op , op )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if ( op.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( rhs , n )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  (  !NodeUtil.isAssign ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( c , rhs )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( op , rhs )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.1 && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( -7 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "own nknown statement" ) ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( parent )  ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , rhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^n.replaceChild ( op ) ;^200^^^^^185^215^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^200^201^^^^185^215^n.removeChild ( rhs ) ; n.removeChild ( lhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^201^^^^^186^216^n.removeChild ( lhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Node op = new Node ( NodeUtil .isAssignmentOp ( c )  , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( n, parent ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "Unknown nknown statement" ) ;^219^^^^^204^220^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if (  n != next.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( rhs , rhs )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.replaceChild ( parent, new Node ( Token.VOID, Node.removeChild ( 0 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if ( n.getType (  )  == Token.COMMA ) {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( op , lhs )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  (  !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != op )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( NodeUtil .isAssign ( rhs )   )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^if  ( NodeUtil .isAssign ( c )   )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( next , exprRoot )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != parent )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  (  !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != parent )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( parent , next )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( -4 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( n , parent )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node op = opew Node ( NodeUtil.isAssignmentOp ( n ) , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( -2 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( n, new Node ( Token.3 )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node lhs = rhs.getFirstChild (  ) ;^156^^^^^141^171^Node lhs = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Node lhs = n.newNumber (  ) ;^156^^^^^141^171^Node lhs = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Node lhs = n .getLastChild (  )  ;^156^^^^^141^171^Node lhs = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node rhs = op.getNext (  ) ;^157^^^^^142^172^Node rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Node rhs = lhs.newNumber (  ) ;^157^^^^^142^172^Node rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node rhs = parent.getNext (  ) ;^157^^^^^142^172^Node rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node next = c.getNext (  ) ;Node rhs = lhs.getNext (  ) ;^157^^^^^142^172^Node rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^157^^^^^142^172^Node rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^String name = lhs.getString (  ) ;Node rhs = lhs.getNext (  ) ;^157^^^^^142^172^Node rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node parent = n.getParent (  ) ;Node rhs = lhs.getNext (  ) ;^157^^^^^142^172^Node rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node n = cfgNode.getValue (  ) ;Node rhs = lhs.getNext (  ) ;^157^^^^^142^172^Node rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Scope scope = t .getScopeRoot (  )  ;^166^^^^^151^181^Scope scope = t.getScope (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node next = c.getNext (  ) ;Scope scope = t.getScope (  ) ;^166^^^^^151^181^Scope scope = t.getScope (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P1_Replace_Type]^char name = lhs.getchar (  ) ;^170^^^^^155^185^String name = lhs.getString (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^String name = rhs.getString (  ) ;^170^^^^^155^185^String name = lhs.getString (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^String name = lhs.newNumber (  ) ;^170^^^^^155^185^String name = lhs.getString (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^String name = parent.newNumber (  ) ;^170^^^^^155^185^String name = lhs.getString (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;String name = lhs.getString (  ) ;^170^^^^^155^185^String name = lhs.getString (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Var var = name.getVar ( scope ) ;^174^^^^^159^189^Var var = scope.getVar ( name ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Var var = scope.isDeclared ( name ) ;^174^^^^^159^189^Var var = scope.getVar ( name ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, next ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Node op = new Node ( NodeUtil .isAssignmentOp ( rhs )  , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node lhs = parent.getFirstChild (  ) ;^156^^^^^141^171^Node lhs = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node lhs = rhs .getLastChild (  )  ;^156^^^^^141^171^Node lhs = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^156^^^^^141^171^Node lhs = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node rhs = rhs.getNext (  ) ;^157^^^^^142^172^Node rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^157^^^^^142^172^Node rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^rhs = lhs.getNext (  ) ;Node rhs = lhs.getNext (  ) ;^157^^^^^142^172^Node rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^n = n.getParent (  ) ;Node rhs = lhs.getNext (  ) ;^157^^^^^142^172^Node rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^166^^^^^151^181^Scope scope = t.getScope (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( !NodeUtil .isLhs ( c )   )  {^167^^^^^152^182^if  ( !NodeUtil.isName ( lhs )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( ! ( isName ( lhs )  )  )  {     return ; }^167^^^^^152^182^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^String name = parent.getString (  ) ;^170^^^^^155^185^String name = lhs.getString (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^String name = lhs .getParent (  )  ;^170^^^^^155^185^String name = lhs.getString (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^170^^^^^155^185^String name = lhs.getString (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P11_Insert_Donor_Statement]^rhs = lhs.getNext (  ) ;String name = lhs.getString (  ) ;^170^^^^^155^185^String name = lhs.getString (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( ! ( scope.isDeclared ( name, false )  )  )  {     return ; }^171^^^^^156^186^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^174^^^^^159^189^Var var = scope.getVar ( name ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( liveness.getEscapedLocals (  )  .getLastChild (  )   )  {^175^^^^^160^190^if  ( liveness.getEscapedLocals (  ) .contains ( var )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( liveness.getEscapedLocals (  ) .contains ( var )  )  {     return ; }^175^^^^^160^190^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( state.getOut (  ) .isLive ( var )  )  {     return ; }^178^^^^^163^193^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^if  ( state .getIn (  )  .isLive ( var )  )  {^178^^^^^163^193^if  ( state.getOut (  ) .isLive ( var )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( var.getIn (  ) .isLive ( state )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^181^182^^^^166^196^if  ( state.getIn (  ) .isLive ( var )  && isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( state.getOut (  ) .isLive ( var )  )  {     return ; }^181^^^^^166^196^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^isVariableStillLiveWithinExpression (  exprRoot, var.name )  )  {^182^^^^^167^197^isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^isVariableStillLiveWithinExpression ( n,  var.name )  )  {^182^^^^^167^197^isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^isVariableStillLiveWithinExpression ( n, exprRoot.name )  )  {^182^^^^^167^197^isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^isVariableStillLiveWithinExpression ( n, exprRoot )  )  {^182^^^^^167^197^isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^tryRemoveAssignment ( n, exprRoot, var.name )  )  {^182^^^^^167^197^isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  (  ( state.getIn (  ) .isLive ( var )  )  &&  ( isVariableStillLiveWithinExpression ( n, exprRoot, var.name )  )  )  {     return ; }^182^^^^^167^197^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( rhs )  )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( ! ( isName ( lhs )  )  )  {     return ; }^196^^^^^181^211^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.removeChild ( op ) ;^197^^^^^182^212^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^n.replaceChild ( parent ) ;^197^^^^^182^212^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.getParent (  ) .replaceChild ( n, parent ) ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^n.getParent (  )  .getLastChild (  )  ;^198^^^^^183^213^n.getParent (  ) .replaceChild ( n, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^n.replaceChild ( parent ) ;^200^^^^^185^215^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( rhs.newNumber (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^if  ( NodeUtil.isAssign ( op )  )  {^205^^^^^190^220^if  ( NodeUtil.isExpressionNode ( parent )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if ( parent.newNumber (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( exprRoot , parent )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "Unknown statementwn statemen" ) ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( c )  ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^222^^^^^207^237^compiler.reportCodeChange (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^if  ( rhs != true )  {^161^^^^^146^176^if  ( rhs != null )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, rhs, op, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( exprRoot, rhs, t, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^162^163^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ; rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^rhs = rhs.newNumber (  ) ;^163^^^^^148^178^rhs = lhs.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( !NodeUtil.isName ( rhs )  )  {^167^^^^^152^182^if  ( !NodeUtil.isName ( lhs )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  ( NodeUtil.isAssignmentOp ( n )  )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  ( op.getType (  )  == Token.INC ) {^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "nown nknown statement" ) ;^219^^^^^204^220^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Preconditions .checkNotNull ( rhs )  ;^219^^^^^204^220^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  < Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent .replaceChild ( n , lhs )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  ( parent.getType (  )  == Token.null ) {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^NodeUtil.isExpressionNode ( op )  != n )  {^210^^^^^195^225^NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( n, new Node ( Token.1 )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.isExpressionNode ( parent )  != op )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( lhs , lhs )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( lhs , op )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( rhs.getType (  )  == Token.FOR ) {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( next.getType (  )  == Token.FOR && !NodeUtil .isAssign ( rhs )   && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( rhs .getParent (  )   == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if ( n.getType (  )  == Token.4 && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if (  n != rhs.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.replaceChild ( n, new Node ( Token.4 )  ) ;^211^^^^^196^226^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( next , n )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( op.getType (  )  == Token.FOR ) {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( rhs .getParent (  )   == Token.INC || n^204^^^^^189^219^} else if  ( n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if ( rhs .getParent (  )   == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( exprRoot , c )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , op, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^n .replaceChild ( op , parent )  ;^201^^^^^186^216^n.removeChild ( lhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node op = parentew Node ( NodeUtil.isAssignmentOp ( n ) , lhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .getLastChild (  )  ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "nknownnknown statement" ) ;^219^^^^^204^220^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( c , parent )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.0 && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( next , op )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( exprRoot , rhs )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.replaceChild ( op, new Node ( Token.VOID, Node.removeChild ( 0 )  )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  ( rhs.newNumber (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.null && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if ( rhs.newNumber (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isAssign ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if ( n.getType (  )  == Token.COMMA && n != op.newNumber (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( op.getType (  )  == Token.FOR && !NodeUtil .isAssign ( op )   && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent.replaceChild ( op, new Node ( Token.VOID, Node .getType (  )   )  ) ;^206^^^^^191^221^parent.replaceChild ( n, new Node ( Token.VOID, Node.newNumber ( 0 )  )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( rhs , next )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( rhs.getType (  )  == Token.FOR && !NodeUtil .isAssign ( op )   && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node op = new Node ( NodeUtil .isAssignmentOp ( lhs )  , lhs, op ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^n .replaceChild ( rhs , n )  ;^200^^^^^185^215^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "Unknown statementUnknown" ) ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( n )  ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^197^^^^^182^212^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "Unknown statementUnk" ) ;^219^^^^^204^220^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if  ( op.getType (  )  == Token.FOR && !NodeUtil .isAssign ( exprRoot )   && NodeUtil.getConditionExpression ( parent )  != n )  {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent .replaceChild ( n , c )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( parent , lhs )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( n, new Node ( Token.4 )  ) ;^211^^^^^209^216^parent.replaceChild ( n, new Node ( Token.EMPTY )  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( n , parent )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( parent , parent )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "own statemennknown statement" ) ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^parent.replaceChild ( n, next ) ;^203^^^^^188^218^parent.replaceChild ( n, op ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "Unk" ) ;^219^^^^^204^220^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( rhs , c )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^} else if ( n.getType (  )  == Token.COMMA && n != op .replaceChild ( c , next )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( c , c )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^parent .replaceChild ( parent , parent )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if ( n.getType (  )  == Token.COMMA && n != next.getLastChild (  )  )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^}  if  ( rhs.getType (  )  == Token.FOR ) {^209^210^^^^194^224^} else if  ( parent.getType (  )  == Token.FOR && !NodeUtil.isForIn ( parent )  && NodeUtil.getConditionExpression ( parent )  != n )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^} else if ( n.getType (  )  == Token.COMMA && n != parent .replaceChild ( lhs , n )   )  {^207^^^^^192^222^} else if ( n.getType (  )  == Token.COMMA && n != parent.getLastChild (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, c, op, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^for  ( Node parent = n.getFirstChild (  ) ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^for  ( Node c = parent.newNumber (  ) ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, op, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, c, exprRoot, 3 ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( c, t, exprRoot, state ) ;^229^^^^^214^244^tryRemoveAssignment ( t, c, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^c = rhs;^231^^^^^216^246^c = next;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^c = op;^231^^^^^216^246^c = next;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node lhs = parent.newNumber (  ) ;^156^^^^^141^171^Node lhs = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node op = new Node ( NodeUtil.isAssignmentOp ( n ) , rhs, rhs ) ;^202^^^^^187^217^Node op = new Node ( NodeUtil.getOpFromAssignmentOp ( n ) , lhs, rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^for  ( Node c = rhs.newNumber (  ) ; c != null; )  {^226^^^^^211^241^for  ( Node c = n.getFirstChild (  ) ; c != null; )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^Node next = rhs .getParent (  )  ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( NodeUtil.isAssignmentOp ( op )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^153^154^^^^138^168^if  ( NodeUtil.isAssignmentOp ( n )  || n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P13_Insert_Block]^if  ( ! ( isName ( lhs )  )  )  {     return ; }^153^^^^^138^168^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.getType (  )  == Token.INC || rhs.getType (  )  == Token.DEC )  {^154^^^^^139^169^n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^n.newNumber (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^154^^^^^139^169^n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^n .getParent (  )   == Token.INC || n^154^^^^^139^169^n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^154^155^156^^^139^169^n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {  Node lhs = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^n.getType (  )  == Token.INC || op.getType (  )  == Token.DEC )  {^154^^^^^139^169^n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^n .getParent (  )   == Token.INC || rhs^154^^^^^139^169^n.getType (  )  == Token.INC || n.getType (  )  == Token.DEC )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node lhs = op.getFirstChild (  ) ;^156^^^^^141^171^Node lhs = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, op, exprRoot, state ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^tryRemoveAssignment ( t, rhs, state, exprRoot ) ;^162^^^^^147^177^tryRemoveAssignment ( t, rhs, exprRoot, state ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^if  ( null.getOut (  )  .getLastChild (  )   )  {^178^^^^^163^193^if  ( state.getOut (  ) .isLive ( var )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^if  ( NodeUtil.isAssign ( parent )  )  {^196^^^^^181^211^if  ( NodeUtil.isAssign ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^} else if  ( NodeUtil.isAssignmentOp ( op )  )  {^199^^^^^184^214^} else if  ( NodeUtil.isAssignmentOp ( n )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^n .replaceChild ( next , n )  ;^200^^^^^185^215^n.removeChild ( rhs ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^parent .replaceChild ( next , c )  ;^208^^^^^193^223^parent.removeChild ( n ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P3_Replace_Literal]^Preconditions.checkState ( false, "nnknown statement" ) ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( exprRoot )  ;^219^^^^^204^234^Preconditions.checkState ( false, "Unknown statement" ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P14_Delete_Statement]^^222^223^^^^207^237^compiler.reportCodeChange (  ) ; return;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P5_Replace_Variable]^Node next = op.getNext (  ) ;^227^^^^^212^242^Node next = c.getNext (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P8_Replace_Mix]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( op )  )  {^228^^^^^213^243^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] tryRemoveAssignment [RETURN_TYPE] void   NodeTraversal t Node n Node exprRoot LiveVariableLattice> state [VARIABLES] AbstractCompiler  compiler  FlowState  state  boolean  Scope  scope  NodeTraversal  t  Var  var  Node  c  exprRoot  lhs  n  next  op  parent  rhs  String  name  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  
[P2_Replace_Operator]^while  ( n == exprRoot )  {^254^^^^^252^271^while  ( n != exprRoot )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P2_Replace_Operator]^while  ( n <= exprRoot )  {^254^^^^^252^271^while  ( n != exprRoot )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^while  ( exprRoot != exprRoot )  {^254^^^^^252^271^while  ( n != exprRoot )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^while  ( n != n )  {^254^^^^^252^271^while  ( n != exprRoot )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( n )  )  {^257^^^^^252^271^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( sibling )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P6_Replace_Expression]^if  ( state == KILL )  {^257^^^^^252^271^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( sibling )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P7_Replace_Invocation]^if  ( !ControlFlowGraph .getDirectedGraphNodes (  )   )  {^257^^^^^252^271^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( sibling )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P8_Replace_Mix]^if  ( ControlFlowGraph.isEnteringNewCfgNode ( sibling )  )  {^257^^^^^252^271^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( sibling )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P9_Replace_Statement]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^257^^^^^252^271^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( sibling )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P9_Replace_Statement]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( child )  )  {^257^^^^^252^271^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( sibling )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P13_Insert_Block]^if  (  ( isName ( n )  )  &&  ( variable.equals ( n.getString (  )  )  )  )  {     if  ( isLhs ( n, n.getParent (  )  )  )  {         return KILL;     }else {         return READ;     } }^257^^^^^252^271^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P13_Insert_Block]^if  ( ! ( isEnteringNewCfgNode ( child )  )  )  {     VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;     if  ( state !=  ( MAYBE_LIVE )  )  {         return state;     } }^257^^^^^252^271^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P2_Replace_Operator]^if  ( state > VariableLiveness.READ )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P2_Replace_Operator]^if  ( state <= VariableLiveness.READ )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^if  ( READ == VariableLiveness.READ )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^if  ( state == VariableLiveness.state )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P6_Replace_Expression]^if  ( state == KILL )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P8_Replace_Mix]^if  ( state == VariableLiveness.MAYBE_LIVE )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P9_Replace_Statement]^if  ( state != VariableLiveness.MAYBE_LIVE )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P15_Unwrap_Block]^return true;^261^262^263^264^265^252^271^if  ( state == VariableLiveness.READ )  { return true; } else if  ( state == VariableLiveness.KILL )  { return false; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P16_Remove_Block]^^261^262^263^264^265^252^271^if  ( state == VariableLiveness.READ )  { return true; } else if  ( state == VariableLiveness.KILL )  { return false; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P13_Insert_Block]^if  ( ! ( isEnteringNewCfgNode ( child )  )  )  {     VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;     if  ( state !=  ( MAYBE_LIVE )  )  {         return state;     } }^261^^^^^252^271^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P2_Replace_Operator]^} else if  ( state >= VariableLiveness.KILL )  {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^} else if  ( READ == VariableLiveness.KILL )  {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^} else if  ( state == VariableLiveness.READ )  {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P6_Replace_Expression]^} else {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P15_Unwrap_Block]^return false;^263^264^265^^^252^271^} else if  ( state == VariableLiveness.KILL )  { return false; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P16_Remove_Block]^^263^264^265^^^252^271^} else if  ( state == VariableLiveness.KILL )  { return false; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P13_Insert_Block]^if  ( state !=  ( MAYBE_LIVE )  )  {     return state; }^263^^^^^252^271^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P13_Insert_Block]^if  ( ! ( isName ( lhs )  )  )  {     return ; }^263^^^^^252^271^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P3_Replace_Literal]^return true;^264^^^^^252^271^return false;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P3_Replace_Literal]^return false;^262^^^^^252^271^return true;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P2_Replace_Operator]^} else if  ( state != VariableLiveness.KILL )  {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^VariableLiveness state = readVariableBeforeKilling ( n, variable ) ;^258^^^^^252^271^VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^VariableLiveness state = readVariableBeforeKilling (  variable ) ;^258^^^^^252^271^VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^VariableLiveness state = readVariableBeforeKilling ( sibling ) ;^258^^^^^252^271^VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^VariableLiveness state = readVariableBeforeKilling ( variable, sibling ) ;^258^^^^^252^271^VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P7_Replace_Invocation]^VariableLiveness state = process ( sibling, variable ) ;^258^^^^^252^271^VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P11_Insert_Donor_Statement]^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^258^^^^^252^271^VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P13_Insert_Block]^if  ( state ==  ( KILL )  )  {     return false; }^258^^^^^252^271^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P13_Insert_Block]^if  ( state !=  ( MAYBE_LIVE )  )  {     return state; }^258^^^^^252^271^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P2_Replace_Operator]^if  ( state >= VariableLiveness.READ )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P2_Replace_Operator]^if  ( state < VariableLiveness.READ )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P8_Replace_Mix]^}  if  ( state == VariableLiveness.READ )  {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P2_Replace_Operator]^for ( Node sibling = n.getNext (  ) ; sibling == null;^255^^^^^252^271^for ( Node sibling = n.getNext (  ) ; sibling != null;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^for ( Node sibling = exprRoot.getNext (  ) ; sibling != null;^255^^^^^252^271^for ( Node sibling = n.getNext (  ) ; sibling != null;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^for ( Node n = n.getNext (  ) ; sibling != null;^255^^^^^252^271^for ( Node sibling = n.getNext (  ) ; sibling != null;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^for ( Node n = sibling.getNext (  ) ; sibling != null;^255^^^^^252^271^for ( Node sibling = n.getNext (  ) ; sibling != null;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P7_Replace_Invocation]^for ( Node sibling = n.newNumber (  ) ; sibling != null;^255^^^^^252^271^for ( Node sibling = n.getNext (  ) ; sibling != null;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P7_Replace_Invocation]^for ( Node sibling = n .getParent (  )  ; sibling != null;^255^^^^^252^271^for ( Node sibling = n.getNext (  ) ; sibling != null;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P2_Replace_Operator]^if  ( state != VariableLiveness.READ )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P8_Replace_Mix]^if  ( MAYBE_LIVE == VariableLiveness.READ )  {^261^^^^^252^271^if  ( state == VariableLiveness.READ )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P2_Replace_Operator]^} else if  ( state <= VariableLiveness.KILL )  {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P13_Insert_Block]^if  ( ! ( isEnteringNewCfgNode ( c )  )  )  {     tryRemoveAssignment ( t, c, exprRoot, state ) ; }^257^^^^^252^271^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P7_Replace_Invocation]^sibling = sibling.newNumber (  )  )  {^256^^^^^252^271^sibling = sibling.getNext (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P8_Replace_Mix]^sibling =  n.getNext (  )  )  {^256^^^^^252^271^sibling = sibling.getNext (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^n = sibling.getParent (  ) ;^268^^^^^252^271^n = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P7_Replace_Invocation]^n = n.newNumber (  ) ;^268^^^^^252^271^n = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P7_Replace_Invocation]^n = n .getNext (  )  ;^268^^^^^252^271^n = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P8_Replace_Mix]^n =  sibling.getParesiblingt (  ) ;^268^^^^^252^271^n = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P11_Insert_Donor_Statement]^rhs = lhs.getNext (  ) ;n = n.getParent (  ) ;^268^^^^^252^271^n = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P5_Replace_Variable]^for ( Node sibling = sibling.getNext (  ) ; sibling != null;^255^^^^^252^271^for ( Node sibling = n.getNext (  ) ; sibling != null;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P8_Replace_Mix]^for ( Node sibling = sibling.newNumber (  ) ; sibling != null;^255^^^^^252^271^for ( Node sibling = n.getNext (  ) ; sibling != null;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P14_Delete_Statement]^^256^257^258^^^252^271^sibling = sibling.getNext (  )  )  { if  ( !ControlFlowGraph.isEnteringNewCfgNode ( sibling )  )  { VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P8_Replace_Mix]^n = sibling.newNumber (  ) ;^268^^^^^252^271^n = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P14_Delete_Statement]^^268^^^^^252^271^n = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;n = n.getParent (  ) ;^268^^^^^252^271^n = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P11_Insert_Donor_Statement]^Node next = c.getNext (  ) ;n = n.getParent (  ) ;^268^^^^^252^271^n = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;n = n.getParent (  ) ;^268^^^^^252^271^n = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P11_Insert_Donor_Statement]^Node parent = n.getParent (  ) ;n = n.getParent (  ) ;^268^^^^^252^271^n = n.getParent (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P8_Replace_Mix]^}  if  ( READ == VariableLiveness.KILL )  {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P2_Replace_Operator]^} else if  ( state > VariableLiveness.KILL )  {^263^^^^^252^271^} else if  ( state == VariableLiveness.KILL )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P8_Replace_Mix]^VariableLiveness state = process ( n, variable ) ;^258^^^^^252^271^VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P7_Replace_Invocation]^sibling = sibling .getParent (  )   )  {^256^^^^^252^271^sibling = sibling.getNext (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P8_Replace_Mix]^sibling = n .getParent (  )   )  {^256^^^^^252^271^sibling = sibling.getNext (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P3_Replace_Literal]^return true;^270^^^^^252^271^return false;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] isVariableStillLiveWithinExpression [RETURN_TYPE] boolean   Node n Node exprRoot String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  exprRoot  n  sibling  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( n )  || variable.equals ( n.getString (  )  )  )  {^289^^^^^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( child )  && variable.equals ( n.getString (  )  )  )  {^289^^^^^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( n )  ) {^289^^^^^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P6_Replace_Expression]^if  (  variable.equals ( n.getString (  )  )  )  {^289^^^^^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P7_Replace_Invocation]^if  ( NodeUtil.isLhs ( n )  && variable.equals ( n.getString (  )  )  )  {^289^^^^^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && variable.equals ( n.newNumber (  )  )  )  {^289^^^^^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P15_Unwrap_Block]^if (com.google.javascript.jscomp.NodeUtil.isLhs(n, n.getParent())) {    return com.google.javascript.jscomp.DeadAssignmentsElimination.VariableLiveness.KILL;}else {    return com.google.javascript.jscomp.DeadAssignmentsElimination.VariableLiveness.READ;};^289^290^291^292^293^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  { if  ( NodeUtil.isLhs ( n, n.getParent (  )  )  )  { return VariableLiveness.KILL; } else { return VariableLiveness.READ; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P16_Remove_Block]^^289^290^291^292^293^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  { if  ( NodeUtil.isLhs ( n, n.getParent (  )  )  )  { return VariableLiveness.KILL; } else { return VariableLiveness.READ; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( ! ( isEnteringNewCfgNode ( sibling )  )  )  {     VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;     if  ( state ==  ( READ )  )  {         return true;     }else         if  ( state ==  ( KILL )  )  {             return false;         }      }^289^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( isLhs ( n, n.getParent (  )  )  )  {     return KILL; }else {     return READ; }^289^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P5_Replace_Variable]^if  ( NodeUtil.isLhs (  n.getParent (  )  )  )  {^290^^^^^288^306^if  ( NodeUtil.isLhs ( n, n.getParent (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P7_Replace_Invocation]^if  ( NodeUtil.isLhs ( n, n.newNumber (  )  )  )  {^290^^^^^288^306^if  ( NodeUtil.isLhs ( n, n.getParent (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P8_Replace_Mix]^if  ( NodeUtil.isLhs ( child, n.getParent (  )  )  )  {^290^^^^^288^306^if  ( NodeUtil.isLhs ( n, n.getParent (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.DeadAssignmentsElimination.VariableLiveness.KILL;^290^291^292^293^294^288^306^if  ( NodeUtil.isLhs ( n, n.getParent (  )  )  )  { return VariableLiveness.KILL; } else { return VariableLiveness.READ; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P16_Remove_Block]^^290^291^292^293^294^288^306^if  ( NodeUtil.isLhs ( n, n.getParent (  )  )  )  { return VariableLiveness.KILL; } else { return VariableLiveness.READ; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  (  ( isName ( n )  )  &&  ( variable.equals ( n.getString (  )  )  )  )  {     if  ( isLhs ( n, n.getParent (  )  )  )  {         return KILL;     }else {         return READ;     } }^290^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( ! ( isEnteringNewCfgNode ( child )  )  )  {     VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;     if  ( state !=  ( MAYBE_LIVE )  )  {         return state;     } }^290^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P12_Insert_Condition]^if  ( state == VariableLiveness.READ )  { return VariableLiveness.READ; }^293^^^^^288^306^return VariableLiveness.READ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( state ==  ( KILL )  )  {     return false; }^293^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( state !=  ( MAYBE_LIVE )  )  {     return state; }^293^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( state ==  ( KILL )  )  {     return false; }^291^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( state !=  ( MAYBE_LIVE )  )  {     return state; }^291^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P7_Replace_Invocation]^if  ( NodeUtil.isLhs ( n, n .getNext (  )   )  )  {^290^^^^^288^306^if  ( NodeUtil.isLhs ( n, n.getParent (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( ! ( isName ( lhs )  )  )  {     return ; }^290^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P8_Replace_Mix]^if  ( NodeUtil.isLhs ( child, n.newNumber (  )  )  )  {^290^^^^^288^306^if  ( NodeUtil.isLhs ( n, n.getParent (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( ! ( isName ( lhs )  )  )  {     return ; }^289^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P1_Replace_Type]^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getchar (  )  )  )  {^289^^^^^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( variable )  && n.equals ( n.getString (  )  )  )  {^289^^^^^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n )  && variable.equals ( n .getParent (  )   )  )  {^289^^^^^288^306^if  ( NodeUtil.isName ( n )  && variable.equals ( n.getString (  )  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P5_Replace_Variable]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( n )  )  {^298^^^^^288^306^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( child )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P9_Replace_Statement]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( c )  )  {^298^^^^^288^306^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( child )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P9_Replace_Statement]^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( sibling )  )  {^298^^^^^288^306^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( child )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P15_Unwrap_Block]^com.google.javascript.jscomp.DeadAssignmentsElimination.VariableLiveness state = readVariableBeforeKilling(child, variable); if (state != (com.google.javascript.jscomp.DeadAssignmentsElimination.VariableLiveness.MAYBE_LIVE)) {    return state;};^298^299^300^301^302^288^306^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( child )  )  { VariableLiveness state = readVariableBeforeKilling ( child, variable ) ; if  ( state != VariableLiveness.MAYBE_LIVE )  { return state; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P16_Remove_Block]^^298^299^300^301^302^288^306^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( child )  )  { VariableLiveness state = readVariableBeforeKilling ( child, variable ) ; if  ( state != VariableLiveness.MAYBE_LIVE )  { return state; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( ! ( isEnteringNewCfgNode ( sibling )  )  )  {     VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;     if  ( state ==  ( READ )  )  {         return true;     }else         if  ( state ==  ( KILL )  )  {             return false;         }      }^298^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( isLhs ( n, n.getParent (  )  )  )  {     return KILL; }else {     return READ; }^298^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( state ==  ( READ )  )  {     return true; }else     if  ( state ==  ( KILL )  )  {         return false;     }^298^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P2_Replace_Operator]^if  ( state == VariableLiveness.MAYBE_LIVE )  {^300^^^^^288^306^if  ( state != VariableLiveness.MAYBE_LIVE )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P5_Replace_Variable]^if  ( READ != VariableLiveness.MAYBE_LIVE )  {^300^^^^^288^306^if  ( state != VariableLiveness.MAYBE_LIVE )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P8_Replace_Mix]^if  ( state != VariableLiveness.READ )  {^300^^^^^288^306^if  ( state != VariableLiveness.MAYBE_LIVE )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P9_Replace_Statement]^if  ( state == VariableLiveness.READ )  {^300^^^^^288^306^if  ( state != VariableLiveness.MAYBE_LIVE )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P15_Unwrap_Block]^return state;^300^301^302^^^288^306^if  ( state != VariableLiveness.MAYBE_LIVE )  { return state; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P16_Remove_Block]^^300^301^302^^^288^306^if  ( state != VariableLiveness.MAYBE_LIVE )  { return state; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( state ==  ( KILL )  )  {     return false; }^300^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( ! ( isName ( lhs )  )  )  {     return ; }^300^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P5_Replace_Variable]^return READ;^301^^^^^288^306^return state;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P5_Replace_Variable]^VariableLiveness state = readVariableBeforeKilling ( n, variable ) ;^299^^^^^288^306^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P5_Replace_Variable]^VariableLiveness state = readVariableBeforeKilling (  variable ) ;^299^^^^^288^306^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P5_Replace_Variable]^VariableLiveness state = readVariableBeforeKilling ( child ) ;^299^^^^^288^306^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P5_Replace_Variable]^VariableLiveness state = readVariableBeforeKilling ( variable, child ) ;^299^^^^^288^306^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P7_Replace_Invocation]^VariableLiveness state = process ( child, variable ) ;^299^^^^^288^306^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P11_Insert_Donor_Statement]^VariableLiveness state = readVariableBeforeKilling ( sibling, variable ) ;VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^299^^^^^288^306^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( state ==  ( KILL )  )  {     return false; }^299^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( state !=  ( MAYBE_LIVE )  )  {     return state; }^299^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P14_Delete_Statement]^^299^300^301^302^^288^306^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ; if  ( state != VariableLiveness.MAYBE_LIVE )  { return state; }^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P2_Replace_Operator]^if  ( state < VariableLiveness.MAYBE_LIVE )  {^300^^^^^288^306^if  ( state != VariableLiveness.MAYBE_LIVE )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P5_Replace_Variable]^for  ( Node n = n.getFirstChild (  ) ;^296^^^^^288^306^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P5_Replace_Variable]^for  ( Node n = child.getFirstChild (  ) ;^296^^^^^288^306^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P7_Replace_Invocation]^for  ( Node child = n.newNumber (  ) ;^296^^^^^288^306^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P8_Replace_Mix]^for  ( Node n = n.newNumber (  ) ;^296^^^^^288^306^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P2_Replace_Operator]^if  ( state <= VariableLiveness.MAYBE_LIVE )  {^300^^^^^288^306^if  ( state != VariableLiveness.MAYBE_LIVE )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P8_Replace_Mix]^VariableLiveness state = process ( n, variable ) ;^299^^^^^288^306^VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P7_Replace_Invocation]^if  ( !ControlFlowGraph .getDirectedGraphNodes (  )   )  {^298^^^^^288^306^if  ( !ControlFlowGraph.isEnteringNewCfgNode ( child )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P13_Insert_Block]^if  ( ! ( isEnteringNewCfgNode ( c )  )  )  {     tryRemoveAssignment ( t, c, exprRoot, state ) ; }^298^^^^^288^306^[Delete]^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P5_Replace_Variable]^child != null; n = child.getNext (  )  )  {^297^^^^^288^306^child != null; child = child.getNext (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P7_Replace_Invocation]^child != null; child = child.newNumber (  )  )  {^297^^^^^288^306^child != null; child = child.getNext (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P8_Replace_Mix]^child !=  null; n^297^^^^^288^306^child != null; child = child.getNext (  )  )  {^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P7_Replace_Invocation]^for  ( Node child = n .getLastChild (  )  ;^296^^^^^288^306^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;for  ( Node child = n.getFirstChild (  ) ;^296^^^^^288^306^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P5_Replace_Variable]^for  ( Node child = child.getFirstChild (  ) ;^296^^^^^288^306^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P14_Delete_Statement]^^297^298^299^^^288^306^child != null; child = child.getNext (  )  )  { if  ( !ControlFlowGraph.isEnteringNewCfgNode ( child )  )  { VariableLiveness state = readVariableBeforeKilling ( child, variable ) ;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
[P12_Insert_Condition]^if  ( state != VariableLiveness.MAYBE_LIVE )  { return VariableLiveness.MAYBE_LIVE; }^305^^^^^288^306^return VariableLiveness.MAYBE_LIVE;^[CLASS] DeadAssignmentsElimination VariableLiveness  [METHOD] readVariableBeforeKilling [RETURN_TYPE] DeadAssignmentsElimination$VariableLiveness   Node n String variable [VARIABLES] AbstractCompiler  compiler  String  variable  boolean  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Node  child  n  
