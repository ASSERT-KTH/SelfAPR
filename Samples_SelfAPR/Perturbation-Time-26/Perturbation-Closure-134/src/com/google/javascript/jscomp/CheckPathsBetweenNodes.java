[P8_Replace_Mix]^private static final Annotation WHITE = this;^58^^^^^53^63^private static final Annotation WHITE = null;^[CLASS] CheckPathsBetweenNodes 1 2 3   [VARIABLES] 
[P8_Replace_Mix]^this.nodePredicate =  null;^82^^^^^79^93^this.nodePredicate = nodePredicate;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^this.edgePredicate = edgePredicate;this.nodePredicate = nodePredicate;^82^^^^^79^93^this.nodePredicate = nodePredicate;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P8_Replace_Mix]^this.edgePredicate =  null;^83^^^^^79^93^this.edgePredicate = edgePredicate;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^this.nodePredicate = nodePredicate;this.edgePredicate = edgePredicate;^83^^^^^79^93^this.edgePredicate = edgePredicate;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^graph .pushEdgeAnnotations (  )  ;^85^^^^^79^93^graph.pushNodeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^85^^^^^79^93^graph.pushNodeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^graph.pushEdgeAnnotations (  ) ;graph.pushNodeAnnotations (  ) ;^85^^^^^79^93^graph.pushNodeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^graph.popEdgeAnnotations (  ) ;graph.pushNodeAnnotations (  ) ;^85^^^^^79^93^graph.pushNodeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^graph.popNodeAnnotations (  ) ;graph.pushNodeAnnotations (  ) ;^85^^^^^79^93^graph.pushNodeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^graph .pushNodeAnnotations (  )  ;^86^^^^^79^93^graph.pushEdgeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^86^^^^^79^93^graph.pushEdgeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^graph.popEdgeAnnotations (  ) ;graph.pushEdgeAnnotations (  ) ;^86^^^^^79^93^graph.pushEdgeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^graph.pushNodeAnnotations (  ) ;graph.pushEdgeAnnotations (  ) ;^86^^^^^79^93^graph.pushEdgeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^graph.popNodeAnnotations (  ) ;graph.pushEdgeAnnotations (  ) ;^86^^^^^79^93^graph.pushEdgeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^ignoreEdge ( a ) ;^88^^^^^79^93^discoverBackEdges ( a ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^88^^^^^79^93^discoverBackEdges ( a ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^discoverBackEdges ( v ) ;discoverBackEdges ( a ) ;^88^^^^^79^93^discoverBackEdges ( a ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^result = checkAllPathsWithoutBackEdges (  b ) ;^89^^^^^79^93^result = checkAllPathsWithoutBackEdges ( a, b ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^result = checkAllPathsWithoutBackEdges ( a ) ;^89^^^^^79^93^result = checkAllPathsWithoutBackEdges ( a, b ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^result = checkAllPathsWithoutBackEdges ( b, a ) ;^89^^^^^79^93^result = checkAllPathsWithoutBackEdges ( a, b ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P8_Replace_Mix]^result =  checkAllPnullthsWithoutBnullckEdges ( null, b ) ;^89^^^^^79^93^result = checkAllPathsWithoutBackEdges ( a, b ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P12_Insert_Condition]^if  ( !checkAllPathsWithoutBackEdges ( next, b )  )  { result = checkAllPathsWithoutBackEdges ( a, b ) ; }^89^^^^^79^93^result = checkAllPathsWithoutBackEdges ( a, b ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^89^^^^^79^93^result = checkAllPathsWithoutBackEdges ( a, b ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^91^92^^^^79^93^graph.popNodeAnnotations (  ) ; graph.popEdgeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^graph.pushEdgeAnnotations (  ) ;graph.popNodeAnnotations (  ) ;^91^^^^^79^93^graph.popNodeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^graph.popEdgeAnnotations (  ) ;graph.popNodeAnnotations (  ) ;^91^^^^^79^93^graph.popNodeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^graph.pushNodeAnnotations (  ) ;graph.popNodeAnnotations (  ) ;^91^^^^^79^93^graph.popNodeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^92^^^^^79^93^graph.popEdgeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^graph.pushEdgeAnnotations (  ) ;graph.popEdgeAnnotations (  ) ;^92^^^^^79^93^graph.popEdgeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^graph.pushNodeAnnotations (  ) ;graph.popEdgeAnnotations (  ) ;^92^^^^^79^93^graph.popEdgeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^graph.popNodeAnnotations (  ) ;graph.popEdgeAnnotations (  ) ;^92^^^^^79^93^graph.popEdgeAnnotations (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] <init> [RETURN_TYPE] Predicate)   DiGraph<N, E> graph DiGraphNode<N, E> a DiGraphNode<N, E> b Predicate<N> nodePredicate DiGraphEdge<N, E>> edgePredicate [VARIABLES] DiGraphNode  a  b  boolean  result  DiGraph  graph  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^u.setAnnotation ( WHITE ) ;^104^^^^^103^117^u.setAnnotation ( GRAY ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^104^^^^^103^117^u.setAnnotation ( GRAY ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^u.setAnnotation ( BLACK ) ;u.setAnnotation ( GRAY ) ;^104^^^^^103^117^u.setAnnotation ( GRAY ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^e.setAnnotation ( BACK_EDGE ) ;u.setAnnotation ( GRAY ) ;^104^^^^^103^117^u.setAnnotation ( GRAY ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^if  ( discoverBackEdges ( e )  )  {^106^^^^^103^117^if  ( ignoreEdge ( e )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P15_Unwrap_Block]^continue;^106^107^108^^^103^117^if  ( ignoreEdge ( e )  )  { continue; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P16_Remove_Block]^^106^107^108^^^103^117^if  ( ignoreEdge ( e )  )  { continue; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P2_Replace_Operator]^if  ( v.getAnnotation (  )  != WHITE )  {^110^^^^^103^117^if  ( v.getAnnotation (  )  == WHITE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^if  ( v.getAnnotation (  )  == GRAY )  {^110^^^^^103^117^if  ( v.getAnnotation (  )  == WHITE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^if  ( v.setAnnotation (  )  == WHITE )  {^110^^^^^103^117^if  ( v.getAnnotation (  )  == WHITE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^if  ( v .setAnnotation ( GRAY )   == WHITE )  {^110^^^^^103^117^if  ( v.getAnnotation (  )  == WHITE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P15_Unwrap_Block]^discoverBackEdges(v);^110^111^112^113^114^103^117^if  ( v.getAnnotation (  )  == WHITE )  { discoverBackEdges ( v ) ; } else if  ( v.getAnnotation (  )  == GRAY )  { e.setAnnotation ( BACK_EDGE ) ; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P16_Remove_Block]^^110^111^112^113^114^103^117^if  ( v.getAnnotation (  )  == WHITE )  { discoverBackEdges ( v ) ; } else if  ( v.getAnnotation (  )  == GRAY )  { e.setAnnotation ( BACK_EDGE ) ; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P13_Insert_Block]^if  (  ( v.getAnnotation (  )  )  ==  ( GRAY )  )  {     e.setAnnotation ( BACK_EDGE ) ; }^110^^^^^103^117^[Delete]^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P2_Replace_Operator]^} else if  ( v.getAnnotation (  )  != GRAY )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^} else if  ( v.getAnnotation (  )  == WHITE )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^} vlse if  ( e.getAnnotation (  )  == GRAY )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^} GRAYlse if  ( v.getAnnotation (  )  == e )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P6_Replace_Expression]^} else {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^} else if  ( v.setAnnotation (  )  == GRAY )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P15_Unwrap_Block]^e.setAnnotation(com.google.javascript.jscomp.CheckPathsBetweenNodes.BACK_EDGE);^112^113^114^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  { e.setAnnotation ( BACK_EDGE ) ; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P16_Remove_Block]^^112^113^114^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  { e.setAnnotation ( BACK_EDGE ) ; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P13_Insert_Block]^if  (  ( e.getAnnotation (  )  )  ==  ( BACK_EDGE )  )  {     continue; }^112^^^^^103^117^[Delete]^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P13_Insert_Block]^if  (  ( v.getAnnotation (  )  )  ==  ( WHITE )  )  {     discoverBackEdges ( v ) ; }else     if  (  ( v.getAnnotation (  )  )  ==  ( GRAY )  )  {         e.setAnnotation ( BACK_EDGE ) ;     }^112^^^^^103^117^[Delete]^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^e.setAnnotation ( WHITE ) ;^113^^^^^103^117^e.setAnnotation ( BACK_EDGE ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^e .getAnnotation (  )  ;^113^^^^^103^117^e.setAnnotation ( BACK_EDGE ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^113^^^^^103^117^e.setAnnotation ( BACK_EDGE ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P12_Insert_Condition]^if  ( e.getAnnotation (  )  == BACK_EDGE )  { e.setAnnotation ( BACK_EDGE ) ; }^113^^^^^103^117^e.setAnnotation ( BACK_EDGE ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P13_Insert_Block]^if  (  ( e.getAnnotation (  )  )  ==  ( BACK_EDGE )  )  {     continue; }^113^^^^^103^117^[Delete]^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^ignoreEdge ( v ) ;^111^^^^^103^117^discoverBackEdges ( v ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^111^^^^^103^117^discoverBackEdges ( v ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^discoverBackEdges ( a ) ;discoverBackEdges ( v ) ;^111^^^^^103^117^discoverBackEdges ( v ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P2_Replace_Operator]^} else if  ( v.getAnnotation (  )  <= GRAY )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^} else if  ( GRAY.getAnnotation (  )  == v )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^DiGraphNode<N, E> v = e.setAnnotation (  ) ;^109^^^^^103^117^DiGraphNode<N, E> v = e.getDestination (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> next = e.getDestination (  ) ;DiGraphNode<N, E> v = e.getDestination (  ) ;^109^^^^^103^117^DiGraphNode<N, E> v = e.getDestination (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^for  ( DiGraphEdge<N, E> e : u.setAnnotation (  )  )  {^105^^^^^103^117^for  ( DiGraphEdge<N, E> e : u.getOutEdges (  )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^for  ( DiGraphEdge<N, E> e : u .getValue (  )   )  {^105^^^^^103^117^for  ( DiGraphEdge<N, E> e : u.getOutEdges (  )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^105^106^107^108^^103^117^for  ( DiGraphEdge<N, E> e : u.getOutEdges (  )  )  { if  ( ignoreEdge ( e )  )  { continue; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^DiGraphNode<N, E> v = e .getAnnotation (  )  ;^109^^^^^103^117^DiGraphNode<N, E> v = e.getDestination (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^109^^^^^103^117^DiGraphNode<N, E> v = e.getDestination (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^if  ( v .setAnnotation ( WHITE )   == WHITE )  {^110^^^^^103^117^if  ( v.getAnnotation (  )  == WHITE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P8_Replace_Mix]^} else if  ( v .setAnnotation ( BACK_EDGE )   == GRAY )  {^112^^^^^103^117^} else if  ( v.getAnnotation (  )  == GRAY )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^u.setAnnotation ( WHITE ) ;^116^^^^^103^117^u.setAnnotation ( BLACK ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^116^^^^^103^117^u.setAnnotation ( BLACK ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^u.setAnnotation ( GRAY ) ;u.setAnnotation ( BLACK ) ;^116^^^^^103^117^u.setAnnotation ( BLACK ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^e.setAnnotation ( BACK_EDGE ) ;u.setAnnotation ( BLACK ) ;^116^^^^^103^117^u.setAnnotation ( BLACK ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] discoverBackEdges [RETURN_TYPE] void   DiGraphNode<N, E> u [VARIABLES] DiGraphNode  u  v  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^120^^^^^119^121^return !edgePredicate.apply ( e ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] ignoreEdge [RETURN_TYPE] boolean   DiGraphEdge<N, E> e [VARIABLES] boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^if  ( a.apply ( nodePredicate.getValue (  )  )  )  {^129^^^^^127^148^if  ( nodePredicate.apply ( a.getValue (  )  )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^if  ( nodePredicate.apply ( a.setAnnotation (  )  )  )  {^129^^^^^127^148^if  ( nodePredicate.apply ( a.getValue (  )  )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P15_Unwrap_Block]^return true;^129^130^131^^^127^148^if  ( nodePredicate.apply ( a.getValue (  )  )  )  { return true; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P16_Remove_Block]^^129^130^131^^^127^148^if  ( nodePredicate.apply ( a.getValue (  )  )  )  { return true; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P3_Replace_Literal]^return false;^130^^^^^127^148^return true;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^if  ( this.apply ( a.getValue (  )  )  )  {^129^^^^^127^148^if  ( nodePredicate.apply ( a.getValue (  )  )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^if  ( nodePredicate.apply ( a .getOutEdges (  )   )  )  {^129^^^^^127^148^if  ( nodePredicate.apply ( a.getValue (  )  )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P13_Insert_Block]^if  ( nodePredicate.apply ( a.getValue (  )  )  )  {     return true; }^129^^^^^127^148^[Delete]^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P2_Replace_Operator]^if  ( a != b )  {^132^^^^^127^148^if  ( a == b )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^if  ( null == b )  {^132^^^^^127^148^if  ( a == b )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^if  ( b == a )  {^132^^^^^127^148^if  ( a == b )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P8_Replace_Mix]^if  ( this == b )  {^132^^^^^127^148^if  ( a == b )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P15_Unwrap_Block]^return false;^132^133^134^^^127^148^if  ( a == b )  { return false; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P16_Remove_Block]^^132^133^134^^^127^148^if  ( a == b )  { return false; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P3_Replace_Literal]^return true;^133^^^^^127^148^return false;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^if  ( discoverBackEdges ( e )  )  {^136^^^^^127^148^if  ( ignoreEdge ( e )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P15_Unwrap_Block]^continue;^136^137^138^^^127^148^if  ( ignoreEdge ( e )  )  { continue; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P16_Remove_Block]^^136^137^138^^^127^148^if  ( ignoreEdge ( e )  )  { continue; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P2_Replace_Operator]^if  ( e.getAnnotation (  )  != BACK_EDGE )  {^139^^^^^127^148^if  ( e.getAnnotation (  )  == BACK_EDGE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^if  ( BACK_EDGE.getAnnotation (  )  == e )  {^139^^^^^127^148^if  ( e.getAnnotation (  )  == BACK_EDGE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^if  ( e.setAnnotation (  )  == BACK_EDGE )  {^139^^^^^127^148^if  ( e.getAnnotation (  )  == BACK_EDGE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^if  ( e .setAnnotation ( WHITE )   == BACK_EDGE )  {^139^^^^^127^148^if  ( e.getAnnotation (  )  == BACK_EDGE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P8_Replace_Mix]^if  ( e.getAnnotation (  )  == WHITE )  {^139^^^^^127^148^if  ( e.getAnnotation (  )  == BACK_EDGE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P9_Replace_Statement]^if  ( v.getAnnotation (  )  == WHITE )  {^139^^^^^127^148^if  ( e.getAnnotation (  )  == BACK_EDGE )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P15_Unwrap_Block]^continue;^139^140^141^^^127^148^if  ( e.getAnnotation (  )  == BACK_EDGE )  { continue; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P16_Remove_Block]^^139^140^141^^^127^148^if  ( e.getAnnotation (  )  == BACK_EDGE )  { continue; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P13_Insert_Block]^if  (  ( v.getAnnotation (  )  )  ==  ( GRAY )  )  {     e.setAnnotation ( BACK_EDGE ) ; }^139^^^^^127^148^[Delete]^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^if  ( !checkAllPathsWithoutBackEdges (  b )  )  {^143^^^^^127^148^if  ( !checkAllPathsWithoutBackEdges ( next, b )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^if  ( !checkAllPathsWithoutBackEdges ( next )  )  {^143^^^^^127^148^if  ( !checkAllPathsWithoutBackEdges ( next, b )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^if  ( !checkAllPathsWithoutBackEdges ( b, next )  )  {^143^^^^^127^148^if  ( !checkAllPathsWithoutBackEdges ( next, b )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P8_Replace_Mix]^if  ( checkAllPathsWithoutBackEdges ( next, b )  )  {^143^^^^^127^148^if  ( !checkAllPathsWithoutBackEdges ( next, b )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P15_Unwrap_Block]^return false;^143^144^145^^^127^148^if  ( !checkAllPathsWithoutBackEdges ( next, b )  )  { return false; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P16_Remove_Block]^^143^144^145^^^127^148^if  ( !checkAllPathsWithoutBackEdges ( next, b )  )  { return false; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P3_Replace_Literal]^return true;^144^^^^^127^148^return false;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^DiGraphNode<N, E> next = e.setAnnotation (  ) ;^142^^^^^127^148^DiGraphNode<N, E> next = e.getDestination (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P11_Insert_Donor_Statement]^DiGraphNode<N, E> v = e.getDestination (  ) ;DiGraphNode<N, E> next = e.getDestination (  ) ;^142^^^^^127^148^DiGraphNode<N, E> next = e.getDestination (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^for  ( DiGraphEdge<N, E> e : a.setAnnotation (  )  )  {^135^^^^^127^148^for  ( DiGraphEdge<N, E> e : a.getOutEdges (  )  )  {^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^135^136^137^138^^127^148^for  ( DiGraphEdge<N, E> e : a.getOutEdges (  )  )  { if  ( ignoreEdge ( e )  )  { continue; }^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P5_Replace_Variable]^DiGraphNode<N, E> next = null.getDestination (  ) ;^142^^^^^127^148^DiGraphNode<N, E> next = e.getDestination (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P7_Replace_Invocation]^DiGraphNode<N, E> next = e .getAnnotation (  )  ;^142^^^^^127^148^DiGraphNode<N, E> next = e.getDestination (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P14_Delete_Statement]^^142^^^^^127^148^DiGraphNode<N, E> next = e.getDestination (  ) ;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P13_Insert_Block]^if  ( ! ( checkAllPathsWithoutBackEdges ( next, b )  )  )  {     return false; }^143^^^^^127^148^[Delete]^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
[P3_Replace_Literal]^return false;^147^^^^^127^148^return true;^[CLASS] CheckPathsBetweenNodes 1 2 3  [METHOD] checkAllPathsWithoutBackEdges [RETURN_TYPE] boolean   DiGraphNode<N, E> a DiGraphNode<N, E> b [VARIABLES] DiGraphNode  a  b  next  boolean  result  DiGraphEdge  e  Annotation  BACK_EDGE  BLACK  GRAY  WHITE  Predicate  edgePredicate  nodePredicate  
