[P3_Replace_Literal]^static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning ( "S_", "Suspicious code. {0}" ) ;^39^40^41^^^39^41^static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning ( "JSC_USELESS_CODE", "Suspicious code. {0}" ) ;^[CLASS] CheckSideEffects   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning ( "JSC_USELESS_CODE", "Suspic" ) ;^39^40^41^^^39^41^static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning ( "JSC_USELESS_CODE", "Suspicious code. {0}" ) ;^[CLASS] CheckSideEffects   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType USELESS_CODE_ERROR ;^39^40^41^^^39^41^static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning ( "JSC_USELESS_CODE", "Suspicious code. {0}" ) ;^[CLASS] CheckSideEffects   [VARIABLES] 
[P8_Replace_Mix]^this.level =  null;^46^^^^^45^47^this.level = level;^[CLASS] CheckSideEffects  [METHOD] <init> [RETURN_TYPE] CheckLevel)   CheckLevel level [VARIABLES] DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  boolean  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.EMPTY && n.getType (  )  == Token.COMMA )  {^54^55^^^^39^69^if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.EMPTY || n.getType (  )  == Token.COMMA )  {^54^55^^^^39^69^if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( n.getType (  )  < Token.EMPTY || n.getType (  )  == Token.COMMA )  {^54^55^^^^39^69^if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( n.getType (  )  == Token.EMPTY ) {^54^55^^^^39^69^if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  (  n.getType (  )  == Token.COMMA )  {^54^55^^^^39^69^if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( n.getType (  )  == EMPTY )  {^54^55^^^^39^69^if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( n.getType (  )  == COMMA )  {^54^55^^^^39^69^if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P15_Unwrap_Block]^return ;^54^55^56^57^^39^69^if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  { return; }^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P16_Remove_Block]^^54^55^56^57^^39^69^if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  { return; }^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^54^55^^^^39^69^if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^if  ( n .getLastChild (  )   == Token.EMPTY || n^54^55^^^^39^69^if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^n .getLastChild (  )   == Token.COMMA )  {^55^^^^^40^70^n.getType (  )  == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P14_Delete_Statement]^^55^56^^^^40^70^n.getType (  )  == Token.COMMA )  { return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( parent != null ) return;^59^60^^^^44^74^if  ( parent == null ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( n == null ) return;^59^60^^^^44^74^if  ( parent == null ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^if  ( parent == false ) return;^59^60^^^^44^74^if  ( parent == null ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P1_Replace_Type]^short  pt = parent.getType (  ) ;^62^^^^^47^77^int pt = parent.getType (  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^int pt = n.getType (  ) ;^62^^^^^47^77^int pt = parent.getType (  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P11_Insert_Donor_Statement]^int ancestorType = an.getType (  ) ;int pt = parent.getType (  ) ;^62^^^^^47^77^int pt = parent.getType (  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P12_Insert_Condition]^if  ( n == parent.getLastChild (  )  )  { int pt = parent.getType (  ) ; }^62^^^^^47^77^int pt = parent.getType (  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P14_Delete_Statement]^^62^^^^^47^77^int pt = parent.getType (  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt != Token.COMMA )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt <= Token.COMMA )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt >= Token.COMMA )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( ancestorType == Token.COMMA )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( n == parent.getLastChild() )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( ancestorType == COMMA )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( ancestorType != EXPR_RESULT && ancestorType != BLOCK )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( ancestorType != EXPR_RESULT )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( ancestorType != BLOCK )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( pt != EXPR_RESULT && pt != BLOCK )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( pt != EXPR_RESULT )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( pt != BLOCK )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( (pt == FOR) && (parent.getChildCount() == 4) && (n == parent.getFirstChild()) || (n == getNext()) )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( (pt == FOR && parent.getChildCount() == 4) )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( pt == FOR )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( parent.getChildCount (  )  == 4 )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( (n == parent.getFirstChild() || n == getNext()) )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( n == parent.getFirstChild (  ) )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) )  {^63^^^^^48^78^if  ( pt == Token.COMMA )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^} else if  ( pt != Token.EXPR_RESULT || pt != Token.BLOCK )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^} else if  ( pt == Token.EXPR_RESULT && pt != Token.BLOCK )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^} else if  ( pt >= Token.EXPR_RESULT && pt != Token.BLOCK )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^} else if  ( ancestorType != Token.EXPR_RESULT && pt != Token.BLOCK )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^} else if  ( pt != Token.EXPR_RESULT && pt != Token.null )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^} else if  ( pt != Token.EXPR_RESULT ) {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^} else if  (  pt != Token.BLOCK )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^} else if  ( pt != EXPR_RESULT )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^} else if  ( pt != BLOCK )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^} else if  ( (pt == FOR) && (parent.getChildCount() == 4) && (n == parent.getFirstChild()) || (n == getNext()) )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^} else if  ( (pt == FOR && parent.getChildCount() == 4) )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^} else if  ( pt == FOR )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^} else if  ( parent.getChildCount (  )  == 4 )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^} else if  ( (n == parent.getFirstChild() || n == getNext()) )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^} else if  ( n == parent.getFirstChild (  ) )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^} else if  ( n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^} else {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P13_Insert_Block]^if  (  (  ( pt ==  ( FOR )  )  &&  (  ( parent.getChildCount (  )  )  == 4 )  )  &&  (  ( n ==  ( parent.getFirstChild (  )  )  )  ||  ( n ==  ( parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  )  )  { }else {     return ; }^76^^^^^61^91^[Delete]^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt == Token.FOR || parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt != Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  != 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  && n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n <= parent.getFirstChild (  )  || n <= parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n <= parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P3_Replace_Literal]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 12 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( ancestorType == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( pt == Token.FOR && n.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( an == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( parent == Token.FOR && pt.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( pt == Token.FOR && n.getChildCount (  )  == 4 && ( parent == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  ) {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  (  n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( (pt == FOR && parent.getChildCount() == 4) )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( pt == FOR )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( parent.getChildCount (  )  == 4 )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( (n == parent.getFirstChild() || n == getNext()) )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( n == parent.getFirstChild (  ) )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( n == parent.getFirstChild (  ) .getNext (  ) .getNext (  ) )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^if  ( pt == Token.FOR && parent .getLastChild (  )   == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  )  .report (  )^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent .getLastChild (  )   || n == parent^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 3 && ( an == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P13_Insert_Block]^if  (  ( pt !=  ( EXPR_RESULT )  )  &&  ( pt !=  ( BLOCK )  )  )  {     if  (  (  ( pt ==  ( FOR )  )  &&  (  ( parent.getChildCount (  )  )  == 4 )  )  &&  (  ( n ==  ( parent.getFirstChild (  )  )  )  ||  ( n ==  ( parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  )  )  {     }else {         return ;     } }^77^^^^^62^92^[Delete]^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^( n == n.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^78^79^^^^63^93^( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^( n == parent .getLastChild (  )   || n == parent^78^79^^^^63^93^( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^( n == n .getLastChild (  )   || n == parent^78^79^^^^63^93^( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^n == n.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^79^^^^^64^94^n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^n == parent .getLastChild (  )  .getNext (  ) .getNext (  )  )  )  {^79^^^^^64^94^n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^n == n .getLastChild (  )  .getNext (  ) .getNext (  )  )  )  {^79^^^^^64^94^n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  <= 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P3_Replace_Literal]^if  ( pt == Token.FOR && parent.getChildCount (  )  == ancestorType && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( pt == Token.FOR && an.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4L && ( n == parent.getFirstChild (  )  ) {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^n == parent.getFirstChild (  )  .report (  )^79^^^^^64^94^n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( n != parent.getLastChild (  )  )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( n == n.getLastChild (  )  )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( ancestorType == COMMA )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( ancestorType != EXPR_RESULT && ancestorType != BLOCK )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( ancestorType != EXPR_RESULT )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( ancestorType != BLOCK )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^if  ( n == parent .getFirstChild (  )   )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^if  ( parent == parent.getLastChild (  )  )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( ancestorType != Token.COMMA ) continue;^67^68^^^^52^82^if  ( ancestorType == Token.COMMA ) continue;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( pt == Token.COMMA ) continue;^67^68^^^^52^82^if  ( ancestorType == Token.COMMA ) continue;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( ancestorType != Token.EXPR_RESULT || ancestorType != Token.BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( ancestorType <= Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( ancestorType > Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( pt != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( ancestorType != Token.null && ancestorType != Token.BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.this ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( ancestorType != EXPR_RESULT ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( ancestorType != BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P15_Unwrap_Block]^return ;^69^70^71^72^73^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return; else break; }^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P16_Remove_Block]^^69^70^71^72^73^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return; else break; }^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P13_Insert_Block]^if  (  (  ( n.getType (  )  )  ==  ( EMPTY )  )  ||  (  ( n.getType (  )  )  ==  ( COMMA )  )  )  {     return ; }^69^^^^^54^84^[Delete]^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P1_Replace_Type]^long  ancestorType = an.getType (  ) ;^66^^^^^51^81^int ancestorType = an.getType (  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^int parentcestorType = an.getType (  ) ;^66^^^^^51^81^int ancestorType = an.getType (  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P11_Insert_Donor_Statement]^int pt = parent.getType (  ) ;int ancestorType = an.getType (  ) ;^66^^^^^51^81^int ancestorType = an.getType (  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^for  ( Node an : n.getAncestors (  )  )  {^65^^^^^50^80^for  ( Node an : parent.getAncestors (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^int ancestorType = an .getLastChild (  )  ;^66^^^^^51^81^int ancestorType = an.getType (  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P14_Delete_Statement]^^66^^^^^51^81^int ancestorType = an.getType (  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( ancestorType >= Token.COMMA ) continue;^67^68^^^^52^82^if  ( ancestorType == Token.COMMA ) continue;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( ancestorType >= Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( ancestorType == Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P1_Replace_Type]^short  ancestorType = an.getType (  ) ;^66^^^^^51^81^int ancestorType = an.getType (  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( parent == n.getLastChild (  )  )  {^64^^^^^49^79^if  ( n == parent.getLastChild (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^if  ( ancestorType = Token.EXPR_RESULT && ancestorType = Token.BLOCK ) return;^69^70^71^^^54^84^if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^} else if  ( pt != Token.EXPR_RESULT && pt != Token.this )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^}  if  ( pt = Token.EXPR_RESULT && pt = Token.BLOCK )  {^76^^^^^61^91^} else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt <= Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  >= 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n >= parent.getFirstChild (  )  || n >= parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n != parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P3_Replace_Literal]^if  ( pt == Token.FOR && parent.getChildCount (  )  == -3 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n != parent.getFirstChild (  )  || n != parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P3_Replace_Literal]^if  ( pt == Token.FOR && parent.getChildCount (  )  == pt && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 / 2 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^62^92^if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^for  ( Node an : parent .getType (  )   )  {^65^^^^^50^80^for  ( Node an : parent.getAncestors (  )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  && !NodeUtil.mayHaveSideEffects ( n )  )  {^86^87^^^^71^101^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( NodeUtil.isSimpleOperatorType ( parent.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^86^87^^^^71^101^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  ) {^86^87^^^^71^101^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  (  !NodeUtil.mayHaveSideEffects ( n )  )  {^86^87^^^^71^101^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( n.isQualifiedName() && n.getJSDocInfo() != null )  {^86^87^^^^71^101^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( n.getJSDocInfo (  )  != null )  {^86^87^^^^71^101^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( n.getType() == STRING )  {^86^87^^^^71^101^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^if  ( NodeUtil.isExpressionNode ( n.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^86^87^^^^71^101^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  || !NodeUtil.isExpressionNode ( n )  )  {^86^87^^^^71^101^if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( n.isQualifiedName (  )  || n.getJSDocInfo (  )  != null )  {^88^^^^^86^104^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  == null )  {^88^^^^^86^104^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( parent.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^88^^^^^86^104^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( n.isQualifiedName (  )  ) {^88^^^^^86^104^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  (  n.getJSDocInfo (  )  != null )  {^88^^^^^86^104^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^if  ( n .getType (  )   && n.getJSDocInfo (  )  != null )  {^88^^^^^86^104^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^} else if  ( NodeUtil.isExpressionNode ( parent )  )  {^92^^^^^86^104^} else if  ( NodeUtil.isExpressionNode ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^} else {^92^^^^^86^104^} else if  ( NodeUtil.isExpressionNode ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^} else if  ( NodeUtil.mayHaveSideEffects ( n )  )  {^92^^^^^86^104^} else if  ( NodeUtil.isExpressionNode ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^}  if  ( NodeUtil.isExpressionNode ( parent )  )  {^92^^^^^86^104^} else if  ( NodeUtil.isExpressionNode ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P15_Unwrap_Block]^return ;^92^93^94^95^^86^104^} else if  ( NodeUtil.isExpressionNode ( n )  )  {  return; }^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P16_Remove_Block]^^92^93^94^95^^86^104^} else if  ( NodeUtil.isExpressionNode ( n )  )  {  return; }^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P13_Insert_Block]^if  ( isExpressionNode ( n )  )  {     return ; }^92^^^^^86^104^[Delete]^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.STRING )  {^98^^^^^86^104^if  ( n.getType (  )  == Token.STRING )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^98^^^^^86^104^if  ( n.getType (  )  == Token.STRING )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^if  ( n .getLastChild (  )   == Token.STRING )  {^98^^^^^86^104^if  ( n.getType (  )  == Token.STRING )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P15_Unwrap_Block]^msg = "Is there a missing '+' on the previous line?";^98^99^100^^^86^104^if  ( n.getType (  )  == Token.STRING )  { msg = "Is there a missing '+' on the previous line?"; }^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P16_Remove_Block]^^98^99^100^^^86^104^if  ( n.getType (  )  == Token.STRING )  { msg = "Is there a missing '+' on the previous line?"; }^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P3_Replace_Literal]^msg = "Is there a missing '+' ons there a missing '+' on the previous line?";^99^^^^^86^104^msg = "Is there a missing '+' on the previous line?";^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^msg  =  msg ;^99^^^^^86^104^msg = "Is there a missing '+' on the previous line?";^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P3_Replace_Literal]^msg = "Is there a missing '+' on the previous line?missing '+' on th";^99^^^^^86^104^msg = "Is there a missing '+' on the previous line?";^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P1_Replace_Type]^char msg = "This code lacks side-effects. Is there a bug?";^97^^^^^86^104^String msg = "This code lacks side-effects. Is there a bug?";^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P3_Replace_Literal]^String msg = "e-ef";^97^^^^^86^104^String msg = "This code lacks side-effects. Is there a bug?";^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^if  ( n.isQualifiedName (  )  && n .getLastChild (  )   != null )  {^88^^^^^86^104^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isSimpleOperatorType (  )   )  {^92^^^^^86^104^} else if  ( NodeUtil.isExpressionNode ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, parent, level, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make (  n, level, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t,  level, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n,  USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n, level,  msg )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( level, n, t, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, USELESS_CODE_ERROR, level, n, msg )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( msg, n, level, USELESS_CODE_ERROR, t )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( USELESS_CODE_ERROR, n, level, t, msg )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P14_Delete_Statement]^^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P11_Insert_Donor_Statement]^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^86^104^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( t, parent, level, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make (  n, level, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( t,  level, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( t, n, level, USELESS_CODE_ERROR )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( t, n,  USELESS_CODE_ERROR, msg )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( t, n, level,  msg )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( msg, n, level, USELESS_CODE_ERROR, t )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( n, t, level, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( t, n, msg, USELESS_CODE_ERROR, level )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( USELESS_CODE_ERROR, n, level, t, msg )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P14_Delete_Statement]^^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P11_Insert_Donor_Statement]^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^86^104^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( n.isQualifiedName (  )  || n.getJSDocInfo (  )  != null )  {^88^^^^^73^103^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  == null )  {^88^^^^^73^103^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( parent.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^88^^^^^73^103^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  ( n.isQualifiedName (  )  ) {^88^^^^^73^103^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^if  (  n.getJSDocInfo (  )  != null )  {^88^^^^^73^103^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^if  ( n .getType (  )   && n.getJSDocInfo (  )  != null )  {^88^^^^^73^103^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^} else if  ( NodeUtil.isExpressionNode ( parent )  )  {^92^^^^^77^107^} else if  ( NodeUtil.isExpressionNode ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P6_Replace_Expression]^} else {^92^^^^^77^107^} else if  ( NodeUtil.isExpressionNode ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^} else if  ( NodeUtil.mayHaveSideEffects ( n )  )  {^92^^^^^77^107^} else if  ( NodeUtil.isExpressionNode ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isSimpleOperatorType (  )   )  {^92^^^^^77^107^} else if  ( NodeUtil.isExpressionNode ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^}  if  ( NodeUtil.mayHaveSideEffects ( n )  )  {^92^^^^^77^107^} else if  ( NodeUtil.isExpressionNode ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P15_Unwrap_Block]^return ;^92^93^94^95^^77^107^} else if  ( NodeUtil.isExpressionNode ( n )  )  {  return; }^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P16_Remove_Block]^^92^93^94^95^^77^107^} else if  ( NodeUtil.isExpressionNode ( n )  )  {  return; }^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P13_Insert_Block]^if  ( isExpressionNode ( n )  )  {     return ; }^92^^^^^77^107^[Delete]^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.STRING )  {^98^^^^^83^113^if  ( n.getType (  )  == Token.STRING )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^98^^^^^83^113^if  ( n.getType (  )  == Token.STRING )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P15_Unwrap_Block]^msg = "Is there a missing '+' on the previous line?";^98^99^100^^^83^113^if  ( n.getType (  )  == Token.STRING )  { msg = "Is there a missing '+' on the previous line?"; }^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P16_Remove_Block]^^98^99^100^^^83^113^if  ( n.getType (  )  == Token.STRING )  { msg = "Is there a missing '+' on the previous line?"; }^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P3_Replace_Literal]^msg = "+' on";^99^^^^^84^114^msg = "Is there a missing '+' on the previous line?";^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^msg  =  msg ;^99^^^^^84^114^msg = "Is there a missing '+' on the previous line?";^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P3_Replace_Literal]^msg = " t";^99^^^^^84^114^msg = "Is there a missing '+' on the previous line?";^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P1_Replace_Type]^char msg = "This code lacks side-effects. Is there a bug?";^97^^^^^82^112^String msg = "This code lacks side-effects. Is there a bug?";^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P3_Replace_Literal]^String msg = "-effects. Is there a buhis code lacks side-effects. Is there a bug?";^97^^^^^82^112^String msg = "This code lacks side-effects. Is there a bug?";^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P13_Insert_Block]^if  ( isExpressionNode ( n )  )  {     return ; }^86^^^^^71^101^[Delete]^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^!NodeUtil.mayHaveSideEffects ( parent )  )  {^87^^^^^72^102^!NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^!NodeUtil.isExpressionNode ( n )  )  {^87^^^^^72^102^!NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^!NodeUtil.isExpressionNode ( parent )  )  {^87^^^^^72^102^!NodeUtil.mayHaveSideEffects ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P13_Insert_Block]^if  ( isExpressionNode ( n )  )  {     return ; }^87^^^^^72^102^[Delete]^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^} else if  ( NodeUtil.mayHaveSideEffects ( parent )  )  {^92^^^^^77^107^} else if  ( NodeUtil.isExpressionNode ( n )  )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^if  ( n .getLastChild (  )   == Token.STRING )  {^98^^^^^83^113^if  ( n.getType (  )  == Token.STRING )  {^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, parent, level, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make (  n, level, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t,  level, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n,  USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n, level,  msg )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( USELESS_CODE_ERROR, n, level, t, msg )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, USELESS_CODE_ERROR, level, n, msg )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n, level, msg, USELESS_CODE_ERROR )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( level, n, t, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^t.getCompiler (  ) .report ( JSError.make ( t, n, USELESS_CODE_ERROR, level, msg )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P7_Replace_Invocation]^t.getCompiler (  )  .getNext (  )  ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P14_Delete_Statement]^^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P11_Insert_Donor_Statement]^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^102^103^^^^87^117^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make (  n, level, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( t,  level, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( t, n, level, USELESS_CODE_ERROR )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( t, n,  USELESS_CODE_ERROR, msg )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( t, n, level,  msg )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( level, n, t, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( n, t, level, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( t, msg, level, USELESS_CODE_ERROR, n )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P5_Replace_Variable]^JSError.make ( t, n, level, msg, USELESS_CODE_ERROR )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P8_Replace_Mix]^JSError.make ( t, parent, level, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P14_Delete_Statement]^^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
[P11_Insert_Donor_Statement]^t.getCompiler (  ) .report ( JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^103^^^^^88^118^JSError.make ( t, n, level, USELESS_CODE_ERROR, msg )  ) ;^[CLASS] CheckSideEffects  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  n  parent  String  msg  int  ancestorType  pt  
