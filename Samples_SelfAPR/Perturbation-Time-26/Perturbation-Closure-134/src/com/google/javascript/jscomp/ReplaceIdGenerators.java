[P3_Replace_Literal]^static final DiagnosticType NON_GLOBAL_ID_GENERATOR_CALL = DiagnosticType.error ( "JSC_NON_GLOBAL_ID_GENERATOR_CALL_ID_GE", "Id generator call must be in the global scope" ) ;^36^37^38^39^^36^39^static final DiagnosticType NON_GLOBAL_ID_GENERATOR_CALL = DiagnosticType.error ( "JSC_NON_GLOBAL_ID_GENERATOR_CALL", "Id generator call must be in the global scope" ) ;^[CLASS] ReplaceIdGenerators Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType NON_GLOBAL_ID_GENERATOR_CALL = DiagnosticType.error ( "JSC_NON_GLOBAL_ID_GENERATOR_CALL", "ust be in td generator call must be in the global scope" ) ;^36^37^38^39^^36^39^static final DiagnosticType NON_GLOBAL_ID_GENERATOR_CALL = DiagnosticType.error ( "JSC_NON_GLOBAL_ID_GENERATOR_CALL", "Id generator call must be in the global scope" ) ;^[CLASS] ReplaceIdGenerators Callback   [VARIABLES] 
[P8_Replace_Mix]^static  DiagnosticType NON_GLOBAL_ID_GENERATOR_CALL = DiagnosticType.error ( "JSC_NON_GLOBAL_ID_GENERATOR_CALL", "Id generator call must be in the global scope" ) ;^36^37^38^39^^36^39^static final DiagnosticType NON_GLOBAL_ID_GENERATOR_CALL = DiagnosticType.error ( "JSC_NON_GLOBAL_ID_GENERATOR_CALL", "Id generator call must be in the global scope" ) ;^[CLASS] ReplaceIdGenerators Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType CONDITIONAL_ID_GENERATOR_CALL = DiagnosticType.error ( "TIONAL_ID_GENERATO", "Id generator call must be unconditional" ) ;^41^42^43^44^^41^44^static final DiagnosticType CONDITIONAL_ID_GENERATOR_CALL = DiagnosticType.error ( "JSC_CONDITIONAL_ID_GENERATOR_CALL", "Id generator call must be unconditional" ) ;^[CLASS] ReplaceIdGenerators Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType CONDITIONAL_ID_GENERATOR_CALL = DiagnosticType.error ( "JSC_CONDITIONAL_ID_GENERATOR_CALL", "generator" ) ;^41^42^43^44^^41^44^static final DiagnosticType CONDITIONAL_ID_GENERATOR_CALL = DiagnosticType.error ( "JSC_CONDITIONAL_ID_GENERATOR_CALL", "Id generator call must be unconditional" ) ;^[CLASS] ReplaceIdGenerators Callback   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType CONDITIONAL_ID_GENERATOR_CALL  = null ;^41^42^43^44^^41^44^static final DiagnosticType CONDITIONAL_ID_GENERATOR_CALL = DiagnosticType.error ( "JSC_CONDITIONAL_ID_GENERATOR_CALL", "Id generator call must be unconditional" ) ;^[CLASS] ReplaceIdGenerators Callback   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^46^^^^^41^51^private final AbstractCompiler compiler;^[CLASS] ReplaceIdGenerators Callback   [VARIABLES] 
[P8_Replace_Mix]^private  Map<String, NameGenerator> nameGenerators;^47^^^^^42^52^private final Map<String, NameGenerator> nameGenerators;^[CLASS] ReplaceIdGenerators Callback   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^51^^^^^49^58^this.compiler = compiler;^[CLASS] ReplaceIdGenerators Callback  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> idGenerators [VARIABLES] AbstractCompiler  compiler  Set  idGenerators  String  idGenerator  boolean  Map  nameGenerators  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  
[P8_Replace_Mix]^nameGenerators  =  nameGenerators ;^52^^^^^49^58^nameGenerators = Maps.newHashMap (  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> idGenerators [VARIABLES] AbstractCompiler  compiler  Set  idGenerators  String  idGenerator  boolean  Map  nameGenerators  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  
[P14_Delete_Statement]^^52^^^^^49^58^nameGenerators = Maps.newHashMap (  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> idGenerators [VARIABLES] AbstractCompiler  compiler  Set  idGenerators  String  idGenerator  boolean  Map  nameGenerators  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  
[P1_Replace_Type]^for  ( char idGenerator : idGenerators )  {^53^^^^^49^58^for  ( String idGenerator : idGenerators )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> idGenerators [VARIABLES] AbstractCompiler  compiler  Set  idGenerators  String  idGenerator  boolean  Map  nameGenerators  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  
[P5_Replace_Variable]^nameGenerators.put (  new NameGenerator ( Collections.<String>emptySet (  ) , "", null )  ) ;^54^55^56^^^49^58^nameGenerators.put ( idGenerator, new NameGenerator ( Collections.<String>emptySet (  ) , "", null )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> idGenerators [VARIABLES] AbstractCompiler  compiler  Set  idGenerators  String  idGenerator  boolean  Map  nameGenerators  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  
[P14_Delete_Statement]^^54^55^56^^^49^58^nameGenerators.put ( idGenerator, new NameGenerator ( Collections.<String>emptySet (  ) , "", null )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> idGenerators [VARIABLES] AbstractCompiler  compiler  Set  idGenerators  String  idGenerator  boolean  Map  nameGenerators  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  
[P14_Delete_Statement]^^56^^^^^49^58^new NameGenerator ( Collections.<String>emptySet (  ) , "", null )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> idGenerators [VARIABLES] AbstractCompiler  compiler  Set  idGenerators  String  idGenerator  boolean  Map  nameGenerators  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, new Callback (  )  ) ;^61^^^^^60^62^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameGenerators  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new Callback (  )  ) ;^61^^^^^60^62^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameGenerators  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new Callback (  )  ) ;^61^^^^^60^62^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameGenerators  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new Callback (  )  ) ;^61^^^^^60^62^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameGenerators  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  externs  root  
[P14_Delete_Statement]^^61^^^^^60^62^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  Map  nameGenerators  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  externs  root  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.CALL )  {^66^^^^^65^94^if  ( n.getType (  )  != Token.CALL )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^if  ( parent.getType (  )  != Token.CALL )  {^66^^^^^65^94^if  ( n.getType (  )  != Token.CALL )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P7_Replace_Invocation]^if  ( n.newString (  )  != Token.CALL )  {^66^^^^^65^94^if  ( n.getType (  )  != Token.CALL )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P8_Replace_Mix]^if  ( parent.newString (  )  != Token.CALL )  {^66^^^^^65^94^if  ( n.getType (  )  != Token.CALL )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P15_Unwrap_Block]^return ;^66^67^68^^^65^94^if  ( n.getType (  )  != Token.CALL )  { return; }^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P16_Remove_Block]^^66^67^68^^^65^94^if  ( n.getType (  )  != Token.CALL )  { return; }^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P7_Replace_Invocation]^if  ( n .getAncestors (  )   != Token.CALL )  {^66^^^^^65^94^if  ( n.getType (  )  != Token.CALL )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P1_Replace_Type]^char callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^String callName = parent.getFirstChild (  ) .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P7_Replace_Invocation]^String callName = n.newString (  ) .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P8_Replace_Mix]^String callName = parent.newString (  ) .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P11_Insert_Donor_Statement]^String nextName = nameGenerator.generateNextName (  ) ;String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P7_Replace_Invocation]^String callName = n .replaceChild ( n )  .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P14_Delete_Statement]^^70^71^72^73^74^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ; NameGenerator nameGenerator = nameGenerators.get ( callName ) ; if  ( nameGenerator == null )  { return; }^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^NameGenerator nameGenerator = callName.get ( nameGenerators ) ;^71^^^^^65^94^NameGenerator nameGenerator = nameGenerators.get ( callName ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P8_Replace_Mix]^NameGenerator nameGenerator = nameGenerators .put ( nextName , nameGenerator )  ;^71^^^^^65^94^NameGenerator nameGenerator = nameGenerators.get ( callName ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^NameGenerator nameGenerator = nameGenerators.get ( nextName ) ;^71^^^^^65^94^NameGenerator nameGenerator = nameGenerators.get ( callName ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P14_Delete_Statement]^^71^^^^^65^94^NameGenerator nameGenerator = nameGenerators.get ( callName ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P2_Replace_Operator]^if  ( nameGenerator != null )  {^72^^^^^65^94^if  ( nameGenerator == null )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P8_Replace_Mix]^if  ( nameGenerator == true )  {^72^^^^^65^94^if  ( nameGenerator == null )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P15_Unwrap_Block]^return ;^72^73^74^^^65^94^if  ( nameGenerator == null )  { return; }^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P16_Remove_Block]^^72^73^74^^^65^94^if  ( nameGenerator == null )  { return; }^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, n, com.google.javascript.jscomp.ReplaceIdGenerators.NON_GLOBAL_ID_GENERATOR_CALL)); return ;^76^77^78^79^80^65^94^if  ( !t.inGlobalScope (  )  )  {  compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ; return; }^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P16_Remove_Block]^^76^77^78^79^80^65^94^if  ( !t.inGlobalScope (  )  )  {  compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ; return; }^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P13_Insert_Block]^if  ( isControlStructure ( ancestor )  )  {     compiler.report ( make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;     return ; }^76^^^^^65^94^[Delete]^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make ( NON_GLOBAL_ID_GENERATOR_CALL, n, t )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )  ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P14_Delete_Statement]^^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, NON_GLOBAL_ID_GENERATOR_CALL, n )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P14_Delete_Statement]^^78^79^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ; return;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^if  ( NodeUtil.isControlStructure ( parent )  )  {^83^^^^^65^94^if  ( NodeUtil.isControlStructure ( ancestor )  )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, n, com.google.javascript.jscomp.ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL)); return ;^83^84^85^86^87^65^94^if  ( NodeUtil.isControlStructure ( ancestor )  )  {  compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ; return; }^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P16_Remove_Block]^^83^84^85^86^87^65^94^if  ( NodeUtil.isControlStructure ( ancestor )  )  {  compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ; return; }^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P13_Insert_Block]^if  ( ! ( t.inGlobalScope (  )  )  )  {     compiler.report ( make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;     return ; }^83^^^^^65^94^[Delete]^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  CONDITIONAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make ( CONDITIONAL_ID_GENERATOR_CALL, n, t )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )  ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P14_Delete_Statement]^^85^86^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ; return;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^for  ( Node ancestor : parent.getAncestors (  )  )  {^82^^^^^65^94^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P7_Replace_Invocation]^for  ( Node ancestor : n.newString (  )  )  {^82^^^^^65^94^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P14_Delete_Statement]^^82^83^^85^86^65^94^for  ( Node ancestor : n.getAncestors (  )  )  { if  ( NodeUtil.isControlStructure ( ancestor )  )  { compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ; return; }^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, CONDITIONAL_ID_GENERATOR_CALL, n )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P14_Delete_Statement]^^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P1_Replace_Type]^char nextName = nameGenerator.generateNextName (  ) ;^90^^^^^65^94^String nextName = nameGenerator.generateNextName (  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P11_Insert_Donor_Statement]^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;String nextName = nameGenerator.generateNextName (  ) ;^90^^^^^65^94^String nextName = nameGenerator.generateNextName (  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P14_Delete_Statement]^^90^91^^^^65^94^String nextName = nameGenerator.generateNextName (  ) ; parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^parent.replaceChild ( ancestor, Node.newString ( nextName )  ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^parent.replaceChild ( n, Node.newString ( callName )  ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^parent.replaceChild (  Node.newString ( nextName )  ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P5_Replace_Variable]^parent.replaceChild ( nextName, Node.newString ( n )  ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P7_Replace_Invocation]^parent.replaceChild ( n, Node.replaceChild ( nextName )  ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P7_Replace_Invocation]^parent.replaceChild ( n, Node .getFirstChild (  )   ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P14_Delete_Statement]^^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P7_Replace_Invocation]^compiler.report (  ) ;^93^^^^^65^94^compiler.reportCodeChange (  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P14_Delete_Statement]^^93^^^^^65^94^compiler.reportCodeChange (  ) ;^[CLASS] ReplaceIdGenerators Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  CONDITIONAL_ID_GENERATOR_CALL  NON_GLOBAL_ID_GENERATOR_CALL  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  Map  nameGenerators  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.CALL )  {^66^^^^^65^94^if  ( n.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^if  ( parent.getType (  )  != Token.CALL )  {^66^^^^^65^94^if  ( n.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P7_Replace_Invocation]^if  ( n.newString (  )  != Token.CALL )  {^66^^^^^65^94^if  ( n.getType (  )  != Token.CALL )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P15_Unwrap_Block]^return ;^66^67^68^^^65^94^if  ( n.getType (  )  != Token.CALL )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P16_Remove_Block]^^66^67^68^^^65^94^if  ( n.getType (  )  != Token.CALL )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P1_Replace_Type]^char callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P7_Replace_Invocation]^String callName = n.newString (  ) .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P7_Replace_Invocation]^String callName = n .replaceChild ( ancestor )  .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P8_Replace_Mix]^String callName = parent.getFirstChild (  ) .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P11_Insert_Donor_Statement]^String nextName = nameGenerator.generateNextName (  ) ;String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P7_Replace_Invocation]^String callName = n .replaceChild ( parent )  .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P8_Replace_Mix]^String callName = parent.newString (  ) .getQualifiedName (  ) ;^70^^^^^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P14_Delete_Statement]^^70^71^72^73^74^65^94^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ; NameGenerator nameGenerator = nameGenerators.get ( callName ) ; if  ( nameGenerator == null )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^NameGenerator nameGenerator = nameGenerators.get ( nextName ) ;^71^^^^^65^94^NameGenerator nameGenerator = nameGenerators.get ( callName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^NameGenerator nameGenerator = callName.get ( nameGenerators ) ;^71^^^^^65^94^NameGenerator nameGenerator = nameGenerators.get ( callName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P14_Delete_Statement]^^71^^^^^65^94^NameGenerator nameGenerator = nameGenerators.get ( callName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P2_Replace_Operator]^if  ( nameGenerator != null )  {^72^^^^^65^94^if  ( nameGenerator == null )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P8_Replace_Mix]^if  ( nameGenerator == this )  {^72^^^^^65^94^if  ( nameGenerator == null )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P15_Unwrap_Block]^return ;^72^73^74^^^65^94^if  ( nameGenerator == null )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P16_Remove_Block]^^72^73^74^^^65^94^if  ( nameGenerator == null )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, n, com.google.javascript.jscomp.ReplaceIdGenerators.NON_GLOBAL_ID_GENERATOR_CALL)); return ;^76^77^78^79^80^65^94^if  ( !t.inGlobalScope (  )  )  {  compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P16_Remove_Block]^^76^77^78^79^80^65^94^if  ( !t.inGlobalScope (  )  )  {  compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P13_Insert_Block]^if  ( isControlStructure ( ancestor )  )  {     compiler.report ( make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;     return ; }^76^^^^^65^94^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, 3 )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, NON_GLOBAL_ID_GENERATOR_CALL, n )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P14_Delete_Statement]^^78^79^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ; return;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make ( NON_GLOBAL_ID_GENERATOR_CALL, n, t )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P14_Delete_Statement]^^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )  ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, 1 )  ) ;^78^^^^^65^94^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^if  ( NodeUtil.isControlStructure ( parent )  )  {^83^^^^^65^94^if  ( NodeUtil.isControlStructure ( ancestor )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, n, com.google.javascript.jscomp.ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL)); return ;^83^84^85^86^87^65^94^if  ( NodeUtil.isControlStructure ( ancestor )  )  {  compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P16_Remove_Block]^^83^84^85^86^87^65^94^if  ( NodeUtil.isControlStructure ( ancestor )  )  {  compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P13_Insert_Block]^if  ( ! ( t.inGlobalScope (  )  )  )  {     compiler.report ( make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;     return ; }^83^^^^^65^94^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  CONDITIONAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make ( CONDITIONAL_ID_GENERATOR_CALL, n, t )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, n, 0 )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P14_Delete_Statement]^^85^86^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ; return;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ID_GENERATOR_CALL )  ) ;compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, CONDITIONAL_ID_GENERATOR_CALL, n )  ) ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P14_Delete_Statement]^^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^for  ( Node ancestor : parent.getAncestors (  )  )  {^82^^^^^65^94^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P7_Replace_Invocation]^for  ( Node ancestor : n.newString (  )  )  {^82^^^^^65^94^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P8_Replace_Mix]^for  ( Node ancestor : parent.newString (  )  )  {^82^^^^^65^94^for  ( Node ancestor : n.getAncestors (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P14_Delete_Statement]^^82^83^^85^86^65^94^for  ( Node ancestor : n.getAncestors (  )  )  { if  ( NodeUtil.isControlStructure ( ancestor )  )  { compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P8_Replace_Mix]^compiler .reportCodeChange (  )  ;^85^^^^^65^94^compiler.report ( JSError.make ( t, n, CONDITIONAL_ID_GENERATOR_CALL )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P1_Replace_Type]^char nextName = nameGenerator.generateNextName (  ) ;^90^^^^^65^94^String nextName = nameGenerator.generateNextName (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P11_Insert_Donor_Statement]^String callName = n.getFirstChild (  ) .getQualifiedName (  ) ;String nextName = nameGenerator.generateNextName (  ) ;^90^^^^^65^94^String nextName = nameGenerator.generateNextName (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P14_Delete_Statement]^^90^^^^^65^94^String nextName = nameGenerator.generateNextName (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^parent.replaceChild ( ancestor, Node.newString ( nextName )  ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^parent.replaceChild ( n, Node.newString ( callName )  ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P5_Replace_Variable]^parent.replaceChild (  Node.newString ( nextName )  ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P7_Replace_Invocation]^parent .getFirstChild (  )  ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P7_Replace_Invocation]^parent.replaceChild ( n, Node.replaceChild ( nextName )  ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P7_Replace_Invocation]^parent.replaceChild ( n, Node .getFirstChild (  )   ) ;^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P14_Delete_Statement]^^91^^^^^65^94^parent.replaceChild ( n, Node.newString ( nextName )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P7_Replace_Invocation]^compiler.report (  ) ;^93^^^^^65^94^compiler.reportCodeChange (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
[P14_Delete_Statement]^^93^^^^^65^94^compiler.reportCodeChange (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  ancestor  n  parent  NameGenerator  nameGenerator  String  callName  nextName  
