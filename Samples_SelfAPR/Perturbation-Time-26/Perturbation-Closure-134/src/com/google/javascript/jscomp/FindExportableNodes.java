[P2_Replace_Operator]^static final DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERROR", "@export only applies to symbols/properties defined in the "  <=  "global scope." ) ;^47^48^49^50^^47^50^static final DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERROR", "@export only applies to symbols/properties defined in the " + "global scope." ) ;^[CLASS] FindExportableNodes GenerateNodeContext   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERRORJSC_NON_", "@export only applies to symbols/properties defined in the " + "global scope." ) ;^47^48^49^50^^47^50^static final DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERROR", "@export only applies to symbols/properties defined in the " + "global scope." ) ;^[CLASS] FindExportableNodes GenerateNodeContext   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERROR", "t only applieexport only applies to symbols/properties defined in the " + "global scope." ) ;^47^48^49^50^^47^50^static final DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERROR", "@export only applies to symbols/properties defined in the " + "global scope." ) ;^[CLASS] FindExportableNodes GenerateNodeContext   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERROR", "@export only applies to symbols/properties defined in the " + "bal" ) ;^47^48^49^50^^47^50^static final DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERROR", "@export only applies to symbols/properties defined in the " + "global scope." ) ;^[CLASS] FindExportableNodes GenerateNodeContext   [VARIABLES] 
[P8_Replace_Mix]^final DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERROR", "@export only applies to symbols/properties defined in the " + "global scope." ) ;^47^48^49^50^^47^50^static final DiagnosticType NON_GLOBAL_ERROR = DiagnosticType.error ( "JSC_NON_GLOBAL_ERROR", "@export only applies to symbols/properties defined in the " + "global scope." ) ;^[CLASS] FindExportableNodes GenerateNodeContext   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^58^^^^^53^63^private final AbstractCompiler compiler;^[CLASS] FindExportableNodes GenerateNodeContext   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^61^^^^^60^63^this.compiler = compiler;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^this.node = node;this.compiler = compiler;^61^^^^^60^63^this.compiler = compiler;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P8_Replace_Mix]^this.exports ;^62^^^^^60^63^this.exports = Maps.newLinkedHashMap (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P14_Delete_Statement]^^62^^^^^60^63^this.exports = Maps.newLinkedHashMap (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P5_Replace_Variable]^this.node = scriptNode;^120^^^^^119^123^this.node = node;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P8_Replace_Mix]^this.node =  null;^120^^^^^119^123^this.node = node;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.node = node;^120^^^^^119^123^this.node = node;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^this.scriptNode = scriptNode;this.node = node;^120^^^^^119^123^this.node = node;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^this.contextNode = contextNode;this.node = node;^120^^^^^119^123^this.node = node;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P5_Replace_Variable]^this.scriptNode = node;^121^^^^^119^123^this.scriptNode = scriptNode;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^this.node = node;this.scriptNode = scriptNode;^121^^^^^119^123^this.scriptNode = scriptNode;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^this.contextNode = contextNode;this.scriptNode = scriptNode;^121^^^^^119^123^this.scriptNode = scriptNode;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P5_Replace_Variable]^this.contextNode = scriptNode;^122^^^^^119^123^this.contextNode = contextNode;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^this.scriptNode = scriptNode;this.contextNode = contextNode;^122^^^^^119^123^this.contextNode = contextNode;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^this.node = node;this.contextNode = contextNode;^122^^^^^119^123^this.contextNode = contextNode;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  node  scriptNode  LinkedHashMap  exports  
[P5_Replace_Variable]^JSDocInfo docInfo = scriptNode.getJSDocInfo (  ) ;^67^^^^^52^82^JSDocInfo docInfo = n.getJSDocInfo (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^JSDocInfo docInfo = n .getParent (  )  ;^67^^^^^52^82^JSDocInfo docInfo = n.getJSDocInfo (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^67^^^^^52^82^JSDocInfo docInfo = n.getJSDocInfo (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P2_Replace_Operator]^if  ( docInfo != null || docInfo.isExport (  )  )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P2_Replace_Operator]^if  ( docInfo == null && docInfo.isExport (  )  )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( docInfo != scriptNodeull && docInfo.isExport (  )  )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( docInfo != null ) {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  (  docInfo.isExport (  )  )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( parent.getType() == SCRIPT )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( ((grandparent != null) && (grandparent.getType() == SCRIPT)) && (parent.getType() == EXPR_RESULT) && getType() != ASSIGN )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( ((grandparent != null) && (grandparent.getType() == SCRIPT) && parent.getType() == EXPR_RESULT) )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( (grandparent != null && grandparent.getType() == SCRIPT) )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( grandparent != null )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( grandparent.getType (  )  == SCRIPT )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( parent.getType (  )  == EXPR_RESULT )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( n.getLastChild (  ) .getType (  )  != ASSIGN )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( hasChildren() && getType() != ASSIGN )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != ASSIGN )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( export != null )  {^68^^^^^53^83^if  ( docInfo != null && docInfo.isExport (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.SCRIPT )  {^74^^^^^59^89^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( scriptNode.getType (  )  == Token.SCRIPT )  {^74^^^^^59^89^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P15_Unwrap_Block]^export = com.google.javascript.jscomp.NodeUtil.getFunctionName(n, parent); context = new com.google.javascript.jscomp.FindExportableNodes.GenerateNodeContext(n, parent, n);^74^75^76^77^^59^89^if  ( parent.getType (  )  == Token.SCRIPT )  { export = NodeUtil.getFunctionName ( n, parent ) ; context = new GenerateNodeContext ( n, parent, n ) ; }^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P16_Remove_Block]^^74^75^76^77^^59^89^if  ( parent.getType (  )  == Token.SCRIPT )  { export = NodeUtil.getFunctionName ( n, parent ) ; context = new GenerateNodeContext ( n, parent, n ) ; }^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^export = NodeUtil.getFunctionName ( scriptNode, parent ) ;^75^^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^export = NodeUtil.getFunctionName (  parent ) ;^75^^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^export = NodeUtil.getFunctionName ( n ) ;^75^^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^export = NodeUtil.getFunctionName ( parent, n ) ;^75^^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^export =  NodeUtil.getFuscriptNodectioscriptNodeName ( scriptNode, parescriptNodet ) ;^75^^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = context =  new GenerateNodeContext ( n, grandparent, parent )  ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = new GenerateNodeContext (  parent, n ) ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = new GenerateNodeContext ( n,  n ) ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = scriptNodeew GenerateNodeContext ( n, parent, n ) ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = new GenerateNodeContext ( n, scriptNode, n ) ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = parentew GenerateNodeContext ( n, n, n ) ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^context =  scriptNodeew GescriptNodeerateNodeCoscriptNodetext ( scriptNode, parescriptNodet, scriptNode ) ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^context = new GenerateNodeContext ( n, grandparent, parent ) ;context = new GenerateNodeContext ( n, parent, n ) ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^export = NodeUtil.getFunctionName ( n, scriptNode ) ;^75^^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^75^76^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ; context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P2_Replace_Operator]^if  ( grandparent != null || grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P2_Replace_Operator]^if  ( grandparent == null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P2_Replace_Operator]^if  ( grandparent != null && grandparent.getType (  )  != Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( scriptNode != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && scriptNode.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( grandparent != scriptNodeull && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( parent != null && grandparent.getType (  )  == Token.SCRIPT && grandparent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( n != grandparentull && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( grandparent != null ) {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  (  grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( ((grandparent != null) && (grandparent.getType() == SCRIPT) && parent.getType() == EXPR_RESULT) )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( (grandparent != null && grandparent.getType() == SCRIPT) )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( grandparent.getType (  )  == SCRIPT )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( parent.getType (  )  == EXPR_RESULT )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( n.getLastChild (  ) .getType (  )  != ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^if  ( grandparent != false && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P15_Unwrap_Block]^export = n.getFirstChild().getQualifiedName(); context = new com.google.javascript.jscomp.FindExportableNodes.GenerateNodeContext(n, grandparent, parent);^81^82^83^84^85^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  { export = n.getFirstChild (  ) .getQualifiedName (  ) ; context = new GenerateNodeContext ( n, grandparent, parent ) ; }^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P16_Remove_Block]^^81^82^83^84^85^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  { export = n.getFirstChild (  ) .getQualifiedName (  ) ; context = new GenerateNodeContext ( n, grandparent, parent ) ; }^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P13_Insert_Block]^if  (  ( n.getFirstChild (  ) .hasChildren (  )  )  &&  (  ( n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  )  !=  ( ASSIGN )  )  )  {     export = n.getFirstChild (  ) .getString (  ) ;     context = new GenerateNodeContext ( n, parent, n ) ; }^81^^^^^66^96^[Delete]^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( SCRIPT )  )  {     export = getFunctionName ( n, parent ) ;     context = new GenerateNodeContext ( n, parent, n ) ; }^81^^^^^66^96^[Delete]^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( SCRIPT )  )  {     if  (  ( n.getFirstChild (  ) .hasChildren (  )  )  &&  (  ( n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  )  !=  ( ASSIGN )  )  )  {         export = n.getFirstChild (  ) .getString (  ) ;         context = new GenerateNodeContext ( n, parent, n ) ;     } }^81^^^^^66^96^[Delete]^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^export = scriptNode.getFirstChild (  ) .getQualifiedName (  ) ;^84^^^^^81^86^export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^export = n.getFirstChild (  )  .getString (  )  ;^84^^^^^81^86^export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^export = n .getLastChild (  )  .getQualifiedName (  ) ;^84^^^^^81^86^export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^export = n.getFirstChild (  ) .getString (  ) ;export = n.getFirstChild (  ) .getQualifiedName (  ) ;^84^^^^^81^86^export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = context =  new GenerateNodeContext ( n, parent, n )  ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = new GenerateNodeContext (  grandparent, parent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = new GenerateNodeContext ( n,  parent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = new GenerateNodeContext ( n, grand parent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = new GenerateNodeContext ( n, scriptNode, parent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = new GenerateNodeContext ( n, grandparent, scriptNode ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = grandparentew GenerateNodeContext ( n, n, parent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = new GenerateNodeContext ( n, parent, grandparent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = parentew GenerateNodeContext ( n, grandparent, n ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^context =  parentew GeparenterateNodeCoparenttext ( parent, graparentdpareparentt, pareparentt ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^context = new GenerateNodeContext ( n, parent, n ) ;context = new GenerateNodeContext ( n, grandparent, parent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = scriptNodeew GenerateNodeContext ( n, grandparent, parent ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^84^85^86^^^81^86^export = n.getFirstChild (  ) .getQualifiedName (  ) ; context = new GenerateNodeContext ( n, grandparent, parent ) ; }^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.SCRIPT )  {^89^^^^^74^104^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( scriptNode.getType (  )  == Token.SCRIPT )  {^89^^^^^74^104^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( hasChildren() && getType() != ASSIGN )  {^89^^^^^74^104^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != ASSIGN )  {^89^^^^^74^104^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^if  ( parent .getParent (  )   == Token.SCRIPT )  {^89^^^^^74^104^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P15_Unwrap_Block]^if ((n.getFirstChild().hasChildren()) && ((n.getFirstChild().getFirstChild().getType()) != (com.google.javascript.rhino.Token.ASSIGN))) {    export = n.getFirstChild().getString();    context = new com.google.javascript.jscomp.FindExportableNodes.GenerateNodeContext(n, parent, n);};^89^90^91^92^93^74^104^if  ( parent.getType (  )  == Token.SCRIPT )  { if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  { export = n.getFirstChild (  ) .getString (  ) ; context = new GenerateNodeContext ( n, parent, n ) ; }^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P16_Remove_Block]^^89^90^91^92^93^74^104^if  ( parent.getType (  )  == Token.SCRIPT )  { if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  { export = n.getFirstChild (  ) .getString (  ) ; context = new GenerateNodeContext ( n, parent, n ) ; }^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P2_Replace_Operator]^if  ( n.getFirstChild (  ) .hasChildren (  )  || n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P2_Replace_Operator]^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  >= Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( scriptNode.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( n.getFirstChild (  ) .hasChildren (  )  ) {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  (  n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P6_Replace_Expression]^if  ( n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  )  .getParent (  )   != Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^if  ( n .getLastChild (  )  .hasChildren (  )  && n^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^if  ( scriptNode .getLastChild (  )  .hasChildren (  )  && n^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P15_Unwrap_Block]^export = n.getFirstChild().getString(); context = new com.google.javascript.jscomp.FindExportableNodes.GenerateNodeContext(n, parent, n);^90^91^92^93^94^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  { export = n.getFirstChild (  ) .getString (  ) ; context = new GenerateNodeContext ( n, parent, n ) ; }^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P16_Remove_Block]^^90^91^92^93^94^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  { export = n.getFirstChild (  ) .getString (  ) ; context = new GenerateNodeContext ( n, parent, n ) ; }^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P13_Insert_Block]^if  (  (  (  ( grandparent != null )  &&  (  ( grandparent.getType (  )  )  ==  ( SCRIPT )  )  )  &&  (  ( parent.getType (  )  )  ==  ( EXPR_RESULT )  )  )  &&  (  ( n.getLastChild (  ) .getType (  )  )  !=  ( ASSIGN )  )  )  {     export = n.getFirstChild (  ) .getQualifiedName (  ) ;     context = new GenerateNodeContext ( n, grandparent, parent ) ; }^90^^^^^75^105^[Delete]^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( SCRIPT )  )  {     export = getFunctionName ( n, parent ) ;     context = new GenerateNodeContext ( n, parent, n ) ; }^90^^^^^75^105^[Delete]^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( SCRIPT )  )  {     if  (  ( n.getFirstChild (  ) .hasChildren (  )  )  &&  (  ( n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  )  !=  ( ASSIGN )  )  )  {         export = n.getFirstChild (  ) .getString (  ) ;         context = new GenerateNodeContext ( n, parent, n ) ;     } }^90^^^^^75^105^[Delete]^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P1_Replace_Type]^export = n.getFirstChild (  ) .getchar (  ) ;^92^^^^^90^94^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^export = parent.getFirstChild (  ) .getString (  ) ;^92^^^^^90^94^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^export =  scriptNode.getFirstChild (  ) .getStriscriptNodeg (  ) ;^92^^^^^90^94^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^export = n.getFirstChild (  ) .getQualifiedName (  ) ;export = n.getFirstChild (  ) .getString (  ) ;^92^^^^^90^94^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = context =  new GenerateNodeContext ( n, grandparent, parent )  ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = new GenerateNodeContext (  parent, n ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = new GenerateNodeContext ( n,  n ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = scriptNodeew GenerateNodeContext ( n, parent, n ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = new GenerateNodeContext ( n, scriptNode, n ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = parentew GenerateNodeContext ( n, n, n ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^context =  scriptNodeew GescriptNodeerateNodeCoscriptNodetext ( scriptNode, parescriptNodet, scriptNode ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^context = new GenerateNodeContext ( n, grandparent, parent ) ;context = new GenerateNodeContext ( n, parent, n ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^export = scriptNode.getFirstChild (  ) .getString (  ) ;^92^^^^^90^94^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^export = n .getLastChild (  )  .getString (  ) ;^92^^^^^90^94^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^92^93^^^^90^94^export = n.getFirstChild (  ) .getString (  ) ; context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P1_Replace_Type]^export = n.getFirstChild (  ) .getchar (  ) ;^92^^^^^77^107^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^export = parent.getFirstChild (  ) .getString (  ) ;^92^^^^^77^107^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^export = n.getFirstChild (  )  .getFirstChild (  )  ;^92^^^^^77^107^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^export = n .getLastChild (  )  .getString (  ) ;^92^^^^^77^107^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^export =  parent.getFirstChild (  ) .getStriparentg (  ) ;^92^^^^^77^107^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^export = n.getFirstChild (  ) .getQualifiedName (  ) ;export = n.getFirstChild (  ) .getString (  ) ;^92^^^^^77^107^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = context =  new GenerateNodeContext ( n, grandparent, parent )  ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = new GenerateNodeContext (  parent, n ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = new GenerateNodeContext ( n,  n ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = scriptNodeew GenerateNodeContext ( n, parent, n ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = new GenerateNodeContext ( n, scriptNode, n ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = parentew GenerateNodeContext ( n, n, n ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^context =  scriptNodeew GescriptNodeerateNodeCoscriptNodetext ( scriptNode, parescriptNodet, scriptNode ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^context = new GenerateNodeContext ( n, grandparent, parent ) ;context = new GenerateNodeContext ( n, parent, n ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^if  ( scriptNode.getFirstChild (  )  .getFirstChild (  )   && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^n .getLastChild (  )^91^^^^^76^106^n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^91^92^^^^76^106^n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  { export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^92^^^^^77^107^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^export = scriptNode.getFirstChild (  ) .getString (  ) ;^92^^^^^77^107^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P2_Replace_Operator]^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  == Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^if  ( n.getFirstChild (  )  .getFirstChild (  )   && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^export =  parent.getFirstChild (  ) .getStriparentg (  ) ;^92^^^^^90^94^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^context =  parentew GeparenterateNodeCoparenttext ( parent, pareparentt, parent ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^export = n.getFirstChild (  )  .getFirstChild (  )  ;^92^^^^^90^94^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^92^^^^^90^94^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P2_Replace_Operator]^if  ( export == null )  {^98^^^^^83^113^if  ( export != null )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( export != scriptNodeull )  {^98^^^^^83^113^if  ( export != null )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( n != exportull )  {^98^^^^^83^113^if  ( export != null )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^if  ( export != this )  {^98^^^^^83^113^if  ( export != null )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P15_Unwrap_Block]^exports.put(export, context);^98^99^100^101^102^83^113^if  ( export != null )  { exports.put ( export, context ) ; } else { compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ; }^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P16_Remove_Block]^^98^99^100^101^102^83^113^if  ( export != null )  { exports.put ( export, context ) ; } else { compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ; }^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, scriptNode, NON_GLOBAL_ERROR )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, NON_GLOBAL_ERROR )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  NON_GLOBAL_ERROR )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, NON_GLOBAL_ERROR )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, NON_GLOBAL_ERROR, n )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^compiler.report ( JSError.make ( NON_GLOBAL_ERROR, n, t )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, parent, NON_GLOBAL_ERROR )  ) ;^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^101^^^^^98^102^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P13_Insert_Block]^if  ( export != null )  {     exports.put ( export, context ) ; }else {     compiler.report ( make ( t, n, NON_GLOBAL_ERROR )  ) ; }^101^^^^^98^102^[Delete]^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^exports.put (  context ) ;^99^^^^^84^114^exports.put ( export, context ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^exports.put ( export ) ;^99^^^^^84^114^exports.put ( export, context ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^exports.put ( context, export ) ;^99^^^^^84^114^exports.put ( export, context ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^99^^^^^84^114^exports.put ( export, context ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^export =  NodeUtil.getFuparentctioparentName ( parent, pareparentt ) ;^75^^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^export = scriptNode.getFirstChild (  ) .getQualifiedName (  ) ;^84^^^^^69^99^export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^export = n.getFirstChild (  ) .getString (  ) ;export = n.getFirstChild (  ) .getQualifiedName (  ) ;^84^^^^^69^99^export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = context =  new GenerateNodeContext ( n, parent, n )  ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = new GenerateNodeContext (  grandparent, parent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = new GenerateNodeContext ( n,  parent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P4_Replace_Constructor]^context = new GenerateNodeContext ( n, grand parent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = scriptNodeew GenerateNodeContext ( n, grandparent, parent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = new GenerateNodeContext ( n, scriptNode, parent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = new GenerateNodeContext ( n, grandparent, scriptNode ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = grandparentew GenerateNodeContext ( n, n, parent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = new GenerateNodeContext ( n, parent, grandparent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^context = parentew GenerateNodeContext ( n, grandparent, n ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^context =  scriptNodeew GescriptNodeerateNodeCoscriptNodetext ( scriptNode, grascriptNodedparescriptNodet, parescriptNodet ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P11_Insert_Donor_Statement]^context = new GenerateNodeContext ( n, parent, n ) ;context = new GenerateNodeContext ( n, grandparent, parent ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^context =  parentew GeparenterateNodeCoparenttext ( parent, pareparentt, parent ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P1_Replace_Type]^char export = null;^69^^^^^54^84^String export = null;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^Node grandparent = scriptNode.getParent (  ) ;^80^^^^^65^95^Node grandparent = parent.getParent (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^Node grandparent = parent .getType (  )  ;^80^^^^^65^95^Node grandparent = parent.getParent (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^switch  ( scriptNode.getType (  )  )  {^72^^^^^57^87^switch  ( n.getType (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^switch  ( n .getParent (  )   )  {^72^^^^^57^87^switch  ( n.getType (  )  )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.SCRIPT )  {^74^^^^^59^89^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^if  ( node .getParent (  )   == Token.SCRIPT )  {^74^^^^^59^89^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^75^^^^^60^90^export = NodeUtil.getFunctionName ( n, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^Node grandparent = scriptNode .getType (  )  ;^80^^^^^65^95^Node grandparent = parent.getParent (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^80^^^^^65^95^Node grandparent = parent.getParent (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^82^83^84^^^67^97^parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  { export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^n.getLastChild (  )  .getParent (  )   != Token.ASSIGN )  {^83^^^^^68^98^n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^n .getFirstChild (  )  .getType (  )  != Token.ASSIGN )  {^83^^^^^68^98^n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^83^84^^^^68^98^n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  { export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^84^85^86^^^69^99^export = n.getFirstChild (  ) .getQualifiedName (  ) ; context = new GenerateNodeContext ( n, grandparent, parent ) ; }^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^export = n .getLastChild (  )  .getQualifiedName (  ) ;^84^^^^^69^99^export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^if  ( parent.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^export = scriptNode .getLastChild (  )  .getString (  ) ;^92^^^^^77^107^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^92^93^^^^77^107^export = n.getFirstChild (  ) .getString (  ) ; context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, scriptNode, NON_GLOBAL_ERROR )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, NON_GLOBAL_ERROR )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  NON_GLOBAL_ERROR )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, NON_GLOBAL_ERROR )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, parent, NON_GLOBAL_ERROR )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P14_Delete_Statement]^^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P13_Insert_Block]^if  ( export != null )  {     exports.put ( export, context ) ; }else {     compiler.report ( make ( t, n, NON_GLOBAL_ERROR )  ) ; }^101^^^^^86^116^[Delete]^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^compiler.report ( JSError.make ( NON_GLOBAL_ERROR, n, t )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, NON_GLOBAL_ERROR, n )  ) ;^101^^^^^86^116^compiler.report ( JSError.make ( t, n, NON_GLOBAL_ERROR )  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P2_Replace_Operator]^if  ( parent.getType (  )  <= Token.SCRIPT )  {^74^^^^^59^89^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^context =  parentew GeparenterateNodeCoparenttext ( parent, pareparentt, parent ) ;^76^^^^^61^91^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( parent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( grandparent != parentull && grandparent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P7_Replace_Invocation]^if  ( grandparent != null && grandparent .getParent (  )   == Token.SCRIPT && parent^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^if  ( grandparent != false ) {^81^82^83^^^66^96^if  ( grandparent != null && grandparent.getType (  )  == Token.SCRIPT && parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^context =  scriptNodeew GescriptNodeerateNodeCoscriptNodetext ( scriptNode, grascriptNodedparescriptNodet, parescriptNodet ) ;^85^^^^^81^86^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^export = parent.getFirstChild (  ) .getQualifiedName (  ) ;^84^^^^^81^86^export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^if  ( node.getType (  )  == Token.SCRIPT )  {^89^^^^^74^104^if  ( parent.getType (  )  == Token.SCRIPT )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^if  ( scriptNode.getFirstChild (  ) .hasChildren (  )  ) {^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^context =  nullew GenullerateNodeConulltext ( null, parenullt, null ) ;^93^^^^^90^94^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^export =  scriptNode.getFirstChild (  ) .getStriscriptNodeg (  ) ;^92^^^^^77^107^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^context =  nullew GenullerateNodeConulltext ( null, parenullt, null ) ;^93^^^^^78^108^context = new GenerateNodeContext ( n, parent, n ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^export = parent .getLastChild (  )  .getString (  ) ;^92^^^^^90^94^export = n.getFirstChild (  ) .getString (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^if  ( export != parentull )  {^98^^^^^83^113^if  ( export != null )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^if  ( export != false )  {^98^^^^^83^113^if  ( export != null )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^context =  nullew GenullerateNodeConulltext ( null, granulldparenullt, parenullt ) ;^85^^^^^70^100^context = new GenerateNodeContext ( n, grandparent, parent ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P12_Insert_Condition]^if  ( export != null )  { String export = null; }^69^^^^^54^84^String export = null;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^parent .getParent (  )   == Token.EXPR_RESULT && n.getLastChild (  )^82^83^^^^67^97^parent.getType (  )  == Token.EXPR_RESULT && n.getLastChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^export = parent .getLastChild (  )  .getQualifiedName (  ) ;^84^^^^^69^99^export = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^if  ( parent .getLastChild (  )  .hasChildren (  )  && n^90^91^^^^75^105^if  ( n.getFirstChild (  ) .hasChildren (  )  && n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P8_Replace_Mix]^n.getFirstChild (  ) .getFirstChild (  )  .getParent (  )   != Token.ASSIGN )  {^91^^^^^76^106^n.getFirstChild (  ) .getFirstChild (  ) .getType (  )  != Token.ASSIGN )  {^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  String  export  JSDocInfo  docInfo  GenerateNodeContext  context  LinkedHashMap  exports  
[P5_Replace_Variable]^return parent;^126^^^^^125^127^return node;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] getNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  LinkedHashMap  exports  
[P8_Replace_Mix]^return scriptNode;^126^^^^^125^127^return node;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] getNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  LinkedHashMap  exports  
[P5_Replace_Variable]^return node;^130^^^^^129^131^return scriptNode;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] getScriptNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  LinkedHashMap  exports  
[P5_Replace_Variable]^return scriptNode;^134^^^^^133^135^return contextNode;^[CLASS] FindExportableNodes GenerateNodeContext  [METHOD] getContextNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  LinkedHashMap  exports  
[P8_Replace_Mix]^private  Node scriptNode;^115^^^^^110^120^private final Node scriptNode;^[CLASS] GenerateNodeContext  [METHOD] getContextNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  LinkedHashMap  exports  
[P8_Replace_Mix]^private  Node contextNode;^116^^^^^111^121^private final Node contextNode;^[CLASS] GenerateNodeContext  [METHOD] getContextNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  LinkedHashMap  exports  
[P8_Replace_Mix]^private  Node node;^117^^^^^112^122^private final Node node;^[CLASS] GenerateNodeContext  [METHOD] getContextNode [RETURN_TYPE] Node   [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  NON_GLOBAL_ERROR  Node  contextNode  grandparent  n  node  parent  scriptNode  LinkedHashMap  exports  
[P5_Replace_Variable]^this.node = scriptNode;^120^^^^^119^123^this.node = node;^[CLASS] GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[P11_Insert_Donor_Statement]^this.scriptNode = scriptNode;this.node = node;^120^^^^^119^123^this.node = node;^[CLASS] GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[P11_Insert_Donor_Statement]^this.contextNode = contextNode;this.node = node;^120^^^^^119^123^this.node = node;^[CLASS] GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[P5_Replace_Variable]^this.scriptNode = node;^121^^^^^119^123^this.scriptNode = scriptNode;^[CLASS] GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[P11_Insert_Donor_Statement]^this.node = node;this.scriptNode = scriptNode;^121^^^^^119^123^this.scriptNode = scriptNode;^[CLASS] GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[P11_Insert_Donor_Statement]^this.contextNode = contextNode;this.scriptNode = scriptNode;^121^^^^^119^123^this.scriptNode = scriptNode;^[CLASS] GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[P5_Replace_Variable]^this.contextNode = scriptNode;^122^^^^^119^123^this.contextNode = contextNode;^[CLASS] GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[P11_Insert_Donor_Statement]^this.scriptNode = scriptNode;this.contextNode = contextNode;^122^^^^^119^123^this.contextNode = contextNode;^[CLASS] GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[P11_Insert_Donor_Statement]^this.node = node;this.contextNode = contextNode;^122^^^^^119^123^this.contextNode = contextNode;^[CLASS] GenerateNodeContext  [METHOD] <init> [RETURN_TYPE] Node)   Node node Node scriptNode Node contextNode [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[P5_Replace_Variable]^return scriptNode;^126^^^^^125^127^return node;^[CLASS] GenerateNodeContext  [METHOD] getNode [RETURN_TYPE] Node   [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[P5_Replace_Variable]^return node;^130^^^^^129^131^return scriptNode;^[CLASS] GenerateNodeContext  [METHOD] getScriptNode [RETURN_TYPE] Node   [VARIABLES] Node  contextNode  node  scriptNode  boolean  
[P5_Replace_Variable]^return scriptNode;^134^^^^^133^135^return contextNode;^[CLASS] GenerateNodeContext  [METHOD] getContextNode [RETURN_TYPE] Node   [VARIABLES] Node  contextNode  node  scriptNode  boolean  
