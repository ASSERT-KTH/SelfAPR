[P8_Replace_Mix]^private  boolean assertOnChange;^29^^^^^24^34^private final boolean assertOnChange;^[CLASS] NodeTypeNormalizer   [VARIABLES] 
[P3_Replace_Literal]^this ( true ) ;^32^^^^^31^33^this ( false ) ;^[CLASS] NodeTypeNormalizer  [METHOD] <init> [RETURN_TYPE] NodeTypeNormalizer()   [VARIABLES] boolean  assertOnChange  
[P14_Delete_Statement]^^32^^^^^31^33^this ( false ) ;^[CLASS] NodeTypeNormalizer  [METHOD] <init> [RETURN_TYPE] NodeTypeNormalizer()   [VARIABLES] boolean  assertOnChange  
[P5_Replace_Variable]^this.assertOnChange = assertOnChange;^36^^^^^35^37^this.assertOnChange = forbidChanges;^[CLASS] NodeTypeNormalizer  [METHOD] <init> [RETURN_TYPE] NodeTypeNormalizer(boolean)   boolean forbidChanges [VARIABLES] boolean  assertOnChange  forbidChanges  
[P5_Replace_Variable]^if  ( forbidChanges )  {^40^^^^^39^43^if  ( assertOnChange )  {^[CLASS] NodeTypeNormalizer  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] boolean  assertOnChange  forbidChanges  
[P15_Unwrap_Block]^com.google.common.base.Preconditions.checkState(false, "normalizeNodeType constraints violated");^40^41^42^^^39^43^if  ( assertOnChange )  { Preconditions.checkState ( false, "normalizeNodeType constraints violated" ) ; }^[CLASS] NodeTypeNormalizer  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] boolean  assertOnChange  forbidChanges  
[P16_Remove_Block]^^40^41^42^^^39^43^if  ( assertOnChange )  { Preconditions.checkState ( false, "normalizeNodeType constraints violated" ) ; }^[CLASS] NodeTypeNormalizer  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] boolean  assertOnChange  forbidChanges  
[P3_Replace_Literal]^Preconditions.checkState ( true, "normalizeNodeType constraints violated" ) ;^41^^^^^39^43^Preconditions.checkState ( false, "normalizeNodeType constraints violated" ) ;^[CLASS] NodeTypeNormalizer  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] boolean  assertOnChange  forbidChanges  
[P3_Replace_Literal]^Preconditions.checkState ( false, "normalizeNodeType constraints violatednormalizeNodeType constr" ) ;^41^^^^^39^43^Preconditions.checkState ( false, "normalizeNodeType constraints violated" ) ;^[CLASS] NodeTypeNormalizer  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] boolean  assertOnChange  forbidChanges  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^41^^^^^39^43^Preconditions.checkState ( false, "normalizeNodeType constraints violated" ) ;^[CLASS] NodeTypeNormalizer  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] boolean  assertOnChange  forbidChanges  
[P14_Delete_Statement]^^41^^^^^39^43^Preconditions.checkState ( false, "normalizeNodeType constraints violated" ) ;^[CLASS] NodeTypeNormalizer  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] boolean  assertOnChange  forbidChanges  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;Preconditions.checkState ( false, "normalizeNodeType constraints violated" ) ;^41^^^^^39^43^Preconditions.checkState ( false, "normalizeNodeType constraints violated" ) ;^[CLASS] NodeTypeNormalizer  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] boolean  assertOnChange  forbidChanges  
[P13_Insert_Block]^if  ( assertOnChange )  {     checkState ( false, "normalizeNodeType constraints violated" ) ; }^41^^^^^39^43^[Delete]^[CLASS] NodeTypeNormalizer  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] boolean  assertOnChange  forbidChanges  
[P3_Replace_Literal]^Preconditions.checkState ( false, "pe ormalizeNodeType constraints violated" ) ;^41^^^^^39^43^Preconditions.checkState ( false, "normalizeNodeType constraints violated" ) ;^[CLASS] NodeTypeNormalizer  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] boolean  assertOnChange  forbidChanges  
[P5_Replace_Variable]^normalizeNodeTypes ( externs ) ;^47^^^^^46^49^normalizeNodeTypes ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P7_Replace_Invocation]^normalizeBlocks ( root ) ;^47^^^^^46^49^normalizeNodeTypes ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P8_Replace_Mix]^normalizeBlocks ( externs ) ;^47^^^^^46^49^normalizeNodeTypes ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P14_Delete_Statement]^^47^^^^^46^49^normalizeNodeTypes ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P11_Insert_Donor_Statement]^normalizeJsDocAnnotations ( root ) ;normalizeNodeTypes ( root ) ;^47^^^^^46^49^normalizeNodeTypes ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P11_Insert_Donor_Statement]^normalizeNodeTypes ( child ) ;normalizeNodeTypes ( root ) ;^47^^^^^46^49^normalizeNodeTypes ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P11_Insert_Donor_Statement]^normalizeJsDocAnnotations ( child ) ;normalizeNodeTypes ( root ) ;^47^^^^^46^49^normalizeNodeTypes ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P11_Insert_Donor_Statement]^normalizeBlocks ( n ) ;normalizeNodeTypes ( root ) ;^47^^^^^46^49^normalizeNodeTypes ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P5_Replace_Variable]^normalizeJsDocAnnotations ( externs ) ;^48^^^^^46^49^normalizeJsDocAnnotations ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P7_Replace_Invocation]^normalizeNodeTypes ( root ) ;^48^^^^^46^49^normalizeJsDocAnnotations ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P14_Delete_Statement]^^48^^^^^46^49^normalizeJsDocAnnotations ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P11_Insert_Donor_Statement]^normalizeNodeTypes ( root ) ;normalizeJsDocAnnotations ( root ) ;^48^^^^^46^49^normalizeJsDocAnnotations ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P11_Insert_Donor_Statement]^normalizeNodeTypes ( child ) ;normalizeJsDocAnnotations ( root ) ;^48^^^^^46^49^normalizeJsDocAnnotations ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P11_Insert_Donor_Statement]^normalizeJsDocAnnotations ( child ) ;normalizeJsDocAnnotations ( root ) ;^48^^^^^46^49^normalizeJsDocAnnotations ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P11_Insert_Donor_Statement]^normalizeBlocks ( n ) ;normalizeJsDocAnnotations ( root ) ;^48^^^^^46^49^normalizeJsDocAnnotations ( root ) ;^[CLASS] NodeTypeNormalizer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] boolean  assertOnChange  forbidChanges  Node  externs  root  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.OBJECTLIT )  {^69^^^^^68^84^if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^if  ( value.getType (  )  == Token.OBJECTLIT )  {^69^^^^^68^84^if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P6_Replace_Expression]^if  ( key != null )  {^69^^^^^68^84^if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P6_Replace_Expression]^if  ( key.getJSDocInfo() != null && getType() == FUNCTION )  {^69^^^^^68^84^if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P6_Replace_Expression]^if  ( key.getJSDocInfo (  )  != null )  {^69^^^^^68^84^if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P6_Replace_Expression]^if  ( key.getNext (  ) .getType (  )  == FUNCTION )  {^69^^^^^68^84^if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^if  ( n.setWasEmptyNode (  )  == Token.OBJECTLIT )  {^69^^^^^68^84^if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P9_Replace_Statement]^if  ( c.getType (  )  != Token.EMPTY )  {^69^^^^^68^84^if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^69^^^^^68^84^if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.EXPR_VOID )  {^69^^^^^68^84^if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P2_Replace_Operator]^if  ( key.getJSDocInfo (  )  != null || key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P2_Replace_Operator]^if  ( key.getJSDocInfo (  )  == null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P2_Replace_Operator]^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  != Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^if  ( value.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P6_Replace_Expression]^if  ( key.getJSDocInfo (  )  != null ) {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P6_Replace_Expression]^if  (  key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P6_Replace_Expression]^if  ( key.getNext (  ) .getType (  )  == FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^if  ( key.setWasEmptyNode (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^if  ( key.getJSDocInfo (  )  != null && key.setWasEmptyNode (  ) .getType (  )  == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P8_Replace_Mix]^if  ( n.getJSDocInfo (  )  != this ) {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P15_Unwrap_Block]^value.setJSDocInfo(key.getJSDocInfo());^73^74^75^76^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  { value.setJSDocInfo ( key.getJSDocInfo (  )  ) ; }^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P16_Remove_Block]^^73^74^75^76^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  { value.setJSDocInfo ( key.getJSDocInfo (  )  ) ; }^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^value.setJSDocInfo ( n.getJSDocInfo (  )  ) ;^75^^^^^68^84^value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^value.replaceChild ( key.getJSDocInfo (  )  ) ;^75^^^^^68^84^value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^value.setJSDocInfo ( key.setWasEmptyNode (  )  ) ;^75^^^^^68^84^value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P14_Delete_Statement]^^75^^^^^68^84^value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^value.setJSDocInfo ( value.getJSDocInfo (  )  ) ;^75^^^^^68^84^value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^for  ( Node key = value.getFirstChild (  ) ;^70^^^^^68^84^for  ( Node key = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^for  ( Node value = n.getFirstChild (  ) ;^70^^^^^68^84^for  ( Node key = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^for  ( Node n = key.getFirstChild (  ) ;^70^^^^^68^84^for  ( Node key = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^for  ( Node key = n.setWasEmptyNode (  ) ;^70^^^^^68^84^for  ( Node key = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P8_Replace_Mix]^for  ( Node value = n.setWasEmptyNode (  ) ;^70^^^^^68^84^for  ( Node key = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( OBJECTLIT )  )  {     for  ( Node key = n.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  {         Node value = key.getNext (  ) ;         if  (  (  ( key.getJSDocInfo (  )  )  != null )  &&  (  ( key.getNext (  ) .getType (  )  )  ==  ( FUNCTION )  )  )  {             value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;         }     } }^70^^^^^68^84^[Delete]^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^if  ( n.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^if  ( key.getJSDocInfo (  )  != null && key.getNext (  )  .setType (  )   == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P8_Replace_Mix]^if  ( key.getJSDocInfo (  )  != true && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^value .getJSDocInfo (  )  ;^75^^^^^68^84^value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^value.setJSDocInfo ( key .setJSDocInfo (  )   ) ;^75^^^^^68^84^value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^Node value = n.getNext (  ) ;^72^^^^^68^84^Node value = key.getNext (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^Node value = key.setWasEmptyNode (  ) ;^72^^^^^68^84^Node value = key.getNext (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^Node value = value.getNext (  ) ;^72^^^^^68^84^Node value = key.getNext (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^Node value = key .getParent (  )  ;^72^^^^^68^84^Node value = key.getNext (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P14_Delete_Statement]^^72^^^^^68^84^Node value = key.getNext (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^key.getNext (  )  .setType (  )   == Token.FUNCTION )  {^74^^^^^68^84^key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^key.setWasEmptyNode (  ) .getType (  )  == Token.FUNCTION )  {^74^^^^^68^84^key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P14_Delete_Statement]^^74^75^^^^68^84^key.getNext (  ) .getType (  )  == Token.FUNCTION )  { value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^key .getParent (  )  .getType (  )  == Token.FUNCTION )  {^74^^^^^68^84^key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^key != null; key = key .getParent (  )^71^^^^^68^84^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^key != null; key = key.setWasEmptyNode (  ) .getNext (  )  )  {^71^^^^^68^84^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P8_Replace_Mix]^key !=  null; value^71^^^^^68^84^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^for  ( Node key = n .replaceChild ( child , child )  ;^70^^^^^68^84^for  ( Node key = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P8_Replace_Mix]^for  ( Node key = n .replaceChild ( child , n )  ;^70^^^^^68^84^for  ( Node key = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^key != null; value = key.getNext (  ) .getNext (  )  )  {^71^^^^^68^84^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P14_Delete_Statement]^^71^72^^^^68^84^key != null; key = key.getNext (  ) .getNext (  )  )  { Node value = key.getNext (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^if  ( key .setJSDocInfo (  )   != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P8_Replace_Mix]^if  ( value.setWasEmptyNode (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^73^74^^^^68^84^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P8_Replace_Mix]^value.setJSDocInfo ( value.setWasEmptyNode (  )  ) ;^75^^^^^68^84^value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^for  ( Node key = n .replaceChild ( n , n )  ;^70^^^^^68^84^for  ( Node key = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P8_Replace_Mix]^value.replaceChild ( n.getJSDocInfo (  )  ) ;^75^^^^^68^84^value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P8_Replace_Mix]^Node value = n.setWasEmptyNode (  ) ;^72^^^^^68^84^Node value = key.getNext (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P8_Replace_Mix]^if  ( value.setWasEmptyNode (  )  == Token.OBJECTLIT )  {^69^^^^^68^84^if  ( n.getType (  )  == Token.OBJECTLIT )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P8_Replace_Mix]^key != null; value = key.setWasEmptyNode (  ) .getNext (  )  )  {^71^^^^^68^84^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^for  ( Node child = value.getFirstChild (  ) ;^80^^^^^68^84^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^for  ( Node value = n.getFirstChild (  ) ;^80^^^^^68^84^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^for  ( Node n = child.getFirstChild (  ) ;^80^^^^^68^84^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^for  ( Node child = n.setWasEmptyNode (  ) ;^80^^^^^68^84^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^for  ( Node child = n .replaceChild ( child , key )  ;^80^^^^^68^84^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^normalizeNodeTypes ( child ) ;^82^^^^^68^84^normalizeJsDocAnnotations ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P8_Replace_Mix]^normalizeJsDocAnnotations ( value ) ;^82^^^^^68^84^normalizeJsDocAnnotations ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P14_Delete_Statement]^^82^^^^^68^84^normalizeJsDocAnnotations ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P11_Insert_Donor_Statement]^normalizeJsDocAnnotations ( root ) ;normalizeJsDocAnnotations ( child ) ;^82^^^^^68^84^normalizeJsDocAnnotations ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P11_Insert_Donor_Statement]^normalizeNodeTypes ( root ) ;normalizeJsDocAnnotations ( child ) ;^82^^^^^68^84^normalizeJsDocAnnotations ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P11_Insert_Donor_Statement]^normalizeNodeTypes ( child ) ;normalizeJsDocAnnotations ( child ) ;^82^^^^^68^84^normalizeJsDocAnnotations ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P11_Insert_Donor_Statement]^normalizeBlocks ( n ) ;normalizeJsDocAnnotations ( child ) ;^82^^^^^68^84^normalizeJsDocAnnotations ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P7_Replace_Invocation]^child != null; child = child.setWasEmptyNode (  )  )  {^81^^^^^68^84^child != null; child = child.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P8_Replace_Mix]^child !=  null; value^81^^^^^68^84^child != null; child = child.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P14_Delete_Statement]^^80^81^82^83^^68^84^for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  )  )  { normalizeJsDocAnnotations ( child ) ; }^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P5_Replace_Variable]^child != null; value = child.getNext (  )  )  {^81^^^^^68^84^child != null; child = child.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P14_Delete_Statement]^^81^82^^^^68^84^child != null; child = child.getNext (  )  )  { normalizeJsDocAnnotations ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeJsDocAnnotations [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  key  n  value  
[P2_Replace_Operator]^if  ( n.getType (  )  > Token.EXPR_VOID )  {^90^^^^^89^111^if  ( n.getType (  )  == Token.EXPR_VOID )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P5_Replace_Variable]^if  ( child.getType (  )  == Token.EXPR_VOID )  {^90^^^^^89^111^if  ( n.getType (  )  == Token.EXPR_VOID )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^if  ( n.setWasEmptyNode (  )  == Token.EXPR_VOID )  {^90^^^^^89^111^if  ( n.getType (  )  == Token.EXPR_VOID )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P9_Replace_Statement]^if  ( c.getType (  )  != Token.EMPTY )  {^90^^^^^89^111^if  ( n.getType (  )  == Token.EXPR_VOID )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^90^^^^^89^111^if  ( n.getType (  )  == Token.EXPR_VOID )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.OBJECTLIT )  {^90^^^^^89^111^if  ( n.getType (  )  == Token.EXPR_VOID )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P15_Unwrap_Block]^n.setType(Token.EXPR_RESULT); reportChange();^90^91^92^93^^89^111^if  ( n.getType (  )  == Token.EXPR_VOID )  { n.setType ( Token.EXPR_RESULT ) ; reportChange (  ) ; }^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P16_Remove_Block]^^90^91^92^93^^89^111^if  ( n.getType (  )  == Token.EXPR_VOID )  { n.setType ( Token.EXPR_RESULT ) ; reportChange (  ) ; }^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( FUNCTION )  )  {     checkState (  (  ( n.getProp ( Node.FUNCTION_PROP )  )  == null )  ) ; }^90^^^^^89^111^[Delete]^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P13_Insert_Block]^if  (  ( c.getType (  )  )  !=  ( EMPTY )  )  {     newBlock.addChildrenToFront ( c ) ; }else {     newBlock.setWasEmptyNode ( true ) ; }^90^^^^^89^111^[Delete]^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^n.setWasEmptyNode ( Token.EXPR_RESULT ) ;^91^^^^^89^111^n.setType ( Token.EXPR_RESULT ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P14_Delete_Statement]^^91^92^^^^89^111^n.setType ( Token.EXPR_RESULT ) ; reportChange (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P12_Insert_Condition]^if  ( n.getType (  )  == Token.EXPR_VOID )  { n.setType ( Token.EXPR_RESULT ) ; }^91^^^^^89^111^n.setType ( Token.EXPR_RESULT ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P14_Delete_Statement]^^92^^^^^89^111^reportChange (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P8_Replace_Mix]^if  ( child.setWasEmptyNode (  )  == Token.EXPR_VOID )  {^90^^^^^89^111^if  ( n.getType (  )  == Token.EXPR_VOID )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P14_Delete_Statement]^^91^^^^^89^111^n.setType ( Token.EXPR_RESULT ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P2_Replace_Operator]^if  ( n.getType (  )  > Token.FUNCTION )  {^97^^^^^89^111^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.FUNCTION )  {^97^^^^^89^111^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P5_Replace_Variable]^if  ( child.getType (  )  == Token.FUNCTION )  {^97^^^^^89^111^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P6_Replace_Expression]^if  ( n.getProp ( Node.FUNCTION_PROP )  == null )  {^97^^^^^89^111^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^if  ( n.setWasEmptyNode (  )  == Token.FUNCTION )  {^97^^^^^89^111^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^if  ( n .setType (  )   == Token.FUNCTION )  {^97^^^^^89^111^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P9_Replace_Statement]^if  ( c.getType (  )  != Token.EMPTY )  {^97^^^^^89^111^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.OBJECTLIT )  {^97^^^^^89^111^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.EXPR_VOID )  {^97^^^^^89^111^if  ( n.getType (  )  == Token.FUNCTION )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P15_Unwrap_Block]^com.google.common.base.Preconditions.checkState(((n.getProp(Node.FUNCTION_PROP)) == null));^97^98^99^^^89^111^if  ( n.getType (  )  == Token.FUNCTION )  { Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ; }^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P16_Remove_Block]^^97^98^99^^^89^111^if  ( n.getType (  )  == Token.FUNCTION )  { Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ; }^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( EXPR_VOID )  )  {     n.setType ( Token.EXPR_RESULT ) ;     reportChange (  ) ; }^97^^^^^89^111^[Delete]^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P2_Replace_Operator]^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  != null ) ;^98^^^^^89^111^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^98^^^^^89^111^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^Preconditions.checkState ( n.setWasEmptyNode ( Node.FUNCTION_PROP )  == null ) ;^98^^^^^89^111^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P8_Replace_Mix]^Preconditions.checkState ( child.getProp ( Node.FUNCTION_PROP )  == null ) ;^98^^^^^89^111^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P14_Delete_Statement]^^98^^^^^89^111^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( FUNCTION )  )  {     checkState (  (  ( n.getProp ( Node.FUNCTION_PROP )  )  == null )  ) ; }^98^^^^^89^111^[Delete]^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P8_Replace_Mix]^Preconditions.checkState ( child.setWasEmptyNode ( Node.FUNCTION_PROP )  == null ) ;^98^^^^^89^111^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^Preconditions.checkState ( n .getParent (  )   == null ) ;^98^^^^^89^111^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^normalizeNodeTypes ( n ) ;^101^^^^^89^111^normalizeBlocks ( n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P8_Replace_Mix]^normalizeNodeTypes ( child ) ;^101^^^^^89^111^normalizeBlocks ( n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P14_Delete_Statement]^^101^^^^^89^111^normalizeBlocks ( n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P11_Insert_Donor_Statement]^normalizeJsDocAnnotations ( root ) ;normalizeBlocks ( n ) ;^101^^^^^89^111^normalizeBlocks ( n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P11_Insert_Donor_Statement]^normalizeNodeTypes ( root ) ;normalizeBlocks ( n ) ;^101^^^^^89^111^normalizeBlocks ( n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P11_Insert_Donor_Statement]^normalizeNodeTypes ( child ) ;normalizeBlocks ( n ) ;^101^^^^^89^111^normalizeBlocks ( n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P11_Insert_Donor_Statement]^normalizeJsDocAnnotations ( child ) ;normalizeBlocks ( n ) ;^101^^^^^89^111^normalizeBlocks ( n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P5_Replace_Variable]^for  ( Node n = n.getFirstChild (  ) ;^103^^^^^89^111^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P5_Replace_Variable]^for  ( Node n = child.getFirstChild (  ) ;^103^^^^^89^111^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^for  ( Node child = n.setWasEmptyNode (  ) ;^103^^^^^89^111^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P2_Replace_Operator]^Preconditions.checkState ( child.getParent (  )  <= n ) ;^107^^^^^89^111^Preconditions.checkState ( child.getParent (  )  == n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P5_Replace_Variable]^Preconditions.checkState ( n.getParent (  )  == child ) ;^107^^^^^89^111^Preconditions.checkState ( child.getParent (  )  == n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^Preconditions.checkState ( child.setWasEmptyNode (  )  == n ) ;^107^^^^^89^111^Preconditions.checkState ( child.getParent (  )  == n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P14_Delete_Statement]^^107^^^^^89^111^Preconditions.checkState ( child.getParent (  )  == n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;Preconditions.checkState ( child.getParent (  )  == n ) ;^107^^^^^89^111^Preconditions.checkState ( child.getParent (  )  == n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P5_Replace_Variable]^Preconditions.checkState ( n.getParent (  )  == n ) ;^107^^^^^89^111^Preconditions.checkState ( child.getParent (  )  == n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P5_Replace_Variable]^normalizeNodeTypes ( n ) ;^109^^^^^89^111^normalizeNodeTypes ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^normalizeBlocks ( child ) ;^109^^^^^89^111^normalizeNodeTypes ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P14_Delete_Statement]^^109^^^^^89^111^normalizeNodeTypes ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P11_Insert_Donor_Statement]^normalizeJsDocAnnotations ( root ) ;normalizeNodeTypes ( child ) ;^109^^^^^89^111^normalizeNodeTypes ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P11_Insert_Donor_Statement]^normalizeNodeTypes ( root ) ;normalizeNodeTypes ( child ) ;^109^^^^^89^111^normalizeNodeTypes ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P11_Insert_Donor_Statement]^normalizeJsDocAnnotations ( child ) ;normalizeNodeTypes ( child ) ;^109^^^^^89^111^normalizeNodeTypes ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P11_Insert_Donor_Statement]^normalizeBlocks ( n ) ;normalizeNodeTypes ( child ) ;^109^^^^^89^111^normalizeNodeTypes ( child ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P5_Replace_Variable]^child != null; n = child.getNext (  )  )  {^104^^^^^89^111^child != null; child = child.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^child != null; child = child.setWasEmptyNode (  )  )  {^104^^^^^89^111^child != null; child = child.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P8_Replace_Mix]^child !=  null; n^104^^^^^89^111^child != null; child = child.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^for  ( Node child = n .replaceChild ( n , n )  ;^103^^^^^89^111^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P5_Replace_Variable]^for  ( Node child = child.getFirstChild (  ) ;^103^^^^^89^111^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^for  ( Node child = n .replaceChild ( child , n )  ;^103^^^^^89^111^for  ( Node child = n.getFirstChild (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P8_Replace_Mix]^child != null; n = child.setWasEmptyNode (  )  )  {^104^^^^^89^111^child != null; child = child.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P2_Replace_Operator]^Preconditions.checkState ( child.getParent (  )  >= n ) ;^107^^^^^89^111^Preconditions.checkState ( child.getParent (  )  == n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P7_Replace_Invocation]^Preconditions.checkState ( child .getNext (  )   == n ) ;^107^^^^^89^111^Preconditions.checkState ( child.getParent (  )  == n ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeNodeTypes [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  child  n  
[P2_Replace_Operator]^if  ( NodeUtil.isControlStructure ( n ) || n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P2_Replace_Operator]^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  == Token.LABEL && n.getType (  )  != Token.SWITCH )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P2_Replace_Operator]^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  >= Token.LABEL && n.getType (  )  != Token.SWITCH )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P6_Replace_Expression]^if  ( NodeUtil.isControlStructure ( n ) ) {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P6_Replace_Expression]^if  (  n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P6_Replace_Expression]^if  ( isControlStructure(n && n.getType() != LABEL) )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P6_Replace_Expression]^if  ( n.getType (  )  != LABEL )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P6_Replace_Expression]^if  ( n.getType (  )  != SWITCH )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P6_Replace_Expression]^if  ( c != null )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P6_Replace_Expression]^if  ( isControlStructureCodeBlock(n, c) && c.getType() != BLOCK )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P6_Replace_Expression]^if  ( c.getType (  )  != BLOCK )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P6_Replace_Expression]^if  ( c.getType() != EMPTY )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^if  ( NodeUtil.isControlStructure ( n ) && n.setWasEmptyNode (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^if  ( NodeUtil.isControlStructure ( n ) && n .setType (  )   != Token.LABEL && n^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P13_Insert_Block]^if  (  ( isControlStructureCodeBlock ( n, c )  )  &&  (  ( c.getType (  )  )  !=  ( BLOCK )  )  )  {     Node newBlock = new Node ( BLOCK ) ;     n.replaceChild ( c, newBlock ) ;     if  (  ( c.getType (  )  )  !=  ( EMPTY )  )  {         newBlock.addChildrenToFront ( c ) ;     }else {         newBlock.setWasEmptyNode ( true ) ;     }     c = newBlock;     reportChange (  ) ; }^117^^^^^116^135^[Delete]^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P2_Replace_Operator]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  || c.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P2_Replace_Operator]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  == Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P2_Replace_Operator]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  < Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P4_Replace_Constructor]^if  ( NodeUtil.isControlStructureCodeBlock ( c )  && c.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^if  ( NodeUtil.isControlStructureCodeBlock ( c,c )  && n.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P6_Replace_Expression]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  ) {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P6_Replace_Expression]^if  (  c.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P6_Replace_Expression]^if  ( c.getType (  )  != BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P6_Replace_Expression]^if  ( c.getType() != EMPTY )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.setWasEmptyNode (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^if  ( NodeUtil.isControlStructureCodeBlock ( c,c )  ) {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P2_Replace_Operator]^if  ( c.getType (  )  == Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^if  ( c.setWasEmptyNode (  )  != Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^if  ( n.getType (  )  != Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.FUNCTION )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.OBJECTLIT )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.EXPR_VOID )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P15_Unwrap_Block]^newBlock.addChildrenToFront(c);^125^126^127^128^129^116^135^if  ( c.getType (  )  != Token.EMPTY )  { newBlock.addChildrenToFront ( c ) ; } else { newBlock.setWasEmptyNode ( true ) ; }^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P16_Remove_Block]^^125^126^127^128^129^116^135^if  ( c.getType (  )  != Token.EMPTY )  { newBlock.addChildrenToFront ( c ) ; } else { newBlock.setWasEmptyNode ( true ) ; }^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( EXPR_VOID )  )  {     n.setType ( Token.EXPR_RESULT ) ;     reportChange (  ) ; }^125^^^^^116^135^[Delete]^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P3_Replace_Literal]^newBlock.setWasEmptyNode ( false ) ;^128^^^^^116^135^newBlock.setWasEmptyNode ( true ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^newBlock.replaceChild ( true ) ;^128^^^^^116^135^newBlock.setWasEmptyNode ( true ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^newBlock .setType (  )  ;^128^^^^^116^135^newBlock.setWasEmptyNode ( true ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P14_Delete_Statement]^^128^^^^^116^135^newBlock.setWasEmptyNode ( true ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^newBlock.replaceChild ( c ) ;^126^^^^^116^135^newBlock.addChildrenToFront ( c ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^newBlock.replaceChild ( n ) ;^126^^^^^116^135^newBlock.addChildrenToFront ( c ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P14_Delete_Statement]^^126^^^^^116^135^newBlock.addChildrenToFront ( c ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^c = n;^130^^^^^116^135^c = newBlock;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^Node newBlock = new Node ( Token.null ) ;^123^^^^^116^135^Node newBlock = new Node ( Token.BLOCK ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^n.replaceChild ( c, cewBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^n.replaceChild ( newBlock, newBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^n.replaceChild ( c, n ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^n.replaceChild ( cewBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^n.replaceChild (  newBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^n.replaceChild ( c ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^n.replaceChild ( n, cewBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^n.replaceChild ( newBlock, c ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^n .getFirstChild (  )  ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P14_Delete_Statement]^^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^if  ( newBlock.getType (  )  != Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^newBlock.addChildrenToFront ( n ) ;^126^^^^^116^135^newBlock.addChildrenToFront ( c ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^newBlock .getParent (  )  ;^126^^^^^116^135^newBlock.addChildrenToFront ( c ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P14_Delete_Statement]^^131^^^^^116^135^reportChange (  ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P2_Replace_Operator]^if  ( c.getType (  )  <= Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P2_Replace_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^for  ( Node c = newBlock.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^for  ( Node newBlock = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^for  ( Node c = n.setWasEmptyNode (  ) ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.setWasEmptyNode (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^for  ( Node newBlock = n.setWasEmptyNode (  ) ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^if  ( NodeUtil.isControlStructureCodeBlock ( c,c )  && c.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && n.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^if  ( NodeUtil .isControlStructure ( c )   && c.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c .setType (  )   != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P2_Replace_Operator]^if  ( c.getType (  )  > Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^n.replaceChild ( c, newBlockewBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^n.replaceChild ( n, newBlock ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^if  ( c .setType (  )   != Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P2_Replace_Operator]^if  ( c.getType (  )  >= Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^if  ( c.getType (  )  != Token.1 )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^if  ( NodeUtil.isControlStructureCodeBlock ( newBlock,c )  && c.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && newBlock.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^if  ( NodeUtil .isControlStructure ( n )   && c.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^c.setWasEmptyNode (  )  != Token.BLOCK )  {^122^^^^^116^135^c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^c .setType (  )   != Token.BLOCK )  {^122^^^^^116^135^c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P14_Delete_Statement]^^122^123^^^^116^135^c.getType (  )  != Token.BLOCK )  { Node newBlock = new Node ( Token.BLOCK ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^n.replaceChild ( c, c ) ;^124^^^^^116^135^n.replaceChild ( c, newBlock ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^for  ( Node c =  n.getFirstChild (  ) ; newBlock !^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^for  ( Node c = newBlock.setWasEmptyNode (  ) ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^for  ( Node newBlock = n.getFirstChild (  ) ; c != null; c = c.setWasEmptyNode (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P2_Replace_Operator]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  >= Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.2 )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^if  ( newBlock .setType (  )   != Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^c =  null;^130^^^^^116^135^c = newBlock;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^for  ( Node c = n .replaceChild ( newBlock , c )  ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P2_Replace_Operator]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  > Token.BLOCK )  {^121^122^^^^116^135^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^if  ( c.getType (  )  != Token.this )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^Node newBlock = new Node ( Token.this ) ;^123^^^^^116^135^Node newBlock = new Node ( Token.BLOCK ) ;^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^if  ( newBlock.setWasEmptyNode (  )  != Token.EMPTY )  {^125^^^^^116^135^if  ( c.getType (  )  != Token.EMPTY )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^if  ( NodeUtil.isControlStructure ( newBlock ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^117^118^119^^^116^135^if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^&& newBlock.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^118^119^^^^116^135^&& n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^&& n.setWasEmptyNode (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^118^119^^^^116^135^&& n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P8_Replace_Mix]^&& newBlock.setWasEmptyNode (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^118^119^^^^116^135^&& n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P5_Replace_Variable]^&& newBlock.getType (  )  != Token.SWITCH )  {^119^^^^^116^135^&& n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^&& n.setWasEmptyNode (  )  != Token.SWITCH )  {^119^^^^^116^135^&& n.getType (  )  != Token.SWITCH )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^for  ( Node c = n .replaceChild ( n , newBlock )  ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
[P7_Replace_Invocation]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c .getParent (  )   )  {^120^^^^^116^135^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] NodeTypeNormalizer  [METHOD] normalizeBlocks [RETURN_TYPE] void   Node n [VARIABLES] boolean  assertOnChange  forbidChanges  Node  c  n  newBlock  
