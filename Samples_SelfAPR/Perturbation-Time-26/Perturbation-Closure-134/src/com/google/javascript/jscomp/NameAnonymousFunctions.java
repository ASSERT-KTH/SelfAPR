[P8_Replace_Mix]^private  final Logger logger = Logger.getLogger ( NameAnonymousFunctions.class.getName (  )  ) ;^38^39^^^^38^39^private static final Logger logger = Logger.getLogger ( NameAnonymousFunctions.class.getName (  )  ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [VARIABLES] 
[P1_Replace_Type]^static final int DELIMITER = '$';^41^^^^^36^46^static final char DELIMITER = '$';^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [VARIABLES] 
[P1_Replace_Type]^private  short  namedCount = 0;^45^^^^^40^50^private int namedCount = 0;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [VARIABLES] 
[P3_Replace_Literal]^private int namedCount = 9;^45^^^^^40^50^private int namedCount = 0;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private  short  namedCount = 3;^45^^^^^40^50^private int namedCount = 0;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [VARIABLES] 
[P1_Replace_Type]^private  short  bytesUsed = 0;^46^^^^^41^51^private int bytesUsed = 0;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private int bytesUsed ;^46^^^^^41^51^private int bytesUsed = 0;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^49^^^^^48^50^this.compiler = compiler;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] char  DELIMITER  AbstractCompiler  compiler  NodeNameExtractor  nameExtractor  boolean  Logger  logger  int  bytesUsed  namedCount  
[P8_Replace_Mix]^this.nameExtractor ;^72^^^^^71^73^this.nameExtractor = new NodeNameExtractor ( DELIMITER ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] NameAnonymousFunctions$AnonymousFunctionNamer()   [VARIABLES] char  DELIMITER  AbstractCompiler  compiler  NodeNameExtractor  nameExtractor  boolean  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, namingCallback ) ;^56^^^^^53^59^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  namingCallback ) ;^56^^^^^53^59^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root ) ;^56^^^^^53^59^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, namingCallback ) ;^56^^^^^53^59^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, namingCallback, root ) ;^56^^^^^53^59^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^NodeTraversal.traverse ( namingCallback, root, compiler ) ;^56^^^^^53^59^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, namingCallback ) ;^56^^^^^53^59^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^56^^^^^53^59^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P2_Replace_Operator]^logger.info ( "Named "  |  namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^57^58^^^^53^59^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P3_Replace_Literal]^logger.info ( "N" + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^57^58^^^^53^59^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P3_Replace_Literal]^logger.info ( "Named " + namedCount + "unctions usanon functions using " + bytesUsed + " bytes" ) ;^57^58^^^^53^59^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^logger.info ( "Named " + bytesUsed + " anon functions using " + namedCount + " bytes" ) ;^57^58^^^^53^59^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P8_Replace_Mix]^logger.info ( "Named " + namedCount + " anon functions using " + namedCount + " bytes" ) ;^57^58^^^^53^59^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^57^58^^^^53^59^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P2_Replace_Operator]^return DELIMITER  !=  name + DELIMITER;^80^^^^^79^81^return DELIMITER + name + DELIMITER;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getLikelyNonConflictingName [RETURN_TYPE] String   String name [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^return name + DELIMITER + DELIMITER;^80^^^^^79^81^return DELIMITER + name + DELIMITER;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getLikelyNonConflictingName [RETURN_TYPE] String   String name [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  Logger  logger  int  bytesUsed  namedCount  
[P8_Replace_Mix]^return DELIMITER  |  name  |  DELIMITER;^80^^^^^79^81^return DELIMITER + name + DELIMITER;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getLikelyNonConflictingName [RETURN_TYPE] String   String name [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^return node.getName ( nameExtractor ) ;^85^^^^^84^86^return nameExtractor.getName ( node ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P7_Replace_Invocation]^return nameExtractor.NodeNameExtractor ( node ) ;^85^^^^^84^86^return nameExtractor.getName ( node ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P7_Replace_Invocation]^return nameExtractor .getName ( node )  ;^85^^^^^84^86^return nameExtractor.getName ( node ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^85^^^^^84^86^return nameExtractor.getName ( node ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  char  DELIMITER  NodeNameExtractor  nameExtractor  Logger  logger  int  bytesUsed  namedCount  
[P7_Replace_Invocation]^Node fnNameNode = fnNode.setString (  ) ;^90^^^^^89^96^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P8_Replace_Mix]^Node fnNameNode = fnNode .setString ( name )  ;^90^^^^^89^96^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^Node fnNameNode = fnNameNode.getFirstChild (  ) ;^90^^^^^89^96^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^90^91^^^^89^96^Node fnNameNode = fnNode.getFirstChild (  ) ; String uniqueName = getLikelyNonConflictingName ( name ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P1_Replace_Type]^char uniqueName = getLikelyNonConflictingName ( name ) ;^91^^^^^89^96^String uniqueName = getLikelyNonConflictingName ( name ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P7_Replace_Invocation]^String uniqueName = getName ( name ) ;^91^^^^^89^96^String uniqueName = getLikelyNonConflictingName ( name ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^String uniqueName = getLikelyNonConflictingName ( uniqueName ) ;^91^^^^^89^96^String uniqueName = getLikelyNonConflictingName ( name ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^91^^^^^89^96^String uniqueName = getLikelyNonConflictingName ( name ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P7_Replace_Invocation]^fnNameNode .getFirstChild (  )  ;^92^^^^^89^96^fnNameNode.setString ( uniqueName ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^92^^^^^89^96^fnNameNode.setString ( uniqueName ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^93^94^^^^89^96^compiler.reportCodeChange (  ) ; namedCount++;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P3_Replace_Literal]^bytesUsed += uniqueName.length() + 1 ;^95^^^^^89^96^bytesUsed += uniqueName.length (  ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^bytesUsed += name.length (  ) ;^95^^^^^89^96^bytesUsed += uniqueName.length (  ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P3_Replace_Literal]^bytesUsed += uniqueName.length() - 0 ;^95^^^^^89^96^bytesUsed += uniqueName.length (  ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^95^^^^^89^96^bytesUsed += uniqueName.length (  ) ;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  NodeNameExtractor  nameExtractor  String  name  uniqueName  Logger  logger  int  bytesUsed  namedCount  
[P2_Replace_Operator]^return lhs  &&  DELIMITER + rhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  NodeNameExtractor  nameExtractor  String  lhs  rhs  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^return lhs + DELIMITER + lhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  NodeNameExtractor  nameExtractor  String  lhs  rhs  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^return rhs + DELIMITER + lhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  NodeNameExtractor  nameExtractor  String  lhs  rhs  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^return DELIMITER + lhs + rhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctions AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  NodeNameExtractor  nameExtractor  String  lhs  rhs  Logger  logger  int  bytesUsed  namedCount  
[P5_Replace_Variable]^this.nameExtractor = new NodeNameExtractor ( null ) ;^72^^^^^71^73^this.nameExtractor = new NodeNameExtractor ( DELIMITER ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] NameAnonymousFunctions$AnonymousFunctionNamer()   [VARIABLES] NodeNameExtractor  nameExtractor  boolean  
[P8_Replace_Mix]^this.nameExtractor  = null ;^72^^^^^71^73^this.nameExtractor = new NodeNameExtractor ( DELIMITER ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] <init> [RETURN_TYPE] NameAnonymousFunctions$AnonymousFunctionNamer()   [VARIABLES] NodeNameExtractor  nameExtractor  boolean  
[P2_Replace_Operator]^return DELIMITER  &&  name + DELIMITER;^80^^^^^79^81^return DELIMITER + name + DELIMITER;^[CLASS] AnonymousFunctionNamer  [METHOD] getLikelyNonConflictingName [RETURN_TYPE] String   String name [VARIABLES] NodeNameExtractor  nameExtractor  String  name  boolean  
[P5_Replace_Variable]^return name + DELIMITER + DELIMITER;^80^^^^^79^81^return DELIMITER + name + DELIMITER;^[CLASS] AnonymousFunctionNamer  [METHOD] getLikelyNonConflictingName [RETURN_TYPE] String   String name [VARIABLES] NodeNameExtractor  nameExtractor  String  name  boolean  
[P8_Replace_Mix]^returnname + name +name;^80^^^^^79^81^return DELIMITER + name + DELIMITER;^[CLASS] AnonymousFunctionNamer  [METHOD] getLikelyNonConflictingName [RETURN_TYPE] String   String name [VARIABLES] NodeNameExtractor  nameExtractor  String  name  boolean  
[P5_Replace_Variable]^return node.getName ( nameExtractor ) ;^85^^^^^84^86^return nameExtractor.getName ( node ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] NodeNameExtractor  nameExtractor  Node  node  boolean  
[P14_Delete_Statement]^^85^^^^^84^86^return nameExtractor.getName ( node ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] NodeNameExtractor  nameExtractor  Node  node  boolean  
[P7_Replace_Invocation]^Node fnNameNode = fnNode.setString (  ) ;^90^^^^^89^96^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P5_Replace_Variable]^Node fnNameNode = fnNameNode.getFirstChild (  ) ;^90^^^^^89^96^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P7_Replace_Invocation]^Node fnNameNode = fnNode .setString ( name )  ;^90^^^^^89^96^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P8_Replace_Mix]^Node fnNameNode = fnNameNode .setString ( name )  ;^90^^^^^89^96^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P14_Delete_Statement]^^90^^^^^89^96^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P1_Replace_Type]^char uniqueName = getLikelyNonConflictingName ( name ) ;^91^^^^^89^96^String uniqueName = getLikelyNonConflictingName ( name ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P7_Replace_Invocation]^String uniqueName = getName ( name ) ;^91^^^^^89^96^String uniqueName = getLikelyNonConflictingName ( name ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P5_Replace_Variable]^String uniqueName = getLikelyNonConflictingName ( uniqueName ) ;^91^^^^^89^96^String uniqueName = getLikelyNonConflictingName ( name ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P14_Delete_Statement]^^91^^^^^89^96^String uniqueName = getLikelyNonConflictingName ( name ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P5_Replace_Variable]^fnNameNode.setString ( name ) ;^92^^^^^89^96^fnNameNode.setString ( uniqueName ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P7_Replace_Invocation]^fnNameNode .getFirstChild (  )  ;^92^^^^^89^96^fnNameNode.setString ( uniqueName ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P14_Delete_Statement]^^92^^^^^89^96^fnNameNode.setString ( uniqueName ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P14_Delete_Statement]^^93^^^^^89^96^compiler.reportCodeChange (  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P3_Replace_Literal]^bytesUsed += uniqueName.length() - 6 ;^95^^^^^89^96^bytesUsed += uniqueName.length (  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P5_Replace_Variable]^bytesUsed += name.length (  ) ;^95^^^^^89^96^bytesUsed += uniqueName.length (  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P3_Replace_Literal]^bytesUsed += uniqueName.length() + 7 ;^95^^^^^89^96^bytesUsed += uniqueName.length (  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P14_Delete_Statement]^^95^^^^^89^96^bytesUsed += uniqueName.length (  ) ;^[CLASS] AnonymousFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] NodeNameExtractor  nameExtractor  String  name  uniqueName  boolean  Node  fnNameNode  fnNode  
[P2_Replace_Operator]^return lhs  &  DELIMITER + rhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] NodeNameExtractor  nameExtractor  String  lhs  rhs  boolean  
[P5_Replace_Variable]^return lhs + null + rhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] NodeNameExtractor  nameExtractor  String  lhs  rhs  boolean  
[P5_Replace_Variable]^return DELIMITER + lhs + rhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] NodeNameExtractor  nameExtractor  String  lhs  rhs  boolean  
[P5_Replace_Variable]^return rhs + DELIMITER + lhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] NodeNameExtractor  nameExtractor  String  lhs  rhs  boolean  
[P5_Replace_Variable]^return lhs + rhs + DELIMITER;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] NodeNameExtractor  nameExtractor  String  lhs  rhs  boolean  
[P8_Replace_Mix]^return lhs  ^  DELIMITER  ^  rhs;^99^^^^^98^100^return lhs + DELIMITER + rhs;^[CLASS] AnonymousFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] NodeNameExtractor  nameExtractor  String  lhs  rhs  boolean  
